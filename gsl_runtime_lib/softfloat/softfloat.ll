; ModuleID = 'softfloat.bc'
source_filename = "../softfloat.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.floatx80 = type { i16, i64 }
%struct.float128 = type { i64, i64 }
%struct.commonNaNT = type { i32, i64, i64 }

@float_rounding_mode = global i32 0, align 4, !dbg !0
@float_exception_flags = global i32 0, align 4, !dbg !36
@floatx80_rounding_precision = global i32 80, align 4, !dbg !39
@float_detect_tininess = global i32 1, align 4, !dbg !41
@.str = private unnamed_addr constant [18 x i8] c"float32_mul nan!\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"float32_mul inf!\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"float32_mul positive!\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"float32_mul negative!\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"float32_mul zero!\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"float32_lt true\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"float32_lt false\0A\00", align 1
@countLeadingZeros32.countLeadingZerosHigh = internal constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 16, !dbg !44
@estimateSqrt32.sqrtOddAdjustments = internal constant [16 x i16] [i16 4, i16 34, i16 93, i16 177, i16 285, i16 415, i16 566, i16 736, i16 924, i16 1128, i16 1349, i16 1585, i16 1835, i16 2098, i16 2374, i16 2663], align 16, !dbg !55
@estimateSqrt32.sqrtEvenAdjustments = internal constant [16 x i16] [i16 2605, i16 2223, i16 1882, i16 1577, i16 1306, i16 1065, i16 854, i16 670, i16 512, i16 377, i16 265, i16 175, i16 104, i16 52, i16 18, i16 2], align 16, !dbg !65

; Function Attrs: noinline nounwind optnone uwtable
define void @shift32RightJamming(i32 %a, i32 %count, i32* %zPtr) #0 !dbg !71 {
entry:
  %a.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %zPtr.addr = alloca i32*, align 8
  %z = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !75, metadata !DIExpression()), !dbg !76
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store i32* %zPtr, i32** %zPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %zPtr.addr, metadata !79, metadata !DIExpression()), !dbg !80
  call void @llvm.dbg.declare(metadata i32* %z, metadata !81, metadata !DIExpression()), !dbg !82
  %0 = load i32, i32* %count.addr, align 4, !dbg !83
  %cmp = icmp eq i32 %0, 0, !dbg !85
  br i1 %cmp, label %if.then, label %if.else, !dbg !86

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !87
  store i32 %1, i32* %z, align 4, !dbg !89
  br label %if.end7, !dbg !90

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %count.addr, align 4, !dbg !91
  %cmp1 = icmp slt i32 %2, 32, !dbg !93
  br i1 %cmp1, label %if.then2, label %if.else4, !dbg !94

if.then2:                                         ; preds = %if.else
  %3 = load i32, i32* %a.addr, align 4, !dbg !95
  %4 = load i32, i32* %count.addr, align 4, !dbg !97
  %shr = lshr i32 %3, %4, !dbg !98
  %5 = load i32, i32* %a.addr, align 4, !dbg !99
  %6 = load i32, i32* %count.addr, align 4, !dbg !100
  %sub = sub nsw i32 0, %6, !dbg !101
  %and = and i32 %sub, 31, !dbg !102
  %shl = shl i32 %5, %and, !dbg !103
  %cmp3 = icmp ne i32 %shl, 0, !dbg !104
  %conv = zext i1 %cmp3 to i32, !dbg !104
  %or = or i32 %shr, %conv, !dbg !105
  store i32 %or, i32* %z, align 4, !dbg !106
  br label %if.end, !dbg !107

if.else4:                                         ; preds = %if.else
  %7 = load i32, i32* %a.addr, align 4, !dbg !108
  %cmp5 = icmp ne i32 %7, 0, !dbg !110
  %conv6 = zext i1 %cmp5 to i32, !dbg !110
  store i32 %conv6, i32* %z, align 4, !dbg !111
  br label %if.end

if.end:                                           ; preds = %if.else4, %if.then2
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %8 = load i32, i32* %z, align 4, !dbg !112
  %9 = load i32*, i32** %zPtr.addr, align 8, !dbg !113
  store i32 %8, i32* %9, align 4, !dbg !114
  ret void, !dbg !115
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @shift64RightJamming(i64 %a, i32 %count, i64* %zPtr) #0 !dbg !116 {
entry:
  %a.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %zPtr.addr = alloca i64*, align 8
  %z = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !120, metadata !DIExpression()), !dbg !121
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !122, metadata !DIExpression()), !dbg !123
  store i64* %zPtr, i64** %zPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %zPtr.addr, metadata !124, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.declare(metadata i64* %z, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, i32* %count.addr, align 4, !dbg !128
  %cmp = icmp eq i32 %0, 0, !dbg !130
  br i1 %cmp, label %if.then, label %if.else, !dbg !131

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !132
  store i64 %1, i64* %z, align 8, !dbg !134
  br label %if.end10, !dbg !135

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %count.addr, align 4, !dbg !136
  %cmp1 = icmp slt i32 %2, 64, !dbg !138
  br i1 %cmp1, label %if.then2, label %if.else6, !dbg !139

if.then2:                                         ; preds = %if.else
  %3 = load i64, i64* %a.addr, align 8, !dbg !140
  %4 = load i32, i32* %count.addr, align 4, !dbg !142
  %sh_prom = zext i32 %4 to i64, !dbg !143
  %shr = lshr i64 %3, %sh_prom, !dbg !143
  %5 = load i64, i64* %a.addr, align 8, !dbg !144
  %6 = load i32, i32* %count.addr, align 4, !dbg !145
  %sub = sub nsw i32 0, %6, !dbg !146
  %and = and i32 %sub, 63, !dbg !147
  %sh_prom3 = zext i32 %and to i64, !dbg !148
  %shl = shl i64 %5, %sh_prom3, !dbg !148
  %cmp4 = icmp ne i64 %shl, 0, !dbg !149
  %conv = zext i1 %cmp4 to i32, !dbg !149
  %conv5 = sext i32 %conv to i64, !dbg !150
  %or = or i64 %shr, %conv5, !dbg !151
  store i64 %or, i64* %z, align 8, !dbg !152
  br label %if.end, !dbg !153

if.else6:                                         ; preds = %if.else
  %7 = load i64, i64* %a.addr, align 8, !dbg !154
  %cmp7 = icmp ne i64 %7, 0, !dbg !156
  %conv8 = zext i1 %cmp7 to i32, !dbg !156
  %conv9 = sext i32 %conv8 to i64, !dbg !157
  store i64 %conv9, i64* %z, align 8, !dbg !158
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then2
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %8 = load i64, i64* %z, align 8, !dbg !159
  %9 = load i64*, i64** %zPtr.addr, align 8, !dbg !160
  store i64 %8, i64* %9, align 8, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define void @shift64ExtraRightJamming(i64 %a0, i64 %a1, i32 %count, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !163 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %negCount = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !166, metadata !DIExpression()), !dbg !167
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !168, metadata !DIExpression()), !dbg !169
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !174, metadata !DIExpression()), !dbg !175
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !176, metadata !DIExpression()), !dbg !177
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !178, metadata !DIExpression()), !dbg !179
  call void @llvm.dbg.declare(metadata i32* %negCount, metadata !180, metadata !DIExpression()), !dbg !181
  %0 = load i32, i32* %count.addr, align 4, !dbg !182
  %sub = sub nsw i32 0, %0, !dbg !183
  %and = and i32 %sub, 63, !dbg !184
  store i32 %and, i32* %negCount, align 4, !dbg !181
  %1 = load i32, i32* %count.addr, align 4, !dbg !185
  %cmp = icmp eq i32 %1, 0, !dbg !187
  br i1 %cmp, label %if.then, label %if.else, !dbg !188

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %a1.addr, align 8, !dbg !189
  store i64 %2, i64* %z1, align 8, !dbg !191
  %3 = load i64, i64* %a0.addr, align 8, !dbg !192
  store i64 %3, i64* %z0, align 8, !dbg !193
  br label %if.end20, !dbg !194

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %count.addr, align 4, !dbg !195
  %cmp1 = icmp slt i32 %4, 64, !dbg !197
  br i1 %cmp1, label %if.then2, label %if.else6, !dbg !198

if.then2:                                         ; preds = %if.else
  %5 = load i64, i64* %a0.addr, align 8, !dbg !199
  %6 = load i32, i32* %negCount, align 4, !dbg !201
  %sh_prom = zext i32 %6 to i64, !dbg !202
  %shl = shl i64 %5, %sh_prom, !dbg !202
  %7 = load i64, i64* %a1.addr, align 8, !dbg !203
  %cmp3 = icmp ne i64 %7, 0, !dbg !204
  %conv = zext i1 %cmp3 to i32, !dbg !204
  %conv4 = sext i32 %conv to i64, !dbg !205
  %or = or i64 %shl, %conv4, !dbg !206
  store i64 %or, i64* %z1, align 8, !dbg !207
  %8 = load i64, i64* %a0.addr, align 8, !dbg !208
  %9 = load i32, i32* %count.addr, align 4, !dbg !209
  %sh_prom5 = zext i32 %9 to i64, !dbg !210
  %shr = lshr i64 %8, %sh_prom5, !dbg !210
  store i64 %shr, i64* %z0, align 8, !dbg !211
  br label %if.end19, !dbg !212

if.else6:                                         ; preds = %if.else
  %10 = load i32, i32* %count.addr, align 4, !dbg !213
  %cmp7 = icmp eq i32 %10, 64, !dbg !216
  br i1 %cmp7, label %if.then9, label %if.else14, !dbg !217

if.then9:                                         ; preds = %if.else6
  %11 = load i64, i64* %a0.addr, align 8, !dbg !218
  %12 = load i64, i64* %a1.addr, align 8, !dbg !220
  %cmp10 = icmp ne i64 %12, 0, !dbg !221
  %conv11 = zext i1 %cmp10 to i32, !dbg !221
  %conv12 = sext i32 %conv11 to i64, !dbg !222
  %or13 = or i64 %11, %conv12, !dbg !223
  store i64 %or13, i64* %z1, align 8, !dbg !224
  br label %if.end, !dbg !225

if.else14:                                        ; preds = %if.else6
  %13 = load i64, i64* %a0.addr, align 8, !dbg !226
  %14 = load i64, i64* %a1.addr, align 8, !dbg !228
  %or15 = or i64 %13, %14, !dbg !229
  %cmp16 = icmp ne i64 %or15, 0, !dbg !230
  %conv17 = zext i1 %cmp16 to i32, !dbg !230
  %conv18 = sext i32 %conv17 to i64, !dbg !231
  store i64 %conv18, i64* %z1, align 8, !dbg !232
  br label %if.end

if.end:                                           ; preds = %if.else14, %if.then9
  store i64 0, i64* %z0, align 8, !dbg !233
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then2
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then
  %15 = load i64, i64* %z1, align 8, !dbg !234
  %16 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !235
  store i64 %15, i64* %16, align 8, !dbg !236
  %17 = load i64, i64* %z0, align 8, !dbg !237
  %18 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !238
  store i64 %17, i64* %18, align 8, !dbg !239
  ret void, !dbg !240
}

; Function Attrs: noinline nounwind optnone uwtable
define void @shift128Right(i64 %a0, i64 %a1, i32 %count, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !241 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %negCount = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !242, metadata !DIExpression()), !dbg !243
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !244, metadata !DIExpression()), !dbg !245
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !246, metadata !DIExpression()), !dbg !247
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !248, metadata !DIExpression()), !dbg !249
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !250, metadata !DIExpression()), !dbg !251
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !252, metadata !DIExpression()), !dbg !253
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !254, metadata !DIExpression()), !dbg !255
  call void @llvm.dbg.declare(metadata i32* %negCount, metadata !256, metadata !DIExpression()), !dbg !257
  %0 = load i32, i32* %count.addr, align 4, !dbg !258
  %sub = sub nsw i32 0, %0, !dbg !259
  %and = and i32 %sub, 63, !dbg !260
  store i32 %and, i32* %negCount, align 4, !dbg !257
  %1 = load i32, i32* %count.addr, align 4, !dbg !261
  %cmp = icmp eq i32 %1, 0, !dbg !263
  br i1 %cmp, label %if.then, label %if.else, !dbg !264

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %a1.addr, align 8, !dbg !265
  store i64 %2, i64* %z1, align 8, !dbg !267
  %3 = load i64, i64* %a0.addr, align 8, !dbg !268
  store i64 %3, i64* %z0, align 8, !dbg !269
  br label %if.end11, !dbg !270

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %count.addr, align 4, !dbg !271
  %cmp1 = icmp slt i32 %4, 64, !dbg !273
  br i1 %cmp1, label %if.then2, label %if.else6, !dbg !274

if.then2:                                         ; preds = %if.else
  %5 = load i64, i64* %a0.addr, align 8, !dbg !275
  %6 = load i32, i32* %negCount, align 4, !dbg !277
  %sh_prom = zext i32 %6 to i64, !dbg !278
  %shl = shl i64 %5, %sh_prom, !dbg !278
  %7 = load i64, i64* %a1.addr, align 8, !dbg !279
  %8 = load i32, i32* %count.addr, align 4, !dbg !280
  %sh_prom3 = zext i32 %8 to i64, !dbg !281
  %shr = lshr i64 %7, %sh_prom3, !dbg !281
  %or = or i64 %shl, %shr, !dbg !282
  store i64 %or, i64* %z1, align 8, !dbg !283
  %9 = load i64, i64* %a0.addr, align 8, !dbg !284
  %10 = load i32, i32* %count.addr, align 4, !dbg !285
  %sh_prom4 = zext i32 %10 to i64, !dbg !286
  %shr5 = lshr i64 %9, %sh_prom4, !dbg !286
  store i64 %shr5, i64* %z0, align 8, !dbg !287
  br label %if.end, !dbg !288

if.else6:                                         ; preds = %if.else
  %11 = load i32, i32* %count.addr, align 4, !dbg !289
  %cmp7 = icmp slt i32 %11, 64, !dbg !291
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !292

cond.true:                                        ; preds = %if.else6
  %12 = load i64, i64* %a0.addr, align 8, !dbg !293
  %13 = load i32, i32* %count.addr, align 4, !dbg !294
  %and8 = and i32 %13, 63, !dbg !295
  %sh_prom9 = zext i32 %and8 to i64, !dbg !296
  %shr10 = lshr i64 %12, %sh_prom9, !dbg !296
  br label %cond.end, !dbg !292

cond.false:                                       ; preds = %if.else6
  br label %cond.end, !dbg !292

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr10, %cond.true ], [ 0, %cond.false ], !dbg !292
  store i64 %cond, i64* %z1, align 8, !dbg !297
  store i64 0, i64* %z0, align 8, !dbg !298
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then2
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then
  %14 = load i64, i64* %z1, align 8, !dbg !299
  %15 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !300
  store i64 %14, i64* %15, align 8, !dbg !301
  %16 = load i64, i64* %z0, align 8, !dbg !302
  %17 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !303
  store i64 %16, i64* %17, align 8, !dbg !304
  ret void, !dbg !305
}

; Function Attrs: noinline nounwind optnone uwtable
define void @shift128RightJamming(i64 %a0, i64 %a1, i32 %count, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !306 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %negCount = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !307, metadata !DIExpression()), !dbg !308
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !309, metadata !DIExpression()), !dbg !310
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !311, metadata !DIExpression()), !dbg !312
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !313, metadata !DIExpression()), !dbg !314
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !315, metadata !DIExpression()), !dbg !316
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !317, metadata !DIExpression()), !dbg !318
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !319, metadata !DIExpression()), !dbg !320
  call void @llvm.dbg.declare(metadata i32* %negCount, metadata !321, metadata !DIExpression()), !dbg !322
  %0 = load i32, i32* %count.addr, align 4, !dbg !323
  %sub = sub nsw i32 0, %0, !dbg !324
  %and = and i32 %sub, 63, !dbg !325
  store i32 %and, i32* %negCount, align 4, !dbg !322
  %1 = load i32, i32* %count.addr, align 4, !dbg !326
  %cmp = icmp eq i32 %1, 0, !dbg !328
  br i1 %cmp, label %if.then, label %if.else, !dbg !329

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %a1.addr, align 8, !dbg !330
  store i64 %2, i64* %z1, align 8, !dbg !332
  %3 = load i64, i64* %a0.addr, align 8, !dbg !333
  store i64 %3, i64* %z0, align 8, !dbg !334
  br label %if.end40, !dbg !335

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %count.addr, align 4, !dbg !336
  %cmp1 = icmp slt i32 %4, 64, !dbg !338
  br i1 %cmp1, label %if.then2, label %if.else11, !dbg !339

if.then2:                                         ; preds = %if.else
  %5 = load i64, i64* %a0.addr, align 8, !dbg !340
  %6 = load i32, i32* %negCount, align 4, !dbg !342
  %sh_prom = zext i32 %6 to i64, !dbg !343
  %shl = shl i64 %5, %sh_prom, !dbg !343
  %7 = load i64, i64* %a1.addr, align 8, !dbg !344
  %8 = load i32, i32* %count.addr, align 4, !dbg !345
  %sh_prom3 = zext i32 %8 to i64, !dbg !346
  %shr = lshr i64 %7, %sh_prom3, !dbg !346
  %or = or i64 %shl, %shr, !dbg !347
  %9 = load i64, i64* %a1.addr, align 8, !dbg !348
  %10 = load i32, i32* %negCount, align 4, !dbg !349
  %sh_prom4 = zext i32 %10 to i64, !dbg !350
  %shl5 = shl i64 %9, %sh_prom4, !dbg !350
  %cmp6 = icmp ne i64 %shl5, 0, !dbg !351
  %conv = zext i1 %cmp6 to i32, !dbg !351
  %conv7 = sext i32 %conv to i64, !dbg !352
  %or8 = or i64 %or, %conv7, !dbg !353
  store i64 %or8, i64* %z1, align 8, !dbg !354
  %11 = load i64, i64* %a0.addr, align 8, !dbg !355
  %12 = load i32, i32* %count.addr, align 4, !dbg !356
  %sh_prom9 = zext i32 %12 to i64, !dbg !357
  %shr10 = lshr i64 %11, %sh_prom9, !dbg !357
  store i64 %shr10, i64* %z0, align 8, !dbg !358
  br label %if.end39, !dbg !359

if.else11:                                        ; preds = %if.else
  %13 = load i32, i32* %count.addr, align 4, !dbg !360
  %cmp12 = icmp eq i32 %13, 64, !dbg !363
  br i1 %cmp12, label %if.then14, label %if.else19, !dbg !364

if.then14:                                        ; preds = %if.else11
  %14 = load i64, i64* %a0.addr, align 8, !dbg !365
  %15 = load i64, i64* %a1.addr, align 8, !dbg !367
  %cmp15 = icmp ne i64 %15, 0, !dbg !368
  %conv16 = zext i1 %cmp15 to i32, !dbg !368
  %conv17 = sext i32 %conv16 to i64, !dbg !369
  %or18 = or i64 %14, %conv17, !dbg !370
  store i64 %or18, i64* %z1, align 8, !dbg !371
  br label %if.end38, !dbg !372

if.else19:                                        ; preds = %if.else11
  %16 = load i32, i32* %count.addr, align 4, !dbg !373
  %cmp20 = icmp slt i32 %16, 128, !dbg !375
  br i1 %cmp20, label %if.then22, label %if.else33, !dbg !376

if.then22:                                        ; preds = %if.else19
  %17 = load i64, i64* %a0.addr, align 8, !dbg !377
  %18 = load i32, i32* %count.addr, align 4, !dbg !379
  %and23 = and i32 %18, 63, !dbg !380
  %sh_prom24 = zext i32 %and23 to i64, !dbg !381
  %shr25 = lshr i64 %17, %sh_prom24, !dbg !381
  %19 = load i64, i64* %a0.addr, align 8, !dbg !382
  %20 = load i32, i32* %negCount, align 4, !dbg !383
  %sh_prom26 = zext i32 %20 to i64, !dbg !384
  %shl27 = shl i64 %19, %sh_prom26, !dbg !384
  %21 = load i64, i64* %a1.addr, align 8, !dbg !385
  %or28 = or i64 %shl27, %21, !dbg !386
  %cmp29 = icmp ne i64 %or28, 0, !dbg !387
  %conv30 = zext i1 %cmp29 to i32, !dbg !387
  %conv31 = sext i32 %conv30 to i64, !dbg !388
  %or32 = or i64 %shr25, %conv31, !dbg !389
  store i64 %or32, i64* %z1, align 8, !dbg !390
  br label %if.end, !dbg !391

if.else33:                                        ; preds = %if.else19
  %22 = load i64, i64* %a0.addr, align 8, !dbg !392
  %23 = load i64, i64* %a1.addr, align 8, !dbg !394
  %or34 = or i64 %22, %23, !dbg !395
  %cmp35 = icmp ne i64 %or34, 0, !dbg !396
  %conv36 = zext i1 %cmp35 to i32, !dbg !396
  %conv37 = sext i32 %conv36 to i64, !dbg !397
  store i64 %conv37, i64* %z1, align 8, !dbg !398
  br label %if.end

if.end:                                           ; preds = %if.else33, %if.then22
  br label %if.end38

if.end38:                                         ; preds = %if.end, %if.then14
  store i64 0, i64* %z0, align 8, !dbg !399
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then2
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then
  %24 = load i64, i64* %z1, align 8, !dbg !400
  %25 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !401
  store i64 %24, i64* %25, align 8, !dbg !402
  %26 = load i64, i64* %z0, align 8, !dbg !403
  %27 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !404
  store i64 %26, i64* %27, align 8, !dbg !405
  ret void, !dbg !406
}

; Function Attrs: noinline nounwind optnone uwtable
define void @shift128ExtraRightJamming(i64 %a0, i64 %a1, i64 %a2, i32 %count, i64* %z0Ptr, i64* %z1Ptr, i64* %z2Ptr) #0 !dbg !407 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %a2.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z2Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %z2 = alloca i64, align 8
  %negCount = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !410, metadata !DIExpression()), !dbg !411
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !412, metadata !DIExpression()), !dbg !413
  store i64 %a2, i64* %a2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a2.addr, metadata !414, metadata !DIExpression()), !dbg !415
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !416, metadata !DIExpression()), !dbg !417
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !418, metadata !DIExpression()), !dbg !419
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !420, metadata !DIExpression()), !dbg !421
  store i64* %z2Ptr, i64** %z2Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z2Ptr.addr, metadata !422, metadata !DIExpression()), !dbg !423
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !424, metadata !DIExpression()), !dbg !425
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !426, metadata !DIExpression()), !dbg !427
  call void @llvm.dbg.declare(metadata i64* %z2, metadata !428, metadata !DIExpression()), !dbg !429
  call void @llvm.dbg.declare(metadata i32* %negCount, metadata !430, metadata !DIExpression()), !dbg !431
  %0 = load i32, i32* %count.addr, align 4, !dbg !432
  %sub = sub nsw i32 0, %0, !dbg !433
  %and = and i32 %sub, 63, !dbg !434
  store i32 %and, i32* %negCount, align 4, !dbg !431
  %1 = load i32, i32* %count.addr, align 4, !dbg !435
  %cmp = icmp eq i32 %1, 0, !dbg !437
  br i1 %cmp, label %if.then, label %if.else, !dbg !438

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %a2.addr, align 8, !dbg !439
  store i64 %2, i64* %z2, align 8, !dbg !441
  %3 = load i64, i64* %a1.addr, align 8, !dbg !442
  store i64 %3, i64* %z1, align 8, !dbg !443
  %4 = load i64, i64* %a0.addr, align 8, !dbg !444
  store i64 %4, i64* %z0, align 8, !dbg !445
  br label %if.end30, !dbg !446

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %count.addr, align 4, !dbg !447
  %cmp1 = icmp slt i32 %5, 64, !dbg !450
  br i1 %cmp1, label %if.then2, label %if.else8, !dbg !451

if.then2:                                         ; preds = %if.else
  %6 = load i64, i64* %a1.addr, align 8, !dbg !452
  %7 = load i32, i32* %negCount, align 4, !dbg !454
  %sh_prom = zext i32 %7 to i64, !dbg !455
  %shl = shl i64 %6, %sh_prom, !dbg !455
  store i64 %shl, i64* %z2, align 8, !dbg !456
  %8 = load i64, i64* %a0.addr, align 8, !dbg !457
  %9 = load i32, i32* %negCount, align 4, !dbg !458
  %sh_prom3 = zext i32 %9 to i64, !dbg !459
  %shl4 = shl i64 %8, %sh_prom3, !dbg !459
  %10 = load i64, i64* %a1.addr, align 8, !dbg !460
  %11 = load i32, i32* %count.addr, align 4, !dbg !461
  %sh_prom5 = zext i32 %11 to i64, !dbg !462
  %shr = lshr i64 %10, %sh_prom5, !dbg !462
  %or = or i64 %shl4, %shr, !dbg !463
  store i64 %or, i64* %z1, align 8, !dbg !464
  %12 = load i64, i64* %a0.addr, align 8, !dbg !465
  %13 = load i32, i32* %count.addr, align 4, !dbg !466
  %sh_prom6 = zext i32 %13 to i64, !dbg !467
  %shr7 = lshr i64 %12, %sh_prom6, !dbg !467
  store i64 %shr7, i64* %z0, align 8, !dbg !468
  br label %if.end25, !dbg !469

if.else8:                                         ; preds = %if.else
  %14 = load i32, i32* %count.addr, align 4, !dbg !470
  %cmp9 = icmp eq i32 %14, 64, !dbg !473
  br i1 %cmp9, label %if.then10, label %if.else11, !dbg !474

if.then10:                                        ; preds = %if.else8
  %15 = load i64, i64* %a1.addr, align 8, !dbg !475
  store i64 %15, i64* %z2, align 8, !dbg !477
  %16 = load i64, i64* %a0.addr, align 8, !dbg !478
  store i64 %16, i64* %z1, align 8, !dbg !479
  br label %if.end24, !dbg !480

if.else11:                                        ; preds = %if.else8
  %17 = load i64, i64* %a1.addr, align 8, !dbg !481
  %18 = load i64, i64* %a2.addr, align 8, !dbg !483
  %or12 = or i64 %18, %17, !dbg !483
  store i64 %or12, i64* %a2.addr, align 8, !dbg !483
  %19 = load i32, i32* %count.addr, align 4, !dbg !484
  %cmp13 = icmp slt i32 %19, 128, !dbg !486
  br i1 %cmp13, label %if.then14, label %if.else20, !dbg !487

if.then14:                                        ; preds = %if.else11
  %20 = load i64, i64* %a0.addr, align 8, !dbg !488
  %21 = load i32, i32* %negCount, align 4, !dbg !490
  %sh_prom15 = zext i32 %21 to i64, !dbg !491
  %shl16 = shl i64 %20, %sh_prom15, !dbg !491
  store i64 %shl16, i64* %z2, align 8, !dbg !492
  %22 = load i64, i64* %a0.addr, align 8, !dbg !493
  %23 = load i32, i32* %count.addr, align 4, !dbg !494
  %and17 = and i32 %23, 63, !dbg !495
  %sh_prom18 = zext i32 %and17 to i64, !dbg !496
  %shr19 = lshr i64 %22, %sh_prom18, !dbg !496
  store i64 %shr19, i64* %z1, align 8, !dbg !497
  br label %if.end, !dbg !498

if.else20:                                        ; preds = %if.else11
  %24 = load i32, i32* %count.addr, align 4, !dbg !499
  %cmp21 = icmp eq i32 %24, 128, !dbg !501
  br i1 %cmp21, label %cond.true, label %cond.false, !dbg !502

cond.true:                                        ; preds = %if.else20
  %25 = load i64, i64* %a0.addr, align 8, !dbg !503
  br label %cond.end, !dbg !502

cond.false:                                       ; preds = %if.else20
  %26 = load i64, i64* %a0.addr, align 8, !dbg !504
  %cmp22 = icmp ne i64 %26, 0, !dbg !505
  %conv = zext i1 %cmp22 to i32, !dbg !505
  %conv23 = sext i32 %conv to i64, !dbg !506
  br label %cond.end, !dbg !502

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %25, %cond.true ], [ %conv23, %cond.false ], !dbg !502
  store i64 %cond, i64* %z2, align 8, !dbg !507
  store i64 0, i64* %z1, align 8, !dbg !508
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then14
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then10
  store i64 0, i64* %z0, align 8, !dbg !509
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then2
  %27 = load i64, i64* %a2.addr, align 8, !dbg !510
  %cmp26 = icmp ne i64 %27, 0, !dbg !511
  %conv27 = zext i1 %cmp26 to i32, !dbg !511
  %conv28 = sext i32 %conv27 to i64, !dbg !512
  %28 = load i64, i64* %z2, align 8, !dbg !513
  %or29 = or i64 %28, %conv28, !dbg !513
  store i64 %or29, i64* %z2, align 8, !dbg !513
  br label %if.end30

if.end30:                                         ; preds = %if.end25, %if.then
  %29 = load i64, i64* %z2, align 8, !dbg !514
  %30 = load i64*, i64** %z2Ptr.addr, align 8, !dbg !515
  store i64 %29, i64* %30, align 8, !dbg !516
  %31 = load i64, i64* %z1, align 8, !dbg !517
  %32 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !518
  store i64 %31, i64* %32, align 8, !dbg !519
  %33 = load i64, i64* %z0, align 8, !dbg !520
  %34 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !521
  store i64 %33, i64* %34, align 8, !dbg !522
  ret void, !dbg !523
}

; Function Attrs: noinline nounwind optnone uwtable
define void @shortShift128Left(i64 %a0, i64 %a1, i32 %count, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !524 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !525, metadata !DIExpression()), !dbg !526
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !527, metadata !DIExpression()), !dbg !528
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !529, metadata !DIExpression()), !dbg !530
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !531, metadata !DIExpression()), !dbg !532
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !533, metadata !DIExpression()), !dbg !534
  %0 = load i64, i64* %a1.addr, align 8, !dbg !535
  %1 = load i32, i32* %count.addr, align 4, !dbg !536
  %sh_prom = zext i32 %1 to i64, !dbg !537
  %shl = shl i64 %0, %sh_prom, !dbg !537
  %2 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !538
  store i64 %shl, i64* %2, align 8, !dbg !539
  %3 = load i32, i32* %count.addr, align 4, !dbg !540
  %cmp = icmp eq i32 %3, 0, !dbg !541
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !542

cond.true:                                        ; preds = %entry
  %4 = load i64, i64* %a0.addr, align 8, !dbg !543
  br label %cond.end, !dbg !542

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %a0.addr, align 8, !dbg !544
  %6 = load i32, i32* %count.addr, align 4, !dbg !545
  %sh_prom1 = zext i32 %6 to i64, !dbg !546
  %shl2 = shl i64 %5, %sh_prom1, !dbg !546
  %7 = load i64, i64* %a1.addr, align 8, !dbg !547
  %8 = load i32, i32* %count.addr, align 4, !dbg !548
  %sub = sub nsw i32 0, %8, !dbg !549
  %and = and i32 %sub, 63, !dbg !550
  %sh_prom3 = zext i32 %and to i64, !dbg !551
  %shr = lshr i64 %7, %sh_prom3, !dbg !551
  %or = or i64 %shl2, %shr, !dbg !552
  br label %cond.end, !dbg !542

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %4, %cond.true ], [ %or, %cond.false ], !dbg !542
  %9 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !553
  store i64 %cond, i64* %9, align 8, !dbg !554
  ret void, !dbg !555
}

; Function Attrs: noinline nounwind optnone uwtable
define void @shortShift192Left(i64 %a0, i64 %a1, i64 %a2, i32 %count, i64* %z0Ptr, i64* %z1Ptr, i64* %z2Ptr) #0 !dbg !556 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %a2.addr = alloca i64, align 8
  %count.addr = alloca i32, align 4
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z2Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %z2 = alloca i64, align 8
  %negCount = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !557, metadata !DIExpression()), !dbg !558
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !559, metadata !DIExpression()), !dbg !560
  store i64 %a2, i64* %a2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a2.addr, metadata !561, metadata !DIExpression()), !dbg !562
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !563, metadata !DIExpression()), !dbg !564
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !565, metadata !DIExpression()), !dbg !566
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !567, metadata !DIExpression()), !dbg !568
  store i64* %z2Ptr, i64** %z2Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z2Ptr.addr, metadata !569, metadata !DIExpression()), !dbg !570
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !571, metadata !DIExpression()), !dbg !572
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !573, metadata !DIExpression()), !dbg !574
  call void @llvm.dbg.declare(metadata i64* %z2, metadata !575, metadata !DIExpression()), !dbg !576
  call void @llvm.dbg.declare(metadata i32* %negCount, metadata !577, metadata !DIExpression()), !dbg !578
  %0 = load i64, i64* %a2.addr, align 8, !dbg !579
  %1 = load i32, i32* %count.addr, align 4, !dbg !580
  %sh_prom = zext i32 %1 to i64, !dbg !581
  %shl = shl i64 %0, %sh_prom, !dbg !581
  store i64 %shl, i64* %z2, align 8, !dbg !582
  %2 = load i64, i64* %a1.addr, align 8, !dbg !583
  %3 = load i32, i32* %count.addr, align 4, !dbg !584
  %sh_prom1 = zext i32 %3 to i64, !dbg !585
  %shl2 = shl i64 %2, %sh_prom1, !dbg !585
  store i64 %shl2, i64* %z1, align 8, !dbg !586
  %4 = load i64, i64* %a0.addr, align 8, !dbg !587
  %5 = load i32, i32* %count.addr, align 4, !dbg !588
  %sh_prom3 = zext i32 %5 to i64, !dbg !589
  %shl4 = shl i64 %4, %sh_prom3, !dbg !589
  store i64 %shl4, i64* %z0, align 8, !dbg !590
  %6 = load i32, i32* %count.addr, align 4, !dbg !591
  %cmp = icmp slt i32 0, %6, !dbg !593
  br i1 %cmp, label %if.then, label %if.end, !dbg !594

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %count.addr, align 4, !dbg !595
  %sub = sub nsw i32 0, %7, !dbg !597
  %and = and i32 %sub, 63, !dbg !598
  store i32 %and, i32* %negCount, align 4, !dbg !599
  %8 = load i64, i64* %a2.addr, align 8, !dbg !600
  %9 = load i32, i32* %negCount, align 4, !dbg !601
  %sh_prom5 = zext i32 %9 to i64, !dbg !602
  %shr = lshr i64 %8, %sh_prom5, !dbg !602
  %10 = load i64, i64* %z1, align 8, !dbg !603
  %or = or i64 %10, %shr, !dbg !603
  store i64 %or, i64* %z1, align 8, !dbg !603
  %11 = load i64, i64* %a1.addr, align 8, !dbg !604
  %12 = load i32, i32* %negCount, align 4, !dbg !605
  %sh_prom6 = zext i32 %12 to i64, !dbg !606
  %shr7 = lshr i64 %11, %sh_prom6, !dbg !606
  %13 = load i64, i64* %z0, align 8, !dbg !607
  %or8 = or i64 %13, %shr7, !dbg !607
  store i64 %or8, i64* %z0, align 8, !dbg !607
  br label %if.end, !dbg !608

if.end:                                           ; preds = %if.then, %entry
  %14 = load i64, i64* %z2, align 8, !dbg !609
  %15 = load i64*, i64** %z2Ptr.addr, align 8, !dbg !610
  store i64 %14, i64* %15, align 8, !dbg !611
  %16 = load i64, i64* %z1, align 8, !dbg !612
  %17 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !613
  store i64 %16, i64* %17, align 8, !dbg !614
  %18 = load i64, i64* %z0, align 8, !dbg !615
  %19 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !616
  store i64 %18, i64* %19, align 8, !dbg !617
  ret void, !dbg !618
}

; Function Attrs: noinline nounwind optnone uwtable
define void @add128(i64 %a0, i64 %a1, i64 %b0, i64 %b1, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !619 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z1 = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !622, metadata !DIExpression()), !dbg !623
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !624, metadata !DIExpression()), !dbg !625
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !626, metadata !DIExpression()), !dbg !627
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !628, metadata !DIExpression()), !dbg !629
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !630, metadata !DIExpression()), !dbg !631
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !632, metadata !DIExpression()), !dbg !633
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !634, metadata !DIExpression()), !dbg !635
  %0 = load i64, i64* %a1.addr, align 8, !dbg !636
  %1 = load i64, i64* %b1.addr, align 8, !dbg !637
  %add = add i64 %0, %1, !dbg !638
  store i64 %add, i64* %z1, align 8, !dbg !639
  %2 = load i64, i64* %z1, align 8, !dbg !640
  %3 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !641
  store i64 %2, i64* %3, align 8, !dbg !642
  %4 = load i64, i64* %a0.addr, align 8, !dbg !643
  %5 = load i64, i64* %b0.addr, align 8, !dbg !644
  %add1 = add i64 %4, %5, !dbg !645
  %6 = load i64, i64* %z1, align 8, !dbg !646
  %7 = load i64, i64* %a1.addr, align 8, !dbg !647
  %cmp = icmp ult i64 %6, %7, !dbg !648
  %conv = zext i1 %cmp to i32, !dbg !648
  %conv2 = sext i32 %conv to i64, !dbg !649
  %add3 = add i64 %add1, %conv2, !dbg !650
  %8 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !651
  store i64 %add3, i64* %8, align 8, !dbg !652
  ret void, !dbg !653
}

; Function Attrs: noinline nounwind optnone uwtable
define void @add192(i64 %a0, i64 %a1, i64 %a2, i64 %b0, i64 %b1, i64 %b2, i64* %z0Ptr, i64* %z1Ptr, i64* %z2Ptr) #0 !dbg !654 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %a2.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  %b2.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z2Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %z2 = alloca i64, align 8
  %carry0 = alloca i32, align 4
  %carry1 = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !657, metadata !DIExpression()), !dbg !658
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !659, metadata !DIExpression()), !dbg !660
  store i64 %a2, i64* %a2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a2.addr, metadata !661, metadata !DIExpression()), !dbg !662
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !663, metadata !DIExpression()), !dbg !664
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !665, metadata !DIExpression()), !dbg !666
  store i64 %b2, i64* %b2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b2.addr, metadata !667, metadata !DIExpression()), !dbg !668
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !669, metadata !DIExpression()), !dbg !670
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !671, metadata !DIExpression()), !dbg !672
  store i64* %z2Ptr, i64** %z2Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z2Ptr.addr, metadata !673, metadata !DIExpression()), !dbg !674
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !675, metadata !DIExpression()), !dbg !676
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !677, metadata !DIExpression()), !dbg !678
  call void @llvm.dbg.declare(metadata i64* %z2, metadata !679, metadata !DIExpression()), !dbg !680
  call void @llvm.dbg.declare(metadata i32* %carry0, metadata !681, metadata !DIExpression()), !dbg !682
  call void @llvm.dbg.declare(metadata i32* %carry1, metadata !683, metadata !DIExpression()), !dbg !684
  %0 = load i64, i64* %a2.addr, align 8, !dbg !685
  %1 = load i64, i64* %b2.addr, align 8, !dbg !686
  %add = add i64 %0, %1, !dbg !687
  store i64 %add, i64* %z2, align 8, !dbg !688
  %2 = load i64, i64* %z2, align 8, !dbg !689
  %3 = load i64, i64* %a2.addr, align 8, !dbg !690
  %cmp = icmp ult i64 %2, %3, !dbg !691
  %conv = zext i1 %cmp to i32, !dbg !691
  store i32 %conv, i32* %carry1, align 4, !dbg !692
  %4 = load i64, i64* %a1.addr, align 8, !dbg !693
  %5 = load i64, i64* %b1.addr, align 8, !dbg !694
  %add1 = add i64 %4, %5, !dbg !695
  store i64 %add1, i64* %z1, align 8, !dbg !696
  %6 = load i64, i64* %z1, align 8, !dbg !697
  %7 = load i64, i64* %a1.addr, align 8, !dbg !698
  %cmp2 = icmp ult i64 %6, %7, !dbg !699
  %conv3 = zext i1 %cmp2 to i32, !dbg !699
  store i32 %conv3, i32* %carry0, align 4, !dbg !700
  %8 = load i64, i64* %a0.addr, align 8, !dbg !701
  %9 = load i64, i64* %b0.addr, align 8, !dbg !702
  %add4 = add i64 %8, %9, !dbg !703
  store i64 %add4, i64* %z0, align 8, !dbg !704
  %10 = load i32, i32* %carry1, align 4, !dbg !705
  %conv5 = sext i32 %10 to i64, !dbg !705
  %11 = load i64, i64* %z1, align 8, !dbg !706
  %add6 = add i64 %11, %conv5, !dbg !706
  store i64 %add6, i64* %z1, align 8, !dbg !706
  %12 = load i64, i64* %z1, align 8, !dbg !707
  %13 = load i32, i32* %carry1, align 4, !dbg !708
  %conv7 = sext i32 %13 to i64, !dbg !708
  %cmp8 = icmp ult i64 %12, %conv7, !dbg !709
  %conv9 = zext i1 %cmp8 to i32, !dbg !709
  %conv10 = sext i32 %conv9 to i64, !dbg !710
  %14 = load i64, i64* %z0, align 8, !dbg !711
  %add11 = add i64 %14, %conv10, !dbg !711
  store i64 %add11, i64* %z0, align 8, !dbg !711
  %15 = load i32, i32* %carry0, align 4, !dbg !712
  %conv12 = sext i32 %15 to i64, !dbg !712
  %16 = load i64, i64* %z0, align 8, !dbg !713
  %add13 = add i64 %16, %conv12, !dbg !713
  store i64 %add13, i64* %z0, align 8, !dbg !713
  %17 = load i64, i64* %z2, align 8, !dbg !714
  %18 = load i64*, i64** %z2Ptr.addr, align 8, !dbg !715
  store i64 %17, i64* %18, align 8, !dbg !716
  %19 = load i64, i64* %z1, align 8, !dbg !717
  %20 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !718
  store i64 %19, i64* %20, align 8, !dbg !719
  %21 = load i64, i64* %z0, align 8, !dbg !720
  %22 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !721
  store i64 %21, i64* %22, align 8, !dbg !722
  ret void, !dbg !723
}

; Function Attrs: noinline nounwind optnone uwtable
define void @sub128(i64 %a0, i64 %a1, i64 %b0, i64 %b1, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !724 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !725, metadata !DIExpression()), !dbg !726
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !727, metadata !DIExpression()), !dbg !728
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !729, metadata !DIExpression()), !dbg !730
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !731, metadata !DIExpression()), !dbg !732
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !733, metadata !DIExpression()), !dbg !734
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !735, metadata !DIExpression()), !dbg !736
  %0 = load i64, i64* %a1.addr, align 8, !dbg !737
  %1 = load i64, i64* %b1.addr, align 8, !dbg !738
  %sub = sub i64 %0, %1, !dbg !739
  %2 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !740
  store i64 %sub, i64* %2, align 8, !dbg !741
  %3 = load i64, i64* %a0.addr, align 8, !dbg !742
  %4 = load i64, i64* %b0.addr, align 8, !dbg !743
  %sub1 = sub i64 %3, %4, !dbg !744
  %5 = load i64, i64* %a1.addr, align 8, !dbg !745
  %6 = load i64, i64* %b1.addr, align 8, !dbg !746
  %cmp = icmp ult i64 %5, %6, !dbg !747
  %conv = zext i1 %cmp to i32, !dbg !747
  %conv2 = sext i32 %conv to i64, !dbg !748
  %sub3 = sub i64 %sub1, %conv2, !dbg !749
  %7 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !750
  store i64 %sub3, i64* %7, align 8, !dbg !751
  ret void, !dbg !752
}

; Function Attrs: noinline nounwind optnone uwtable
define void @sub192(i64 %a0, i64 %a1, i64 %a2, i64 %b0, i64 %b1, i64 %b2, i64* %z0Ptr, i64* %z1Ptr, i64* %z2Ptr) #0 !dbg !753 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %a2.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  %b2.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z2Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %z2 = alloca i64, align 8
  %borrow0 = alloca i32, align 4
  %borrow1 = alloca i32, align 4
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !754, metadata !DIExpression()), !dbg !755
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !756, metadata !DIExpression()), !dbg !757
  store i64 %a2, i64* %a2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a2.addr, metadata !758, metadata !DIExpression()), !dbg !759
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !760, metadata !DIExpression()), !dbg !761
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !762, metadata !DIExpression()), !dbg !763
  store i64 %b2, i64* %b2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b2.addr, metadata !764, metadata !DIExpression()), !dbg !765
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !766, metadata !DIExpression()), !dbg !767
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !768, metadata !DIExpression()), !dbg !769
  store i64* %z2Ptr, i64** %z2Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z2Ptr.addr, metadata !770, metadata !DIExpression()), !dbg !771
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !772, metadata !DIExpression()), !dbg !773
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !774, metadata !DIExpression()), !dbg !775
  call void @llvm.dbg.declare(metadata i64* %z2, metadata !776, metadata !DIExpression()), !dbg !777
  call void @llvm.dbg.declare(metadata i32* %borrow0, metadata !778, metadata !DIExpression()), !dbg !779
  call void @llvm.dbg.declare(metadata i32* %borrow1, metadata !780, metadata !DIExpression()), !dbg !781
  %0 = load i64, i64* %a2.addr, align 8, !dbg !782
  %1 = load i64, i64* %b2.addr, align 8, !dbg !783
  %sub = sub i64 %0, %1, !dbg !784
  store i64 %sub, i64* %z2, align 8, !dbg !785
  %2 = load i64, i64* %a2.addr, align 8, !dbg !786
  %3 = load i64, i64* %b2.addr, align 8, !dbg !787
  %cmp = icmp ult i64 %2, %3, !dbg !788
  %conv = zext i1 %cmp to i32, !dbg !788
  store i32 %conv, i32* %borrow1, align 4, !dbg !789
  %4 = load i64, i64* %a1.addr, align 8, !dbg !790
  %5 = load i64, i64* %b1.addr, align 8, !dbg !791
  %sub1 = sub i64 %4, %5, !dbg !792
  store i64 %sub1, i64* %z1, align 8, !dbg !793
  %6 = load i64, i64* %a1.addr, align 8, !dbg !794
  %7 = load i64, i64* %b1.addr, align 8, !dbg !795
  %cmp2 = icmp ult i64 %6, %7, !dbg !796
  %conv3 = zext i1 %cmp2 to i32, !dbg !796
  store i32 %conv3, i32* %borrow0, align 4, !dbg !797
  %8 = load i64, i64* %a0.addr, align 8, !dbg !798
  %9 = load i64, i64* %b0.addr, align 8, !dbg !799
  %sub4 = sub i64 %8, %9, !dbg !800
  store i64 %sub4, i64* %z0, align 8, !dbg !801
  %10 = load i64, i64* %z1, align 8, !dbg !802
  %11 = load i32, i32* %borrow1, align 4, !dbg !803
  %conv5 = sext i32 %11 to i64, !dbg !803
  %cmp6 = icmp ult i64 %10, %conv5, !dbg !804
  %conv7 = zext i1 %cmp6 to i32, !dbg !804
  %conv8 = sext i32 %conv7 to i64, !dbg !805
  %12 = load i64, i64* %z0, align 8, !dbg !806
  %sub9 = sub i64 %12, %conv8, !dbg !806
  store i64 %sub9, i64* %z0, align 8, !dbg !806
  %13 = load i32, i32* %borrow1, align 4, !dbg !807
  %conv10 = sext i32 %13 to i64, !dbg !807
  %14 = load i64, i64* %z1, align 8, !dbg !808
  %sub11 = sub i64 %14, %conv10, !dbg !808
  store i64 %sub11, i64* %z1, align 8, !dbg !808
  %15 = load i32, i32* %borrow0, align 4, !dbg !809
  %conv12 = sext i32 %15 to i64, !dbg !809
  %16 = load i64, i64* %z0, align 8, !dbg !810
  %sub13 = sub i64 %16, %conv12, !dbg !810
  store i64 %sub13, i64* %z0, align 8, !dbg !810
  %17 = load i64, i64* %z2, align 8, !dbg !811
  %18 = load i64*, i64** %z2Ptr.addr, align 8, !dbg !812
  store i64 %17, i64* %18, align 8, !dbg !813
  %19 = load i64, i64* %z1, align 8, !dbg !814
  %20 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !815
  store i64 %19, i64* %20, align 8, !dbg !816
  %21 = load i64, i64* %z0, align 8, !dbg !817
  %22 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !818
  store i64 %21, i64* %22, align 8, !dbg !819
  ret void, !dbg !820
}

; Function Attrs: noinline nounwind optnone uwtable
define void @mul64To128(i64 %a, i64 %b, i64* %z0Ptr, i64* %z1Ptr) #0 !dbg !821 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %aHigh = alloca i32, align 4
  %aLow = alloca i32, align 4
  %bHigh = alloca i32, align 4
  %bLow = alloca i32, align 4
  %z0 = alloca i64, align 8
  %zMiddleA = alloca i64, align 8
  %zMiddleB = alloca i64, align 8
  %z1 = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !824, metadata !DIExpression()), !dbg !825
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !826, metadata !DIExpression()), !dbg !827
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !828, metadata !DIExpression()), !dbg !829
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !830, metadata !DIExpression()), !dbg !831
  call void @llvm.dbg.declare(metadata i32* %aHigh, metadata !832, metadata !DIExpression()), !dbg !833
  call void @llvm.dbg.declare(metadata i32* %aLow, metadata !834, metadata !DIExpression()), !dbg !835
  call void @llvm.dbg.declare(metadata i32* %bHigh, metadata !836, metadata !DIExpression()), !dbg !837
  call void @llvm.dbg.declare(metadata i32* %bLow, metadata !838, metadata !DIExpression()), !dbg !839
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !840, metadata !DIExpression()), !dbg !841
  call void @llvm.dbg.declare(metadata i64* %zMiddleA, metadata !842, metadata !DIExpression()), !dbg !843
  call void @llvm.dbg.declare(metadata i64* %zMiddleB, metadata !844, metadata !DIExpression()), !dbg !845
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !846, metadata !DIExpression()), !dbg !847
  %0 = load i64, i64* %a.addr, align 8, !dbg !848
  %conv = trunc i64 %0 to i32, !dbg !848
  store i32 %conv, i32* %aLow, align 4, !dbg !849
  %1 = load i64, i64* %a.addr, align 8, !dbg !850
  %shr = lshr i64 %1, 32, !dbg !851
  %conv1 = trunc i64 %shr to i32, !dbg !850
  store i32 %conv1, i32* %aHigh, align 4, !dbg !852
  %2 = load i64, i64* %b.addr, align 8, !dbg !853
  %conv2 = trunc i64 %2 to i32, !dbg !853
  store i32 %conv2, i32* %bLow, align 4, !dbg !854
  %3 = load i64, i64* %b.addr, align 8, !dbg !855
  %shr3 = lshr i64 %3, 32, !dbg !856
  %conv4 = trunc i64 %shr3 to i32, !dbg !855
  store i32 %conv4, i32* %bHigh, align 4, !dbg !857
  %4 = load i32, i32* %aLow, align 4, !dbg !858
  %conv5 = zext i32 %4 to i64, !dbg !859
  %5 = load i32, i32* %bLow, align 4, !dbg !860
  %conv6 = zext i32 %5 to i64, !dbg !860
  %mul = mul i64 %conv5, %conv6, !dbg !861
  store i64 %mul, i64* %z1, align 8, !dbg !862
  %6 = load i32, i32* %aLow, align 4, !dbg !863
  %conv7 = zext i32 %6 to i64, !dbg !864
  %7 = load i32, i32* %bHigh, align 4, !dbg !865
  %conv8 = zext i32 %7 to i64, !dbg !865
  %mul9 = mul i64 %conv7, %conv8, !dbg !866
  store i64 %mul9, i64* %zMiddleA, align 8, !dbg !867
  %8 = load i32, i32* %aHigh, align 4, !dbg !868
  %conv10 = zext i32 %8 to i64, !dbg !869
  %9 = load i32, i32* %bLow, align 4, !dbg !870
  %conv11 = zext i32 %9 to i64, !dbg !870
  %mul12 = mul i64 %conv10, %conv11, !dbg !871
  store i64 %mul12, i64* %zMiddleB, align 8, !dbg !872
  %10 = load i32, i32* %aHigh, align 4, !dbg !873
  %conv13 = zext i32 %10 to i64, !dbg !874
  %11 = load i32, i32* %bHigh, align 4, !dbg !875
  %conv14 = zext i32 %11 to i64, !dbg !875
  %mul15 = mul i64 %conv13, %conv14, !dbg !876
  store i64 %mul15, i64* %z0, align 8, !dbg !877
  %12 = load i64, i64* %zMiddleB, align 8, !dbg !878
  %13 = load i64, i64* %zMiddleA, align 8, !dbg !879
  %add = add i64 %13, %12, !dbg !879
  store i64 %add, i64* %zMiddleA, align 8, !dbg !879
  %14 = load i64, i64* %zMiddleA, align 8, !dbg !880
  %15 = load i64, i64* %zMiddleB, align 8, !dbg !881
  %cmp = icmp ult i64 %14, %15, !dbg !882
  %conv16 = zext i1 %cmp to i32, !dbg !882
  %conv17 = sext i32 %conv16 to i64, !dbg !883
  %shl = shl i64 %conv17, 32, !dbg !884
  %16 = load i64, i64* %zMiddleA, align 8, !dbg !885
  %shr18 = lshr i64 %16, 32, !dbg !886
  %add19 = add i64 %shl, %shr18, !dbg !887
  %17 = load i64, i64* %z0, align 8, !dbg !888
  %add20 = add i64 %17, %add19, !dbg !888
  store i64 %add20, i64* %z0, align 8, !dbg !888
  %18 = load i64, i64* %zMiddleA, align 8, !dbg !889
  %shl21 = shl i64 %18, 32, !dbg !889
  store i64 %shl21, i64* %zMiddleA, align 8, !dbg !889
  %19 = load i64, i64* %zMiddleA, align 8, !dbg !890
  %20 = load i64, i64* %z1, align 8, !dbg !891
  %add22 = add i64 %20, %19, !dbg !891
  store i64 %add22, i64* %z1, align 8, !dbg !891
  %21 = load i64, i64* %z1, align 8, !dbg !892
  %22 = load i64, i64* %zMiddleA, align 8, !dbg !893
  %cmp23 = icmp ult i64 %21, %22, !dbg !894
  %conv24 = zext i1 %cmp23 to i32, !dbg !894
  %conv25 = sext i32 %conv24 to i64, !dbg !895
  %23 = load i64, i64* %z0, align 8, !dbg !896
  %add26 = add i64 %23, %conv25, !dbg !896
  store i64 %add26, i64* %z0, align 8, !dbg !896
  %24 = load i64, i64* %z1, align 8, !dbg !897
  %25 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !898
  store i64 %24, i64* %25, align 8, !dbg !899
  %26 = load i64, i64* %z0, align 8, !dbg !900
  %27 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !901
  store i64 %26, i64* %27, align 8, !dbg !902
  ret void, !dbg !903
}

; Function Attrs: noinline nounwind optnone uwtable
define void @mul128By64To192(i64 %a0, i64 %a1, i64 %b, i64* %z0Ptr, i64* %z1Ptr, i64* %z2Ptr) #0 !dbg !904 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z2Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %z2 = alloca i64, align 8
  %more1 = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !907, metadata !DIExpression()), !dbg !908
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !909, metadata !DIExpression()), !dbg !910
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !911, metadata !DIExpression()), !dbg !912
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !913, metadata !DIExpression()), !dbg !914
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !915, metadata !DIExpression()), !dbg !916
  store i64* %z2Ptr, i64** %z2Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z2Ptr.addr, metadata !917, metadata !DIExpression()), !dbg !918
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !919, metadata !DIExpression()), !dbg !920
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !921, metadata !DIExpression()), !dbg !922
  call void @llvm.dbg.declare(metadata i64* %z2, metadata !923, metadata !DIExpression()), !dbg !924
  call void @llvm.dbg.declare(metadata i64* %more1, metadata !925, metadata !DIExpression()), !dbg !926
  %0 = load i64, i64* %a1.addr, align 8, !dbg !927
  %1 = load i64, i64* %b.addr, align 8, !dbg !928
  call void @mul64To128(i64 %0, i64 %1, i64* %z1, i64* %z2), !dbg !929
  %2 = load i64, i64* %a0.addr, align 8, !dbg !930
  %3 = load i64, i64* %b.addr, align 8, !dbg !931
  call void @mul64To128(i64 %2, i64 %3, i64* %z0, i64* %more1), !dbg !932
  %4 = load i64, i64* %z0, align 8, !dbg !933
  %5 = load i64, i64* %more1, align 8, !dbg !934
  %6 = load i64, i64* %z1, align 8, !dbg !935
  call void @add128(i64 %4, i64 %5, i64 0, i64 %6, i64* %z0, i64* %z1), !dbg !936
  %7 = load i64, i64* %z2, align 8, !dbg !937
  %8 = load i64*, i64** %z2Ptr.addr, align 8, !dbg !938
  store i64 %7, i64* %8, align 8, !dbg !939
  %9 = load i64, i64* %z1, align 8, !dbg !940
  %10 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !941
  store i64 %9, i64* %10, align 8, !dbg !942
  %11 = load i64, i64* %z0, align 8, !dbg !943
  %12 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !944
  store i64 %11, i64* %12, align 8, !dbg !945
  ret void, !dbg !946
}

; Function Attrs: noinline nounwind optnone uwtable
define void @mul128To256(i64 %a0, i64 %a1, i64 %b0, i64 %b1, i64* %z0Ptr, i64* %z1Ptr, i64* %z2Ptr, i64* %z3Ptr) #0 !dbg !947 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  %z0Ptr.addr = alloca i64*, align 8
  %z1Ptr.addr = alloca i64*, align 8
  %z2Ptr.addr = alloca i64*, align 8
  %z3Ptr.addr = alloca i64*, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %z2 = alloca i64, align 8
  %z3 = alloca i64, align 8
  %more1 = alloca i64, align 8
  %more2 = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !950, metadata !DIExpression()), !dbg !951
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !952, metadata !DIExpression()), !dbg !953
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !954, metadata !DIExpression()), !dbg !955
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !956, metadata !DIExpression()), !dbg !957
  store i64* %z0Ptr, i64** %z0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z0Ptr.addr, metadata !958, metadata !DIExpression()), !dbg !959
  store i64* %z1Ptr, i64** %z1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z1Ptr.addr, metadata !960, metadata !DIExpression()), !dbg !961
  store i64* %z2Ptr, i64** %z2Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z2Ptr.addr, metadata !962, metadata !DIExpression()), !dbg !963
  store i64* %z3Ptr, i64** %z3Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %z3Ptr.addr, metadata !964, metadata !DIExpression()), !dbg !965
  call void @llvm.dbg.declare(metadata i64* %z0, metadata !966, metadata !DIExpression()), !dbg !967
  call void @llvm.dbg.declare(metadata i64* %z1, metadata !968, metadata !DIExpression()), !dbg !969
  call void @llvm.dbg.declare(metadata i64* %z2, metadata !970, metadata !DIExpression()), !dbg !971
  call void @llvm.dbg.declare(metadata i64* %z3, metadata !972, metadata !DIExpression()), !dbg !973
  call void @llvm.dbg.declare(metadata i64* %more1, metadata !974, metadata !DIExpression()), !dbg !975
  call void @llvm.dbg.declare(metadata i64* %more2, metadata !976, metadata !DIExpression()), !dbg !977
  %0 = load i64, i64* %a1.addr, align 8, !dbg !978
  %1 = load i64, i64* %b1.addr, align 8, !dbg !979
  call void @mul64To128(i64 %0, i64 %1, i64* %z2, i64* %z3), !dbg !980
  %2 = load i64, i64* %a1.addr, align 8, !dbg !981
  %3 = load i64, i64* %b0.addr, align 8, !dbg !982
  call void @mul64To128(i64 %2, i64 %3, i64* %z1, i64* %more2), !dbg !983
  %4 = load i64, i64* %z1, align 8, !dbg !984
  %5 = load i64, i64* %more2, align 8, !dbg !985
  %6 = load i64, i64* %z2, align 8, !dbg !986
  call void @add128(i64 %4, i64 %5, i64 0, i64 %6, i64* %z1, i64* %z2), !dbg !987
  %7 = load i64, i64* %a0.addr, align 8, !dbg !988
  %8 = load i64, i64* %b0.addr, align 8, !dbg !989
  call void @mul64To128(i64 %7, i64 %8, i64* %z0, i64* %more1), !dbg !990
  %9 = load i64, i64* %z0, align 8, !dbg !991
  %10 = load i64, i64* %more1, align 8, !dbg !992
  %11 = load i64, i64* %z1, align 8, !dbg !993
  call void @add128(i64 %9, i64 %10, i64 0, i64 %11, i64* %z0, i64* %z1), !dbg !994
  %12 = load i64, i64* %a0.addr, align 8, !dbg !995
  %13 = load i64, i64* %b1.addr, align 8, !dbg !996
  call void @mul64To128(i64 %12, i64 %13, i64* %more1, i64* %more2), !dbg !997
  %14 = load i64, i64* %more1, align 8, !dbg !998
  %15 = load i64, i64* %more2, align 8, !dbg !999
  %16 = load i64, i64* %z2, align 8, !dbg !1000
  call void @add128(i64 %14, i64 %15, i64 0, i64 %16, i64* %more1, i64* %z2), !dbg !1001
  %17 = load i64, i64* %z0, align 8, !dbg !1002
  %18 = load i64, i64* %z1, align 8, !dbg !1003
  %19 = load i64, i64* %more1, align 8, !dbg !1004
  call void @add128(i64 %17, i64 %18, i64 0, i64 %19, i64* %z0, i64* %z1), !dbg !1005
  %20 = load i64, i64* %z3, align 8, !dbg !1006
  %21 = load i64*, i64** %z3Ptr.addr, align 8, !dbg !1007
  store i64 %20, i64* %21, align 8, !dbg !1008
  %22 = load i64, i64* %z2, align 8, !dbg !1009
  %23 = load i64*, i64** %z2Ptr.addr, align 8, !dbg !1010
  store i64 %22, i64* %23, align 8, !dbg !1011
  %24 = load i64, i64* %z1, align 8, !dbg !1012
  %25 = load i64*, i64** %z1Ptr.addr, align 8, !dbg !1013
  store i64 %24, i64* %25, align 8, !dbg !1014
  %26 = load i64, i64* %z0, align 8, !dbg !1015
  %27 = load i64*, i64** %z0Ptr.addr, align 8, !dbg !1016
  store i64 %26, i64* %27, align 8, !dbg !1017
  ret void, !dbg !1018
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @eq128(i64 %a0, i64 %a1, i64 %b0, i64 %b1) #0 !dbg !1019 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !1023, metadata !DIExpression()), !dbg !1024
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !1025, metadata !DIExpression()), !dbg !1026
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !1027, metadata !DIExpression()), !dbg !1028
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !1029, metadata !DIExpression()), !dbg !1030
  %0 = load i64, i64* %a0.addr, align 8, !dbg !1031
  %1 = load i64, i64* %b0.addr, align 8, !dbg !1032
  %cmp = icmp eq i64 %0, %1, !dbg !1033
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1034

land.rhs:                                         ; preds = %entry
  %2 = load i64, i64* %a1.addr, align 8, !dbg !1035
  %3 = load i64, i64* %b1.addr, align 8, !dbg !1036
  %cmp1 = icmp eq i64 %2, %3, !dbg !1037
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %4, !dbg !1038
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @le128(i64 %a0, i64 %a1, i64 %b0, i64 %b1) #0 !dbg !1039 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !1040, metadata !DIExpression()), !dbg !1041
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !1042, metadata !DIExpression()), !dbg !1043
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !1044, metadata !DIExpression()), !dbg !1045
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !1046, metadata !DIExpression()), !dbg !1047
  %0 = load i64, i64* %a0.addr, align 8, !dbg !1048
  %1 = load i64, i64* %b0.addr, align 8, !dbg !1049
  %cmp = icmp ult i64 %0, %1, !dbg !1050
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !1051

lor.rhs:                                          ; preds = %entry
  %2 = load i64, i64* %a0.addr, align 8, !dbg !1052
  %3 = load i64, i64* %b0.addr, align 8, !dbg !1053
  %cmp1 = icmp eq i64 %2, %3, !dbg !1054
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !1055

land.rhs:                                         ; preds = %lor.rhs
  %4 = load i64, i64* %a1.addr, align 8, !dbg !1056
  %5 = load i64, i64* %b1.addr, align 8, !dbg !1057
  %cmp2 = icmp ule i64 %4, %5, !dbg !1058
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %cmp2, %land.rhs ]
  br label %lor.end, !dbg !1051

lor.end:                                          ; preds = %land.end, %entry
  %7 = phi i1 [ true, %entry ], [ %6, %land.end ]
  ret i1 %7, !dbg !1059
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @lt128(i64 %a0, i64 %a1, i64 %b0, i64 %b1) #0 !dbg !1060 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !1061, metadata !DIExpression()), !dbg !1062
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !1063, metadata !DIExpression()), !dbg !1064
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !1065, metadata !DIExpression()), !dbg !1066
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !1067, metadata !DIExpression()), !dbg !1068
  %0 = load i64, i64* %a0.addr, align 8, !dbg !1069
  %1 = load i64, i64* %b0.addr, align 8, !dbg !1070
  %cmp = icmp ult i64 %0, %1, !dbg !1071
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !1072

lor.rhs:                                          ; preds = %entry
  %2 = load i64, i64* %a0.addr, align 8, !dbg !1073
  %3 = load i64, i64* %b0.addr, align 8, !dbg !1074
  %cmp1 = icmp eq i64 %2, %3, !dbg !1075
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !1076

land.rhs:                                         ; preds = %lor.rhs
  %4 = load i64, i64* %a1.addr, align 8, !dbg !1077
  %5 = load i64, i64* %b1.addr, align 8, !dbg !1078
  %cmp2 = icmp ult i64 %4, %5, !dbg !1079
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %cmp2, %land.rhs ]
  br label %lor.end, !dbg !1072

lor.end:                                          ; preds = %land.end, %entry
  %7 = phi i1 [ true, %entry ], [ %6, %land.end ]
  ret i1 %7, !dbg !1080
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @ne128(i64 %a0, i64 %a1, i64 %b0, i64 %b1) #0 !dbg !1081 {
entry:
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b0.addr = alloca i64, align 8
  %b1.addr = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !1082, metadata !DIExpression()), !dbg !1083
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !1084, metadata !DIExpression()), !dbg !1085
  store i64 %b0, i64* %b0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b0.addr, metadata !1086, metadata !DIExpression()), !dbg !1087
  store i64 %b1, i64* %b1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b1.addr, metadata !1088, metadata !DIExpression()), !dbg !1089
  %0 = load i64, i64* %a0.addr, align 8, !dbg !1090
  %1 = load i64, i64* %b0.addr, align 8, !dbg !1091
  %cmp = icmp ne i64 %0, %1, !dbg !1092
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !1093

lor.rhs:                                          ; preds = %entry
  %2 = load i64, i64* %a1.addr, align 8, !dbg !1094
  %3 = load i64, i64* %b1.addr, align 8, !dbg !1095
  %cmp1 = icmp ne i64 %2, %3, !dbg !1096
  br label %lor.end, !dbg !1093

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  ret i1 %4, !dbg !1097
}

; Function Attrs: noinline nounwind optnone uwtable
define void @float_raise(i32 %flags) #0 !dbg !1098 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1101, metadata !DIExpression()), !dbg !1102
  %0 = load i32, i32* %flags.addr, align 4, !dbg !1103
  %1 = load i32, i32* @float_exception_flags, align 4, !dbg !1104
  %or = or i32 %1, %0, !dbg !1104
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !1104
  ret void, !dbg !1105
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_is_nan(i32 %a) #0 !dbg !1106 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1110, metadata !DIExpression()), !dbg !1111
  %0 = load i32, i32* %a.addr, align 4, !dbg !1112
  %shl = shl i32 %0, 1, !dbg !1113
  %cmp = icmp ult i32 -16777216, %shl, !dbg !1114
  ret i1 %cmp, !dbg !1115
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_is_signaling_nan(i32 %a) #0 !dbg !1116 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1117, metadata !DIExpression()), !dbg !1118
  %0 = load i32, i32* %a.addr, align 4, !dbg !1119
  %shr = lshr i32 %0, 22, !dbg !1120
  %and = and i32 %shr, 511, !dbg !1121
  %cmp = icmp eq i32 %and, 510, !dbg !1122
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1123

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !1124
  %and1 = and i32 %1, 4194303, !dbg !1125
  %tobool = icmp ne i32 %and1, 0, !dbg !1123
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  ret i1 %2, !dbg !1126
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_is_nan(i64 %a) #0 !dbg !1127 {
entry:
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1131, metadata !DIExpression()), !dbg !1132
  %0 = load i64, i64* %a.addr, align 8, !dbg !1133
  %shl = shl i64 %0, 1, !dbg !1134
  %cmp = icmp ult i64 -9007199254740992, %shl, !dbg !1135
  ret i1 %cmp, !dbg !1136
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_is_signaling_nan(i64 %a) #0 !dbg !1137 {
entry:
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1138, metadata !DIExpression()), !dbg !1139
  %0 = load i64, i64* %a.addr, align 8, !dbg !1140
  %shr = lshr i64 %0, 51, !dbg !1141
  %and = and i64 %shr, 4095, !dbg !1142
  %cmp = icmp eq i64 %and, 4094, !dbg !1143
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1144

land.rhs:                                         ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !1145
  %and1 = and i64 %1, 2251799813685247, !dbg !1146
  %tobool = icmp ne i64 %and1, 0, !dbg !1144
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  ret i1 %2, !dbg !1147
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_is_nan(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !1148 {
entry:
  %a = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !1156, metadata !DIExpression()), !dbg !1157
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !1158
  %3 = load i16, i16* %high, align 8, !dbg !1158
  %conv = zext i16 %3 to i32, !dbg !1159
  %and = and i32 %conv, 32767, !dbg !1160
  %cmp = icmp eq i32 %and, 32767, !dbg !1161
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1162

land.rhs:                                         ; preds = %entry
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !1163
  %4 = load i64, i64* %low, align 8, !dbg !1163
  %shl = shl i64 %4, 1, !dbg !1164
  %tobool = icmp ne i64 %shl, 0, !dbg !1162
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  ret i1 %5, !dbg !1165
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_is_signaling_nan(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !1166 {
entry:
  %a = alloca %struct.floatx80, align 8
  %aLow = alloca i64, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !1167, metadata !DIExpression()), !dbg !1168
  call void @llvm.dbg.declare(metadata i64* %aLow, metadata !1169, metadata !DIExpression()), !dbg !1170
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !1171
  %3 = load i64, i64* %low, align 8, !dbg !1171
  %and = and i64 %3, -4611686018427387905, !dbg !1172
  store i64 %and, i64* %aLow, align 8, !dbg !1173
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !1174
  %4 = load i16, i16* %high, align 8, !dbg !1174
  %conv = zext i16 %4 to i32, !dbg !1175
  %and1 = and i32 %conv, 32767, !dbg !1176
  %cmp = icmp eq i32 %and1, 32767, !dbg !1177
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !1178

land.lhs.true:                                    ; preds = %entry
  %5 = load i64, i64* %aLow, align 8, !dbg !1179
  %shl = shl i64 %5, 1, !dbg !1180
  %tobool = icmp ne i64 %shl, 0, !dbg !1181
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !1182

land.rhs:                                         ; preds = %land.lhs.true
  %low3 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !1183
  %6 = load i64, i64* %low3, align 8, !dbg !1183
  %7 = load i64, i64* %aLow, align 8, !dbg !1184
  %cmp4 = icmp eq i64 %6, %7, !dbg !1185
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp4, %land.rhs ]
  ret i1 %8, !dbg !1186
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_is_nan(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !1187 {
entry:
  %a = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !1195, metadata !DIExpression()), !dbg !1196
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1197
  %3 = load i64, i64* %high, align 8, !dbg !1197
  %shl = shl i64 %3, 1, !dbg !1198
  %cmp = icmp ule i64 -562949953421312, %shl, !dbg !1199
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1200

land.rhs:                                         ; preds = %entry
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !1201
  %4 = load i64, i64* %low, align 8, !dbg !1201
  %tobool = icmp ne i64 %4, 0, !dbg !1202
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !1203

lor.rhs:                                          ; preds = %land.rhs
  %high1 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1204
  %5 = load i64, i64* %high1, align 8, !dbg !1204
  %and = and i64 %5, 281474976710655, !dbg !1205
  %tobool2 = icmp ne i64 %and, 0, !dbg !1203
  br label %lor.end, !dbg !1203

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %tobool2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ]
  ret i1 %7, !dbg !1206
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_is_signaling_nan(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !1207 {
entry:
  %a = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !1208, metadata !DIExpression()), !dbg !1209
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1210
  %3 = load i64, i64* %high, align 8, !dbg !1210
  %shr = lshr i64 %3, 47, !dbg !1211
  %and = and i64 %shr, 65535, !dbg !1212
  %cmp = icmp eq i64 %and, 65534, !dbg !1213
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1214

land.rhs:                                         ; preds = %entry
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !1215
  %4 = load i64, i64* %low, align 8, !dbg !1215
  %tobool = icmp ne i64 %4, 0, !dbg !1216
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !1217

lor.rhs:                                          ; preds = %land.rhs
  %high1 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1218
  %5 = load i64, i64* %high1, align 8, !dbg !1218
  %and2 = and i64 %5, 140737488355327, !dbg !1219
  %tobool3 = icmp ne i64 %and2, 0, !dbg !1217
  br label %lor.end, !dbg !1217

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %tobool3, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ]
  ret i1 %7, !dbg !1220
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat32Frac(i32 %a) #0 !dbg !1221 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1224, metadata !DIExpression()), !dbg !1225
  %0 = load i32, i32* %a.addr, align 4, !dbg !1226
  %and = and i32 %0, 8388607, !dbg !1227
  ret i32 %and, !dbg !1228
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat32Exp(i32 %a) #0 !dbg !1229 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1232, metadata !DIExpression()), !dbg !1233
  %0 = load i32, i32* %a.addr, align 4, !dbg !1234
  %shr = lshr i32 %0, 23, !dbg !1235
  %and = and i32 %shr, 255, !dbg !1236
  ret i32 %and, !dbg !1237
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat32Sign(i32 %a) #0 !dbg !1238 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1242, metadata !DIExpression()), !dbg !1243
  %0 = load i32, i32* %a.addr, align 4, !dbg !1244
  %shr = lshr i32 %0, 31, !dbg !1245
  ret i32 %shr, !dbg !1246
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @packFloat32(i32 %zSign, i32 %zExp, i32 %zSig) #0 !dbg !1247 {
entry:
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1250, metadata !DIExpression()), !dbg !1251
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1252, metadata !DIExpression()), !dbg !1253
  store i32 %zSig, i32* %zSig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSig.addr, metadata !1254, metadata !DIExpression()), !dbg !1255
  %0 = load i32, i32* %zSign.addr, align 4, !dbg !1256
  %shl = shl i32 %0, 31, !dbg !1257
  %1 = load i32, i32* %zExp.addr, align 4, !dbg !1258
  %shl1 = shl i32 %1, 23, !dbg !1259
  %add = add i32 %shl, %shl1, !dbg !1260
  %2 = load i32, i32* %zSig.addr, align 4, !dbg !1261
  %add2 = add i32 %add, %2, !dbg !1262
  ret i32 %add2, !dbg !1263
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @extractFloat64Frac(i64 %a) #0 !dbg !1264 {
entry:
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1267, metadata !DIExpression()), !dbg !1268
  %0 = load i64, i64* %a.addr, align 8, !dbg !1269
  %and = and i64 %0, 4503599627370495, !dbg !1270
  ret i64 %and, !dbg !1271
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat64Exp(i64 %a) #0 !dbg !1272 {
entry:
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1275, metadata !DIExpression()), !dbg !1276
  %0 = load i64, i64* %a.addr, align 8, !dbg !1277
  %shr = lshr i64 %0, 52, !dbg !1278
  %and = and i64 %shr, 2047, !dbg !1279
  %conv = trunc i64 %and to i32, !dbg !1280
  ret i32 %conv, !dbg !1281
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat64Sign(i64 %a) #0 !dbg !1282 {
entry:
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1285, metadata !DIExpression()), !dbg !1286
  %0 = load i64, i64* %a.addr, align 8, !dbg !1287
  %shr = lshr i64 %0, 63, !dbg !1288
  %conv = trunc i64 %shr to i32, !dbg !1287
  ret i32 %conv, !dbg !1289
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @packFloat64(i32 %zSign, i32 %zExp, i64 %zSig) #0 !dbg !1290 {
entry:
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i64, align 8
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1293, metadata !DIExpression()), !dbg !1294
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1295, metadata !DIExpression()), !dbg !1296
  store i64 %zSig, i64* %zSig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig.addr, metadata !1297, metadata !DIExpression()), !dbg !1298
  %0 = load i32, i32* %zSign.addr, align 4, !dbg !1299
  %conv = sext i32 %0 to i64, !dbg !1300
  %shl = shl i64 %conv, 63, !dbg !1301
  %1 = load i32, i32* %zExp.addr, align 4, !dbg !1302
  %conv1 = sext i32 %1 to i64, !dbg !1303
  %shl2 = shl i64 %conv1, 52, !dbg !1304
  %add = add i64 %shl, %shl2, !dbg !1305
  %2 = load i64, i64* %zSig.addr, align 8, !dbg !1306
  %add3 = add i64 %add, %2, !dbg !1307
  ret i64 %add3, !dbg !1308
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @extractFloatx80Frac(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !1309 {
entry:
  %a = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !1312, metadata !DIExpression()), !dbg !1313
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !1314
  %3 = load i64, i64* %low, align 8, !dbg !1314
  ret i64 %3, !dbg !1315
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloatx80Exp(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !1316 {
entry:
  %a = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !1320, metadata !DIExpression()), !dbg !1321
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !1322
  %3 = load i16, i16* %high, align 8, !dbg !1322
  %conv = zext i16 %3 to i32, !dbg !1323
  %and = and i32 %conv, 32767, !dbg !1324
  ret i32 %and, !dbg !1325
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloatx80Sign(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !1326 {
entry:
  %a = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !1329, metadata !DIExpression()), !dbg !1330
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !1331
  %3 = load i16, i16* %high, align 8, !dbg !1331
  %conv = zext i16 %3 to i32, !dbg !1332
  %shr = ashr i32 %conv, 15, !dbg !1333
  ret i32 %shr, !dbg !1334
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @packFloatx80(i32 %zSign, i32 %zExp, i64 %zSig) #0 !dbg !1335 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i64, align 8
  %z = alloca %struct.floatx80, align 8
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1338, metadata !DIExpression()), !dbg !1339
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1340, metadata !DIExpression()), !dbg !1341
  store i64 %zSig, i64* %zSig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig.addr, metadata !1342, metadata !DIExpression()), !dbg !1343
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !1344, metadata !DIExpression()), !dbg !1345
  %0 = load i64, i64* %zSig.addr, align 8, !dbg !1346
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !1347
  store i64 %0, i64* %low, align 8, !dbg !1348
  %1 = load i32, i32* %zSign.addr, align 4, !dbg !1349
  %conv = trunc i32 %1 to i16, !dbg !1350
  %conv1 = zext i16 %conv to i32, !dbg !1351
  %shl = shl i32 %conv1, 15, !dbg !1352
  %2 = load i32, i32* %zExp.addr, align 4, !dbg !1353
  %add = add nsw i32 %shl, %2, !dbg !1354
  %conv2 = trunc i32 %add to i16, !dbg !1355
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !1356
  store i16 %conv2, i16* %high, align 8, !dbg !1357
  %3 = bitcast %struct.floatx80* %retval to i8*, !dbg !1358
  %4 = bitcast %struct.floatx80* %z to i8*, !dbg !1358
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 16, i32 8, i1 false), !dbg !1358
  %5 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1359
  %6 = load { i16, i64 }, { i16, i64 }* %5, align 8, !dbg !1359
  ret { i16, i64 } %6, !dbg !1359
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind optnone uwtable
define i64 @extractFloat128Frac1(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !1360 {
entry:
  %a = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !1363, metadata !DIExpression()), !dbg !1364
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !1365
  %3 = load i64, i64* %low, align 8, !dbg !1365
  ret i64 %3, !dbg !1366
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @extractFloat128Frac0(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !1367 {
entry:
  %a = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !1368, metadata !DIExpression()), !dbg !1369
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1370
  %3 = load i64, i64* %high, align 8, !dbg !1370
  %and = and i64 %3, 281474976710655, !dbg !1371
  ret i64 %and, !dbg !1372
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat128Exp(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !1373 {
entry:
  %a = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !1376, metadata !DIExpression()), !dbg !1377
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1378
  %3 = load i64, i64* %high, align 8, !dbg !1378
  %shr = lshr i64 %3, 48, !dbg !1379
  %and = and i64 %shr, 32767, !dbg !1380
  %conv = trunc i64 %and to i32, !dbg !1381
  ret i32 %conv, !dbg !1382
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @extractFloat128Sign(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !1383 {
entry:
  %a = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !1386, metadata !DIExpression()), !dbg !1387
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !1388
  %3 = load i64, i64* %high, align 8, !dbg !1388
  %shr = lshr i64 %3, 63, !dbg !1389
  %conv = trunc i64 %shr to i32, !dbg !1390
  ret i32 %conv, !dbg !1391
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @packFloat128(i32 %zSign, i32 %zExp, i64 %zSig0, i64 %zSig1) #0 !dbg !1392 {
entry:
  %retval = alloca %struct.float128, align 8
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig0.addr = alloca i64, align 8
  %zSig1.addr = alloca i64, align 8
  %z = alloca %struct.float128, align 8
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1395, metadata !DIExpression()), !dbg !1396
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1397, metadata !DIExpression()), !dbg !1398
  store i64 %zSig0, i64* %zSig0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig0.addr, metadata !1399, metadata !DIExpression()), !dbg !1400
  store i64 %zSig1, i64* %zSig1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig1.addr, metadata !1401, metadata !DIExpression()), !dbg !1402
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !1403, metadata !DIExpression()), !dbg !1404
  %0 = load i64, i64* %zSig1.addr, align 8, !dbg !1405
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !1406
  store i64 %0, i64* %low, align 8, !dbg !1407
  %1 = load i32, i32* %zSign.addr, align 4, !dbg !1408
  %conv = sext i32 %1 to i64, !dbg !1409
  %shl = shl i64 %conv, 63, !dbg !1410
  %2 = load i32, i32* %zExp.addr, align 4, !dbg !1411
  %conv1 = sext i32 %2 to i64, !dbg !1412
  %shl2 = shl i64 %conv1, 48, !dbg !1413
  %add = add i64 %shl, %shl2, !dbg !1414
  %3 = load i64, i64* %zSig0.addr, align 8, !dbg !1415
  %add3 = add i64 %add, %3, !dbg !1416
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !1417
  store i64 %add3, i64* %high, align 8, !dbg !1418
  %4 = bitcast %struct.float128* %retval to i8*, !dbg !1419
  %5 = bitcast %struct.float128* %z to i8*, !dbg !1419
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 16, i32 8, i1 false), !dbg !1419
  %6 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !1420
  %7 = load { i64, i64 }, { i64, i64 }* %6, align 8, !dbg !1420
  ret { i64, i64 } %7, !dbg !1420
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @int32_to_float32(i32 %a) #0 !dbg !1421 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %zSign = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1424, metadata !DIExpression()), !dbg !1425
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1426, metadata !DIExpression()), !dbg !1427
  %0 = load i32, i32* %a.addr, align 4, !dbg !1428
  %cmp = icmp eq i32 %0, 0, !dbg !1430
  br i1 %cmp, label %if.then, label %if.end, !dbg !1431

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1432
  br label %return, !dbg !1432

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !1433
  %cmp1 = icmp eq i32 %1, -2147483648, !dbg !1435
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !1436

if.then2:                                         ; preds = %if.end
  %call = call i32 @packFloat32(i32 1, i32 158, i32 0), !dbg !1437
  store i32 %call, i32* %retval, align 4, !dbg !1438
  br label %return, !dbg !1438

if.end3:                                          ; preds = %if.end
  %2 = load i32, i32* %a.addr, align 4, !dbg !1439
  %cmp4 = icmp slt i32 %2, 0, !dbg !1440
  %conv = zext i1 %cmp4 to i32, !dbg !1440
  store i32 %conv, i32* %zSign, align 4, !dbg !1441
  %3 = load i32, i32* %zSign, align 4, !dbg !1442
  %4 = load i32, i32* %zSign, align 4, !dbg !1443
  %tobool = icmp ne i32 %4, 0, !dbg !1443
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1443

cond.true:                                        ; preds = %if.end3
  %5 = load i32, i32* %a.addr, align 4, !dbg !1444
  %sub = sub nsw i32 0, %5, !dbg !1445
  br label %cond.end, !dbg !1443

cond.false:                                       ; preds = %if.end3
  %6 = load i32, i32* %a.addr, align 4, !dbg !1446
  br label %cond.end, !dbg !1443

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %6, %cond.false ], !dbg !1443
  %call5 = call i32 @normalizeRoundAndPackFloat32(i32 %3, i32 156, i32 %cond), !dbg !1447
  store i32 %call5, i32* %retval, align 4, !dbg !1448
  br label %return, !dbg !1448

return:                                           ; preds = %cond.end, %if.then2, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !1449
  ret i32 %7, !dbg !1449
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @normalizeRoundAndPackFloat32(i32 %zSign, i32 %zExp, i32 %zSig) #0 !dbg !1450 {
entry:
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1451, metadata !DIExpression()), !dbg !1452
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1453, metadata !DIExpression()), !dbg !1454
  store i32 %zSig, i32* %zSig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSig.addr, metadata !1455, metadata !DIExpression()), !dbg !1456
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1457, metadata !DIExpression()), !dbg !1458
  %0 = load i32, i32* %zSig.addr, align 4, !dbg !1459
  %call = call i32 @countLeadingZeros32(i32 %0), !dbg !1460
  %sub = sub nsw i32 %call, 1, !dbg !1461
  store i32 %sub, i32* %shiftCount, align 4, !dbg !1462
  %1 = load i32, i32* %zSign.addr, align 4, !dbg !1463
  %2 = load i32, i32* %zExp.addr, align 4, !dbg !1464
  %3 = load i32, i32* %shiftCount, align 4, !dbg !1465
  %sub1 = sub nsw i32 %2, %3, !dbg !1466
  %4 = load i32, i32* %zSig.addr, align 4, !dbg !1467
  %5 = load i32, i32* %shiftCount, align 4, !dbg !1468
  %shl = shl i32 %4, %5, !dbg !1469
  %call2 = call i32 @roundAndPackFloat32(i32 %1, i32 %sub1, i32 %shl), !dbg !1470
  ret i32 %call2, !dbg !1471
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @int32_to_float64(i32 %a) #0 !dbg !1472 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i32, align 4
  %zSign = alloca i32, align 4
  %absA = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %zSig = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1475, metadata !DIExpression()), !dbg !1476
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1477, metadata !DIExpression()), !dbg !1478
  call void @llvm.dbg.declare(metadata i32* %absA, metadata !1479, metadata !DIExpression()), !dbg !1481
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1482, metadata !DIExpression()), !dbg !1483
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !1484, metadata !DIExpression()), !dbg !1485
  %0 = load i32, i32* %a.addr, align 4, !dbg !1486
  %cmp = icmp eq i32 %0, 0, !dbg !1488
  br i1 %cmp, label %if.then, label %if.end, !dbg !1489

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !1490
  br label %return, !dbg !1490

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !1491
  %cmp1 = icmp slt i32 %1, 0, !dbg !1492
  %conv = zext i1 %cmp1 to i32, !dbg !1492
  store i32 %conv, i32* %zSign, align 4, !dbg !1493
  %2 = load i32, i32* %zSign, align 4, !dbg !1494
  %tobool = icmp ne i32 %2, 0, !dbg !1494
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1494

cond.true:                                        ; preds = %if.end
  %3 = load i32, i32* %a.addr, align 4, !dbg !1495
  %sub = sub nsw i32 0, %3, !dbg !1496
  br label %cond.end, !dbg !1494

cond.false:                                       ; preds = %if.end
  %4 = load i32, i32* %a.addr, align 4, !dbg !1497
  br label %cond.end, !dbg !1494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %4, %cond.false ], !dbg !1494
  store i32 %cond, i32* %absA, align 4, !dbg !1498
  %5 = load i32, i32* %absA, align 4, !dbg !1499
  %call = call i32 @countLeadingZeros32(i32 %5), !dbg !1500
  %add = add nsw i32 %call, 21, !dbg !1501
  store i32 %add, i32* %shiftCount, align 4, !dbg !1502
  %6 = load i32, i32* %absA, align 4, !dbg !1503
  %conv2 = zext i32 %6 to i64, !dbg !1503
  store i64 %conv2, i64* %zSig, align 8, !dbg !1504
  %7 = load i32, i32* %zSign, align 4, !dbg !1505
  %8 = load i32, i32* %shiftCount, align 4, !dbg !1506
  %sub3 = sub nsw i32 1074, %8, !dbg !1507
  %9 = load i64, i64* %zSig, align 8, !dbg !1508
  %10 = load i32, i32* %shiftCount, align 4, !dbg !1509
  %sh_prom = zext i32 %10 to i64, !dbg !1510
  %shl = shl i64 %9, %sh_prom, !dbg !1510
  %call4 = call i64 @packFloat64(i32 %7, i32 %sub3, i64 %shl), !dbg !1511
  store i64 %call4, i64* %retval, align 8, !dbg !1512
  br label %return, !dbg !1512

return:                                           ; preds = %cond.end, %if.then
  %11 = load i64, i64* %retval, align 8, !dbg !1513
  ret i64 %11, !dbg !1513
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @countLeadingZeros32(i32 %a) #0 !dbg !46 {
entry:
  %a.addr = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1514, metadata !DIExpression()), !dbg !1515
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1516, metadata !DIExpression()), !dbg !1517
  store i32 0, i32* %shiftCount, align 4, !dbg !1518
  %0 = load i32, i32* %a.addr, align 4, !dbg !1519
  %cmp = icmp ult i32 %0, 65536, !dbg !1521
  br i1 %cmp, label %if.then, label %if.end, !dbg !1522

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %shiftCount, align 4, !dbg !1523
  %add = add nsw i32 %1, 16, !dbg !1523
  store i32 %add, i32* %shiftCount, align 4, !dbg !1523
  %2 = load i32, i32* %a.addr, align 4, !dbg !1525
  %shl = shl i32 %2, 16, !dbg !1525
  store i32 %shl, i32* %a.addr, align 4, !dbg !1525
  br label %if.end, !dbg !1526

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %a.addr, align 4, !dbg !1527
  %cmp1 = icmp ult i32 %3, 16777216, !dbg !1529
  br i1 %cmp1, label %if.then2, label %if.end5, !dbg !1530

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %shiftCount, align 4, !dbg !1531
  %add3 = add nsw i32 %4, 8, !dbg !1531
  store i32 %add3, i32* %shiftCount, align 4, !dbg !1531
  %5 = load i32, i32* %a.addr, align 4, !dbg !1533
  %shl4 = shl i32 %5, 8, !dbg !1533
  store i32 %shl4, i32* %a.addr, align 4, !dbg !1533
  br label %if.end5, !dbg !1534

if.end5:                                          ; preds = %if.then2, %if.end
  %6 = load i32, i32* %a.addr, align 4, !dbg !1535
  %shr = lshr i32 %6, 24, !dbg !1536
  %idxprom = zext i32 %shr to i64, !dbg !1537
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i64 0, i64 %idxprom, !dbg !1537
  %7 = load i32, i32* %arrayidx, align 4, !dbg !1537
  %8 = load i32, i32* %shiftCount, align 4, !dbg !1538
  %add6 = add nsw i32 %8, %7, !dbg !1538
  store i32 %add6, i32* %shiftCount, align 4, !dbg !1538
  %9 = load i32, i32* %shiftCount, align 4, !dbg !1539
  ret i32 %9, !dbg !1540
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @int32_to_floatx80(i32 %a) #0 !dbg !1541 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a.addr = alloca i32, align 4
  %zSign = alloca i32, align 4
  %absA = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %zSig = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1544, metadata !DIExpression()), !dbg !1545
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1546, metadata !DIExpression()), !dbg !1547
  call void @llvm.dbg.declare(metadata i32* %absA, metadata !1548, metadata !DIExpression()), !dbg !1549
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1550, metadata !DIExpression()), !dbg !1551
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !1552, metadata !DIExpression()), !dbg !1553
  %0 = load i32, i32* %a.addr, align 4, !dbg !1554
  %cmp = icmp eq i32 %0, 0, !dbg !1556
  br i1 %cmp, label %if.then, label %if.end, !dbg !1557

if.then:                                          ; preds = %entry
  %call = call { i16, i64 } @packFloatx80(i32 0, i32 0, i64 0), !dbg !1558
  %1 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1558
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %1, i32 0, i32 0, !dbg !1558
  %3 = extractvalue { i16, i64 } %call, 0, !dbg !1558
  store i16 %3, i16* %2, align 8, !dbg !1558
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %1, i32 0, i32 1, !dbg !1558
  %5 = extractvalue { i16, i64 } %call, 1, !dbg !1558
  store i64 %5, i64* %4, align 8, !dbg !1558
  br label %return, !dbg !1559

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %a.addr, align 4, !dbg !1560
  %cmp1 = icmp slt i32 %6, 0, !dbg !1561
  %conv = zext i1 %cmp1 to i32, !dbg !1561
  store i32 %conv, i32* %zSign, align 4, !dbg !1562
  %7 = load i32, i32* %zSign, align 4, !dbg !1563
  %tobool = icmp ne i32 %7, 0, !dbg !1563
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1563

cond.true:                                        ; preds = %if.end
  %8 = load i32, i32* %a.addr, align 4, !dbg !1564
  %sub = sub nsw i32 0, %8, !dbg !1565
  br label %cond.end, !dbg !1563

cond.false:                                       ; preds = %if.end
  %9 = load i32, i32* %a.addr, align 4, !dbg !1566
  br label %cond.end, !dbg !1563

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %9, %cond.false ], !dbg !1563
  store i32 %cond, i32* %absA, align 4, !dbg !1567
  %10 = load i32, i32* %absA, align 4, !dbg !1568
  %call2 = call i32 @countLeadingZeros32(i32 %10), !dbg !1569
  %add = add nsw i32 %call2, 32, !dbg !1570
  store i32 %add, i32* %shiftCount, align 4, !dbg !1571
  %11 = load i32, i32* %absA, align 4, !dbg !1572
  %conv3 = zext i32 %11 to i64, !dbg !1572
  store i64 %conv3, i64* %zSig, align 8, !dbg !1573
  %12 = load i32, i32* %zSign, align 4, !dbg !1574
  %13 = load i32, i32* %shiftCount, align 4, !dbg !1575
  %sub4 = sub nsw i32 16446, %13, !dbg !1576
  %14 = load i64, i64* %zSig, align 8, !dbg !1577
  %15 = load i32, i32* %shiftCount, align 4, !dbg !1578
  %sh_prom = zext i32 %15 to i64, !dbg !1579
  %shl = shl i64 %14, %sh_prom, !dbg !1579
  %call5 = call { i16, i64 } @packFloatx80(i32 %12, i32 %sub4, i64 %shl), !dbg !1580
  %16 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1580
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !1580
  %18 = extractvalue { i16, i64 } %call5, 0, !dbg !1580
  store i16 %18, i16* %17, align 8, !dbg !1580
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !1580
  %20 = extractvalue { i16, i64 } %call5, 1, !dbg !1580
  store i64 %20, i64* %19, align 8, !dbg !1580
  br label %return, !dbg !1581

return:                                           ; preds = %cond.end, %if.then
  %21 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1582
  %22 = load { i16, i64 }, { i16, i64 }* %21, align 8, !dbg !1582
  ret { i16, i64 } %22, !dbg !1582
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @int32_to_float128(i32 %a) #0 !dbg !1583 {
entry:
  %retval = alloca %struct.float128, align 8
  %a.addr = alloca i32, align 4
  %zSign = alloca i32, align 4
  %absA = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %zSig0 = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1586, metadata !DIExpression()), !dbg !1587
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1588, metadata !DIExpression()), !dbg !1589
  call void @llvm.dbg.declare(metadata i32* %absA, metadata !1590, metadata !DIExpression()), !dbg !1591
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1592, metadata !DIExpression()), !dbg !1593
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !1594, metadata !DIExpression()), !dbg !1595
  %0 = load i32, i32* %a.addr, align 4, !dbg !1596
  %cmp = icmp eq i32 %0, 0, !dbg !1598
  br i1 %cmp, label %if.then, label %if.end, !dbg !1599

if.then:                                          ; preds = %entry
  %call = call { i64, i64 } @packFloat128(i32 0, i32 0, i64 0, i64 0), !dbg !1600
  %1 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !1600
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !1600
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !1600
  store i64 %3, i64* %2, align 8, !dbg !1600
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !1600
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !1600
  store i64 %5, i64* %4, align 8, !dbg !1600
  br label %return, !dbg !1601

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %a.addr, align 4, !dbg !1602
  %cmp1 = icmp slt i32 %6, 0, !dbg !1603
  %conv = zext i1 %cmp1 to i32, !dbg !1603
  store i32 %conv, i32* %zSign, align 4, !dbg !1604
  %7 = load i32, i32* %zSign, align 4, !dbg !1605
  %tobool = icmp ne i32 %7, 0, !dbg !1605
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1605

cond.true:                                        ; preds = %if.end
  %8 = load i32, i32* %a.addr, align 4, !dbg !1606
  %sub = sub nsw i32 0, %8, !dbg !1607
  br label %cond.end, !dbg !1605

cond.false:                                       ; preds = %if.end
  %9 = load i32, i32* %a.addr, align 4, !dbg !1608
  br label %cond.end, !dbg !1605

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %9, %cond.false ], !dbg !1605
  store i32 %cond, i32* %absA, align 4, !dbg !1609
  %10 = load i32, i32* %absA, align 4, !dbg !1610
  %call2 = call i32 @countLeadingZeros32(i32 %10), !dbg !1611
  %add = add nsw i32 %call2, 17, !dbg !1612
  store i32 %add, i32* %shiftCount, align 4, !dbg !1613
  %11 = load i32, i32* %absA, align 4, !dbg !1614
  %conv3 = zext i32 %11 to i64, !dbg !1614
  store i64 %conv3, i64* %zSig0, align 8, !dbg !1615
  %12 = load i32, i32* %zSign, align 4, !dbg !1616
  %13 = load i32, i32* %shiftCount, align 4, !dbg !1617
  %sub4 = sub nsw i32 16430, %13, !dbg !1618
  %14 = load i64, i64* %zSig0, align 8, !dbg !1619
  %15 = load i32, i32* %shiftCount, align 4, !dbg !1620
  %sh_prom = zext i32 %15 to i64, !dbg !1621
  %shl = shl i64 %14, %sh_prom, !dbg !1621
  %call5 = call { i64, i64 } @packFloat128(i32 %12, i32 %sub4, i64 %shl, i64 0), !dbg !1622
  %16 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !1622
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !1622
  %18 = extractvalue { i64, i64 } %call5, 0, !dbg !1622
  store i64 %18, i64* %17, align 8, !dbg !1622
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !1622
  %20 = extractvalue { i64, i64 } %call5, 1, !dbg !1622
  store i64 %20, i64* %19, align 8, !dbg !1622
  br label %return, !dbg !1623

return:                                           ; preds = %cond.end, %if.then
  %21 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !1624
  %22 = load { i64, i64 }, { i64, i64 }* %21, align 8, !dbg !1624
  ret { i64, i64 } %22, !dbg !1624
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @int64_to_float32(i64 %a) #0 !dbg !1625 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %zSign = alloca i32, align 4
  %absA = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  %zSig = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1629, metadata !DIExpression()), !dbg !1630
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1631, metadata !DIExpression()), !dbg !1632
  call void @llvm.dbg.declare(metadata i64* %absA, metadata !1633, metadata !DIExpression()), !dbg !1635
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1636, metadata !DIExpression()), !dbg !1637
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !1638, metadata !DIExpression()), !dbg !1639
  %0 = load i64, i64* %a.addr, align 8, !dbg !1640
  %cmp = icmp eq i64 %0, 0, !dbg !1642
  br i1 %cmp, label %if.then, label %if.end, !dbg !1643

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1644
  br label %return, !dbg !1644

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !1645
  %cmp1 = icmp slt i64 %1, 0, !dbg !1646
  %conv = zext i1 %cmp1 to i32, !dbg !1646
  store i32 %conv, i32* %zSign, align 4, !dbg !1647
  %2 = load i32, i32* %zSign, align 4, !dbg !1648
  %tobool = icmp ne i32 %2, 0, !dbg !1648
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1648

cond.true:                                        ; preds = %if.end
  %3 = load i64, i64* %a.addr, align 8, !dbg !1649
  %sub = sub nsw i64 0, %3, !dbg !1650
  br label %cond.end, !dbg !1648

cond.false:                                       ; preds = %if.end
  %4 = load i64, i64* %a.addr, align 8, !dbg !1651
  br label %cond.end, !dbg !1648

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %4, %cond.false ], !dbg !1648
  store i64 %cond, i64* %absA, align 8, !dbg !1652
  %5 = load i64, i64* %absA, align 8, !dbg !1653
  %call = call i32 @countLeadingZeros64(i64 %5), !dbg !1654
  %sub2 = sub nsw i32 %call, 40, !dbg !1655
  store i32 %sub2, i32* %shiftCount, align 4, !dbg !1656
  %6 = load i32, i32* %shiftCount, align 4, !dbg !1657
  %cmp3 = icmp sle i32 0, %6, !dbg !1659
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !1660

if.then5:                                         ; preds = %cond.end
  %7 = load i32, i32* %zSign, align 4, !dbg !1661
  %8 = load i32, i32* %shiftCount, align 4, !dbg !1663
  %sub6 = sub nsw i32 149, %8, !dbg !1664
  %9 = load i64, i64* %absA, align 8, !dbg !1665
  %10 = load i32, i32* %shiftCount, align 4, !dbg !1666
  %sh_prom = zext i32 %10 to i64, !dbg !1667
  %shl = shl i64 %9, %sh_prom, !dbg !1667
  %conv7 = trunc i64 %shl to i32, !dbg !1665
  %call8 = call i32 @packFloat32(i32 %7, i32 %sub6, i32 %conv7), !dbg !1668
  store i32 %call8, i32* %retval, align 4, !dbg !1669
  br label %return, !dbg !1669

if.else:                                          ; preds = %cond.end
  %11 = load i32, i32* %shiftCount, align 4, !dbg !1670
  %add = add nsw i32 %11, 7, !dbg !1670
  store i32 %add, i32* %shiftCount, align 4, !dbg !1670
  %12 = load i32, i32* %shiftCount, align 4, !dbg !1672
  %cmp9 = icmp slt i32 %12, 0, !dbg !1674
  br i1 %cmp9, label %if.then11, label %if.else13, !dbg !1675

if.then11:                                        ; preds = %if.else
  %13 = load i64, i64* %absA, align 8, !dbg !1676
  %14 = load i32, i32* %shiftCount, align 4, !dbg !1678
  %sub12 = sub nsw i32 0, %14, !dbg !1679
  call void @shift64RightJamming(i64 %13, i32 %sub12, i64* %absA), !dbg !1680
  br label %if.end16, !dbg !1681

if.else13:                                        ; preds = %if.else
  %15 = load i32, i32* %shiftCount, align 4, !dbg !1682
  %16 = load i64, i64* %absA, align 8, !dbg !1684
  %sh_prom14 = zext i32 %15 to i64, !dbg !1684
  %shl15 = shl i64 %16, %sh_prom14, !dbg !1684
  store i64 %shl15, i64* %absA, align 8, !dbg !1684
  br label %if.end16

if.end16:                                         ; preds = %if.else13, %if.then11
  %17 = load i32, i32* %zSign, align 4, !dbg !1685
  %18 = load i32, i32* %shiftCount, align 4, !dbg !1686
  %sub17 = sub nsw i32 156, %18, !dbg !1687
  %19 = load i64, i64* %absA, align 8, !dbg !1688
  %conv18 = trunc i64 %19 to i32, !dbg !1688
  %call19 = call i32 @roundAndPackFloat32(i32 %17, i32 %sub17, i32 %conv18), !dbg !1689
  store i32 %call19, i32* %retval, align 4, !dbg !1690
  br label %return, !dbg !1690

return:                                           ; preds = %if.end16, %if.then5, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !1691
  ret i32 %20, !dbg !1691
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @countLeadingZeros64(i64 %a) #0 !dbg !1692 {
entry:
  %a.addr = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1695, metadata !DIExpression()), !dbg !1696
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1697, metadata !DIExpression()), !dbg !1698
  store i32 0, i32* %shiftCount, align 4, !dbg !1699
  %0 = load i64, i64* %a.addr, align 8, !dbg !1700
  %cmp = icmp ult i64 %0, 4294967296, !dbg !1702
  br i1 %cmp, label %if.then, label %if.else, !dbg !1703

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %shiftCount, align 4, !dbg !1704
  %add = add nsw i32 %1, 32, !dbg !1704
  store i32 %add, i32* %shiftCount, align 4, !dbg !1704
  br label %if.end, !dbg !1706

if.else:                                          ; preds = %entry
  %2 = load i64, i64* %a.addr, align 8, !dbg !1707
  %shr = lshr i64 %2, 32, !dbg !1707
  store i64 %shr, i64* %a.addr, align 8, !dbg !1707
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i64, i64* %a.addr, align 8, !dbg !1709
  %conv = trunc i64 %3 to i32, !dbg !1709
  %call = call i32 @countLeadingZeros32(i32 %conv), !dbg !1710
  %4 = load i32, i32* %shiftCount, align 4, !dbg !1711
  %add1 = add nsw i32 %4, %call, !dbg !1711
  store i32 %add1, i32* %shiftCount, align 4, !dbg !1711
  %5 = load i32, i32* %shiftCount, align 4, !dbg !1712
  ret i32 %5, !dbg !1713
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @roundAndPackFloat32(i32 %zSign, i32 %zExp, i32 %zSig) #0 !dbg !1714 {
entry:
  %retval = alloca i32, align 4
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i32, align 4
  %roundingMode = alloca i32, align 4
  %roundNearestEven = alloca i32, align 4
  %roundIncrement = alloca i32, align 4
  %roundBits = alloca i32, align 4
  %isTiny = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1715, metadata !DIExpression()), !dbg !1716
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1717, metadata !DIExpression()), !dbg !1718
  store i32 %zSig, i32* %zSig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSig.addr, metadata !1719, metadata !DIExpression()), !dbg !1720
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !1721, metadata !DIExpression()), !dbg !1722
  call void @llvm.dbg.declare(metadata i32* %roundNearestEven, metadata !1723, metadata !DIExpression()), !dbg !1724
  call void @llvm.dbg.declare(metadata i32* %roundIncrement, metadata !1725, metadata !DIExpression()), !dbg !1726
  call void @llvm.dbg.declare(metadata i32* %roundBits, metadata !1727, metadata !DIExpression()), !dbg !1728
  call void @llvm.dbg.declare(metadata i32* %isTiny, metadata !1729, metadata !DIExpression()), !dbg !1730
  %0 = load i32, i32* @float_rounding_mode, align 4, !dbg !1731
  store i32 %0, i32* %roundingMode, align 4, !dbg !1732
  %1 = load i32, i32* %roundingMode, align 4, !dbg !1733
  %cmp = icmp eq i32 %1, 0, !dbg !1734
  %conv = zext i1 %cmp to i32, !dbg !1734
  store i32 %conv, i32* %roundNearestEven, align 4, !dbg !1735
  store i32 64, i32* %roundIncrement, align 4, !dbg !1736
  %2 = load i32, i32* %roundNearestEven, align 4, !dbg !1737
  %tobool = icmp ne i32 %2, 0, !dbg !1737
  br i1 %tobool, label %if.end16, label %if.then, !dbg !1739

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %roundingMode, align 4, !dbg !1740
  %cmp1 = icmp eq i32 %3, 1, !dbg !1743
  br i1 %cmp1, label %if.then3, label %if.else, !dbg !1744

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %roundIncrement, align 4, !dbg !1745
  br label %if.end15, !dbg !1747

if.else:                                          ; preds = %if.then
  store i32 127, i32* %roundIncrement, align 4, !dbg !1748
  %4 = load i32, i32* %zSign.addr, align 4, !dbg !1750
  %tobool4 = icmp ne i32 %4, 0, !dbg !1750
  br i1 %tobool4, label %if.then5, label %if.else9, !dbg !1752

if.then5:                                         ; preds = %if.else
  %5 = load i32, i32* %roundingMode, align 4, !dbg !1753
  %cmp6 = icmp eq i32 %5, 2, !dbg !1756
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !1757

if.then8:                                         ; preds = %if.then5
  store i32 0, i32* %roundIncrement, align 4, !dbg !1758
  br label %if.end, !dbg !1759

if.end:                                           ; preds = %if.then8, %if.then5
  br label %if.end14, !dbg !1760

if.else9:                                         ; preds = %if.else
  %6 = load i32, i32* %roundingMode, align 4, !dbg !1761
  %cmp10 = icmp eq i32 %6, 3, !dbg !1764
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !1765

if.then12:                                        ; preds = %if.else9
  store i32 0, i32* %roundIncrement, align 4, !dbg !1766
  br label %if.end13, !dbg !1767

if.end13:                                         ; preds = %if.then12, %if.else9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then3
  br label %if.end16, !dbg !1768

if.end16:                                         ; preds = %if.end15, %entry
  %7 = load i32, i32* %zSig.addr, align 4, !dbg !1769
  %and = and i32 %7, 127, !dbg !1770
  store i32 %and, i32* %roundBits, align 4, !dbg !1771
  %8 = load i32, i32* %zExp.addr, align 4, !dbg !1772
  %conv17 = trunc i32 %8 to i16, !dbg !1774
  %conv18 = zext i16 %conv17 to i32, !dbg !1774
  %cmp19 = icmp sle i32 253, %conv18, !dbg !1775
  br i1 %cmp19, label %if.then21, label %if.end51, !dbg !1776

if.then21:                                        ; preds = %if.end16
  %9 = load i32, i32* %zExp.addr, align 4, !dbg !1777
  %cmp22 = icmp slt i32 253, %9, !dbg !1780
  br i1 %cmp22, label %if.then28, label %lor.lhs.false, !dbg !1781

lor.lhs.false:                                    ; preds = %if.then21
  %10 = load i32, i32* %zExp.addr, align 4, !dbg !1782
  %cmp24 = icmp eq i32 %10, 253, !dbg !1783
  br i1 %cmp24, label %land.lhs.true, label %if.end31, !dbg !1784

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load i32, i32* %zSig.addr, align 4, !dbg !1785
  %12 = load i32, i32* %roundIncrement, align 4, !dbg !1786
  %add = add i32 %11, %12, !dbg !1787
  %cmp26 = icmp slt i32 %add, 0, !dbg !1788
  br i1 %cmp26, label %if.then28, label %if.end31, !dbg !1789

if.then28:                                        ; preds = %land.lhs.true, %if.then21
  call void @float_raise(i32 9), !dbg !1790
  %13 = load i32, i32* %zSign.addr, align 4, !dbg !1792
  %call = call i32 @packFloat32(i32 %13, i32 255, i32 0), !dbg !1793
  %14 = load i32, i32* %roundIncrement, align 4, !dbg !1794
  %cmp29 = icmp eq i32 %14, 0, !dbg !1795
  %conv30 = zext i1 %cmp29 to i32, !dbg !1795
  %sub = sub i32 %call, %conv30, !dbg !1796
  store i32 %sub, i32* %retval, align 4, !dbg !1797
  br label %return, !dbg !1797

if.end31:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %15 = load i32, i32* %zExp.addr, align 4, !dbg !1798
  %cmp32 = icmp slt i32 %15, 0, !dbg !1800
  br i1 %cmp32, label %if.then34, label %if.end50, !dbg !1801

if.then34:                                        ; preds = %if.end31
  %16 = load i32, i32* @float_detect_tininess, align 4, !dbg !1802
  %cmp35 = icmp eq i32 %16, 1, !dbg !1804
  br i1 %cmp35, label %lor.end, label %lor.lhs.false37, !dbg !1805

lor.lhs.false37:                                  ; preds = %if.then34
  %17 = load i32, i32* %zExp.addr, align 4, !dbg !1806
  %cmp38 = icmp slt i32 %17, -1, !dbg !1807
  br i1 %cmp38, label %lor.end, label %lor.rhs, !dbg !1808

lor.rhs:                                          ; preds = %lor.lhs.false37
  %18 = load i32, i32* %zSig.addr, align 4, !dbg !1809
  %19 = load i32, i32* %roundIncrement, align 4, !dbg !1810
  %add40 = add i32 %18, %19, !dbg !1811
  %cmp41 = icmp ult i32 %add40, -2147483648, !dbg !1812
  br label %lor.end, !dbg !1808

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false37, %if.then34
  %20 = phi i1 [ true, %lor.lhs.false37 ], [ true, %if.then34 ], [ %cmp41, %lor.rhs ]
  %lor.ext = zext i1 %20 to i32, !dbg !1808
  store i32 %lor.ext, i32* %isTiny, align 4, !dbg !1813
  %21 = load i32, i32* %zSig.addr, align 4, !dbg !1814
  %22 = load i32, i32* %zExp.addr, align 4, !dbg !1815
  %sub43 = sub nsw i32 0, %22, !dbg !1816
  call void @shift32RightJamming(i32 %21, i32 %sub43, i32* %zSig.addr), !dbg !1817
  store i32 0, i32* %zExp.addr, align 4, !dbg !1818
  %23 = load i32, i32* %zSig.addr, align 4, !dbg !1819
  %and44 = and i32 %23, 127, !dbg !1820
  store i32 %and44, i32* %roundBits, align 4, !dbg !1821
  %24 = load i32, i32* %isTiny, align 4, !dbg !1822
  %tobool45 = icmp ne i32 %24, 0, !dbg !1822
  br i1 %tobool45, label %land.lhs.true46, label %if.end49, !dbg !1824

land.lhs.true46:                                  ; preds = %lor.end
  %25 = load i32, i32* %roundBits, align 4, !dbg !1825
  %tobool47 = icmp ne i32 %25, 0, !dbg !1825
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !1826

if.then48:                                        ; preds = %land.lhs.true46
  call void @float_raise(i32 4), !dbg !1827
  br label %if.end49, !dbg !1827

if.end49:                                         ; preds = %if.then48, %land.lhs.true46, %lor.end
  br label %if.end50, !dbg !1828

if.end50:                                         ; preds = %if.end49, %if.end31
  br label %if.end51, !dbg !1829

if.end51:                                         ; preds = %if.end50, %if.end16
  %26 = load i32, i32* %roundBits, align 4, !dbg !1830
  %tobool52 = icmp ne i32 %26, 0, !dbg !1830
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !1832

if.then53:                                        ; preds = %if.end51
  %27 = load i32, i32* @float_exception_flags, align 4, !dbg !1833
  %or = or i32 %27, 1, !dbg !1833
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !1833
  br label %if.end54, !dbg !1834

if.end54:                                         ; preds = %if.then53, %if.end51
  %28 = load i32, i32* %zSig.addr, align 4, !dbg !1835
  %29 = load i32, i32* %roundIncrement, align 4, !dbg !1836
  %add55 = add i32 %28, %29, !dbg !1837
  %shr = lshr i32 %add55, 7, !dbg !1838
  store i32 %shr, i32* %zSig.addr, align 4, !dbg !1839
  %30 = load i32, i32* %roundBits, align 4, !dbg !1840
  %xor = xor i32 %30, 64, !dbg !1841
  %cmp56 = icmp eq i32 %xor, 0, !dbg !1842
  %conv57 = zext i1 %cmp56 to i32, !dbg !1842
  %31 = load i32, i32* %roundNearestEven, align 4, !dbg !1843
  %and58 = and i32 %conv57, %31, !dbg !1844
  %neg = xor i32 %and58, -1, !dbg !1845
  %32 = load i32, i32* %zSig.addr, align 4, !dbg !1846
  %and59 = and i32 %32, %neg, !dbg !1846
  store i32 %and59, i32* %zSig.addr, align 4, !dbg !1846
  %33 = load i32, i32* %zSig.addr, align 4, !dbg !1847
  %cmp60 = icmp eq i32 %33, 0, !dbg !1849
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !1850

if.then62:                                        ; preds = %if.end54
  store i32 0, i32* %zExp.addr, align 4, !dbg !1851
  br label %if.end63, !dbg !1852

if.end63:                                         ; preds = %if.then62, %if.end54
  %34 = load i32, i32* %zSign.addr, align 4, !dbg !1853
  %35 = load i32, i32* %zExp.addr, align 4, !dbg !1854
  %36 = load i32, i32* %zSig.addr, align 4, !dbg !1855
  %call64 = call i32 @packFloat32(i32 %34, i32 %35, i32 %36), !dbg !1856
  store i32 %call64, i32* %retval, align 4, !dbg !1857
  br label %return, !dbg !1857

return:                                           ; preds = %if.end63, %if.then28
  %37 = load i32, i32* %retval, align 4, !dbg !1858
  ret i32 %37, !dbg !1858
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @int64_to_float64(i64 %a) #0 !dbg !1859 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %zSign = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1862, metadata !DIExpression()), !dbg !1863
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1864, metadata !DIExpression()), !dbg !1865
  %0 = load i64, i64* %a.addr, align 8, !dbg !1866
  %cmp = icmp eq i64 %0, 0, !dbg !1868
  br i1 %cmp, label %if.then, label %if.end, !dbg !1869

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !1870
  br label %return, !dbg !1870

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !1871
  %cmp1 = icmp eq i64 %1, -9223372036854775808, !dbg !1873
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !1874

if.then2:                                         ; preds = %if.end
  %call = call i64 @packFloat64(i32 1, i32 1086, i64 0), !dbg !1875
  store i64 %call, i64* %retval, align 8, !dbg !1877
  br label %return, !dbg !1877

if.end3:                                          ; preds = %if.end
  %2 = load i64, i64* %a.addr, align 8, !dbg !1878
  %cmp4 = icmp slt i64 %2, 0, !dbg !1879
  %conv = zext i1 %cmp4 to i32, !dbg !1879
  store i32 %conv, i32* %zSign, align 4, !dbg !1880
  %3 = load i32, i32* %zSign, align 4, !dbg !1881
  %4 = load i32, i32* %zSign, align 4, !dbg !1882
  %tobool = icmp ne i32 %4, 0, !dbg !1882
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1882

cond.true:                                        ; preds = %if.end3
  %5 = load i64, i64* %a.addr, align 8, !dbg !1883
  %sub = sub nsw i64 0, %5, !dbg !1884
  br label %cond.end, !dbg !1882

cond.false:                                       ; preds = %if.end3
  %6 = load i64, i64* %a.addr, align 8, !dbg !1885
  br label %cond.end, !dbg !1882

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %6, %cond.false ], !dbg !1882
  %call5 = call i64 @normalizeRoundAndPackFloat64(i32 %3, i32 1084, i64 %cond), !dbg !1886
  store i64 %call5, i64* %retval, align 8, !dbg !1887
  br label %return, !dbg !1887

return:                                           ; preds = %cond.end, %if.then2, %if.then
  %7 = load i64, i64* %retval, align 8, !dbg !1888
  ret i64 %7, !dbg !1888
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @normalizeRoundAndPackFloat64(i32 %zSign, i32 %zExp, i64 %zSig) #0 !dbg !1889 {
entry:
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !1890, metadata !DIExpression()), !dbg !1891
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !1892, metadata !DIExpression()), !dbg !1893
  store i64 %zSig, i64* %zSig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig.addr, metadata !1894, metadata !DIExpression()), !dbg !1895
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1896, metadata !DIExpression()), !dbg !1897
  %0 = load i64, i64* %zSig.addr, align 8, !dbg !1898
  %call = call i32 @countLeadingZeros64(i64 %0), !dbg !1899
  %sub = sub nsw i32 %call, 1, !dbg !1900
  store i32 %sub, i32* %shiftCount, align 4, !dbg !1901
  %1 = load i32, i32* %zSign.addr, align 4, !dbg !1902
  %2 = load i32, i32* %zExp.addr, align 4, !dbg !1903
  %3 = load i32, i32* %shiftCount, align 4, !dbg !1904
  %sub1 = sub nsw i32 %2, %3, !dbg !1905
  %4 = load i64, i64* %zSig.addr, align 8, !dbg !1906
  %5 = load i32, i32* %shiftCount, align 4, !dbg !1907
  %sh_prom = zext i32 %5 to i64, !dbg !1908
  %shl = shl i64 %4, %sh_prom, !dbg !1908
  %call2 = call i64 @roundAndPackFloat64(i32 %1, i32 %sub1, i64 %shl), !dbg !1909
  ret i64 %call2, !dbg !1910
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @int64_to_floatx80(i64 %a) #0 !dbg !1911 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a.addr = alloca i64, align 8
  %zSign = alloca i32, align 4
  %absA = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1914, metadata !DIExpression()), !dbg !1915
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1916, metadata !DIExpression()), !dbg !1917
  call void @llvm.dbg.declare(metadata i64* %absA, metadata !1918, metadata !DIExpression()), !dbg !1919
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1920, metadata !DIExpression()), !dbg !1921
  %0 = load i64, i64* %a.addr, align 8, !dbg !1922
  %cmp = icmp eq i64 %0, 0, !dbg !1924
  br i1 %cmp, label %if.then, label %if.end, !dbg !1925

if.then:                                          ; preds = %entry
  %call = call { i16, i64 } @packFloatx80(i32 0, i32 0, i64 0), !dbg !1926
  %1 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1926
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %1, i32 0, i32 0, !dbg !1926
  %3 = extractvalue { i16, i64 } %call, 0, !dbg !1926
  store i16 %3, i16* %2, align 8, !dbg !1926
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %1, i32 0, i32 1, !dbg !1926
  %5 = extractvalue { i16, i64 } %call, 1, !dbg !1926
  store i64 %5, i64* %4, align 8, !dbg !1926
  br label %return, !dbg !1927

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %a.addr, align 8, !dbg !1928
  %cmp1 = icmp slt i64 %6, 0, !dbg !1929
  %conv = zext i1 %cmp1 to i32, !dbg !1929
  store i32 %conv, i32* %zSign, align 4, !dbg !1930
  %7 = load i32, i32* %zSign, align 4, !dbg !1931
  %tobool = icmp ne i32 %7, 0, !dbg !1931
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1931

cond.true:                                        ; preds = %if.end
  %8 = load i64, i64* %a.addr, align 8, !dbg !1932
  %sub = sub nsw i64 0, %8, !dbg !1933
  br label %cond.end, !dbg !1931

cond.false:                                       ; preds = %if.end
  %9 = load i64, i64* %a.addr, align 8, !dbg !1934
  br label %cond.end, !dbg !1931

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %9, %cond.false ], !dbg !1931
  store i64 %cond, i64* %absA, align 8, !dbg !1935
  %10 = load i64, i64* %absA, align 8, !dbg !1936
  %call2 = call i32 @countLeadingZeros64(i64 %10), !dbg !1937
  store i32 %call2, i32* %shiftCount, align 4, !dbg !1938
  %11 = load i32, i32* %zSign, align 4, !dbg !1939
  %12 = load i32, i32* %shiftCount, align 4, !dbg !1940
  %sub3 = sub nsw i32 16446, %12, !dbg !1941
  %13 = load i64, i64* %absA, align 8, !dbg !1942
  %14 = load i32, i32* %shiftCount, align 4, !dbg !1943
  %sh_prom = zext i32 %14 to i64, !dbg !1944
  %shl = shl i64 %13, %sh_prom, !dbg !1944
  %call4 = call { i16, i64 } @packFloatx80(i32 %11, i32 %sub3, i64 %shl), !dbg !1945
  %15 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1945
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %15, i32 0, i32 0, !dbg !1945
  %17 = extractvalue { i16, i64 } %call4, 0, !dbg !1945
  store i16 %17, i16* %16, align 8, !dbg !1945
  %18 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %15, i32 0, i32 1, !dbg !1945
  %19 = extractvalue { i16, i64 } %call4, 1, !dbg !1945
  store i64 %19, i64* %18, align 8, !dbg !1945
  br label %return, !dbg !1946

return:                                           ; preds = %cond.end, %if.then
  %20 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !1947
  %21 = load { i16, i64 }, { i16, i64 }* %20, align 8, !dbg !1947
  ret { i16, i64 } %21, !dbg !1947
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @int64_to_float128(i64 %a) #0 !dbg !1948 {
entry:
  %retval = alloca %struct.float128, align 8
  %a.addr = alloca i64, align 8
  %zSign = alloca i32, align 4
  %absA = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  %zExp = alloca i32, align 4
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !1951, metadata !DIExpression()), !dbg !1952
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !1953, metadata !DIExpression()), !dbg !1954
  call void @llvm.dbg.declare(metadata i64* %absA, metadata !1955, metadata !DIExpression()), !dbg !1956
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !1957, metadata !DIExpression()), !dbg !1958
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !1959, metadata !DIExpression()), !dbg !1960
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !1961, metadata !DIExpression()), !dbg !1962
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !1963, metadata !DIExpression()), !dbg !1964
  %0 = load i64, i64* %a.addr, align 8, !dbg !1965
  %cmp = icmp eq i64 %0, 0, !dbg !1967
  br i1 %cmp, label %if.then, label %if.end, !dbg !1968

if.then:                                          ; preds = %entry
  %call = call { i64, i64 } @packFloat128(i32 0, i32 0, i64 0, i64 0), !dbg !1969
  %1 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !1969
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !1969
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !1969
  store i64 %3, i64* %2, align 8, !dbg !1969
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !1969
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !1969
  store i64 %5, i64* %4, align 8, !dbg !1969
  br label %return, !dbg !1970

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %a.addr, align 8, !dbg !1971
  %cmp1 = icmp slt i64 %6, 0, !dbg !1972
  %conv = zext i1 %cmp1 to i32, !dbg !1972
  store i32 %conv, i32* %zSign, align 4, !dbg !1973
  %7 = load i32, i32* %zSign, align 4, !dbg !1974
  %tobool = icmp ne i32 %7, 0, !dbg !1974
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1974

cond.true:                                        ; preds = %if.end
  %8 = load i64, i64* %a.addr, align 8, !dbg !1975
  %sub = sub nsw i64 0, %8, !dbg !1976
  br label %cond.end, !dbg !1974

cond.false:                                       ; preds = %if.end
  %9 = load i64, i64* %a.addr, align 8, !dbg !1977
  br label %cond.end, !dbg !1974

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %9, %cond.false ], !dbg !1974
  store i64 %cond, i64* %absA, align 8, !dbg !1978
  %10 = load i64, i64* %absA, align 8, !dbg !1979
  %call2 = call i32 @countLeadingZeros64(i64 %10), !dbg !1980
  %add = add nsw i32 %call2, 49, !dbg !1981
  store i32 %add, i32* %shiftCount, align 4, !dbg !1982
  %11 = load i32, i32* %shiftCount, align 4, !dbg !1983
  %sub3 = sub nsw i32 16494, %11, !dbg !1984
  store i32 %sub3, i32* %zExp, align 4, !dbg !1985
  %12 = load i32, i32* %shiftCount, align 4, !dbg !1986
  %cmp4 = icmp sle i32 64, %12, !dbg !1988
  br i1 %cmp4, label %if.then6, label %if.else, !dbg !1989

if.then6:                                         ; preds = %cond.end
  store i64 0, i64* %zSig1, align 8, !dbg !1990
  %13 = load i64, i64* %absA, align 8, !dbg !1992
  store i64 %13, i64* %zSig0, align 8, !dbg !1993
  %14 = load i32, i32* %shiftCount, align 4, !dbg !1994
  %sub7 = sub nsw i32 %14, 64, !dbg !1994
  store i32 %sub7, i32* %shiftCount, align 4, !dbg !1994
  br label %if.end8, !dbg !1995

if.else:                                          ; preds = %cond.end
  %15 = load i64, i64* %absA, align 8, !dbg !1996
  store i64 %15, i64* %zSig1, align 8, !dbg !1998
  store i64 0, i64* %zSig0, align 8, !dbg !1999
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then6
  %16 = load i64, i64* %zSig0, align 8, !dbg !2000
  %17 = load i64, i64* %zSig1, align 8, !dbg !2001
  %18 = load i32, i32* %shiftCount, align 4, !dbg !2002
  call void @shortShift128Left(i64 %16, i64 %17, i32 %18, i64* %zSig0, i64* %zSig1), !dbg !2003
  %19 = load i32, i32* %zSign, align 4, !dbg !2004
  %20 = load i32, i32* %zExp, align 4, !dbg !2005
  %21 = load i64, i64* %zSig0, align 8, !dbg !2006
  %22 = load i64, i64* %zSig1, align 8, !dbg !2007
  %call9 = call { i64, i64 } @packFloat128(i32 %19, i32 %20, i64 %21, i64 %22), !dbg !2008
  %23 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2008
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %23, i32 0, i32 0, !dbg !2008
  %25 = extractvalue { i64, i64 } %call9, 0, !dbg !2008
  store i64 %25, i64* %24, align 8, !dbg !2008
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %23, i32 0, i32 1, !dbg !2008
  %27 = extractvalue { i64, i64 } %call9, 1, !dbg !2008
  store i64 %27, i64* %26, align 8, !dbg !2008
  br label %return, !dbg !2009

return:                                           ; preds = %if.end8, %if.then
  %28 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2010
  %29 = load { i64, i64 }, { i64, i64 }* %28, align 8, !dbg !2010
  ret { i64, i64 } %29, !dbg !2010
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_to_int32(i32 %a) #0 !dbg !2011 {
entry:
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i32, align 4
  %aSig64 = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2014, metadata !DIExpression()), !dbg !2015
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2016, metadata !DIExpression()), !dbg !2017
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2018, metadata !DIExpression()), !dbg !2019
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !2020, metadata !DIExpression()), !dbg !2021
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2022, metadata !DIExpression()), !dbg !2023
  call void @llvm.dbg.declare(metadata i64* %aSig64, metadata !2024, metadata !DIExpression()), !dbg !2025
  %0 = load i32, i32* %a.addr, align 4, !dbg !2026
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2027
  store i32 %call, i32* %aSig, align 4, !dbg !2028
  %1 = load i32, i32* %a.addr, align 4, !dbg !2029
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2030
  store i32 %call1, i32* %aExp, align 4, !dbg !2031
  %2 = load i32, i32* %a.addr, align 4, !dbg !2032
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2033
  store i32 %call2, i32* %aSign, align 4, !dbg !2034
  %3 = load i32, i32* %aExp, align 4, !dbg !2035
  %cmp = icmp eq i32 %3, 255, !dbg !2037
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2038

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %aSig, align 4, !dbg !2039
  %tobool = icmp ne i32 %4, 0, !dbg !2039
  br i1 %tobool, label %if.then, label %if.end, !dbg !2040

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !2041
  br label %if.end, !dbg !2042

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32, i32* %aExp, align 4, !dbg !2043
  %tobool3 = icmp ne i32 %5, 0, !dbg !2043
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !2045

if.then4:                                         ; preds = %if.end
  %6 = load i32, i32* %aSig, align 4, !dbg !2046
  %or = or i32 %6, 8388608, !dbg !2046
  store i32 %or, i32* %aSig, align 4, !dbg !2046
  br label %if.end5, !dbg !2047

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load i32, i32* %aExp, align 4, !dbg !2048
  %sub = sub nsw i32 175, %7, !dbg !2049
  store i32 %sub, i32* %shiftCount, align 4, !dbg !2050
  %8 = load i32, i32* %aSig, align 4, !dbg !2051
  %conv = zext i32 %8 to i64, !dbg !2051
  store i64 %conv, i64* %aSig64, align 8, !dbg !2052
  %9 = load i64, i64* %aSig64, align 8, !dbg !2053
  %shl = shl i64 %9, 32, !dbg !2053
  store i64 %shl, i64* %aSig64, align 8, !dbg !2053
  %10 = load i32, i32* %shiftCount, align 4, !dbg !2054
  %cmp6 = icmp slt i32 0, %10, !dbg !2056
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !2057

if.then8:                                         ; preds = %if.end5
  %11 = load i64, i64* %aSig64, align 8, !dbg !2058
  %12 = load i32, i32* %shiftCount, align 4, !dbg !2059
  call void @shift64RightJamming(i64 %11, i32 %12, i64* %aSig64), !dbg !2060
  br label %if.end9, !dbg !2060

if.end9:                                          ; preds = %if.then8, %if.end5
  %13 = load i32, i32* %aSign, align 4, !dbg !2061
  %14 = load i64, i64* %aSig64, align 8, !dbg !2062
  %call10 = call i32 @roundAndPackInt32(i32 %13, i64 %14), !dbg !2063
  ret i32 %call10, !dbg !2064
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @roundAndPackInt32(i32 %zSign, i64 %absZ) #0 !dbg !2065 {
entry:
  %retval = alloca i32, align 4
  %zSign.addr = alloca i32, align 4
  %absZ.addr = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %roundNearestEven = alloca i32, align 4
  %roundIncrement = alloca i32, align 4
  %roundBits = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !2068, metadata !DIExpression()), !dbg !2069
  store i64 %absZ, i64* %absZ.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %absZ.addr, metadata !2070, metadata !DIExpression()), !dbg !2071
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !2072, metadata !DIExpression()), !dbg !2073
  call void @llvm.dbg.declare(metadata i32* %roundNearestEven, metadata !2074, metadata !DIExpression()), !dbg !2075
  call void @llvm.dbg.declare(metadata i32* %roundIncrement, metadata !2076, metadata !DIExpression()), !dbg !2077
  call void @llvm.dbg.declare(metadata i32* %roundBits, metadata !2078, metadata !DIExpression()), !dbg !2079
  call void @llvm.dbg.declare(metadata i32* %z, metadata !2080, metadata !DIExpression()), !dbg !2081
  %0 = load i32, i32* @float_rounding_mode, align 4, !dbg !2082
  store i32 %0, i32* %roundingMode, align 4, !dbg !2083
  %1 = load i32, i32* %roundingMode, align 4, !dbg !2084
  %cmp = icmp eq i32 %1, 0, !dbg !2085
  %conv = zext i1 %cmp to i32, !dbg !2085
  store i32 %conv, i32* %roundNearestEven, align 4, !dbg !2086
  store i32 64, i32* %roundIncrement, align 4, !dbg !2087
  %2 = load i32, i32* %roundNearestEven, align 4, !dbg !2088
  %tobool = icmp ne i32 %2, 0, !dbg !2088
  br i1 %tobool, label %if.end16, label %if.then, !dbg !2090

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %roundingMode, align 4, !dbg !2091
  %cmp1 = icmp eq i32 %3, 1, !dbg !2094
  br i1 %cmp1, label %if.then3, label %if.else, !dbg !2095

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %roundIncrement, align 4, !dbg !2096
  br label %if.end15, !dbg !2098

if.else:                                          ; preds = %if.then
  store i32 127, i32* %roundIncrement, align 4, !dbg !2099
  %4 = load i32, i32* %zSign.addr, align 4, !dbg !2101
  %tobool4 = icmp ne i32 %4, 0, !dbg !2101
  br i1 %tobool4, label %if.then5, label %if.else9, !dbg !2103

if.then5:                                         ; preds = %if.else
  %5 = load i32, i32* %roundingMode, align 4, !dbg !2104
  %cmp6 = icmp eq i32 %5, 2, !dbg !2107
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !2108

if.then8:                                         ; preds = %if.then5
  store i32 0, i32* %roundIncrement, align 4, !dbg !2109
  br label %if.end, !dbg !2110

if.end:                                           ; preds = %if.then8, %if.then5
  br label %if.end14, !dbg !2111

if.else9:                                         ; preds = %if.else
  %6 = load i32, i32* %roundingMode, align 4, !dbg !2112
  %cmp10 = icmp eq i32 %6, 3, !dbg !2115
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !2116

if.then12:                                        ; preds = %if.else9
  store i32 0, i32* %roundIncrement, align 4, !dbg !2117
  br label %if.end13, !dbg !2118

if.end13:                                         ; preds = %if.then12, %if.else9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then3
  br label %if.end16, !dbg !2119

if.end16:                                         ; preds = %if.end15, %entry
  %7 = load i64, i64* %absZ.addr, align 8, !dbg !2120
  %and = and i64 %7, 127, !dbg !2121
  %conv17 = trunc i64 %and to i32, !dbg !2120
  store i32 %conv17, i32* %roundBits, align 4, !dbg !2122
  %8 = load i64, i64* %absZ.addr, align 8, !dbg !2123
  %9 = load i32, i32* %roundIncrement, align 4, !dbg !2124
  %conv18 = sext i32 %9 to i64, !dbg !2124
  %add = add i64 %8, %conv18, !dbg !2125
  %shr = lshr i64 %add, 7, !dbg !2126
  store i64 %shr, i64* %absZ.addr, align 8, !dbg !2127
  %10 = load i32, i32* %roundBits, align 4, !dbg !2128
  %xor = xor i32 %10, 64, !dbg !2129
  %cmp19 = icmp eq i32 %xor, 0, !dbg !2130
  %conv20 = zext i1 %cmp19 to i32, !dbg !2130
  %11 = load i32, i32* %roundNearestEven, align 4, !dbg !2131
  %and21 = and i32 %conv20, %11, !dbg !2132
  %neg = xor i32 %and21, -1, !dbg !2133
  %conv22 = sext i32 %neg to i64, !dbg !2133
  %12 = load i64, i64* %absZ.addr, align 8, !dbg !2134
  %and23 = and i64 %12, %conv22, !dbg !2134
  store i64 %and23, i64* %absZ.addr, align 8, !dbg !2134
  %13 = load i64, i64* %absZ.addr, align 8, !dbg !2135
  %conv24 = trunc i64 %13 to i32, !dbg !2135
  store i32 %conv24, i32* %z, align 4, !dbg !2136
  %14 = load i32, i32* %zSign.addr, align 4, !dbg !2137
  %tobool25 = icmp ne i32 %14, 0, !dbg !2137
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !2139

if.then26:                                        ; preds = %if.end16
  %15 = load i32, i32* %z, align 4, !dbg !2140
  %sub = sub nsw i32 0, %15, !dbg !2141
  store i32 %sub, i32* %z, align 4, !dbg !2142
  br label %if.end27, !dbg !2143

if.end27:                                         ; preds = %if.then26, %if.end16
  %16 = load i64, i64* %absZ.addr, align 8, !dbg !2144
  %shr28 = lshr i64 %16, 32, !dbg !2146
  %tobool29 = icmp ne i64 %shr28, 0, !dbg !2146
  br i1 %tobool29, label %if.then35, label %lor.lhs.false, !dbg !2147

lor.lhs.false:                                    ; preds = %if.end27
  %17 = load i32, i32* %z, align 4, !dbg !2148
  %tobool30 = icmp ne i32 %17, 0, !dbg !2148
  br i1 %tobool30, label %land.lhs.true, label %if.end37, !dbg !2149

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i32, i32* %z, align 4, !dbg !2150
  %cmp31 = icmp slt i32 %18, 0, !dbg !2151
  %conv32 = zext i1 %cmp31 to i32, !dbg !2151
  %19 = load i32, i32* %zSign.addr, align 4, !dbg !2152
  %xor33 = xor i32 %conv32, %19, !dbg !2153
  %tobool34 = icmp ne i32 %xor33, 0, !dbg !2153
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !2154

if.then35:                                        ; preds = %land.lhs.true, %if.end27
  call void @float_raise(i32 16), !dbg !2155
  %20 = load i32, i32* %zSign.addr, align 4, !dbg !2157
  %tobool36 = icmp ne i32 %20, 0, !dbg !2157
  %21 = zext i1 %tobool36 to i64, !dbg !2157
  %cond = select i1 %tobool36, i32 -2147483648, i32 2147483647, !dbg !2157
  store i32 %cond, i32* %retval, align 4, !dbg !2158
  br label %return, !dbg !2158

if.end37:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %22 = load i32, i32* %roundBits, align 4, !dbg !2159
  %tobool38 = icmp ne i32 %22, 0, !dbg !2159
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !2161

if.then39:                                        ; preds = %if.end37
  %23 = load i32, i32* @float_exception_flags, align 4, !dbg !2162
  %or = or i32 %23, 1, !dbg !2162
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !2162
  br label %if.end40, !dbg !2163

if.end40:                                         ; preds = %if.then39, %if.end37
  %24 = load i32, i32* %z, align 4, !dbg !2164
  store i32 %24, i32* %retval, align 4, !dbg !2165
  br label %return, !dbg !2165

return:                                           ; preds = %if.end40, %if.then35
  %25 = load i32, i32* %retval, align 4, !dbg !2166
  ret i32 %25, !dbg !2166
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_to_int32_round_to_zero(i32 %a) #0 !dbg !2167 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2168, metadata !DIExpression()), !dbg !2169
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2170, metadata !DIExpression()), !dbg !2171
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2172, metadata !DIExpression()), !dbg !2173
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !2174, metadata !DIExpression()), !dbg !2175
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2176, metadata !DIExpression()), !dbg !2177
  call void @llvm.dbg.declare(metadata i32* %z, metadata !2178, metadata !DIExpression()), !dbg !2179
  %0 = load i32, i32* %a.addr, align 4, !dbg !2180
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2181
  store i32 %call, i32* %aSig, align 4, !dbg !2182
  %1 = load i32, i32* %a.addr, align 4, !dbg !2183
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2184
  store i32 %call1, i32* %aExp, align 4, !dbg !2185
  %2 = load i32, i32* %a.addr, align 4, !dbg !2186
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2187
  store i32 %call2, i32* %aSign, align 4, !dbg !2188
  %3 = load i32, i32* %aExp, align 4, !dbg !2189
  %sub = sub nsw i32 %3, 158, !dbg !2190
  store i32 %sub, i32* %shiftCount, align 4, !dbg !2191
  %4 = load i32, i32* %shiftCount, align 4, !dbg !2192
  %cmp = icmp sle i32 0, %4, !dbg !2194
  br i1 %cmp, label %if.then, label %if.else, !dbg !2195

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %a.addr, align 4, !dbg !2196
  %cmp3 = icmp ne i32 %5, -822083584, !dbg !2199
  br i1 %cmp3, label %if.then4, label %if.end8, !dbg !2200

if.then4:                                         ; preds = %if.then
  call void @float_raise(i32 16), !dbg !2201
  %6 = load i32, i32* %aSign, align 4, !dbg !2203
  %tobool = icmp ne i32 %6, 0, !dbg !2203
  br i1 %tobool, label %lor.lhs.false, label %if.then7, !dbg !2205

lor.lhs.false:                                    ; preds = %if.then4
  %7 = load i32, i32* %aExp, align 4, !dbg !2206
  %cmp5 = icmp eq i32 %7, 255, !dbg !2207
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !2208

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load i32, i32* %aSig, align 4, !dbg !2209
  %tobool6 = icmp ne i32 %8, 0, !dbg !2209
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !2210

if.then7:                                         ; preds = %land.lhs.true, %if.then4
  store i32 2147483647, i32* %retval, align 4, !dbg !2211
  br label %return, !dbg !2211

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end8, !dbg !2212

if.end8:                                          ; preds = %if.end, %if.then
  store i32 -2147483648, i32* %retval, align 4, !dbg !2213
  br label %return, !dbg !2213

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %aExp, align 4, !dbg !2214
  %cmp9 = icmp sle i32 %9, 126, !dbg !2216
  br i1 %cmp9, label %if.then10, label %if.end15, !dbg !2217

if.then10:                                        ; preds = %if.else
  %10 = load i32, i32* %aExp, align 4, !dbg !2218
  %11 = load i32, i32* %aSig, align 4, !dbg !2221
  %or = or i32 %10, %11, !dbg !2222
  %tobool11 = icmp ne i32 %or, 0, !dbg !2222
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !2223

if.then12:                                        ; preds = %if.then10
  %12 = load i32, i32* @float_exception_flags, align 4, !dbg !2224
  %or13 = or i32 %12, 1, !dbg !2224
  store i32 %or13, i32* @float_exception_flags, align 4, !dbg !2224
  br label %if.end14, !dbg !2225

if.end14:                                         ; preds = %if.then12, %if.then10
  store i32 0, i32* %retval, align 4, !dbg !2226
  br label %return, !dbg !2226

if.end15:                                         ; preds = %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  %13 = load i32, i32* %aSig, align 4, !dbg !2227
  %or17 = or i32 %13, 8388608, !dbg !2228
  %shl = shl i32 %or17, 8, !dbg !2229
  store i32 %shl, i32* %aSig, align 4, !dbg !2230
  %14 = load i32, i32* %aSig, align 4, !dbg !2231
  %15 = load i32, i32* %shiftCount, align 4, !dbg !2232
  %sub18 = sub nsw i32 0, %15, !dbg !2233
  %shr = lshr i32 %14, %sub18, !dbg !2234
  store i32 %shr, i32* %z, align 4, !dbg !2235
  %16 = load i32, i32* %aSig, align 4, !dbg !2236
  %17 = load i32, i32* %shiftCount, align 4, !dbg !2238
  %and = and i32 %17, 31, !dbg !2239
  %shl19 = shl i32 %16, %and, !dbg !2240
  %tobool20 = icmp ne i32 %shl19, 0, !dbg !2241
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !2242

if.then21:                                        ; preds = %if.end16
  %18 = load i32, i32* @float_exception_flags, align 4, !dbg !2243
  %or22 = or i32 %18, 1, !dbg !2243
  store i32 %or22, i32* @float_exception_flags, align 4, !dbg !2243
  br label %if.end23, !dbg !2245

if.end23:                                         ; preds = %if.then21, %if.end16
  %19 = load i32, i32* %aSign, align 4, !dbg !2246
  %tobool24 = icmp ne i32 %19, 0, !dbg !2246
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !2248

if.then25:                                        ; preds = %if.end23
  %20 = load i32, i32* %z, align 4, !dbg !2249
  %sub26 = sub nsw i32 0, %20, !dbg !2250
  store i32 %sub26, i32* %z, align 4, !dbg !2251
  br label %if.end27, !dbg !2252

if.end27:                                         ; preds = %if.then25, %if.end23
  %21 = load i32, i32* %z, align 4, !dbg !2253
  store i32 %21, i32* %retval, align 4, !dbg !2254
  br label %return, !dbg !2254

return:                                           ; preds = %if.end27, %if.end14, %if.end8, %if.then7
  %22 = load i32, i32* %retval, align 4, !dbg !2255
  ret i32 %22, !dbg !2255
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float32_to_int64(i32 %a) #0 !dbg !2256 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i32, align 4
  %aSig64 = alloca i64, align 8
  %aSigExtra = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2259, metadata !DIExpression()), !dbg !2260
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2261, metadata !DIExpression()), !dbg !2262
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2263, metadata !DIExpression()), !dbg !2264
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !2265, metadata !DIExpression()), !dbg !2266
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2267, metadata !DIExpression()), !dbg !2268
  call void @llvm.dbg.declare(metadata i64* %aSig64, metadata !2269, metadata !DIExpression()), !dbg !2270
  call void @llvm.dbg.declare(metadata i64* %aSigExtra, metadata !2271, metadata !DIExpression()), !dbg !2272
  %0 = load i32, i32* %a.addr, align 4, !dbg !2273
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2274
  store i32 %call, i32* %aSig, align 4, !dbg !2275
  %1 = load i32, i32* %a.addr, align 4, !dbg !2276
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2277
  store i32 %call1, i32* %aExp, align 4, !dbg !2278
  %2 = load i32, i32* %a.addr, align 4, !dbg !2279
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2280
  store i32 %call2, i32* %aSign, align 4, !dbg !2281
  %3 = load i32, i32* %aExp, align 4, !dbg !2282
  %sub = sub nsw i32 190, %3, !dbg !2283
  store i32 %sub, i32* %shiftCount, align 4, !dbg !2284
  %4 = load i32, i32* %shiftCount, align 4, !dbg !2285
  %cmp = icmp slt i32 %4, 0, !dbg !2287
  br i1 %cmp, label %if.then, label %if.end6, !dbg !2288

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !2289
  %5 = load i32, i32* %aSign, align 4, !dbg !2291
  %tobool = icmp ne i32 %5, 0, !dbg !2291
  br i1 %tobool, label %lor.lhs.false, label %if.then5, !dbg !2293

lor.lhs.false:                                    ; preds = %if.then
  %6 = load i32, i32* %aExp, align 4, !dbg !2294
  %cmp3 = icmp eq i32 %6, 255, !dbg !2295
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !2296

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load i32, i32* %aSig, align 4, !dbg !2297
  %tobool4 = icmp ne i32 %7, 0, !dbg !2297
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !2298

if.then5:                                         ; preds = %land.lhs.true, %if.then
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !2299
  br label %return, !dbg !2299

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !2301
  br label %return, !dbg !2301

if.end6:                                          ; preds = %entry
  %8 = load i32, i32* %aExp, align 4, !dbg !2302
  %tobool7 = icmp ne i32 %8, 0, !dbg !2302
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !2304

if.then8:                                         ; preds = %if.end6
  %9 = load i32, i32* %aSig, align 4, !dbg !2305
  %or = or i32 %9, 8388608, !dbg !2305
  store i32 %or, i32* %aSig, align 4, !dbg !2305
  br label %if.end9, !dbg !2306

if.end9:                                          ; preds = %if.then8, %if.end6
  %10 = load i32, i32* %aSig, align 4, !dbg !2307
  %conv = zext i32 %10 to i64, !dbg !2307
  store i64 %conv, i64* %aSig64, align 8, !dbg !2308
  %11 = load i64, i64* %aSig64, align 8, !dbg !2309
  %shl = shl i64 %11, 40, !dbg !2309
  store i64 %shl, i64* %aSig64, align 8, !dbg !2309
  %12 = load i64, i64* %aSig64, align 8, !dbg !2310
  %13 = load i32, i32* %shiftCount, align 4, !dbg !2311
  call void @shift64ExtraRightJamming(i64 %12, i64 0, i32 %13, i64* %aSig64, i64* %aSigExtra), !dbg !2312
  %14 = load i32, i32* %aSign, align 4, !dbg !2313
  %15 = load i64, i64* %aSig64, align 8, !dbg !2314
  %16 = load i64, i64* %aSigExtra, align 8, !dbg !2315
  %call10 = call i64 @roundAndPackInt64(i32 %14, i64 %15, i64 %16), !dbg !2316
  store i64 %call10, i64* %retval, align 8, !dbg !2317
  br label %return, !dbg !2317

return:                                           ; preds = %if.end9, %if.end, %if.then5
  %17 = load i64, i64* %retval, align 8, !dbg !2318
  ret i64 %17, !dbg !2318
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @roundAndPackInt64(i32 %zSign, i64 %absZ0, i64 %absZ1) #0 !dbg !2319 {
entry:
  %retval = alloca i64, align 8
  %zSign.addr = alloca i32, align 4
  %absZ0.addr = alloca i64, align 8
  %absZ1.addr = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %roundNearestEven = alloca i32, align 4
  %increment = alloca i32, align 4
  %z = alloca i64, align 8
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !2322, metadata !DIExpression()), !dbg !2323
  store i64 %absZ0, i64* %absZ0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %absZ0.addr, metadata !2324, metadata !DIExpression()), !dbg !2325
  store i64 %absZ1, i64* %absZ1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %absZ1.addr, metadata !2326, metadata !DIExpression()), !dbg !2327
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !2328, metadata !DIExpression()), !dbg !2329
  call void @llvm.dbg.declare(metadata i32* %roundNearestEven, metadata !2330, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.declare(metadata i32* %increment, metadata !2332, metadata !DIExpression()), !dbg !2333
  call void @llvm.dbg.declare(metadata i64* %z, metadata !2334, metadata !DIExpression()), !dbg !2335
  %0 = load i32, i32* @float_rounding_mode, align 4, !dbg !2336
  store i32 %0, i32* %roundingMode, align 4, !dbg !2337
  %1 = load i32, i32* %roundingMode, align 4, !dbg !2338
  %cmp = icmp eq i32 %1, 0, !dbg !2339
  %conv = zext i1 %cmp to i32, !dbg !2339
  store i32 %conv, i32* %roundNearestEven, align 4, !dbg !2340
  %2 = load i64, i64* %absZ1.addr, align 8, !dbg !2341
  %cmp1 = icmp slt i64 %2, 0, !dbg !2342
  %conv2 = zext i1 %cmp1 to i32, !dbg !2342
  store i32 %conv2, i32* %increment, align 4, !dbg !2343
  %3 = load i32, i32* %roundNearestEven, align 4, !dbg !2344
  %tobool = icmp ne i32 %3, 0, !dbg !2344
  br i1 %tobool, label %if.end19, label %if.then, !dbg !2346

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %roundingMode, align 4, !dbg !2347
  %cmp3 = icmp eq i32 %4, 1, !dbg !2350
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !2351

if.then5:                                         ; preds = %if.then
  store i32 0, i32* %increment, align 4, !dbg !2352
  br label %if.end18, !dbg !2354

if.else:                                          ; preds = %if.then
  %5 = load i32, i32* %zSign.addr, align 4, !dbg !2355
  %tobool6 = icmp ne i32 %5, 0, !dbg !2355
  br i1 %tobool6, label %if.then7, label %if.else11, !dbg !2358

if.then7:                                         ; preds = %if.else
  %6 = load i32, i32* %roundingMode, align 4, !dbg !2359
  %cmp8 = icmp eq i32 %6, 3, !dbg !2361
  br i1 %cmp8, label %land.rhs, label %land.end, !dbg !2362

land.rhs:                                         ; preds = %if.then7
  %7 = load i64, i64* %absZ1.addr, align 8, !dbg !2363
  %tobool10 = icmp ne i64 %7, 0, !dbg !2362
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then7
  %8 = phi i1 [ false, %if.then7 ], [ %tobool10, %land.rhs ]
  %land.ext = zext i1 %8 to i32, !dbg !2362
  store i32 %land.ext, i32* %increment, align 4, !dbg !2364
  br label %if.end, !dbg !2365

if.else11:                                        ; preds = %if.else
  %9 = load i32, i32* %roundingMode, align 4, !dbg !2366
  %cmp12 = icmp eq i32 %9, 2, !dbg !2368
  br i1 %cmp12, label %land.rhs14, label %land.end16, !dbg !2369

land.rhs14:                                       ; preds = %if.else11
  %10 = load i64, i64* %absZ1.addr, align 8, !dbg !2370
  %tobool15 = icmp ne i64 %10, 0, !dbg !2369
  br label %land.end16

land.end16:                                       ; preds = %land.rhs14, %if.else11
  %11 = phi i1 [ false, %if.else11 ], [ %tobool15, %land.rhs14 ]
  %land.ext17 = zext i1 %11 to i32, !dbg !2369
  store i32 %land.ext17, i32* %increment, align 4, !dbg !2371
  br label %if.end

if.end:                                           ; preds = %land.end16, %land.end
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then5
  br label %if.end19, !dbg !2372

if.end19:                                         ; preds = %if.end18, %entry
  %12 = load i32, i32* %increment, align 4, !dbg !2373
  %tobool20 = icmp ne i32 %12, 0, !dbg !2373
  br i1 %tobool20, label %if.then21, label %if.end30, !dbg !2375

if.then21:                                        ; preds = %if.end19
  %13 = load i64, i64* %absZ0.addr, align 8, !dbg !2376
  %inc = add i64 %13, 1, !dbg !2376
  store i64 %inc, i64* %absZ0.addr, align 8, !dbg !2376
  %14 = load i64, i64* %absZ0.addr, align 8, !dbg !2378
  %cmp22 = icmp eq i64 %14, 0, !dbg !2380
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !2381

if.then24:                                        ; preds = %if.then21
  br label %overflow, !dbg !2382

if.end25:                                         ; preds = %if.then21
  %15 = load i64, i64* %absZ1.addr, align 8, !dbg !2383
  %shl = shl i64 %15, 1, !dbg !2384
  %cmp26 = icmp eq i64 %shl, 0, !dbg !2385
  %conv27 = zext i1 %cmp26 to i32, !dbg !2385
  %16 = load i32, i32* %roundNearestEven, align 4, !dbg !2386
  %and = and i32 %conv27, %16, !dbg !2387
  %neg = xor i32 %and, -1, !dbg !2388
  %conv28 = sext i32 %neg to i64, !dbg !2388
  %17 = load i64, i64* %absZ0.addr, align 8, !dbg !2389
  %and29 = and i64 %17, %conv28, !dbg !2389
  store i64 %and29, i64* %absZ0.addr, align 8, !dbg !2389
  br label %if.end30, !dbg !2390

if.end30:                                         ; preds = %if.end25, %if.end19
  %18 = load i64, i64* %absZ0.addr, align 8, !dbg !2391
  store i64 %18, i64* %z, align 8, !dbg !2392
  %19 = load i32, i32* %zSign.addr, align 4, !dbg !2393
  %tobool31 = icmp ne i32 %19, 0, !dbg !2393
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !2395

if.then32:                                        ; preds = %if.end30
  %20 = load i64, i64* %z, align 8, !dbg !2396
  %sub = sub nsw i64 0, %20, !dbg !2397
  store i64 %sub, i64* %z, align 8, !dbg !2398
  br label %if.end33, !dbg !2399

if.end33:                                         ; preds = %if.then32, %if.end30
  %21 = load i64, i64* %z, align 8, !dbg !2400
  %tobool34 = icmp ne i64 %21, 0, !dbg !2400
  br i1 %tobool34, label %land.lhs.true, label %if.end40, !dbg !2402

land.lhs.true:                                    ; preds = %if.end33
  %22 = load i64, i64* %z, align 8, !dbg !2403
  %cmp35 = icmp slt i64 %22, 0, !dbg !2404
  %conv36 = zext i1 %cmp35 to i32, !dbg !2404
  %23 = load i32, i32* %zSign.addr, align 4, !dbg !2405
  %xor = xor i32 %conv36, %23, !dbg !2406
  %tobool37 = icmp ne i32 %xor, 0, !dbg !2406
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !2407

if.then38:                                        ; preds = %land.lhs.true
  br label %overflow, !dbg !2408

overflow:                                         ; preds = %if.then38, %if.then24
  call void @float_raise(i32 16), !dbg !2409
  %24 = load i32, i32* %zSign.addr, align 4, !dbg !2411
  %tobool39 = icmp ne i32 %24, 0, !dbg !2411
  %25 = zext i1 %tobool39 to i64, !dbg !2411
  %cond = select i1 %tobool39, i64 -9223372036854775808, i64 9223372036854775807, !dbg !2411
  store i64 %cond, i64* %retval, align 8, !dbg !2412
  br label %return, !dbg !2412

if.end40:                                         ; preds = %land.lhs.true, %if.end33
  %26 = load i64, i64* %absZ1.addr, align 8, !dbg !2413
  %tobool41 = icmp ne i64 %26, 0, !dbg !2413
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !2415

if.then42:                                        ; preds = %if.end40
  %27 = load i32, i32* @float_exception_flags, align 4, !dbg !2416
  %or = or i32 %27, 1, !dbg !2416
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !2416
  br label %if.end43, !dbg !2417

if.end43:                                         ; preds = %if.then42, %if.end40
  %28 = load i64, i64* %z, align 8, !dbg !2418
  store i64 %28, i64* %retval, align 8, !dbg !2419
  br label %return, !dbg !2419

return:                                           ; preds = %if.end43, %overflow
  %29 = load i64, i64* %retval, align 8, !dbg !2420
  ret i64 %29, !dbg !2420
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float32_to_int64_round_to_zero(i32 %a) #0 !dbg !2421 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i32, align 4
  %aSig64 = alloca i64, align 8
  %z = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2422, metadata !DIExpression()), !dbg !2423
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2424, metadata !DIExpression()), !dbg !2425
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2426, metadata !DIExpression()), !dbg !2427
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !2428, metadata !DIExpression()), !dbg !2429
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2430, metadata !DIExpression()), !dbg !2431
  call void @llvm.dbg.declare(metadata i64* %aSig64, metadata !2432, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.declare(metadata i64* %z, metadata !2434, metadata !DIExpression()), !dbg !2435
  %0 = load i32, i32* %a.addr, align 4, !dbg !2436
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2437
  store i32 %call, i32* %aSig, align 4, !dbg !2438
  %1 = load i32, i32* %a.addr, align 4, !dbg !2439
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2440
  store i32 %call1, i32* %aExp, align 4, !dbg !2441
  %2 = load i32, i32* %a.addr, align 4, !dbg !2442
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2443
  store i32 %call2, i32* %aSign, align 4, !dbg !2444
  %3 = load i32, i32* %aExp, align 4, !dbg !2445
  %sub = sub nsw i32 %3, 190, !dbg !2446
  store i32 %sub, i32* %shiftCount, align 4, !dbg !2447
  %4 = load i32, i32* %shiftCount, align 4, !dbg !2448
  %cmp = icmp sle i32 0, %4, !dbg !2450
  br i1 %cmp, label %if.then, label %if.else, !dbg !2451

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %a.addr, align 4, !dbg !2452
  %cmp3 = icmp ne i32 %5, -553648128, !dbg !2455
  br i1 %cmp3, label %if.then4, label %if.end8, !dbg !2456

if.then4:                                         ; preds = %if.then
  call void @float_raise(i32 16), !dbg !2457
  %6 = load i32, i32* %aSign, align 4, !dbg !2459
  %tobool = icmp ne i32 %6, 0, !dbg !2459
  br i1 %tobool, label %lor.lhs.false, label %if.then7, !dbg !2461

lor.lhs.false:                                    ; preds = %if.then4
  %7 = load i32, i32* %aExp, align 4, !dbg !2462
  %cmp5 = icmp eq i32 %7, 255, !dbg !2463
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !2464

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load i32, i32* %aSig, align 4, !dbg !2465
  %tobool6 = icmp ne i32 %8, 0, !dbg !2465
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !2466

if.then7:                                         ; preds = %land.lhs.true, %if.then4
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !2467
  br label %return, !dbg !2467

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end8, !dbg !2469

if.end8:                                          ; preds = %if.end, %if.then
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !2470
  br label %return, !dbg !2470

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %aExp, align 4, !dbg !2471
  %cmp9 = icmp sle i32 %9, 126, !dbg !2473
  br i1 %cmp9, label %if.then10, label %if.end15, !dbg !2474

if.then10:                                        ; preds = %if.else
  %10 = load i32, i32* %aExp, align 4, !dbg !2475
  %11 = load i32, i32* %aSig, align 4, !dbg !2478
  %or = or i32 %10, %11, !dbg !2479
  %tobool11 = icmp ne i32 %or, 0, !dbg !2479
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !2480

if.then12:                                        ; preds = %if.then10
  %12 = load i32, i32* @float_exception_flags, align 4, !dbg !2481
  %or13 = or i32 %12, 1, !dbg !2481
  store i32 %or13, i32* @float_exception_flags, align 4, !dbg !2481
  br label %if.end14, !dbg !2482

if.end14:                                         ; preds = %if.then12, %if.then10
  store i64 0, i64* %retval, align 8, !dbg !2483
  br label %return, !dbg !2483

if.end15:                                         ; preds = %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  %13 = load i32, i32* %aSig, align 4, !dbg !2484
  %or17 = or i32 %13, 8388608, !dbg !2485
  %conv = zext i32 %or17 to i64, !dbg !2484
  store i64 %conv, i64* %aSig64, align 8, !dbg !2486
  %14 = load i64, i64* %aSig64, align 8, !dbg !2487
  %shl = shl i64 %14, 40, !dbg !2487
  store i64 %shl, i64* %aSig64, align 8, !dbg !2487
  %15 = load i64, i64* %aSig64, align 8, !dbg !2488
  %16 = load i32, i32* %shiftCount, align 4, !dbg !2489
  %sub18 = sub nsw i32 0, %16, !dbg !2490
  %sh_prom = zext i32 %sub18 to i64, !dbg !2491
  %shr = lshr i64 %15, %sh_prom, !dbg !2491
  store i64 %shr, i64* %z, align 8, !dbg !2492
  %17 = load i64, i64* %aSig64, align 8, !dbg !2493
  %18 = load i32, i32* %shiftCount, align 4, !dbg !2495
  %and = and i32 %18, 63, !dbg !2496
  %sh_prom19 = zext i32 %and to i64, !dbg !2497
  %shl20 = shl i64 %17, %sh_prom19, !dbg !2497
  %tobool21 = icmp ne i64 %shl20, 0, !dbg !2498
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !2499

if.then22:                                        ; preds = %if.end16
  %19 = load i32, i32* @float_exception_flags, align 4, !dbg !2500
  %or23 = or i32 %19, 1, !dbg !2500
  store i32 %or23, i32* @float_exception_flags, align 4, !dbg !2500
  br label %if.end24, !dbg !2502

if.end24:                                         ; preds = %if.then22, %if.end16
  %20 = load i32, i32* %aSign, align 4, !dbg !2503
  %tobool25 = icmp ne i32 %20, 0, !dbg !2503
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !2505

if.then26:                                        ; preds = %if.end24
  %21 = load i64, i64* %z, align 8, !dbg !2506
  %sub27 = sub nsw i64 0, %21, !dbg !2507
  store i64 %sub27, i64* %z, align 8, !dbg !2508
  br label %if.end28, !dbg !2509

if.end28:                                         ; preds = %if.then26, %if.end24
  %22 = load i64, i64* %z, align 8, !dbg !2510
  store i64 %22, i64* %retval, align 8, !dbg !2511
  br label %return, !dbg !2511

return:                                           ; preds = %if.end28, %if.end14, %if.end8, %if.then7
  %23 = load i64, i64* %retval, align 8, !dbg !2512
  ret i64 %23, !dbg !2512
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float32_to_float64(i32 %a) #0 !dbg !2513 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %agg.tmp = alloca %struct.commonNaNT, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2516, metadata !DIExpression()), !dbg !2517
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2518, metadata !DIExpression()), !dbg !2519
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2520, metadata !DIExpression()), !dbg !2521
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2522, metadata !DIExpression()), !dbg !2523
  %0 = load i32, i32* %a.addr, align 4, !dbg !2524
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2525
  store i32 %call, i32* %aSig, align 4, !dbg !2526
  %1 = load i32, i32* %a.addr, align 4, !dbg !2527
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2528
  store i32 %call1, i32* %aExp, align 4, !dbg !2529
  %2 = load i32, i32* %a.addr, align 4, !dbg !2530
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2531
  store i32 %call2, i32* %aSign, align 4, !dbg !2532
  %3 = load i32, i32* %aExp, align 4, !dbg !2533
  %cmp = icmp eq i32 %3, 255, !dbg !2535
  br i1 %cmp, label %if.then, label %if.end6, !dbg !2536

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %aSig, align 4, !dbg !2537
  %tobool = icmp ne i32 %4, 0, !dbg !2537
  br i1 %tobool, label %if.then3, label %if.end, !dbg !2540

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %a.addr, align 4, !dbg !2541
  call void @float32ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i32 %5), !dbg !2542
  %call4 = call i64 @commonNaNToFloat64(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !2543
  store i64 %call4, i64* %retval, align 8, !dbg !2544
  br label %return, !dbg !2544

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %aSign, align 4, !dbg !2545
  %call5 = call i64 @packFloat64(i32 %6, i32 2047, i64 0), !dbg !2546
  store i64 %call5, i64* %retval, align 8, !dbg !2547
  br label %return, !dbg !2547

if.end6:                                          ; preds = %entry
  %7 = load i32, i32* %aExp, align 4, !dbg !2548
  %cmp7 = icmp eq i32 %7, 0, !dbg !2550
  br i1 %cmp7, label %if.then8, label %if.end13, !dbg !2551

if.then8:                                         ; preds = %if.end6
  %8 = load i32, i32* %aSig, align 4, !dbg !2552
  %cmp9 = icmp eq i32 %8, 0, !dbg !2555
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !2556

if.then10:                                        ; preds = %if.then8
  %9 = load i32, i32* %aSign, align 4, !dbg !2557
  %call11 = call i64 @packFloat64(i32 %9, i32 0, i64 0), !dbg !2558
  store i64 %call11, i64* %retval, align 8, !dbg !2559
  br label %return, !dbg !2559

if.end12:                                         ; preds = %if.then8
  %10 = load i32, i32* %aSig, align 4, !dbg !2560
  call void @normalizeFloat32Subnormal(i32 %10, i32* %aExp, i32* %aSig), !dbg !2561
  %11 = load i32, i32* %aExp, align 4, !dbg !2562
  %dec = add nsw i32 %11, -1, !dbg !2562
  store i32 %dec, i32* %aExp, align 4, !dbg !2562
  br label %if.end13, !dbg !2563

if.end13:                                         ; preds = %if.end12, %if.end6
  %12 = load i32, i32* %aSign, align 4, !dbg !2564
  %13 = load i32, i32* %aExp, align 4, !dbg !2565
  %add = add nsw i32 %13, 896, !dbg !2566
  %14 = load i32, i32* %aSig, align 4, !dbg !2567
  %conv = zext i32 %14 to i64, !dbg !2568
  %shl = shl i64 %conv, 29, !dbg !2569
  %call14 = call i64 @packFloat64(i32 %12, i32 %add, i64 %shl), !dbg !2570
  store i64 %call14, i64* %retval, align 8, !dbg !2571
  br label %return, !dbg !2571

return:                                           ; preds = %if.end13, %if.then10, %if.end, %if.then3
  %15 = load i64, i64* %retval, align 8, !dbg !2572
  ret i64 %15, !dbg !2572
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @commonNaNToFloat64(%struct.commonNaNT* byval align 8 %a) #0 !dbg !2573 {
entry:
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %a, metadata !2582, metadata !DIExpression()), !dbg !2583
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 0, !dbg !2584
  %0 = load i32, i32* %sign, align 8, !dbg !2584
  %conv = sext i32 %0 to i64, !dbg !2585
  %shl = shl i64 %conv, 63, !dbg !2586
  %or = or i64 %shl, 9221120237041090560, !dbg !2587
  %high = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 1, !dbg !2588
  %1 = load i64, i64* %high, align 8, !dbg !2588
  %shr = lshr i64 %1, 12, !dbg !2589
  %or1 = or i64 %or, %shr, !dbg !2590
  ret i64 %or1, !dbg !2591
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @float32ToCommonNaN(%struct.commonNaNT* noalias sret %agg.result, i32 %a) #0 !dbg !2592 {
entry:
  %a.addr = alloca i32, align 4
  %z = alloca %struct.commonNaNT, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2595, metadata !DIExpression()), !dbg !2596
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %z, metadata !2597, metadata !DIExpression()), !dbg !2598
  %0 = load i32, i32* %a.addr, align 4, !dbg !2599
  %call = call zeroext i1 @float32_is_signaling_nan(i32 %0), !dbg !2601
  br i1 %call, label %if.then, label %if.end, !dbg !2602

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !2603
  br label %if.end, !dbg !2603

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !2604
  %shr = lshr i32 %1, 31, !dbg !2605
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 0, !dbg !2606
  store i32 %shr, i32* %sign, align 8, !dbg !2607
  %low = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 2, !dbg !2608
  store i64 0, i64* %low, align 8, !dbg !2609
  %2 = load i32, i32* %a.addr, align 4, !dbg !2610
  %conv = zext i32 %2 to i64, !dbg !2611
  %shl = shl i64 %conv, 41, !dbg !2612
  %high = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 1, !dbg !2613
  store i64 %shl, i64* %high, align 8, !dbg !2614
  %3 = bitcast %struct.commonNaNT* %agg.result to i8*, !dbg !2615
  %4 = bitcast %struct.commonNaNT* %z to i8*, !dbg !2615
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 24, i32 8, i1 false), !dbg !2615
  ret void, !dbg !2616
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @normalizeFloat32Subnormal(i32 %aSig, i32* %zExpPtr, i32* %zSigPtr) #0 !dbg !2617 {
entry:
  %aSig.addr = alloca i32, align 4
  %zExpPtr.addr = alloca i32*, align 8
  %zSigPtr.addr = alloca i32*, align 8
  %shiftCount = alloca i32, align 4
  store i32 %aSig, i32* %aSig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aSig.addr, metadata !2621, metadata !DIExpression()), !dbg !2622
  store i32* %zExpPtr, i32** %zExpPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %zExpPtr.addr, metadata !2623, metadata !DIExpression()), !dbg !2624
  store i32* %zSigPtr, i32** %zSigPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %zSigPtr.addr, metadata !2625, metadata !DIExpression()), !dbg !2626
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !2627, metadata !DIExpression()), !dbg !2628
  %0 = load i32, i32* %aSig.addr, align 4, !dbg !2629
  %call = call i32 @countLeadingZeros32(i32 %0), !dbg !2630
  %sub = sub nsw i32 %call, 8, !dbg !2631
  store i32 %sub, i32* %shiftCount, align 4, !dbg !2632
  %1 = load i32, i32* %aSig.addr, align 4, !dbg !2633
  %2 = load i32, i32* %shiftCount, align 4, !dbg !2634
  %shl = shl i32 %1, %2, !dbg !2635
  %3 = load i32*, i32** %zSigPtr.addr, align 8, !dbg !2636
  store i32 %shl, i32* %3, align 4, !dbg !2637
  %4 = load i32, i32* %shiftCount, align 4, !dbg !2638
  %sub1 = sub nsw i32 1, %4, !dbg !2639
  %5 = load i32*, i32** %zExpPtr.addr, align 8, !dbg !2640
  store i32 %sub1, i32* %5, align 4, !dbg !2641
  ret void, !dbg !2642
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @float32_to_floatx80(i32 %a) #0 !dbg !2643 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %agg.tmp = alloca %struct.commonNaNT, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2646, metadata !DIExpression()), !dbg !2647
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2648, metadata !DIExpression()), !dbg !2649
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2650, metadata !DIExpression()), !dbg !2651
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2652, metadata !DIExpression()), !dbg !2653
  %0 = load i32, i32* %a.addr, align 4, !dbg !2654
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2655
  store i32 %call, i32* %aSig, align 4, !dbg !2656
  %1 = load i32, i32* %a.addr, align 4, !dbg !2657
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2658
  store i32 %call1, i32* %aExp, align 4, !dbg !2659
  %2 = load i32, i32* %a.addr, align 4, !dbg !2660
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2661
  store i32 %call2, i32* %aSign, align 4, !dbg !2662
  %3 = load i32, i32* %aExp, align 4, !dbg !2663
  %cmp = icmp eq i32 %3, 255, !dbg !2665
  br i1 %cmp, label %if.then, label %if.end6, !dbg !2666

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %aSig, align 4, !dbg !2667
  %tobool = icmp ne i32 %4, 0, !dbg !2667
  br i1 %tobool, label %if.then3, label %if.end, !dbg !2670

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %a.addr, align 4, !dbg !2671
  call void @float32ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i32 %5), !dbg !2672
  %call4 = call { i16, i64 } @commonNaNToFloatx80(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !2673
  %6 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !2673
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !2673
  %8 = extractvalue { i16, i64 } %call4, 0, !dbg !2673
  store i16 %8, i16* %7, align 8, !dbg !2673
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !2673
  %10 = extractvalue { i16, i64 } %call4, 1, !dbg !2673
  store i64 %10, i64* %9, align 8, !dbg !2673
  br label %return, !dbg !2674

if.end:                                           ; preds = %if.then
  %11 = load i32, i32* %aSign, align 4, !dbg !2675
  %call5 = call { i16, i64 } @packFloatx80(i32 %11, i32 32767, i64 -9223372036854775808), !dbg !2676
  %12 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !2676
  %13 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %12, i32 0, i32 0, !dbg !2676
  %14 = extractvalue { i16, i64 } %call5, 0, !dbg !2676
  store i16 %14, i16* %13, align 8, !dbg !2676
  %15 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %12, i32 0, i32 1, !dbg !2676
  %16 = extractvalue { i16, i64 } %call5, 1, !dbg !2676
  store i64 %16, i64* %15, align 8, !dbg !2676
  br label %return, !dbg !2677

if.end6:                                          ; preds = %entry
  %17 = load i32, i32* %aExp, align 4, !dbg !2678
  %cmp7 = icmp eq i32 %17, 0, !dbg !2680
  br i1 %cmp7, label %if.then8, label %if.end13, !dbg !2681

if.then8:                                         ; preds = %if.end6
  %18 = load i32, i32* %aSig, align 4, !dbg !2682
  %cmp9 = icmp eq i32 %18, 0, !dbg !2685
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !2686

if.then10:                                        ; preds = %if.then8
  %19 = load i32, i32* %aSign, align 4, !dbg !2687
  %call11 = call { i16, i64 } @packFloatx80(i32 %19, i32 0, i64 0), !dbg !2688
  %20 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !2688
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !2688
  %22 = extractvalue { i16, i64 } %call11, 0, !dbg !2688
  store i16 %22, i16* %21, align 8, !dbg !2688
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !2688
  %24 = extractvalue { i16, i64 } %call11, 1, !dbg !2688
  store i64 %24, i64* %23, align 8, !dbg !2688
  br label %return, !dbg !2689

if.end12:                                         ; preds = %if.then8
  %25 = load i32, i32* %aSig, align 4, !dbg !2690
  call void @normalizeFloat32Subnormal(i32 %25, i32* %aExp, i32* %aSig), !dbg !2691
  br label %if.end13, !dbg !2692

if.end13:                                         ; preds = %if.end12, %if.end6
  %26 = load i32, i32* %aSig, align 4, !dbg !2693
  %or = or i32 %26, 8388608, !dbg !2693
  store i32 %or, i32* %aSig, align 4, !dbg !2693
  %27 = load i32, i32* %aSign, align 4, !dbg !2694
  %28 = load i32, i32* %aExp, align 4, !dbg !2695
  %add = add nsw i32 %28, 16256, !dbg !2696
  %29 = load i32, i32* %aSig, align 4, !dbg !2697
  %conv = zext i32 %29 to i64, !dbg !2698
  %shl = shl i64 %conv, 40, !dbg !2699
  %call14 = call { i16, i64 } @packFloatx80(i32 %27, i32 %add, i64 %shl), !dbg !2700
  %30 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !2700
  %31 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %30, i32 0, i32 0, !dbg !2700
  %32 = extractvalue { i16, i64 } %call14, 0, !dbg !2700
  store i16 %32, i16* %31, align 8, !dbg !2700
  %33 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %30, i32 0, i32 1, !dbg !2700
  %34 = extractvalue { i16, i64 } %call14, 1, !dbg !2700
  store i64 %34, i64* %33, align 8, !dbg !2700
  br label %return, !dbg !2701

return:                                           ; preds = %if.end13, %if.then10, %if.end, %if.then3
  %35 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !2702
  %36 = load { i16, i64 }, { i16, i64 }* %35, align 8, !dbg !2702
  ret { i16, i64 } %36, !dbg !2702
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i16, i64 } @commonNaNToFloatx80(%struct.commonNaNT* byval align 8 %a) #0 !dbg !2703 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %z = alloca %struct.floatx80, align 8
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %a, metadata !2706, metadata !DIExpression()), !dbg !2707
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !2708, metadata !DIExpression()), !dbg !2709
  %high = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 1, !dbg !2710
  %0 = load i64, i64* %high, align 8, !dbg !2710
  %shr = lshr i64 %0, 1, !dbg !2711
  %or = or i64 -4611686018427387904, %shr, !dbg !2712
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !2713
  store i64 %or, i64* %low, align 8, !dbg !2714
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 0, !dbg !2715
  %1 = load i32, i32* %sign, align 8, !dbg !2715
  %conv = trunc i32 %1 to i16, !dbg !2716
  %conv1 = zext i16 %conv to i32, !dbg !2717
  %shl = shl i32 %conv1, 15, !dbg !2718
  %or2 = or i32 %shl, 32767, !dbg !2719
  %conv3 = trunc i32 %or2 to i16, !dbg !2720
  %high4 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !2721
  store i16 %conv3, i16* %high4, align 8, !dbg !2722
  %2 = bitcast %struct.floatx80* %retval to i8*, !dbg !2723
  %3 = bitcast %struct.floatx80* %z to i8*, !dbg !2723
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 16, i32 8, i1 false), !dbg !2723
  %4 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !2724
  %5 = load { i16, i64 }, { i16, i64 }* %4, align 8, !dbg !2724
  ret { i16, i64 } %5, !dbg !2724
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float32_to_float128(i32 %a) #0 !dbg !2725 {
entry:
  %retval = alloca %struct.float128, align 8
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %agg.tmp = alloca %struct.commonNaNT, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2728, metadata !DIExpression()), !dbg !2729
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2730, metadata !DIExpression()), !dbg !2731
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2732, metadata !DIExpression()), !dbg !2733
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !2734, metadata !DIExpression()), !dbg !2735
  %0 = load i32, i32* %a.addr, align 4, !dbg !2736
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !2737
  store i32 %call, i32* %aSig, align 4, !dbg !2738
  %1 = load i32, i32* %a.addr, align 4, !dbg !2739
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !2740
  store i32 %call1, i32* %aExp, align 4, !dbg !2741
  %2 = load i32, i32* %a.addr, align 4, !dbg !2742
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !2743
  store i32 %call2, i32* %aSign, align 4, !dbg !2744
  %3 = load i32, i32* %aExp, align 4, !dbg !2745
  %cmp = icmp eq i32 %3, 255, !dbg !2747
  br i1 %cmp, label %if.then, label %if.end6, !dbg !2748

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %aSig, align 4, !dbg !2749
  %tobool = icmp ne i32 %4, 0, !dbg !2749
  br i1 %tobool, label %if.then3, label %if.end, !dbg !2752

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %a.addr, align 4, !dbg !2753
  call void @float32ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i32 %5), !dbg !2754
  %call4 = call { i64, i64 } @commonNaNToFloat128(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !2755
  %6 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2755
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !2755
  %8 = extractvalue { i64, i64 } %call4, 0, !dbg !2755
  store i64 %8, i64* %7, align 8, !dbg !2755
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !2755
  %10 = extractvalue { i64, i64 } %call4, 1, !dbg !2755
  store i64 %10, i64* %9, align 8, !dbg !2755
  br label %return, !dbg !2756

if.end:                                           ; preds = %if.then
  %11 = load i32, i32* %aSign, align 4, !dbg !2757
  %call5 = call { i64, i64 } @packFloat128(i32 %11, i32 32767, i64 0, i64 0), !dbg !2758
  %12 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2758
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !2758
  %14 = extractvalue { i64, i64 } %call5, 0, !dbg !2758
  store i64 %14, i64* %13, align 8, !dbg !2758
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !2758
  %16 = extractvalue { i64, i64 } %call5, 1, !dbg !2758
  store i64 %16, i64* %15, align 8, !dbg !2758
  br label %return, !dbg !2759

if.end6:                                          ; preds = %entry
  %17 = load i32, i32* %aExp, align 4, !dbg !2760
  %cmp7 = icmp eq i32 %17, 0, !dbg !2762
  br i1 %cmp7, label %if.then8, label %if.end13, !dbg !2763

if.then8:                                         ; preds = %if.end6
  %18 = load i32, i32* %aSig, align 4, !dbg !2764
  %cmp9 = icmp eq i32 %18, 0, !dbg !2767
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !2768

if.then10:                                        ; preds = %if.then8
  %19 = load i32, i32* %aSign, align 4, !dbg !2769
  %call11 = call { i64, i64 } @packFloat128(i32 %19, i32 0, i64 0, i64 0), !dbg !2770
  %20 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2770
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0, !dbg !2770
  %22 = extractvalue { i64, i64 } %call11, 0, !dbg !2770
  store i64 %22, i64* %21, align 8, !dbg !2770
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !2770
  %24 = extractvalue { i64, i64 } %call11, 1, !dbg !2770
  store i64 %24, i64* %23, align 8, !dbg !2770
  br label %return, !dbg !2771

if.end12:                                         ; preds = %if.then8
  %25 = load i32, i32* %aSig, align 4, !dbg !2772
  call void @normalizeFloat32Subnormal(i32 %25, i32* %aExp, i32* %aSig), !dbg !2773
  %26 = load i32, i32* %aExp, align 4, !dbg !2774
  %dec = add nsw i32 %26, -1, !dbg !2774
  store i32 %dec, i32* %aExp, align 4, !dbg !2774
  br label %if.end13, !dbg !2775

if.end13:                                         ; preds = %if.end12, %if.end6
  %27 = load i32, i32* %aSign, align 4, !dbg !2776
  %28 = load i32, i32* %aExp, align 4, !dbg !2777
  %add = add nsw i32 %28, 16256, !dbg !2778
  %29 = load i32, i32* %aSig, align 4, !dbg !2779
  %conv = zext i32 %29 to i64, !dbg !2780
  %shl = shl i64 %conv, 25, !dbg !2781
  %call14 = call { i64, i64 } @packFloat128(i32 %27, i32 %add, i64 %shl, i64 0), !dbg !2782
  %30 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2782
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0, !dbg !2782
  %32 = extractvalue { i64, i64 } %call14, 0, !dbg !2782
  store i64 %32, i64* %31, align 8, !dbg !2782
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1, !dbg !2782
  %34 = extractvalue { i64, i64 } %call14, 1, !dbg !2782
  store i64 %34, i64* %33, align 8, !dbg !2782
  br label %return, !dbg !2783

return:                                           ; preds = %if.end13, %if.then10, %if.end, %if.then3
  %35 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2784
  %36 = load { i64, i64 }, { i64, i64 }* %35, align 8, !dbg !2784
  ret { i64, i64 } %36, !dbg !2784
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @commonNaNToFloat128(%struct.commonNaNT* byval align 8 %a) #0 !dbg !2785 {
entry:
  %retval = alloca %struct.float128, align 8
  %z = alloca %struct.float128, align 8
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %a, metadata !2788, metadata !DIExpression()), !dbg !2789
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !2790, metadata !DIExpression()), !dbg !2791
  %high = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 1, !dbg !2792
  %0 = load i64, i64* %high, align 8, !dbg !2792
  %low = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 2, !dbg !2793
  %1 = load i64, i64* %low, align 8, !dbg !2793
  %high1 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !2794
  %low2 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !2795
  call void @shift128Right(i64 %0, i64 %1, i32 16, i64* %high1, i64* %low2), !dbg !2796
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 0, !dbg !2797
  %2 = load i32, i32* %sign, align 8, !dbg !2797
  %conv = sext i32 %2 to i64, !dbg !2798
  %shl = shl i64 %conv, 63, !dbg !2799
  %or = or i64 %shl, 9223231299366420480, !dbg !2800
  %high3 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !2801
  %3 = load i64, i64* %high3, align 8, !dbg !2802
  %or4 = or i64 %3, %or, !dbg !2802
  store i64 %or4, i64* %high3, align 8, !dbg !2802
  %4 = bitcast %struct.float128* %retval to i8*, !dbg !2803
  %5 = bitcast %struct.float128* %z to i8*, !dbg !2803
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 16, i32 8, i1 false), !dbg !2803
  %6 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !2804
  %7 = load { i64, i64 }, { i64, i64 }* %6, align 8, !dbg !2804
  ret { i64, i64 } %7, !dbg !2804
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_round_to_int(i32 %a) #0 !dbg !2805 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %lastBitMask = alloca i32, align 4
  %roundBitsMask = alloca i32, align 4
  %roundingMode = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2808, metadata !DIExpression()), !dbg !2809
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2810, metadata !DIExpression()), !dbg !2811
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !2812, metadata !DIExpression()), !dbg !2813
  call void @llvm.dbg.declare(metadata i32* %lastBitMask, metadata !2814, metadata !DIExpression()), !dbg !2815
  call void @llvm.dbg.declare(metadata i32* %roundBitsMask, metadata !2816, metadata !DIExpression()), !dbg !2817
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !2818, metadata !DIExpression()), !dbg !2819
  call void @llvm.dbg.declare(metadata i32* %z, metadata !2820, metadata !DIExpression()), !dbg !2821
  %0 = load i32, i32* %a.addr, align 4, !dbg !2822
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !2823
  store i32 %call, i32* %aExp, align 4, !dbg !2824
  %1 = load i32, i32* %aExp, align 4, !dbg !2825
  %cmp = icmp sle i32 150, %1, !dbg !2827
  br i1 %cmp, label %if.then, label %if.end5, !dbg !2828

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %aExp, align 4, !dbg !2829
  %cmp1 = icmp eq i32 %2, 255, !dbg !2832
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !2833

land.lhs.true:                                    ; preds = %if.then
  %3 = load i32, i32* %a.addr, align 4, !dbg !2834
  %call2 = call i32 @extractFloat32Frac(i32 %3), !dbg !2835
  %tobool = icmp ne i32 %call2, 0, !dbg !2835
  br i1 %tobool, label %if.then3, label %if.end, !dbg !2836

if.then3:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %a.addr, align 4, !dbg !2837
  %5 = load i32, i32* %a.addr, align 4, !dbg !2839
  %call4 = call i32 @propagateFloat32NaN(i32 %4, i32 %5), !dbg !2840
  store i32 %call4, i32* %retval, align 4, !dbg !2841
  br label %return, !dbg !2841

if.end:                                           ; preds = %land.lhs.true, %if.then
  %6 = load i32, i32* %a.addr, align 4, !dbg !2842
  store i32 %6, i32* %retval, align 4, !dbg !2843
  br label %return, !dbg !2843

if.end5:                                          ; preds = %entry
  %7 = load i32, i32* %aExp, align 4, !dbg !2844
  %cmp6 = icmp sle i32 %7, 126, !dbg !2846
  br i1 %cmp6, label %if.then7, label %if.end25, !dbg !2847

if.then7:                                         ; preds = %if.end5
  %8 = load i32, i32* %a.addr, align 4, !dbg !2848
  %shl = shl i32 %8, 1, !dbg !2851
  %cmp8 = icmp eq i32 %shl, 0, !dbg !2852
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !2853

if.then9:                                         ; preds = %if.then7
  %9 = load i32, i32* %a.addr, align 4, !dbg !2854
  store i32 %9, i32* %retval, align 4, !dbg !2855
  br label %return, !dbg !2855

if.end10:                                         ; preds = %if.then7
  %10 = load i32, i32* @float_exception_flags, align 4, !dbg !2856
  %or = or i32 %10, 1, !dbg !2856
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !2856
  %11 = load i32, i32* %a.addr, align 4, !dbg !2857
  %call11 = call i32 @extractFloat32Sign(i32 %11), !dbg !2858
  store i32 %call11, i32* %aSign, align 4, !dbg !2859
  %12 = load i32, i32* @float_rounding_mode, align 4, !dbg !2860
  switch i32 %12, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb19
    i32 2, label %sw.bb21
  ], !dbg !2861

sw.bb:                                            ; preds = %if.end10
  %13 = load i32, i32* %aExp, align 4, !dbg !2862
  %cmp12 = icmp eq i32 %13, 126, !dbg !2865
  br i1 %cmp12, label %land.lhs.true13, label %if.end18, !dbg !2866

land.lhs.true13:                                  ; preds = %sw.bb
  %14 = load i32, i32* %a.addr, align 4, !dbg !2867
  %call14 = call i32 @extractFloat32Frac(i32 %14), !dbg !2868
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2868
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !2869

if.then16:                                        ; preds = %land.lhs.true13
  %15 = load i32, i32* %aSign, align 4, !dbg !2870
  %call17 = call i32 @packFloat32(i32 %15, i32 127, i32 0), !dbg !2872
  store i32 %call17, i32* %retval, align 4, !dbg !2873
  br label %return, !dbg !2873

if.end18:                                         ; preds = %land.lhs.true13, %sw.bb
  br label %sw.epilog, !dbg !2874

sw.bb19:                                          ; preds = %if.end10
  %16 = load i32, i32* %aSign, align 4, !dbg !2875
  %tobool20 = icmp ne i32 %16, 0, !dbg !2875
  %17 = zext i1 %tobool20 to i64, !dbg !2875
  %cond = select i1 %tobool20, i32 -1082130432, i32 0, !dbg !2875
  store i32 %cond, i32* %retval, align 4, !dbg !2876
  br label %return, !dbg !2876

sw.bb21:                                          ; preds = %if.end10
  %18 = load i32, i32* %aSign, align 4, !dbg !2877
  %tobool22 = icmp ne i32 %18, 0, !dbg !2877
  %19 = zext i1 %tobool22 to i64, !dbg !2877
  %cond23 = select i1 %tobool22, i32 -2147483648, i32 1065353216, !dbg !2877
  store i32 %cond23, i32* %retval, align 4, !dbg !2878
  br label %return, !dbg !2878

sw.epilog:                                        ; preds = %if.end10, %if.end18
  %20 = load i32, i32* %aSign, align 4, !dbg !2879
  %call24 = call i32 @packFloat32(i32 %20, i32 0, i32 0), !dbg !2880
  store i32 %call24, i32* %retval, align 4, !dbg !2881
  br label %return, !dbg !2881

if.end25:                                         ; preds = %if.end5
  store i32 1, i32* %lastBitMask, align 4, !dbg !2882
  %21 = load i32, i32* %aExp, align 4, !dbg !2883
  %sub = sub nsw i32 150, %21, !dbg !2884
  %22 = load i32, i32* %lastBitMask, align 4, !dbg !2885
  %shl26 = shl i32 %22, %sub, !dbg !2885
  store i32 %shl26, i32* %lastBitMask, align 4, !dbg !2885
  %23 = load i32, i32* %lastBitMask, align 4, !dbg !2886
  %sub27 = sub i32 %23, 1, !dbg !2887
  store i32 %sub27, i32* %roundBitsMask, align 4, !dbg !2888
  %24 = load i32, i32* %a.addr, align 4, !dbg !2889
  store i32 %24, i32* %z, align 4, !dbg !2890
  %25 = load i32, i32* @float_rounding_mode, align 4, !dbg !2891
  store i32 %25, i32* %roundingMode, align 4, !dbg !2892
  %26 = load i32, i32* %roundingMode, align 4, !dbg !2893
  %cmp28 = icmp eq i32 %26, 0, !dbg !2895
  br i1 %cmp28, label %if.then29, label %if.else, !dbg !2896

if.then29:                                        ; preds = %if.end25
  %27 = load i32, i32* %lastBitMask, align 4, !dbg !2897
  %shr = lshr i32 %27, 1, !dbg !2899
  %28 = load i32, i32* %z, align 4, !dbg !2900
  %add = add i32 %28, %shr, !dbg !2900
  store i32 %add, i32* %z, align 4, !dbg !2900
  %29 = load i32, i32* %z, align 4, !dbg !2901
  %30 = load i32, i32* %roundBitsMask, align 4, !dbg !2903
  %and = and i32 %29, %30, !dbg !2904
  %cmp30 = icmp eq i32 %and, 0, !dbg !2905
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !2906

if.then31:                                        ; preds = %if.then29
  %31 = load i32, i32* %lastBitMask, align 4, !dbg !2907
  %neg = xor i32 %31, -1, !dbg !2908
  %32 = load i32, i32* %z, align 4, !dbg !2909
  %and32 = and i32 %32, %neg, !dbg !2909
  store i32 %and32, i32* %z, align 4, !dbg !2909
  br label %if.end33, !dbg !2910

if.end33:                                         ; preds = %if.then31, %if.then29
  br label %if.end43, !dbg !2911

if.else:                                          ; preds = %if.end25
  %33 = load i32, i32* %roundingMode, align 4, !dbg !2912
  %cmp34 = icmp ne i32 %33, 1, !dbg !2914
  br i1 %cmp34, label %if.then35, label %if.end42, !dbg !2915

if.then35:                                        ; preds = %if.else
  %34 = load i32, i32* %z, align 4, !dbg !2916
  %call36 = call i32 @extractFloat32Sign(i32 %34), !dbg !2919
  %35 = load i32, i32* %roundingMode, align 4, !dbg !2920
  %cmp37 = icmp eq i32 %35, 2, !dbg !2921
  %conv = zext i1 %cmp37 to i32, !dbg !2921
  %xor = xor i32 %call36, %conv, !dbg !2922
  %tobool38 = icmp ne i32 %xor, 0, !dbg !2922
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !2923

if.then39:                                        ; preds = %if.then35
  %36 = load i32, i32* %roundBitsMask, align 4, !dbg !2924
  %37 = load i32, i32* %z, align 4, !dbg !2926
  %add40 = add i32 %37, %36, !dbg !2926
  store i32 %add40, i32* %z, align 4, !dbg !2926
  br label %if.end41, !dbg !2927

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !2928

if.end42:                                         ; preds = %if.end41, %if.else
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end33
  %38 = load i32, i32* %roundBitsMask, align 4, !dbg !2929
  %neg44 = xor i32 %38, -1, !dbg !2930
  %39 = load i32, i32* %z, align 4, !dbg !2931
  %and45 = and i32 %39, %neg44, !dbg !2931
  store i32 %and45, i32* %z, align 4, !dbg !2931
  %40 = load i32, i32* %z, align 4, !dbg !2932
  %41 = load i32, i32* %a.addr, align 4, !dbg !2934
  %cmp46 = icmp ne i32 %40, %41, !dbg !2935
  br i1 %cmp46, label %if.then48, label %if.end50, !dbg !2936

if.then48:                                        ; preds = %if.end43
  %42 = load i32, i32* @float_exception_flags, align 4, !dbg !2937
  %or49 = or i32 %42, 1, !dbg !2937
  store i32 %or49, i32* @float_exception_flags, align 4, !dbg !2937
  br label %if.end50, !dbg !2938

if.end50:                                         ; preds = %if.then48, %if.end43
  %43 = load i32, i32* %z, align 4, !dbg !2939
  store i32 %43, i32* %retval, align 4, !dbg !2940
  br label %return, !dbg !2940

return:                                           ; preds = %if.end50, %sw.epilog, %sw.bb21, %sw.bb19, %if.then16, %if.then9, %if.end, %if.then3
  %44 = load i32, i32* %retval, align 4, !dbg !2941
  ret i32 %44, !dbg !2941
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @propagateFloat32NaN(i32 %a, i32 %b) #0 !dbg !2942 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aIsNaN = alloca i32, align 4
  %aIsSignalingNaN = alloca i32, align 4
  %bIsNaN = alloca i32, align 4
  %bIsSignalingNaN = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2945, metadata !DIExpression()), !dbg !2946
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !2947, metadata !DIExpression()), !dbg !2948
  call void @llvm.dbg.declare(metadata i32* %aIsNaN, metadata !2949, metadata !DIExpression()), !dbg !2950
  call void @llvm.dbg.declare(metadata i32* %aIsSignalingNaN, metadata !2951, metadata !DIExpression()), !dbg !2952
  call void @llvm.dbg.declare(metadata i32* %bIsNaN, metadata !2953, metadata !DIExpression()), !dbg !2954
  call void @llvm.dbg.declare(metadata i32* %bIsSignalingNaN, metadata !2955, metadata !DIExpression()), !dbg !2956
  %0 = load i32, i32* %a.addr, align 4, !dbg !2957
  %call = call zeroext i1 @float32_is_nan(i32 %0), !dbg !2958
  %conv = zext i1 %call to i32, !dbg !2958
  store i32 %conv, i32* %aIsNaN, align 4, !dbg !2959
  %1 = load i32, i32* %a.addr, align 4, !dbg !2960
  %call1 = call zeroext i1 @float32_is_signaling_nan(i32 %1), !dbg !2961
  %conv2 = zext i1 %call1 to i32, !dbg !2961
  store i32 %conv2, i32* %aIsSignalingNaN, align 4, !dbg !2962
  %2 = load i32, i32* %b.addr, align 4, !dbg !2963
  %call3 = call zeroext i1 @float32_is_nan(i32 %2), !dbg !2964
  %conv4 = zext i1 %call3 to i32, !dbg !2964
  store i32 %conv4, i32* %bIsNaN, align 4, !dbg !2965
  %3 = load i32, i32* %b.addr, align 4, !dbg !2966
  %call5 = call zeroext i1 @float32_is_signaling_nan(i32 %3), !dbg !2967
  %conv6 = zext i1 %call5 to i32, !dbg !2967
  store i32 %conv6, i32* %bIsSignalingNaN, align 4, !dbg !2968
  %4 = load i32, i32* %a.addr, align 4, !dbg !2969
  %or = or i32 %4, 4194304, !dbg !2969
  store i32 %or, i32* %a.addr, align 4, !dbg !2969
  %5 = load i32, i32* %b.addr, align 4, !dbg !2970
  %or7 = or i32 %5, 4194304, !dbg !2970
  store i32 %or7, i32* %b.addr, align 4, !dbg !2970
  %6 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !2971
  %7 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !2973
  %or8 = or i32 %6, %7, !dbg !2974
  %tobool = icmp ne i32 %or8, 0, !dbg !2974
  br i1 %tobool, label %if.then, label %if.end, !dbg !2975

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !2976
  br label %if.end, !dbg !2976

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !2977
  %tobool9 = icmp ne i32 %8, 0, !dbg !2977
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2977

cond.true:                                        ; preds = %if.end
  %9 = load i32, i32* %b.addr, align 4, !dbg !2978
  br label %cond.end18, !dbg !2977

cond.false:                                       ; preds = %if.end
  %10 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !2979
  %tobool10 = icmp ne i32 %10, 0, !dbg !2979
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !2979

cond.true11:                                      ; preds = %cond.false
  %11 = load i32, i32* %a.addr, align 4, !dbg !2980
  br label %cond.end16, !dbg !2979

cond.false12:                                     ; preds = %cond.false
  %12 = load i32, i32* %bIsNaN, align 4, !dbg !2981
  %tobool13 = icmp ne i32 %12, 0, !dbg !2981
  br i1 %tobool13, label %cond.true14, label %cond.false15, !dbg !2981

cond.true14:                                      ; preds = %cond.false12
  %13 = load i32, i32* %b.addr, align 4, !dbg !2982
  br label %cond.end, !dbg !2981

cond.false15:                                     ; preds = %cond.false12
  %14 = load i32, i32* %a.addr, align 4, !dbg !2983
  br label %cond.end, !dbg !2981

cond.end:                                         ; preds = %cond.false15, %cond.true14
  %cond = phi i32 [ %13, %cond.true14 ], [ %14, %cond.false15 ], !dbg !2981
  br label %cond.end16, !dbg !2979

cond.end16:                                       ; preds = %cond.end, %cond.true11
  %cond17 = phi i32 [ %11, %cond.true11 ], [ %cond, %cond.end ], !dbg !2979
  br label %cond.end18, !dbg !2977

cond.end18:                                       ; preds = %cond.end16, %cond.true
  %cond19 = phi i32 [ %9, %cond.true ], [ %cond17, %cond.end16 ], !dbg !2977
  ret i32 %cond19, !dbg !2984
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_add(i32 %a, i32 %b) #0 !dbg !2985 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2986, metadata !DIExpression()), !dbg !2987
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !2988, metadata !DIExpression()), !dbg !2989
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !2990, metadata !DIExpression()), !dbg !2991
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !2992, metadata !DIExpression()), !dbg !2993
  %0 = load i32, i32* %a.addr, align 4, !dbg !2994
  %call = call i32 @extractFloat32Sign(i32 %0), !dbg !2995
  store i32 %call, i32* %aSign, align 4, !dbg !2996
  %1 = load i32, i32* %b.addr, align 4, !dbg !2997
  %call1 = call i32 @extractFloat32Sign(i32 %1), !dbg !2998
  store i32 %call1, i32* %bSign, align 4, !dbg !2999
  %2 = load i32, i32* %aSign, align 4, !dbg !3000
  %3 = load i32, i32* %bSign, align 4, !dbg !3002
  %cmp = icmp eq i32 %2, %3, !dbg !3003
  br i1 %cmp, label %if.then, label %if.else, !dbg !3004

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4, !dbg !3005
  %5 = load i32, i32* %b.addr, align 4, !dbg !3007
  %6 = load i32, i32* %aSign, align 4, !dbg !3008
  %call2 = call i32 @addFloat32Sigs(i32 %4, i32 %5, i32 %6), !dbg !3009
  store i32 %call2, i32* %retval, align 4, !dbg !3010
  br label %return, !dbg !3010

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %a.addr, align 4, !dbg !3011
  %8 = load i32, i32* %b.addr, align 4, !dbg !3013
  %9 = load i32, i32* %aSign, align 4, !dbg !3014
  %call3 = call i32 @subFloat32Sigs(i32 %7, i32 %8, i32 %9), !dbg !3015
  store i32 %call3, i32* %retval, align 4, !dbg !3016
  br label %return, !dbg !3016

return:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !3017
  ret i32 %10, !dbg !3017
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @addFloat32Sigs(i32 %a, i32 %b, i32 %zSign) #0 !dbg !3018 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %bSig = alloca i32, align 4
  %zSig = alloca i32, align 4
  %expDiff = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3021, metadata !DIExpression()), !dbg !3022
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3023, metadata !DIExpression()), !dbg !3024
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !3025, metadata !DIExpression()), !dbg !3026
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !3027, metadata !DIExpression()), !dbg !3028
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !3029, metadata !DIExpression()), !dbg !3030
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !3031, metadata !DIExpression()), !dbg !3032
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !3033, metadata !DIExpression()), !dbg !3034
  call void @llvm.dbg.declare(metadata i32* %bSig, metadata !3035, metadata !DIExpression()), !dbg !3036
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !3037, metadata !DIExpression()), !dbg !3038
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !3039, metadata !DIExpression()), !dbg !3040
  %0 = load i32, i32* %a.addr, align 4, !dbg !3041
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !3042
  store i32 %call, i32* %aSig, align 4, !dbg !3043
  %1 = load i32, i32* %a.addr, align 4, !dbg !3044
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !3045
  store i32 %call1, i32* %aExp, align 4, !dbg !3046
  %2 = load i32, i32* %b.addr, align 4, !dbg !3047
  %call2 = call i32 @extractFloat32Frac(i32 %2), !dbg !3048
  store i32 %call2, i32* %bSig, align 4, !dbg !3049
  %3 = load i32, i32* %b.addr, align 4, !dbg !3050
  %call3 = call i32 @extractFloat32Exp(i32 %3), !dbg !3051
  store i32 %call3, i32* %bExp, align 4, !dbg !3052
  %4 = load i32, i32* %aExp, align 4, !dbg !3053
  %5 = load i32, i32* %bExp, align 4, !dbg !3054
  %sub = sub nsw i32 %4, %5, !dbg !3055
  store i32 %sub, i32* %expDiff, align 4, !dbg !3056
  %6 = load i32, i32* %aSig, align 4, !dbg !3057
  %shl = shl i32 %6, 6, !dbg !3057
  store i32 %shl, i32* %aSig, align 4, !dbg !3057
  %7 = load i32, i32* %bSig, align 4, !dbg !3058
  %shl4 = shl i32 %7, 6, !dbg !3058
  store i32 %shl4, i32* %bSig, align 4, !dbg !3058
  %8 = load i32, i32* %expDiff, align 4, !dbg !3059
  %cmp = icmp slt i32 0, %8, !dbg !3061
  br i1 %cmp, label %if.then, label %if.else13, !dbg !3062

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %aExp, align 4, !dbg !3063
  %cmp5 = icmp eq i32 %9, 255, !dbg !3066
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !3067

if.then6:                                         ; preds = %if.then
  %10 = load i32, i32* %aSig, align 4, !dbg !3068
  %tobool = icmp ne i32 %10, 0, !dbg !3068
  br i1 %tobool, label %if.then7, label %if.end, !dbg !3071

if.then7:                                         ; preds = %if.then6
  %11 = load i32, i32* %a.addr, align 4, !dbg !3072
  %12 = load i32, i32* %b.addr, align 4, !dbg !3073
  %call8 = call i32 @propagateFloat32NaN(i32 %11, i32 %12), !dbg !3074
  store i32 %call8, i32* %retval, align 4, !dbg !3075
  br label %return, !dbg !3075

if.end:                                           ; preds = %if.then6
  %13 = load i32, i32* %a.addr, align 4, !dbg !3076
  store i32 %13, i32* %retval, align 4, !dbg !3077
  br label %return, !dbg !3077

if.end9:                                          ; preds = %if.then
  %14 = load i32, i32* %bExp, align 4, !dbg !3078
  %cmp10 = icmp eq i32 %14, 0, !dbg !3080
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !3081

if.then11:                                        ; preds = %if.end9
  %15 = load i32, i32* %expDiff, align 4, !dbg !3082
  %dec = add nsw i32 %15, -1, !dbg !3082
  store i32 %dec, i32* %expDiff, align 4, !dbg !3082
  br label %if.end12, !dbg !3084

if.else:                                          ; preds = %if.end9
  %16 = load i32, i32* %bSig, align 4, !dbg !3085
  %or = or i32 %16, 536870912, !dbg !3085
  store i32 %or, i32* %bSig, align 4, !dbg !3085
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then11
  %17 = load i32, i32* %bSig, align 4, !dbg !3087
  %18 = load i32, i32* %expDiff, align 4, !dbg !3088
  call void @shift32RightJamming(i32 %17, i32 %18, i32* %bSig), !dbg !3089
  %19 = load i32, i32* %aExp, align 4, !dbg !3090
  store i32 %19, i32* %zExp, align 4, !dbg !3091
  br label %if.end46, !dbg !3092

if.else13:                                        ; preds = %entry
  %20 = load i32, i32* %expDiff, align 4, !dbg !3093
  %cmp14 = icmp slt i32 %20, 0, !dbg !3095
  br i1 %cmp14, label %if.then15, label %if.else30, !dbg !3096

if.then15:                                        ; preds = %if.else13
  %21 = load i32, i32* %bExp, align 4, !dbg !3097
  %cmp16 = icmp eq i32 %21, 255, !dbg !3100
  br i1 %cmp16, label %if.then17, label %if.end23, !dbg !3101

if.then17:                                        ; preds = %if.then15
  %22 = load i32, i32* %bSig, align 4, !dbg !3102
  %tobool18 = icmp ne i32 %22, 0, !dbg !3102
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !3105

if.then19:                                        ; preds = %if.then17
  %23 = load i32, i32* %a.addr, align 4, !dbg !3106
  %24 = load i32, i32* %b.addr, align 4, !dbg !3107
  %call20 = call i32 @propagateFloat32NaN(i32 %23, i32 %24), !dbg !3108
  store i32 %call20, i32* %retval, align 4, !dbg !3109
  br label %return, !dbg !3109

if.end21:                                         ; preds = %if.then17
  %25 = load i32, i32* %zSign.addr, align 4, !dbg !3110
  %call22 = call i32 @packFloat32(i32 %25, i32 255, i32 0), !dbg !3111
  store i32 %call22, i32* %retval, align 4, !dbg !3112
  br label %return, !dbg !3112

if.end23:                                         ; preds = %if.then15
  %26 = load i32, i32* %aExp, align 4, !dbg !3113
  %cmp24 = icmp eq i32 %26, 0, !dbg !3115
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !3116

if.then25:                                        ; preds = %if.end23
  %27 = load i32, i32* %expDiff, align 4, !dbg !3117
  %inc = add nsw i32 %27, 1, !dbg !3117
  store i32 %inc, i32* %expDiff, align 4, !dbg !3117
  br label %if.end28, !dbg !3119

if.else26:                                        ; preds = %if.end23
  %28 = load i32, i32* %aSig, align 4, !dbg !3120
  %or27 = or i32 %28, 536870912, !dbg !3120
  store i32 %or27, i32* %aSig, align 4, !dbg !3120
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %if.then25
  %29 = load i32, i32* %aSig, align 4, !dbg !3122
  %30 = load i32, i32* %expDiff, align 4, !dbg !3123
  %sub29 = sub nsw i32 0, %30, !dbg !3124
  call void @shift32RightJamming(i32 %29, i32 %sub29, i32* %aSig), !dbg !3125
  %31 = load i32, i32* %bExp, align 4, !dbg !3126
  store i32 %31, i32* %zExp, align 4, !dbg !3127
  br label %if.end45, !dbg !3128

if.else30:                                        ; preds = %if.else13
  %32 = load i32, i32* %aExp, align 4, !dbg !3129
  %cmp31 = icmp eq i32 %32, 255, !dbg !3132
  br i1 %cmp31, label %if.then32, label %if.end38, !dbg !3133

if.then32:                                        ; preds = %if.else30
  %33 = load i32, i32* %aSig, align 4, !dbg !3134
  %34 = load i32, i32* %bSig, align 4, !dbg !3137
  %or33 = or i32 %33, %34, !dbg !3138
  %tobool34 = icmp ne i32 %or33, 0, !dbg !3138
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !3139

if.then35:                                        ; preds = %if.then32
  %35 = load i32, i32* %a.addr, align 4, !dbg !3140
  %36 = load i32, i32* %b.addr, align 4, !dbg !3141
  %call36 = call i32 @propagateFloat32NaN(i32 %35, i32 %36), !dbg !3142
  store i32 %call36, i32* %retval, align 4, !dbg !3143
  br label %return, !dbg !3143

if.end37:                                         ; preds = %if.then32
  %37 = load i32, i32* %a.addr, align 4, !dbg !3144
  store i32 %37, i32* %retval, align 4, !dbg !3145
  br label %return, !dbg !3145

if.end38:                                         ; preds = %if.else30
  %38 = load i32, i32* %aExp, align 4, !dbg !3146
  %cmp39 = icmp eq i32 %38, 0, !dbg !3148
  br i1 %cmp39, label %if.then40, label %if.end42, !dbg !3149

if.then40:                                        ; preds = %if.end38
  %39 = load i32, i32* %zSign.addr, align 4, !dbg !3150
  %40 = load i32, i32* %aSig, align 4, !dbg !3151
  %41 = load i32, i32* %bSig, align 4, !dbg !3152
  %add = add i32 %40, %41, !dbg !3153
  %shr = lshr i32 %add, 6, !dbg !3154
  %call41 = call i32 @packFloat32(i32 %39, i32 0, i32 %shr), !dbg !3155
  store i32 %call41, i32* %retval, align 4, !dbg !3156
  br label %return, !dbg !3156

if.end42:                                         ; preds = %if.end38
  %42 = load i32, i32* %aSig, align 4, !dbg !3157
  %add43 = add i32 1073741824, %42, !dbg !3158
  %43 = load i32, i32* %bSig, align 4, !dbg !3159
  %add44 = add i32 %add43, %43, !dbg !3160
  store i32 %add44, i32* %zSig, align 4, !dbg !3161
  %44 = load i32, i32* %aExp, align 4, !dbg !3162
  store i32 %44, i32* %zExp, align 4, !dbg !3163
  br label %roundAndPack, !dbg !3164

if.end45:                                         ; preds = %if.end28
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end12
  %45 = load i32, i32* %aSig, align 4, !dbg !3165
  %or47 = or i32 %45, 536870912, !dbg !3165
  store i32 %or47, i32* %aSig, align 4, !dbg !3165
  %46 = load i32, i32* %aSig, align 4, !dbg !3166
  %47 = load i32, i32* %bSig, align 4, !dbg !3167
  %add48 = add i32 %46, %47, !dbg !3168
  %shl49 = shl i32 %add48, 1, !dbg !3169
  store i32 %shl49, i32* %zSig, align 4, !dbg !3170
  %48 = load i32, i32* %zExp, align 4, !dbg !3171
  %dec50 = add nsw i32 %48, -1, !dbg !3171
  store i32 %dec50, i32* %zExp, align 4, !dbg !3171
  %49 = load i32, i32* %zSig, align 4, !dbg !3172
  %cmp51 = icmp slt i32 %49, 0, !dbg !3174
  br i1 %cmp51, label %if.then52, label %if.end55, !dbg !3175

if.then52:                                        ; preds = %if.end46
  %50 = load i32, i32* %aSig, align 4, !dbg !3176
  %51 = load i32, i32* %bSig, align 4, !dbg !3178
  %add53 = add i32 %50, %51, !dbg !3179
  store i32 %add53, i32* %zSig, align 4, !dbg !3180
  %52 = load i32, i32* %zExp, align 4, !dbg !3181
  %inc54 = add nsw i32 %52, 1, !dbg !3181
  store i32 %inc54, i32* %zExp, align 4, !dbg !3181
  br label %if.end55, !dbg !3182

if.end55:                                         ; preds = %if.then52, %if.end46
  br label %roundAndPack, !dbg !3183

roundAndPack:                                     ; preds = %if.end55, %if.end42
  %53 = load i32, i32* %zSign.addr, align 4, !dbg !3184
  %54 = load i32, i32* %zExp, align 4, !dbg !3185
  %55 = load i32, i32* %zSig, align 4, !dbg !3186
  %call56 = call i32 @roundAndPackFloat32(i32 %53, i32 %54, i32 %55), !dbg !3187
  store i32 %call56, i32* %retval, align 4, !dbg !3188
  br label %return, !dbg !3188

return:                                           ; preds = %roundAndPack, %if.then40, %if.end37, %if.then35, %if.end21, %if.then19, %if.end, %if.then7
  %56 = load i32, i32* %retval, align 4, !dbg !3189
  ret i32 %56, !dbg !3189
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @subFloat32Sigs(i32 %a, i32 %b, i32 %zSign) #0 !dbg !3190 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %bSig = alloca i32, align 4
  %zSig = alloca i32, align 4
  %expDiff = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3191, metadata !DIExpression()), !dbg !3192
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3193, metadata !DIExpression()), !dbg !3194
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !3195, metadata !DIExpression()), !dbg !3196
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !3197, metadata !DIExpression()), !dbg !3198
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !3199, metadata !DIExpression()), !dbg !3200
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !3201, metadata !DIExpression()), !dbg !3202
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !3203, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata i32* %bSig, metadata !3205, metadata !DIExpression()), !dbg !3206
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !3207, metadata !DIExpression()), !dbg !3208
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !3209, metadata !DIExpression()), !dbg !3210
  %0 = load i32, i32* %a.addr, align 4, !dbg !3211
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !3212
  store i32 %call, i32* %aSig, align 4, !dbg !3213
  %1 = load i32, i32* %a.addr, align 4, !dbg !3214
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !3215
  store i32 %call1, i32* %aExp, align 4, !dbg !3216
  %2 = load i32, i32* %b.addr, align 4, !dbg !3217
  %call2 = call i32 @extractFloat32Frac(i32 %2), !dbg !3218
  store i32 %call2, i32* %bSig, align 4, !dbg !3219
  %3 = load i32, i32* %b.addr, align 4, !dbg !3220
  %call3 = call i32 @extractFloat32Exp(i32 %3), !dbg !3221
  store i32 %call3, i32* %bExp, align 4, !dbg !3222
  %4 = load i32, i32* %aExp, align 4, !dbg !3223
  %5 = load i32, i32* %bExp, align 4, !dbg !3224
  %sub = sub nsw i32 %4, %5, !dbg !3225
  store i32 %sub, i32* %expDiff, align 4, !dbg !3226
  %6 = load i32, i32* %aSig, align 4, !dbg !3227
  %shl = shl i32 %6, 7, !dbg !3227
  store i32 %shl, i32* %aSig, align 4, !dbg !3227
  %7 = load i32, i32* %bSig, align 4, !dbg !3228
  %shl4 = shl i32 %7, 7, !dbg !3228
  store i32 %shl4, i32* %bSig, align 4, !dbg !3228
  %8 = load i32, i32* %expDiff, align 4, !dbg !3229
  %cmp = icmp slt i32 0, %8, !dbg !3231
  br i1 %cmp, label %if.then, label %if.end, !dbg !3232

if.then:                                          ; preds = %entry
  br label %aExpBigger, !dbg !3233

if.end:                                           ; preds = %entry
  %9 = load i32, i32* %expDiff, align 4, !dbg !3234
  %cmp5 = icmp slt i32 %9, 0, !dbg !3236
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !3237

if.then6:                                         ; preds = %if.end
  br label %bExpBigger, !dbg !3238

if.end7:                                          ; preds = %if.end
  %10 = load i32, i32* %aExp, align 4, !dbg !3239
  %cmp8 = icmp eq i32 %10, 255, !dbg !3241
  br i1 %cmp8, label %if.then9, label %if.end13, !dbg !3242

if.then9:                                         ; preds = %if.end7
  %11 = load i32, i32* %aSig, align 4, !dbg !3243
  %12 = load i32, i32* %bSig, align 4, !dbg !3246
  %or = or i32 %11, %12, !dbg !3247
  %tobool = icmp ne i32 %or, 0, !dbg !3247
  br i1 %tobool, label %if.then10, label %if.end12, !dbg !3248

if.then10:                                        ; preds = %if.then9
  %13 = load i32, i32* %a.addr, align 4, !dbg !3249
  %14 = load i32, i32* %b.addr, align 4, !dbg !3250
  %call11 = call i32 @propagateFloat32NaN(i32 %13, i32 %14), !dbg !3251
  store i32 %call11, i32* %retval, align 4, !dbg !3252
  br label %return, !dbg !3252

if.end12:                                         ; preds = %if.then9
  call void @float_raise(i32 16), !dbg !3253
  store i32 2147483647, i32* %retval, align 4, !dbg !3254
  br label %return, !dbg !3254

if.end13:                                         ; preds = %if.end7
  %15 = load i32, i32* %aExp, align 4, !dbg !3255
  %cmp14 = icmp eq i32 %15, 0, !dbg !3257
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !3258

if.then15:                                        ; preds = %if.end13
  store i32 1, i32* %aExp, align 4, !dbg !3259
  store i32 1, i32* %bExp, align 4, !dbg !3261
  br label %if.end16, !dbg !3262

if.end16:                                         ; preds = %if.then15, %if.end13
  %16 = load i32, i32* %bSig, align 4, !dbg !3263
  %17 = load i32, i32* %aSig, align 4, !dbg !3265
  %cmp17 = icmp ult i32 %16, %17, !dbg !3266
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !3267

if.then18:                                        ; preds = %if.end16
  br label %aBigger, !dbg !3268

if.end19:                                         ; preds = %if.end16
  %18 = load i32, i32* %aSig, align 4, !dbg !3269
  %19 = load i32, i32* %bSig, align 4, !dbg !3271
  %cmp20 = icmp ult i32 %18, %19, !dbg !3272
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !3273

if.then21:                                        ; preds = %if.end19
  br label %bBigger, !dbg !3274

if.end22:                                         ; preds = %if.end19
  %20 = load i32, i32* @float_rounding_mode, align 4, !dbg !3275
  %cmp23 = icmp eq i32 %20, 3, !dbg !3276
  %conv = zext i1 %cmp23 to i32, !dbg !3276
  %call24 = call i32 @packFloat32(i32 %conv, i32 0, i32 0), !dbg !3277
  store i32 %call24, i32* %retval, align 4, !dbg !3278
  br label %return, !dbg !3278

bExpBigger:                                       ; preds = %if.then6
  %21 = load i32, i32* %bExp, align 4, !dbg !3279
  %cmp25 = icmp eq i32 %21, 255, !dbg !3281
  br i1 %cmp25, label %if.then27, label %if.end33, !dbg !3282

if.then27:                                        ; preds = %bExpBigger
  %22 = load i32, i32* %bSig, align 4, !dbg !3283
  %tobool28 = icmp ne i32 %22, 0, !dbg !3283
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !3286

if.then29:                                        ; preds = %if.then27
  %23 = load i32, i32* %a.addr, align 4, !dbg !3287
  %24 = load i32, i32* %b.addr, align 4, !dbg !3288
  %call30 = call i32 @propagateFloat32NaN(i32 %23, i32 %24), !dbg !3289
  store i32 %call30, i32* %retval, align 4, !dbg !3290
  br label %return, !dbg !3290

if.end31:                                         ; preds = %if.then27
  %25 = load i32, i32* %zSign.addr, align 4, !dbg !3291
  %xor = xor i32 %25, 1, !dbg !3292
  %call32 = call i32 @packFloat32(i32 %xor, i32 255, i32 0), !dbg !3293
  store i32 %call32, i32* %retval, align 4, !dbg !3294
  br label %return, !dbg !3294

if.end33:                                         ; preds = %bExpBigger
  %26 = load i32, i32* %aExp, align 4, !dbg !3295
  %cmp34 = icmp eq i32 %26, 0, !dbg !3297
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !3298

if.then36:                                        ; preds = %if.end33
  %27 = load i32, i32* %expDiff, align 4, !dbg !3299
  %inc = add nsw i32 %27, 1, !dbg !3299
  store i32 %inc, i32* %expDiff, align 4, !dbg !3299
  br label %if.end38, !dbg !3301

if.else:                                          ; preds = %if.end33
  %28 = load i32, i32* %aSig, align 4, !dbg !3302
  %or37 = or i32 %28, 1073741824, !dbg !3302
  store i32 %or37, i32* %aSig, align 4, !dbg !3302
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then36
  %29 = load i32, i32* %aSig, align 4, !dbg !3304
  %30 = load i32, i32* %expDiff, align 4, !dbg !3305
  %sub39 = sub nsw i32 0, %30, !dbg !3306
  call void @shift32RightJamming(i32 %29, i32 %sub39, i32* %aSig), !dbg !3307
  %31 = load i32, i32* %bSig, align 4, !dbg !3308
  %or40 = or i32 %31, 1073741824, !dbg !3308
  store i32 %or40, i32* %bSig, align 4, !dbg !3308
  br label %bBigger, !dbg !3309

bBigger:                                          ; preds = %if.end38, %if.then21
  %32 = load i32, i32* %bSig, align 4, !dbg !3310
  %33 = load i32, i32* %aSig, align 4, !dbg !3311
  %sub41 = sub i32 %32, %33, !dbg !3312
  store i32 %sub41, i32* %zSig, align 4, !dbg !3313
  %34 = load i32, i32* %bExp, align 4, !dbg !3314
  store i32 %34, i32* %zExp, align 4, !dbg !3315
  %35 = load i32, i32* %zSign.addr, align 4, !dbg !3316
  %xor42 = xor i32 %35, 1, !dbg !3316
  store i32 %xor42, i32* %zSign.addr, align 4, !dbg !3316
  br label %normalizeRoundAndPack, !dbg !3317

aExpBigger:                                       ; preds = %if.then
  %36 = load i32, i32* %aExp, align 4, !dbg !3318
  %cmp43 = icmp eq i32 %36, 255, !dbg !3320
  br i1 %cmp43, label %if.then45, label %if.end50, !dbg !3321

if.then45:                                        ; preds = %aExpBigger
  %37 = load i32, i32* %aSig, align 4, !dbg !3322
  %tobool46 = icmp ne i32 %37, 0, !dbg !3322
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !3325

if.then47:                                        ; preds = %if.then45
  %38 = load i32, i32* %a.addr, align 4, !dbg !3326
  %39 = load i32, i32* %b.addr, align 4, !dbg !3327
  %call48 = call i32 @propagateFloat32NaN(i32 %38, i32 %39), !dbg !3328
  store i32 %call48, i32* %retval, align 4, !dbg !3329
  br label %return, !dbg !3329

if.end49:                                         ; preds = %if.then45
  %40 = load i32, i32* %a.addr, align 4, !dbg !3330
  store i32 %40, i32* %retval, align 4, !dbg !3331
  br label %return, !dbg !3331

if.end50:                                         ; preds = %aExpBigger
  %41 = load i32, i32* %bExp, align 4, !dbg !3332
  %cmp51 = icmp eq i32 %41, 0, !dbg !3334
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !3335

if.then53:                                        ; preds = %if.end50
  %42 = load i32, i32* %expDiff, align 4, !dbg !3336
  %dec = add nsw i32 %42, -1, !dbg !3336
  store i32 %dec, i32* %expDiff, align 4, !dbg !3336
  br label %if.end56, !dbg !3338

if.else54:                                        ; preds = %if.end50
  %43 = load i32, i32* %bSig, align 4, !dbg !3339
  %or55 = or i32 %43, 1073741824, !dbg !3339
  store i32 %or55, i32* %bSig, align 4, !dbg !3339
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then53
  %44 = load i32, i32* %bSig, align 4, !dbg !3341
  %45 = load i32, i32* %expDiff, align 4, !dbg !3342
  call void @shift32RightJamming(i32 %44, i32 %45, i32* %bSig), !dbg !3343
  %46 = load i32, i32* %aSig, align 4, !dbg !3344
  %or57 = or i32 %46, 1073741824, !dbg !3344
  store i32 %or57, i32* %aSig, align 4, !dbg !3344
  br label %aBigger, !dbg !3345

aBigger:                                          ; preds = %if.end56, %if.then18
  %47 = load i32, i32* %aSig, align 4, !dbg !3346
  %48 = load i32, i32* %bSig, align 4, !dbg !3347
  %sub58 = sub i32 %47, %48, !dbg !3348
  store i32 %sub58, i32* %zSig, align 4, !dbg !3349
  %49 = load i32, i32* %aExp, align 4, !dbg !3350
  store i32 %49, i32* %zExp, align 4, !dbg !3351
  br label %normalizeRoundAndPack, !dbg !3352

normalizeRoundAndPack:                            ; preds = %aBigger, %bBigger
  %50 = load i32, i32* %zExp, align 4, !dbg !3353
  %dec59 = add nsw i32 %50, -1, !dbg !3353
  store i32 %dec59, i32* %zExp, align 4, !dbg !3353
  %51 = load i32, i32* %zSign.addr, align 4, !dbg !3354
  %52 = load i32, i32* %zExp, align 4, !dbg !3355
  %53 = load i32, i32* %zSig, align 4, !dbg !3356
  %call60 = call i32 @normalizeRoundAndPackFloat32(i32 %51, i32 %52, i32 %53), !dbg !3357
  store i32 %call60, i32* %retval, align 4, !dbg !3358
  br label %return, !dbg !3358

return:                                           ; preds = %normalizeRoundAndPack, %if.end49, %if.then47, %if.end31, %if.then29, %if.end22, %if.end12, %if.then10
  %54 = load i32, i32* %retval, align 4, !dbg !3359
  ret i32 %54, !dbg !3359
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_sub(i32 %a, i32 %b) #0 !dbg !3360 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3361, metadata !DIExpression()), !dbg !3362
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3363, metadata !DIExpression()), !dbg !3364
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !3365, metadata !DIExpression()), !dbg !3366
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !3367, metadata !DIExpression()), !dbg !3368
  %0 = load i32, i32* %a.addr, align 4, !dbg !3369
  %call = call i32 @extractFloat32Sign(i32 %0), !dbg !3370
  store i32 %call, i32* %aSign, align 4, !dbg !3371
  %1 = load i32, i32* %b.addr, align 4, !dbg !3372
  %call1 = call i32 @extractFloat32Sign(i32 %1), !dbg !3373
  store i32 %call1, i32* %bSign, align 4, !dbg !3374
  %2 = load i32, i32* %aSign, align 4, !dbg !3375
  %3 = load i32, i32* %bSign, align 4, !dbg !3377
  %cmp = icmp eq i32 %2, %3, !dbg !3378
  br i1 %cmp, label %if.then, label %if.else, !dbg !3379

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4, !dbg !3380
  %5 = load i32, i32* %b.addr, align 4, !dbg !3382
  %6 = load i32, i32* %aSign, align 4, !dbg !3383
  %call2 = call i32 @subFloat32Sigs(i32 %4, i32 %5, i32 %6), !dbg !3384
  store i32 %call2, i32* %retval, align 4, !dbg !3385
  br label %return, !dbg !3385

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %a.addr, align 4, !dbg !3386
  %8 = load i32, i32* %b.addr, align 4, !dbg !3388
  %9 = load i32, i32* %aSign, align 4, !dbg !3389
  %call3 = call i32 @addFloat32Sigs(i32 %7, i32 %8, i32 %9), !dbg !3390
  store i32 %call3, i32* %retval, align 4, !dbg !3391
  br label %return, !dbg !3391

return:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !3392
  ret i32 %10, !dbg !3392
}

; Function Attrs: noinline nounwind optnone uwtable
define void @marknan() #0 !dbg !3393 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !3396
  ret void, !dbg !3397
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define void @markinf() #0 !dbg !3398 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0)), !dbg !3399
  ret void, !dbg !3400
}

; Function Attrs: noinline nounwind optnone uwtable
define void @markpositive() #0 !dbg !3401 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0)), !dbg !3402
  ret void, !dbg !3403
}

; Function Attrs: noinline nounwind optnone uwtable
define void @marknegative() #0 !dbg !3404 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0)), !dbg !3405
  ret void, !dbg !3406
}

; Function Attrs: noinline nounwind optnone uwtable
define void @markzero() #0 !dbg !3407 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0)), !dbg !3408
  ret void, !dbg !3409
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_mul(i32 %a, i32 %b) #0 !dbg !3410 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %bSig = alloca i32, align 4
  %zSig64 = alloca i64, align 8
  %zSig = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3413, metadata !DIExpression()), !dbg !3414
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !3415, metadata !DIExpression()), !dbg !3416
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !3417, metadata !DIExpression()), !dbg !3418
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !3419, metadata !DIExpression()), !dbg !3420
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !3421, metadata !DIExpression()), !dbg !3422
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !3423, metadata !DIExpression()), !dbg !3424
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !3425, metadata !DIExpression()), !dbg !3426
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !3427, metadata !DIExpression()), !dbg !3428
  call void @llvm.dbg.declare(metadata i32* %bSig, metadata !3429, metadata !DIExpression()), !dbg !3430
  call void @llvm.dbg.declare(metadata i64* %zSig64, metadata !3431, metadata !DIExpression()), !dbg !3432
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !3433, metadata !DIExpression()), !dbg !3434
  %0 = load i32, i32* %a.addr, align 4, !dbg !3435
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !3436
  store i32 %call, i32* %aSig, align 4, !dbg !3437
  %1 = load i32, i32* %a.addr, align 4, !dbg !3438
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !3439
  store i32 %call1, i32* %aExp, align 4, !dbg !3440
  %2 = load i32, i32* %a.addr, align 4, !dbg !3441
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !3442
  store i32 %call2, i32* %aSign, align 4, !dbg !3443
  %3 = load i32, i32* %b.addr, align 4, !dbg !3444
  %call3 = call i32 @extractFloat32Frac(i32 %3), !dbg !3445
  store i32 %call3, i32* %bSig, align 4, !dbg !3446
  %4 = load i32, i32* %b.addr, align 4, !dbg !3447
  %call4 = call i32 @extractFloat32Exp(i32 %4), !dbg !3448
  store i32 %call4, i32* %bExp, align 4, !dbg !3449
  %5 = load i32, i32* %b.addr, align 4, !dbg !3450
  %call5 = call i32 @extractFloat32Sign(i32 %5), !dbg !3451
  store i32 %call5, i32* %bSign, align 4, !dbg !3452
  %6 = load i32, i32* %aSign, align 4, !dbg !3453
  %7 = load i32, i32* %bSign, align 4, !dbg !3454
  %xor = xor i32 %6, %7, !dbg !3455
  store i32 %xor, i32* %zSign, align 4, !dbg !3456
  %8 = load i32, i32* %aExp, align 4, !dbg !3457
  %cmp = icmp eq i32 %8, 255, !dbg !3459
  br i1 %cmp, label %if.then, label %if.end27, !dbg !3460

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %aSig, align 4, !dbg !3461
  %tobool = icmp ne i32 %9, 0, !dbg !3461
  br i1 %tobool, label %if.then6, label %if.else, !dbg !3464

if.then6:                                         ; preds = %if.then
  call void @marknan(), !dbg !3465
  %10 = load i32, i32* %a.addr, align 4, !dbg !3467
  %11 = load i32, i32* %b.addr, align 4, !dbg !3468
  %call7 = call i32 @propagateFloat32NaN(i32 %10, i32 %11), !dbg !3469
  store i32 %call7, i32* %retval, align 4, !dbg !3470
  br label %return, !dbg !3470

if.else:                                          ; preds = %if.then
  %12 = load i32, i32* %bExp, align 4, !dbg !3471
  %cmp8 = icmp eq i32 %12, 255, !dbg !3473
  br i1 %cmp8, label %if.then9, label %if.end13, !dbg !3474

if.then9:                                         ; preds = %if.else
  %13 = load i32, i32* %bSig, align 4, !dbg !3475
  %tobool10 = icmp ne i32 %13, 0, !dbg !3475
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !3478

if.then11:                                        ; preds = %if.then9
  call void @marknan(), !dbg !3479
  %14 = load i32, i32* %a.addr, align 4, !dbg !3481
  %15 = load i32, i32* %b.addr, align 4, !dbg !3482
  %call12 = call i32 @propagateFloat32NaN(i32 %14, i32 %15), !dbg !3483
  store i32 %call12, i32* %retval, align 4, !dbg !3484
  br label %return, !dbg !3484

if.end:                                           ; preds = %if.then9
  br label %if.end13, !dbg !3485

if.end13:                                         ; preds = %if.end, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end13
  %16 = load i32, i32* %bExp, align 4, !dbg !3486
  %17 = load i32, i32* %bSig, align 4, !dbg !3488
  %or = or i32 %16, %17, !dbg !3489
  %cmp15 = icmp eq i32 %or, 0, !dbg !3490
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !3491

if.then16:                                        ; preds = %if.end14
  call void @marknan(), !dbg !3492
  call void @float_raise(i32 16), !dbg !3494
  store i32 2147483647, i32* %retval, align 4, !dbg !3495
  br label %return, !dbg !3495

if.end17:                                         ; preds = %if.end14
  %18 = load i32, i32* %zSign, align 4, !dbg !3496
  %cmp18 = icmp sgt i32 %18, 0, !dbg !3498
  br i1 %cmp18, label %if.then19, label %if.else21, !dbg !3499

if.then19:                                        ; preds = %if.end17
  call void @markpositive(), !dbg !3500
  %19 = load i32, i32* %zSign, align 4, !dbg !3502
  %call20 = call i32 @packFloat32(i32 %19, i32 255, i32 0), !dbg !3503
  store i32 %call20, i32* %retval, align 4, !dbg !3504
  br label %return, !dbg !3504

if.else21:                                        ; preds = %if.end17
  %20 = load i32, i32* %zSign, align 4, !dbg !3505
  %cmp22 = icmp eq i32 %20, 0, !dbg !3507
  br i1 %cmp22, label %if.then23, label %if.else25, !dbg !3508

if.then23:                                        ; preds = %if.else21
  call void @markzero(), !dbg !3509
  %21 = load i32, i32* %zSign, align 4, !dbg !3511
  %call24 = call i32 @packFloat32(i32 %21, i32 255, i32 0), !dbg !3512
  store i32 %call24, i32* %retval, align 4, !dbg !3513
  br label %return, !dbg !3513

if.else25:                                        ; preds = %if.else21
  call void @marknegative(), !dbg !3514
  %22 = load i32, i32* %zSign, align 4, !dbg !3516
  %call26 = call i32 @packFloat32(i32 %22, i32 255, i32 0), !dbg !3517
  store i32 %call26, i32* %retval, align 4, !dbg !3518
  br label %return, !dbg !3518

if.end27:                                         ; preds = %entry
  %23 = load i32, i32* %bExp, align 4, !dbg !3519
  %cmp28 = icmp eq i32 %23, 255, !dbg !3521
  br i1 %cmp28, label %if.then29, label %if.end47, !dbg !3522

if.then29:                                        ; preds = %if.end27
  %24 = load i32, i32* %bSig, align 4, !dbg !3523
  %tobool30 = icmp ne i32 %24, 0, !dbg !3523
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !3526

if.then31:                                        ; preds = %if.then29
  call void @marknan(), !dbg !3527
  %25 = load i32, i32* %a.addr, align 4, !dbg !3529
  %26 = load i32, i32* %b.addr, align 4, !dbg !3530
  %call32 = call i32 @propagateFloat32NaN(i32 %25, i32 %26), !dbg !3531
  store i32 %call32, i32* %retval, align 4, !dbg !3532
  br label %return, !dbg !3532

if.end33:                                         ; preds = %if.then29
  %27 = load i32, i32* %aExp, align 4, !dbg !3533
  %28 = load i32, i32* %aSig, align 4, !dbg !3535
  %or34 = or i32 %27, %28, !dbg !3536
  %cmp35 = icmp eq i32 %or34, 0, !dbg !3537
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !3538

if.then36:                                        ; preds = %if.end33
  call void @marknan(), !dbg !3539
  call void @float_raise(i32 16), !dbg !3541
  store i32 2147483647, i32* %retval, align 4, !dbg !3542
  br label %return, !dbg !3542

if.end37:                                         ; preds = %if.end33
  %29 = load i32, i32* %zSign, align 4, !dbg !3543
  %cmp38 = icmp sgt i32 %29, 0, !dbg !3545
  br i1 %cmp38, label %if.then39, label %if.else41, !dbg !3546

if.then39:                                        ; preds = %if.end37
  call void @markpositive(), !dbg !3547
  %30 = load i32, i32* %zSign, align 4, !dbg !3549
  %call40 = call i32 @packFloat32(i32 %30, i32 255, i32 0), !dbg !3550
  store i32 %call40, i32* %retval, align 4, !dbg !3551
  br label %return, !dbg !3551

if.else41:                                        ; preds = %if.end37
  %31 = load i32, i32* %zSign, align 4, !dbg !3552
  %cmp42 = icmp eq i32 %31, 0, !dbg !3554
  br i1 %cmp42, label %if.then43, label %if.else45, !dbg !3555

if.then43:                                        ; preds = %if.else41
  call void @markzero(), !dbg !3556
  %32 = load i32, i32* %zSign, align 4, !dbg !3558
  %call44 = call i32 @packFloat32(i32 %32, i32 255, i32 0), !dbg !3559
  store i32 %call44, i32* %retval, align 4, !dbg !3560
  br label %return, !dbg !3560

if.else45:                                        ; preds = %if.else41
  call void @marknegative(), !dbg !3561
  %33 = load i32, i32* %zSign, align 4, !dbg !3563
  %call46 = call i32 @packFloat32(i32 %33, i32 255, i32 0), !dbg !3564
  store i32 %call46, i32* %retval, align 4, !dbg !3565
  br label %return, !dbg !3565

if.end47:                                         ; preds = %if.end27
  %34 = load i32, i32* %aExp, align 4, !dbg !3566
  %cmp48 = icmp eq i32 %34, 0, !dbg !3568
  br i1 %cmp48, label %if.then49, label %if.end62, !dbg !3569

if.then49:                                        ; preds = %if.end47
  %35 = load i32, i32* %aSig, align 4, !dbg !3570
  %cmp50 = icmp eq i32 %35, 0, !dbg !3573
  br i1 %cmp50, label %if.then51, label %if.end61, !dbg !3574

if.then51:                                        ; preds = %if.then49
  %36 = load i32, i32* %zSign, align 4, !dbg !3575
  %cmp52 = icmp sgt i32 %36, 0, !dbg !3578
  br i1 %cmp52, label %if.then53, label %if.else55, !dbg !3579

if.then53:                                        ; preds = %if.then51
  call void @markpositive(), !dbg !3580
  %37 = load i32, i32* %zSign, align 4, !dbg !3582
  %call54 = call i32 @packFloat32(i32 %37, i32 255, i32 0), !dbg !3583
  store i32 %call54, i32* %retval, align 4, !dbg !3584
  br label %return, !dbg !3584

if.else55:                                        ; preds = %if.then51
  %38 = load i32, i32* %zSign, align 4, !dbg !3585
  %cmp56 = icmp eq i32 %38, 0, !dbg !3587
  br i1 %cmp56, label %if.then57, label %if.else59, !dbg !3588

if.then57:                                        ; preds = %if.else55
  call void @markzero(), !dbg !3589
  %39 = load i32, i32* %zSign, align 4, !dbg !3591
  %call58 = call i32 @packFloat32(i32 %39, i32 255, i32 0), !dbg !3592
  store i32 %call58, i32* %retval, align 4, !dbg !3593
  br label %return, !dbg !3593

if.else59:                                        ; preds = %if.else55
  call void @marknegative(), !dbg !3594
  %40 = load i32, i32* %zSign, align 4, !dbg !3596
  %call60 = call i32 @packFloat32(i32 %40, i32 255, i32 0), !dbg !3597
  store i32 %call60, i32* %retval, align 4, !dbg !3598
  br label %return, !dbg !3598

if.end61:                                         ; preds = %if.then49
  %41 = load i32, i32* %aSig, align 4, !dbg !3599
  call void @normalizeFloat32Subnormal(i32 %41, i32* %aExp, i32* %aSig), !dbg !3600
  br label %if.end62, !dbg !3601

if.end62:                                         ; preds = %if.end61, %if.end47
  %42 = load i32, i32* %bExp, align 4, !dbg !3602
  %cmp63 = icmp eq i32 %42, 0, !dbg !3604
  br i1 %cmp63, label %if.then64, label %if.end77, !dbg !3605

if.then64:                                        ; preds = %if.end62
  %43 = load i32, i32* %bSig, align 4, !dbg !3606
  %cmp65 = icmp eq i32 %43, 0, !dbg !3609
  br i1 %cmp65, label %if.then66, label %if.end76, !dbg !3610

if.then66:                                        ; preds = %if.then64
  %44 = load i32, i32* %zSign, align 4, !dbg !3611
  %cmp67 = icmp sgt i32 %44, 0, !dbg !3614
  br i1 %cmp67, label %if.then68, label %if.else70, !dbg !3615

if.then68:                                        ; preds = %if.then66
  call void @markpositive(), !dbg !3616
  %45 = load i32, i32* %zSign, align 4, !dbg !3618
  %call69 = call i32 @packFloat32(i32 %45, i32 255, i32 0), !dbg !3619
  store i32 %call69, i32* %retval, align 4, !dbg !3620
  br label %return, !dbg !3620

if.else70:                                        ; preds = %if.then66
  %46 = load i32, i32* %zSign, align 4, !dbg !3621
  %cmp71 = icmp eq i32 %46, 0, !dbg !3623
  br i1 %cmp71, label %if.then72, label %if.else74, !dbg !3624

if.then72:                                        ; preds = %if.else70
  call void @markzero(), !dbg !3625
  %47 = load i32, i32* %zSign, align 4, !dbg !3627
  %call73 = call i32 @packFloat32(i32 %47, i32 255, i32 0), !dbg !3628
  store i32 %call73, i32* %retval, align 4, !dbg !3629
  br label %return, !dbg !3629

if.else74:                                        ; preds = %if.else70
  call void @marknegative(), !dbg !3630
  %48 = load i32, i32* %zSign, align 4, !dbg !3632
  %call75 = call i32 @packFloat32(i32 %48, i32 255, i32 0), !dbg !3633
  store i32 %call75, i32* %retval, align 4, !dbg !3634
  br label %return, !dbg !3634

if.end76:                                         ; preds = %if.then64
  %49 = load i32, i32* %bSig, align 4, !dbg !3635
  call void @normalizeFloat32Subnormal(i32 %49, i32* %bExp, i32* %bSig), !dbg !3636
  br label %if.end77, !dbg !3637

if.end77:                                         ; preds = %if.end76, %if.end62
  %50 = load i32, i32* %aExp, align 4, !dbg !3638
  %51 = load i32, i32* %bExp, align 4, !dbg !3639
  %add = add nsw i32 %50, %51, !dbg !3640
  %sub = sub nsw i32 %add, 127, !dbg !3641
  store i32 %sub, i32* %zExp, align 4, !dbg !3642
  %52 = load i32, i32* %aSig, align 4, !dbg !3643
  %or78 = or i32 %52, 8388608, !dbg !3644
  %shl = shl i32 %or78, 7, !dbg !3645
  store i32 %shl, i32* %aSig, align 4, !dbg !3646
  %53 = load i32, i32* %bSig, align 4, !dbg !3647
  %or79 = or i32 %53, 8388608, !dbg !3648
  %shl80 = shl i32 %or79, 8, !dbg !3649
  store i32 %shl80, i32* %bSig, align 4, !dbg !3650
  %54 = load i32, i32* %aSig, align 4, !dbg !3651
  %conv = zext i32 %54 to i64, !dbg !3652
  %55 = load i32, i32* %bSig, align 4, !dbg !3653
  %conv81 = zext i32 %55 to i64, !dbg !3653
  %mul = mul i64 %conv, %conv81, !dbg !3654
  call void @shift64RightJamming(i64 %mul, i32 32, i64* %zSig64), !dbg !3655
  %56 = load i64, i64* %zSig64, align 8, !dbg !3656
  %conv82 = trunc i64 %56 to i32, !dbg !3656
  store i32 %conv82, i32* %zSig, align 4, !dbg !3657
  %57 = load i32, i32* %zSig, align 4, !dbg !3658
  %shl83 = shl i32 %57, 1, !dbg !3660
  %cmp84 = icmp sle i32 0, %shl83, !dbg !3661
  br i1 %cmp84, label %if.then86, label %if.end88, !dbg !3662

if.then86:                                        ; preds = %if.end77
  %58 = load i32, i32* %zSig, align 4, !dbg !3663
  %shl87 = shl i32 %58, 1, !dbg !3663
  store i32 %shl87, i32* %zSig, align 4, !dbg !3663
  %59 = load i32, i32* %zExp, align 4, !dbg !3665
  %dec = add nsw i32 %59, -1, !dbg !3665
  store i32 %dec, i32* %zExp, align 4, !dbg !3665
  br label %if.end88, !dbg !3666

if.end88:                                         ; preds = %if.then86, %if.end77
  %60 = load i32, i32* %zSign, align 4, !dbg !3667
  %cmp89 = icmp sgt i32 %60, 0, !dbg !3669
  br i1 %cmp89, label %if.then91, label %if.else93, !dbg !3670

if.then91:                                        ; preds = %if.end88
  call void @markpositive(), !dbg !3671
  %61 = load i32, i32* %zSign, align 4, !dbg !3673
  %62 = load i32, i32* %zExp, align 4, !dbg !3674
  %63 = load i32, i32* %zSig, align 4, !dbg !3675
  %call92 = call i32 @roundAndPackFloat32(i32 %61, i32 %62, i32 %63), !dbg !3676
  store i32 %call92, i32* %retval, align 4, !dbg !3677
  br label %return, !dbg !3677

if.else93:                                        ; preds = %if.end88
  %64 = load i32, i32* %zSign, align 4, !dbg !3678
  %cmp94 = icmp eq i32 %64, 0, !dbg !3680
  br i1 %cmp94, label %if.then96, label %if.else98, !dbg !3681

if.then96:                                        ; preds = %if.else93
  call void @markzero(), !dbg !3682
  %65 = load i32, i32* %zSign, align 4, !dbg !3684
  %66 = load i32, i32* %zExp, align 4, !dbg !3685
  %67 = load i32, i32* %zSig, align 4, !dbg !3686
  %call97 = call i32 @roundAndPackFloat32(i32 %65, i32 %66, i32 %67), !dbg !3687
  store i32 %call97, i32* %retval, align 4, !dbg !3688
  br label %return, !dbg !3688

if.else98:                                        ; preds = %if.else93
  call void @marknegative(), !dbg !3689
  %68 = load i32, i32* %zSign, align 4, !dbg !3691
  %69 = load i32, i32* %zExp, align 4, !dbg !3692
  %70 = load i32, i32* %zSig, align 4, !dbg !3693
  %call99 = call i32 @roundAndPackFloat32(i32 %68, i32 %69, i32 %70), !dbg !3694
  store i32 %call99, i32* %retval, align 4, !dbg !3695
  br label %return, !dbg !3695

return:                                           ; preds = %if.else98, %if.then96, %if.then91, %if.else74, %if.then72, %if.then68, %if.else59, %if.then57, %if.then53, %if.else45, %if.then43, %if.then39, %if.then36, %if.then31, %if.else25, %if.then23, %if.then19, %if.then16, %if.then11, %if.then6
  %71 = load i32, i32* %retval, align 4, !dbg !3696
  ret i32 %71, !dbg !3696
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_div(i32 %a, i32 %b) #0 !dbg !3697 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %bSig = alloca i32, align 4
  %zSig = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3698, metadata !DIExpression()), !dbg !3699
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3700, metadata !DIExpression()), !dbg !3701
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !3702, metadata !DIExpression()), !dbg !3703
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !3704, metadata !DIExpression()), !dbg !3705
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !3706, metadata !DIExpression()), !dbg !3707
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !3708, metadata !DIExpression()), !dbg !3709
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !3710, metadata !DIExpression()), !dbg !3711
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !3712, metadata !DIExpression()), !dbg !3713
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !3714, metadata !DIExpression()), !dbg !3715
  call void @llvm.dbg.declare(metadata i32* %bSig, metadata !3716, metadata !DIExpression()), !dbg !3717
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !3718, metadata !DIExpression()), !dbg !3719
  %0 = load i32, i32* %a.addr, align 4, !dbg !3720
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !3721
  store i32 %call, i32* %aSig, align 4, !dbg !3722
  %1 = load i32, i32* %a.addr, align 4, !dbg !3723
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !3724
  store i32 %call1, i32* %aExp, align 4, !dbg !3725
  %2 = load i32, i32* %a.addr, align 4, !dbg !3726
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !3727
  store i32 %call2, i32* %aSign, align 4, !dbg !3728
  %3 = load i32, i32* %b.addr, align 4, !dbg !3729
  %call3 = call i32 @extractFloat32Frac(i32 %3), !dbg !3730
  store i32 %call3, i32* %bSig, align 4, !dbg !3731
  %4 = load i32, i32* %b.addr, align 4, !dbg !3732
  %call4 = call i32 @extractFloat32Exp(i32 %4), !dbg !3733
  store i32 %call4, i32* %bExp, align 4, !dbg !3734
  %5 = load i32, i32* %b.addr, align 4, !dbg !3735
  %call5 = call i32 @extractFloat32Sign(i32 %5), !dbg !3736
  store i32 %call5, i32* %bSign, align 4, !dbg !3737
  %6 = load i32, i32* %aSign, align 4, !dbg !3738
  %7 = load i32, i32* %bSign, align 4, !dbg !3739
  %xor = xor i32 %6, %7, !dbg !3740
  store i32 %xor, i32* %zSign, align 4, !dbg !3741
  %8 = load i32, i32* %aExp, align 4, !dbg !3742
  %cmp = icmp eq i32 %8, 255, !dbg !3744
  br i1 %cmp, label %if.then, label %if.end16, !dbg !3745

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %aSig, align 4, !dbg !3746
  %tobool = icmp ne i32 %9, 0, !dbg !3746
  br i1 %tobool, label %if.then6, label %if.end, !dbg !3749

if.then6:                                         ; preds = %if.then
  %10 = load i32, i32* %a.addr, align 4, !dbg !3750
  %11 = load i32, i32* %b.addr, align 4, !dbg !3751
  %call7 = call i32 @propagateFloat32NaN(i32 %10, i32 %11), !dbg !3752
  store i32 %call7, i32* %retval, align 4, !dbg !3753
  br label %return, !dbg !3753

if.end:                                           ; preds = %if.then
  %12 = load i32, i32* %bExp, align 4, !dbg !3754
  %cmp8 = icmp eq i32 %12, 255, !dbg !3756
  br i1 %cmp8, label %if.then9, label %if.end14, !dbg !3757

if.then9:                                         ; preds = %if.end
  %13 = load i32, i32* %bSig, align 4, !dbg !3758
  %tobool10 = icmp ne i32 %13, 0, !dbg !3758
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !3761

if.then11:                                        ; preds = %if.then9
  %14 = load i32, i32* %a.addr, align 4, !dbg !3762
  %15 = load i32, i32* %b.addr, align 4, !dbg !3763
  %call12 = call i32 @propagateFloat32NaN(i32 %14, i32 %15), !dbg !3764
  store i32 %call12, i32* %retval, align 4, !dbg !3765
  br label %return, !dbg !3765

if.end13:                                         ; preds = %if.then9
  call void @float_raise(i32 16), !dbg !3766
  store i32 2147483647, i32* %retval, align 4, !dbg !3767
  br label %return, !dbg !3767

if.end14:                                         ; preds = %if.end
  %16 = load i32, i32* %zSign, align 4, !dbg !3768
  %call15 = call i32 @packFloat32(i32 %16, i32 255, i32 0), !dbg !3769
  store i32 %call15, i32* %retval, align 4, !dbg !3770
  br label %return, !dbg !3770

if.end16:                                         ; preds = %entry
  %17 = load i32, i32* %bExp, align 4, !dbg !3771
  %cmp17 = icmp eq i32 %17, 255, !dbg !3773
  br i1 %cmp17, label %if.then18, label %if.end24, !dbg !3774

if.then18:                                        ; preds = %if.end16
  %18 = load i32, i32* %bSig, align 4, !dbg !3775
  %tobool19 = icmp ne i32 %18, 0, !dbg !3775
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !3778

if.then20:                                        ; preds = %if.then18
  %19 = load i32, i32* %a.addr, align 4, !dbg !3779
  %20 = load i32, i32* %b.addr, align 4, !dbg !3780
  %call21 = call i32 @propagateFloat32NaN(i32 %19, i32 %20), !dbg !3781
  store i32 %call21, i32* %retval, align 4, !dbg !3782
  br label %return, !dbg !3782

if.end22:                                         ; preds = %if.then18
  %21 = load i32, i32* %zSign, align 4, !dbg !3783
  %call23 = call i32 @packFloat32(i32 %21, i32 0, i32 0), !dbg !3784
  store i32 %call23, i32* %retval, align 4, !dbg !3785
  br label %return, !dbg !3785

if.end24:                                         ; preds = %if.end16
  %22 = load i32, i32* %bExp, align 4, !dbg !3786
  %cmp25 = icmp eq i32 %22, 0, !dbg !3788
  br i1 %cmp25, label %if.then26, label %if.end34, !dbg !3789

if.then26:                                        ; preds = %if.end24
  %23 = load i32, i32* %bSig, align 4, !dbg !3790
  %cmp27 = icmp eq i32 %23, 0, !dbg !3793
  br i1 %cmp27, label %if.then28, label %if.end33, !dbg !3794

if.then28:                                        ; preds = %if.then26
  %24 = load i32, i32* %aExp, align 4, !dbg !3795
  %25 = load i32, i32* %aSig, align 4, !dbg !3798
  %or = or i32 %24, %25, !dbg !3799
  %cmp29 = icmp eq i32 %or, 0, !dbg !3800
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !3801

if.then30:                                        ; preds = %if.then28
  call void @float_raise(i32 16), !dbg !3802
  store i32 2147483647, i32* %retval, align 4, !dbg !3804
  br label %return, !dbg !3804

if.end31:                                         ; preds = %if.then28
  call void @float_raise(i32 2), !dbg !3805
  %26 = load i32, i32* %zSign, align 4, !dbg !3806
  %call32 = call i32 @packFloat32(i32 %26, i32 255, i32 0), !dbg !3807
  store i32 %call32, i32* %retval, align 4, !dbg !3808
  br label %return, !dbg !3808

if.end33:                                         ; preds = %if.then26
  %27 = load i32, i32* %bSig, align 4, !dbg !3809
  call void @normalizeFloat32Subnormal(i32 %27, i32* %bExp, i32* %bSig), !dbg !3810
  br label %if.end34, !dbg !3811

if.end34:                                         ; preds = %if.end33, %if.end24
  %28 = load i32, i32* %aExp, align 4, !dbg !3812
  %cmp35 = icmp eq i32 %28, 0, !dbg !3814
  br i1 %cmp35, label %if.then36, label %if.end41, !dbg !3815

if.then36:                                        ; preds = %if.end34
  %29 = load i32, i32* %aSig, align 4, !dbg !3816
  %cmp37 = icmp eq i32 %29, 0, !dbg !3819
  br i1 %cmp37, label %if.then38, label %if.end40, !dbg !3820

if.then38:                                        ; preds = %if.then36
  %30 = load i32, i32* %zSign, align 4, !dbg !3821
  %call39 = call i32 @packFloat32(i32 %30, i32 0, i32 0), !dbg !3822
  store i32 %call39, i32* %retval, align 4, !dbg !3823
  br label %return, !dbg !3823

if.end40:                                         ; preds = %if.then36
  %31 = load i32, i32* %aSig, align 4, !dbg !3824
  call void @normalizeFloat32Subnormal(i32 %31, i32* %aExp, i32* %aSig), !dbg !3825
  br label %if.end41, !dbg !3826

if.end41:                                         ; preds = %if.end40, %if.end34
  %32 = load i32, i32* %aExp, align 4, !dbg !3827
  %33 = load i32, i32* %bExp, align 4, !dbg !3828
  %sub = sub nsw i32 %32, %33, !dbg !3829
  %add = add nsw i32 %sub, 125, !dbg !3830
  store i32 %add, i32* %zExp, align 4, !dbg !3831
  %34 = load i32, i32* %aSig, align 4, !dbg !3832
  %or42 = or i32 %34, 8388608, !dbg !3833
  %shl = shl i32 %or42, 7, !dbg !3834
  store i32 %shl, i32* %aSig, align 4, !dbg !3835
  %35 = load i32, i32* %bSig, align 4, !dbg !3836
  %or43 = or i32 %35, 8388608, !dbg !3837
  %shl44 = shl i32 %or43, 8, !dbg !3838
  store i32 %shl44, i32* %bSig, align 4, !dbg !3839
  %36 = load i32, i32* %bSig, align 4, !dbg !3840
  %37 = load i32, i32* %aSig, align 4, !dbg !3842
  %38 = load i32, i32* %aSig, align 4, !dbg !3843
  %add45 = add i32 %37, %38, !dbg !3844
  %cmp46 = icmp ule i32 %36, %add45, !dbg !3845
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !3846

if.then47:                                        ; preds = %if.end41
  %39 = load i32, i32* %aSig, align 4, !dbg !3847
  %shr = lshr i32 %39, 1, !dbg !3847
  store i32 %shr, i32* %aSig, align 4, !dbg !3847
  %40 = load i32, i32* %zExp, align 4, !dbg !3849
  %inc = add nsw i32 %40, 1, !dbg !3849
  store i32 %inc, i32* %zExp, align 4, !dbg !3849
  br label %if.end48, !dbg !3850

if.end48:                                         ; preds = %if.then47, %if.end41
  %41 = load i32, i32* %aSig, align 4, !dbg !3851
  %conv = zext i32 %41 to i64, !dbg !3852
  %shl49 = shl i64 %conv, 32, !dbg !3853
  %42 = load i32, i32* %bSig, align 4, !dbg !3854
  %conv50 = zext i32 %42 to i64, !dbg !3854
  %div = udiv i64 %shl49, %conv50, !dbg !3855
  %conv51 = trunc i64 %div to i32, !dbg !3856
  store i32 %conv51, i32* %zSig, align 4, !dbg !3857
  %43 = load i32, i32* %zSig, align 4, !dbg !3858
  %and = and i32 %43, 63, !dbg !3860
  %cmp52 = icmp eq i32 %and, 0, !dbg !3861
  br i1 %cmp52, label %if.then54, label %if.end62, !dbg !3862

if.then54:                                        ; preds = %if.end48
  %44 = load i32, i32* %bSig, align 4, !dbg !3863
  %conv55 = zext i32 %44 to i64, !dbg !3865
  %45 = load i32, i32* %zSig, align 4, !dbg !3866
  %conv56 = zext i32 %45 to i64, !dbg !3866
  %mul = mul i64 %conv55, %conv56, !dbg !3867
  %46 = load i32, i32* %aSig, align 4, !dbg !3868
  %conv57 = zext i32 %46 to i64, !dbg !3869
  %shl58 = shl i64 %conv57, 32, !dbg !3870
  %cmp59 = icmp ne i64 %mul, %shl58, !dbg !3871
  %conv60 = zext i1 %cmp59 to i32, !dbg !3871
  %47 = load i32, i32* %zSig, align 4, !dbg !3872
  %or61 = or i32 %47, %conv60, !dbg !3872
  store i32 %or61, i32* %zSig, align 4, !dbg !3872
  br label %if.end62, !dbg !3873

if.end62:                                         ; preds = %if.then54, %if.end48
  %48 = load i32, i32* %zSign, align 4, !dbg !3874
  %49 = load i32, i32* %zExp, align 4, !dbg !3875
  %50 = load i32, i32* %zSig, align 4, !dbg !3876
  %call63 = call i32 @roundAndPackFloat32(i32 %48, i32 %49, i32 %50), !dbg !3877
  store i32 %call63, i32* %retval, align 4, !dbg !3878
  br label %return, !dbg !3878

return:                                           ; preds = %if.end62, %if.then38, %if.end31, %if.then30, %if.end22, %if.then20, %if.end14, %if.end13, %if.then11, %if.then6
  %51 = load i32, i32* %retval, align 4, !dbg !3879
  ret i32 %51, !dbg !3879
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_rem(i32 %a, i32 %b) #0 !dbg !3880 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %expDiff = alloca i32, align 4
  %aSig = alloca i32, align 4
  %bSig = alloca i32, align 4
  %q = alloca i32, align 4
  %aSig64 = alloca i64, align 8
  %bSig64 = alloca i64, align 8
  %q64 = alloca i64, align 8
  %alternateASig = alloca i32, align 4
  %sigMean = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3881, metadata !DIExpression()), !dbg !3882
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !3885, metadata !DIExpression()), !dbg !3886
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !3887, metadata !DIExpression()), !dbg !3888
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !3889, metadata !DIExpression()), !dbg !3890
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !3891, metadata !DIExpression()), !dbg !3892
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !3893, metadata !DIExpression()), !dbg !3894
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !3897, metadata !DIExpression()), !dbg !3898
  call void @llvm.dbg.declare(metadata i32* %bSig, metadata !3899, metadata !DIExpression()), !dbg !3900
  call void @llvm.dbg.declare(metadata i32* %q, metadata !3901, metadata !DIExpression()), !dbg !3902
  call void @llvm.dbg.declare(metadata i64* %aSig64, metadata !3903, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.declare(metadata i64* %bSig64, metadata !3905, metadata !DIExpression()), !dbg !3906
  call void @llvm.dbg.declare(metadata i64* %q64, metadata !3907, metadata !DIExpression()), !dbg !3908
  call void @llvm.dbg.declare(metadata i32* %alternateASig, metadata !3909, metadata !DIExpression()), !dbg !3910
  call void @llvm.dbg.declare(metadata i32* %sigMean, metadata !3911, metadata !DIExpression()), !dbg !3912
  %0 = load i32, i32* %a.addr, align 4, !dbg !3913
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !3914
  store i32 %call, i32* %aSig, align 4, !dbg !3915
  %1 = load i32, i32* %a.addr, align 4, !dbg !3916
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !3917
  store i32 %call1, i32* %aExp, align 4, !dbg !3918
  %2 = load i32, i32* %a.addr, align 4, !dbg !3919
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !3920
  store i32 %call2, i32* %aSign, align 4, !dbg !3921
  %3 = load i32, i32* %b.addr, align 4, !dbg !3922
  %call3 = call i32 @extractFloat32Frac(i32 %3), !dbg !3923
  store i32 %call3, i32* %bSig, align 4, !dbg !3924
  %4 = load i32, i32* %b.addr, align 4, !dbg !3925
  %call4 = call i32 @extractFloat32Exp(i32 %4), !dbg !3926
  store i32 %call4, i32* %bExp, align 4, !dbg !3927
  %5 = load i32, i32* %b.addr, align 4, !dbg !3928
  %call5 = call i32 @extractFloat32Sign(i32 %5), !dbg !3929
  store i32 %call5, i32* %bSign, align 4, !dbg !3930
  %6 = load i32, i32* %aExp, align 4, !dbg !3931
  %cmp = icmp eq i32 %6, 255, !dbg !3933
  br i1 %cmp, label %if.then, label %if.end10, !dbg !3934

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %aSig, align 4, !dbg !3935
  %tobool = icmp ne i32 %7, 0, !dbg !3935
  br i1 %tobool, label %if.then8, label %lor.lhs.false, !dbg !3938

lor.lhs.false:                                    ; preds = %if.then
  %8 = load i32, i32* %bExp, align 4, !dbg !3939
  %cmp6 = icmp eq i32 %8, 255, !dbg !3940
  br i1 %cmp6, label %land.lhs.true, label %if.end, !dbg !3941

land.lhs.true:                                    ; preds = %lor.lhs.false
  %9 = load i32, i32* %bSig, align 4, !dbg !3942
  %tobool7 = icmp ne i32 %9, 0, !dbg !3942
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !3943

if.then8:                                         ; preds = %land.lhs.true, %if.then
  %10 = load i32, i32* %a.addr, align 4, !dbg !3944
  %11 = load i32, i32* %b.addr, align 4, !dbg !3946
  %call9 = call i32 @propagateFloat32NaN(i32 %10, i32 %11), !dbg !3947
  store i32 %call9, i32* %retval, align 4, !dbg !3948
  br label %return, !dbg !3948

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  call void @float_raise(i32 16), !dbg !3949
  store i32 2147483647, i32* %retval, align 4, !dbg !3950
  br label %return, !dbg !3950

if.end10:                                         ; preds = %entry
  %12 = load i32, i32* %bExp, align 4, !dbg !3951
  %cmp11 = icmp eq i32 %12, 255, !dbg !3953
  br i1 %cmp11, label %if.then12, label %if.end17, !dbg !3954

if.then12:                                        ; preds = %if.end10
  %13 = load i32, i32* %bSig, align 4, !dbg !3955
  %tobool13 = icmp ne i32 %13, 0, !dbg !3955
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !3958

if.then14:                                        ; preds = %if.then12
  %14 = load i32, i32* %a.addr, align 4, !dbg !3959
  %15 = load i32, i32* %b.addr, align 4, !dbg !3960
  %call15 = call i32 @propagateFloat32NaN(i32 %14, i32 %15), !dbg !3961
  store i32 %call15, i32* %retval, align 4, !dbg !3962
  br label %return, !dbg !3962

if.end16:                                         ; preds = %if.then12
  %16 = load i32, i32* %a.addr, align 4, !dbg !3963
  store i32 %16, i32* %retval, align 4, !dbg !3964
  br label %return, !dbg !3964

if.end17:                                         ; preds = %if.end10
  %17 = load i32, i32* %bExp, align 4, !dbg !3965
  %cmp18 = icmp eq i32 %17, 0, !dbg !3967
  br i1 %cmp18, label %if.then19, label %if.end23, !dbg !3968

if.then19:                                        ; preds = %if.end17
  %18 = load i32, i32* %bSig, align 4, !dbg !3969
  %cmp20 = icmp eq i32 %18, 0, !dbg !3972
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !3973

if.then21:                                        ; preds = %if.then19
  call void @float_raise(i32 16), !dbg !3974
  store i32 2147483647, i32* %retval, align 4, !dbg !3976
  br label %return, !dbg !3976

if.end22:                                         ; preds = %if.then19
  %19 = load i32, i32* %bSig, align 4, !dbg !3977
  call void @normalizeFloat32Subnormal(i32 %19, i32* %bExp, i32* %bSig), !dbg !3978
  br label %if.end23, !dbg !3979

if.end23:                                         ; preds = %if.end22, %if.end17
  %20 = load i32, i32* %aExp, align 4, !dbg !3980
  %cmp24 = icmp eq i32 %20, 0, !dbg !3982
  br i1 %cmp24, label %if.then25, label %if.end29, !dbg !3983

if.then25:                                        ; preds = %if.end23
  %21 = load i32, i32* %aSig, align 4, !dbg !3984
  %cmp26 = icmp eq i32 %21, 0, !dbg !3987
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !3988

if.then27:                                        ; preds = %if.then25
  %22 = load i32, i32* %a.addr, align 4, !dbg !3989
  store i32 %22, i32* %retval, align 4, !dbg !3990
  br label %return, !dbg !3990

if.end28:                                         ; preds = %if.then25
  %23 = load i32, i32* %aSig, align 4, !dbg !3991
  call void @normalizeFloat32Subnormal(i32 %23, i32* %aExp, i32* %aSig), !dbg !3992
  br label %if.end29, !dbg !3993

if.end29:                                         ; preds = %if.end28, %if.end23
  %24 = load i32, i32* %aExp, align 4, !dbg !3994
  %25 = load i32, i32* %bExp, align 4, !dbg !3995
  %sub = sub nsw i32 %24, %25, !dbg !3996
  store i32 %sub, i32* %expDiff, align 4, !dbg !3997
  %26 = load i32, i32* %aSig, align 4, !dbg !3998
  %or = or i32 %26, 8388608, !dbg !3998
  store i32 %or, i32* %aSig, align 4, !dbg !3998
  %27 = load i32, i32* %bSig, align 4, !dbg !3999
  %or30 = or i32 %27, 8388608, !dbg !3999
  store i32 %or30, i32* %bSig, align 4, !dbg !3999
  %28 = load i32, i32* %expDiff, align 4, !dbg !4000
  %cmp31 = icmp slt i32 %28, 32, !dbg !4002
  br i1 %cmp31, label %if.then32, label %if.else62, !dbg !4003

if.then32:                                        ; preds = %if.end29
  %29 = load i32, i32* %aSig, align 4, !dbg !4004
  %shl = shl i32 %29, 8, !dbg !4004
  store i32 %shl, i32* %aSig, align 4, !dbg !4004
  %30 = load i32, i32* %bSig, align 4, !dbg !4006
  %shl33 = shl i32 %30, 8, !dbg !4006
  store i32 %shl33, i32* %bSig, align 4, !dbg !4006
  %31 = load i32, i32* %expDiff, align 4, !dbg !4007
  %cmp34 = icmp slt i32 %31, 0, !dbg !4009
  br i1 %cmp34, label %if.then35, label %if.end39, !dbg !4010

if.then35:                                        ; preds = %if.then32
  %32 = load i32, i32* %expDiff, align 4, !dbg !4011
  %cmp36 = icmp slt i32 %32, -1, !dbg !4014
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !4015

if.then37:                                        ; preds = %if.then35
  %33 = load i32, i32* %a.addr, align 4, !dbg !4016
  store i32 %33, i32* %retval, align 4, !dbg !4017
  br label %return, !dbg !4017

if.end38:                                         ; preds = %if.then35
  %34 = load i32, i32* %aSig, align 4, !dbg !4018
  %shr = lshr i32 %34, 1, !dbg !4018
  store i32 %shr, i32* %aSig, align 4, !dbg !4018
  br label %if.end39, !dbg !4019

if.end39:                                         ; preds = %if.end38, %if.then32
  %35 = load i32, i32* %bSig, align 4, !dbg !4020
  %36 = load i32, i32* %aSig, align 4, !dbg !4021
  %cmp40 = icmp ule i32 %35, %36, !dbg !4022
  %conv = zext i1 %cmp40 to i32, !dbg !4022
  store i32 %conv, i32* %q, align 4, !dbg !4023
  %37 = load i32, i32* %q, align 4, !dbg !4024
  %tobool41 = icmp ne i32 %37, 0, !dbg !4024
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !4026

if.then42:                                        ; preds = %if.end39
  %38 = load i32, i32* %bSig, align 4, !dbg !4027
  %39 = load i32, i32* %aSig, align 4, !dbg !4028
  %sub43 = sub i32 %39, %38, !dbg !4028
  store i32 %sub43, i32* %aSig, align 4, !dbg !4028
  br label %if.end44, !dbg !4029

if.end44:                                         ; preds = %if.then42, %if.end39
  %40 = load i32, i32* %expDiff, align 4, !dbg !4030
  %cmp45 = icmp slt i32 0, %40, !dbg !4032
  br i1 %cmp45, label %if.then47, label %if.else, !dbg !4033

if.then47:                                        ; preds = %if.end44
  %41 = load i32, i32* %aSig, align 4, !dbg !4034
  %conv48 = zext i32 %41 to i64, !dbg !4036
  %shl49 = shl i64 %conv48, 32, !dbg !4037
  %42 = load i32, i32* %bSig, align 4, !dbg !4038
  %conv50 = zext i32 %42 to i64, !dbg !4038
  %div = udiv i64 %shl49, %conv50, !dbg !4039
  %conv51 = trunc i64 %div to i32, !dbg !4040
  store i32 %conv51, i32* %q, align 4, !dbg !4041
  %43 = load i32, i32* %expDiff, align 4, !dbg !4042
  %sub52 = sub nsw i32 32, %43, !dbg !4043
  %44 = load i32, i32* %q, align 4, !dbg !4044
  %shr53 = lshr i32 %44, %sub52, !dbg !4044
  store i32 %shr53, i32* %q, align 4, !dbg !4044
  %45 = load i32, i32* %bSig, align 4, !dbg !4045
  %shr54 = lshr i32 %45, 2, !dbg !4045
  store i32 %shr54, i32* %bSig, align 4, !dbg !4045
  %46 = load i32, i32* %aSig, align 4, !dbg !4046
  %shr55 = lshr i32 %46, 1, !dbg !4047
  %47 = load i32, i32* %expDiff, align 4, !dbg !4048
  %sub56 = sub nsw i32 %47, 1, !dbg !4049
  %shl57 = shl i32 %shr55, %sub56, !dbg !4050
  %48 = load i32, i32* %bSig, align 4, !dbg !4051
  %49 = load i32, i32* %q, align 4, !dbg !4052
  %mul = mul i32 %48, %49, !dbg !4053
  %sub58 = sub i32 %shl57, %mul, !dbg !4054
  store i32 %sub58, i32* %aSig, align 4, !dbg !4055
  br label %if.end61, !dbg !4056

if.else:                                          ; preds = %if.end44
  %50 = load i32, i32* %aSig, align 4, !dbg !4057
  %shr59 = lshr i32 %50, 2, !dbg !4057
  store i32 %shr59, i32* %aSig, align 4, !dbg !4057
  %51 = load i32, i32* %bSig, align 4, !dbg !4059
  %shr60 = lshr i32 %51, 2, !dbg !4059
  store i32 %shr60, i32* %bSig, align 4, !dbg !4059
  br label %if.end61

if.end61:                                         ; preds = %if.else, %if.then47
  br label %if.end104, !dbg !4060

if.else62:                                        ; preds = %if.end29
  %52 = load i32, i32* %bSig, align 4, !dbg !4061
  %53 = load i32, i32* %aSig, align 4, !dbg !4064
  %cmp63 = icmp ule i32 %52, %53, !dbg !4065
  br i1 %cmp63, label %if.then65, label %if.end67, !dbg !4066

if.then65:                                        ; preds = %if.else62
  %54 = load i32, i32* %bSig, align 4, !dbg !4067
  %55 = load i32, i32* %aSig, align 4, !dbg !4068
  %sub66 = sub i32 %55, %54, !dbg !4068
  store i32 %sub66, i32* %aSig, align 4, !dbg !4068
  br label %if.end67, !dbg !4069

if.end67:                                         ; preds = %if.then65, %if.else62
  %56 = load i32, i32* %aSig, align 4, !dbg !4070
  %conv68 = zext i32 %56 to i64, !dbg !4071
  %shl69 = shl i64 %conv68, 40, !dbg !4072
  store i64 %shl69, i64* %aSig64, align 8, !dbg !4073
  %57 = load i32, i32* %bSig, align 4, !dbg !4074
  %conv70 = zext i32 %57 to i64, !dbg !4075
  %shl71 = shl i64 %conv70, 40, !dbg !4076
  store i64 %shl71, i64* %bSig64, align 8, !dbg !4077
  %58 = load i32, i32* %expDiff, align 4, !dbg !4078
  %sub72 = sub nsw i32 %58, 64, !dbg !4078
  store i32 %sub72, i32* %expDiff, align 4, !dbg !4078
  br label %while.cond, !dbg !4079

while.cond:                                       ; preds = %cond.end, %if.end67
  %59 = load i32, i32* %expDiff, align 4, !dbg !4080
  %cmp73 = icmp slt i32 0, %59, !dbg !4081
  br i1 %cmp73, label %while.body, label %while.end, !dbg !4079

while.body:                                       ; preds = %while.cond
  %60 = load i64, i64* %aSig64, align 8, !dbg !4082
  %61 = load i64, i64* %bSig64, align 8, !dbg !4084
  %call75 = call i64 @estimateDiv128To64(i64 %60, i64 0, i64 %61), !dbg !4085
  store i64 %call75, i64* %q64, align 8, !dbg !4086
  %62 = load i64, i64* %q64, align 8, !dbg !4087
  %cmp76 = icmp ult i64 2, %62, !dbg !4088
  br i1 %cmp76, label %cond.true, label %cond.false, !dbg !4089

cond.true:                                        ; preds = %while.body
  %63 = load i64, i64* %q64, align 8, !dbg !4090
  %sub78 = sub i64 %63, 2, !dbg !4091
  br label %cond.end, !dbg !4089

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !4089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub78, %cond.true ], [ 0, %cond.false ], !dbg !4089
  store i64 %cond, i64* %q64, align 8, !dbg !4092
  %64 = load i32, i32* %bSig, align 4, !dbg !4093
  %conv79 = zext i32 %64 to i64, !dbg !4093
  %65 = load i64, i64* %q64, align 8, !dbg !4094
  %mul80 = mul i64 %conv79, %65, !dbg !4095
  %shl81 = shl i64 %mul80, 38, !dbg !4096
  %sub82 = sub i64 0, %shl81, !dbg !4097
  store i64 %sub82, i64* %aSig64, align 8, !dbg !4098
  %66 = load i32, i32* %expDiff, align 4, !dbg !4099
  %sub83 = sub nsw i32 %66, 62, !dbg !4099
  store i32 %sub83, i32* %expDiff, align 4, !dbg !4099
  br label %while.cond, !dbg !4079, !llvm.loop !4100

while.end:                                        ; preds = %while.cond
  %67 = load i32, i32* %expDiff, align 4, !dbg !4102
  %add = add nsw i32 %67, 64, !dbg !4102
  store i32 %add, i32* %expDiff, align 4, !dbg !4102
  %68 = load i64, i64* %aSig64, align 8, !dbg !4103
  %69 = load i64, i64* %bSig64, align 8, !dbg !4104
  %call84 = call i64 @estimateDiv128To64(i64 %68, i64 0, i64 %69), !dbg !4105
  store i64 %call84, i64* %q64, align 8, !dbg !4106
  %70 = load i64, i64* %q64, align 8, !dbg !4107
  %cmp85 = icmp ult i64 2, %70, !dbg !4108
  br i1 %cmp85, label %cond.true87, label %cond.false89, !dbg !4109

cond.true87:                                      ; preds = %while.end
  %71 = load i64, i64* %q64, align 8, !dbg !4110
  %sub88 = sub i64 %71, 2, !dbg !4111
  br label %cond.end90, !dbg !4109

cond.false89:                                     ; preds = %while.end
  br label %cond.end90, !dbg !4109

cond.end90:                                       ; preds = %cond.false89, %cond.true87
  %cond91 = phi i64 [ %sub88, %cond.true87 ], [ 0, %cond.false89 ], !dbg !4109
  store i64 %cond91, i64* %q64, align 8, !dbg !4112
  %72 = load i64, i64* %q64, align 8, !dbg !4113
  %73 = load i32, i32* %expDiff, align 4, !dbg !4114
  %sub92 = sub nsw i32 64, %73, !dbg !4115
  %sh_prom = zext i32 %sub92 to i64, !dbg !4116
  %shr93 = lshr i64 %72, %sh_prom, !dbg !4116
  %conv94 = trunc i64 %shr93 to i32, !dbg !4113
  store i32 %conv94, i32* %q, align 4, !dbg !4117
  %74 = load i32, i32* %bSig, align 4, !dbg !4118
  %shl95 = shl i32 %74, 6, !dbg !4118
  store i32 %shl95, i32* %bSig, align 4, !dbg !4118
  %75 = load i64, i64* %aSig64, align 8, !dbg !4119
  %shr96 = lshr i64 %75, 33, !dbg !4120
  %76 = load i32, i32* %expDiff, align 4, !dbg !4121
  %sub97 = sub nsw i32 %76, 1, !dbg !4122
  %sh_prom98 = zext i32 %sub97 to i64, !dbg !4123
  %shl99 = shl i64 %shr96, %sh_prom98, !dbg !4123
  %77 = load i32, i32* %bSig, align 4, !dbg !4124
  %78 = load i32, i32* %q, align 4, !dbg !4125
  %mul100 = mul i32 %77, %78, !dbg !4126
  %conv101 = zext i32 %mul100 to i64, !dbg !4124
  %sub102 = sub i64 %shl99, %conv101, !dbg !4127
  %conv103 = trunc i64 %sub102 to i32, !dbg !4128
  store i32 %conv103, i32* %aSig, align 4, !dbg !4129
  br label %if.end104

if.end104:                                        ; preds = %cond.end90, %if.end61
  br label %do.body, !dbg !4130, !llvm.loop !4131

do.body:                                          ; preds = %do.cond, %if.end104
  %79 = load i32, i32* %aSig, align 4, !dbg !4133
  store i32 %79, i32* %alternateASig, align 4, !dbg !4135
  %80 = load i32, i32* %q, align 4, !dbg !4136
  %inc = add i32 %80, 1, !dbg !4136
  store i32 %inc, i32* %q, align 4, !dbg !4136
  %81 = load i32, i32* %bSig, align 4, !dbg !4137
  %82 = load i32, i32* %aSig, align 4, !dbg !4138
  %sub105 = sub i32 %82, %81, !dbg !4138
  store i32 %sub105, i32* %aSig, align 4, !dbg !4138
  br label %do.cond, !dbg !4139

do.cond:                                          ; preds = %do.body
  %83 = load i32, i32* %aSig, align 4, !dbg !4140
  %cmp106 = icmp sle i32 0, %83, !dbg !4141
  br i1 %cmp106, label %do.body, label %do.end, !dbg !4139, !llvm.loop !4131

do.end:                                           ; preds = %do.cond
  %84 = load i32, i32* %aSig, align 4, !dbg !4142
  %85 = load i32, i32* %alternateASig, align 4, !dbg !4143
  %add108 = add i32 %84, %85, !dbg !4144
  store i32 %add108, i32* %sigMean, align 4, !dbg !4145
  %86 = load i32, i32* %sigMean, align 4, !dbg !4146
  %cmp109 = icmp slt i32 %86, 0, !dbg !4148
  br i1 %cmp109, label %if.then116, label %lor.lhs.false111, !dbg !4149

lor.lhs.false111:                                 ; preds = %do.end
  %87 = load i32, i32* %sigMean, align 4, !dbg !4150
  %cmp112 = icmp eq i32 %87, 0, !dbg !4151
  br i1 %cmp112, label %land.lhs.true114, label %if.end117, !dbg !4152

land.lhs.true114:                                 ; preds = %lor.lhs.false111
  %88 = load i32, i32* %q, align 4, !dbg !4153
  %and = and i32 %88, 1, !dbg !4154
  %tobool115 = icmp ne i32 %and, 0, !dbg !4154
  br i1 %tobool115, label %if.then116, label %if.end117, !dbg !4155

if.then116:                                       ; preds = %land.lhs.true114, %do.end
  %89 = load i32, i32* %alternateASig, align 4, !dbg !4156
  store i32 %89, i32* %aSig, align 4, !dbg !4158
  br label %if.end117, !dbg !4159

if.end117:                                        ; preds = %if.then116, %land.lhs.true114, %lor.lhs.false111
  %90 = load i32, i32* %aSig, align 4, !dbg !4160
  %cmp118 = icmp slt i32 %90, 0, !dbg !4161
  %conv119 = zext i1 %cmp118 to i32, !dbg !4161
  store i32 %conv119, i32* %zSign, align 4, !dbg !4162
  %91 = load i32, i32* %zSign, align 4, !dbg !4163
  %tobool120 = icmp ne i32 %91, 0, !dbg !4163
  br i1 %tobool120, label %if.then121, label %if.end123, !dbg !4165

if.then121:                                       ; preds = %if.end117
  %92 = load i32, i32* %aSig, align 4, !dbg !4166
  %sub122 = sub i32 0, %92, !dbg !4167
  store i32 %sub122, i32* %aSig, align 4, !dbg !4168
  br label %if.end123, !dbg !4169

if.end123:                                        ; preds = %if.then121, %if.end117
  %93 = load i32, i32* %aSign, align 4, !dbg !4170
  %94 = load i32, i32* %zSign, align 4, !dbg !4171
  %xor = xor i32 %93, %94, !dbg !4172
  %95 = load i32, i32* %bExp, align 4, !dbg !4173
  %96 = load i32, i32* %aSig, align 4, !dbg !4174
  %call124 = call i32 @normalizeRoundAndPackFloat32(i32 %xor, i32 %95, i32 %96), !dbg !4175
  store i32 %call124, i32* %retval, align 4, !dbg !4176
  br label %return, !dbg !4176

return:                                           ; preds = %if.end123, %if.then37, %if.then27, %if.then21, %if.end16, %if.then14, %if.end, %if.then8
  %97 = load i32, i32* %retval, align 4, !dbg !4177
  ret i32 %97, !dbg !4177
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @estimateDiv128To64(i64 %a0, i64 %a1, i64 %b) #0 !dbg !4178 {
entry:
  %retval = alloca i64, align 8
  %a0.addr = alloca i64, align 8
  %a1.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %b0 = alloca i64, align 8
  %b1 = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %z = alloca i64, align 8
  store i64 %a0, i64* %a0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a0.addr, metadata !4181, metadata !DIExpression()), !dbg !4182
  store i64 %a1, i64* %a1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a1.addr, metadata !4183, metadata !DIExpression()), !dbg !4184
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !4185, metadata !DIExpression()), !dbg !4186
  call void @llvm.dbg.declare(metadata i64* %b0, metadata !4187, metadata !DIExpression()), !dbg !4188
  call void @llvm.dbg.declare(metadata i64* %b1, metadata !4189, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !4191, metadata !DIExpression()), !dbg !4192
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !4193, metadata !DIExpression()), !dbg !4194
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !4195, metadata !DIExpression()), !dbg !4196
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !4197, metadata !DIExpression()), !dbg !4198
  call void @llvm.dbg.declare(metadata i64* %z, metadata !4199, metadata !DIExpression()), !dbg !4200
  %0 = load i64, i64* %b.addr, align 8, !dbg !4201
  %1 = load i64, i64* %a0.addr, align 8, !dbg !4203
  %cmp = icmp ule i64 %0, %1, !dbg !4204
  br i1 %cmp, label %if.then, label %if.end, !dbg !4205

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8, !dbg !4206
  br label %return, !dbg !4206

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !4207
  %shr = lshr i64 %2, 32, !dbg !4208
  store i64 %shr, i64* %b0, align 8, !dbg !4209
  %3 = load i64, i64* %b0, align 8, !dbg !4210
  %shl = shl i64 %3, 32, !dbg !4211
  %4 = load i64, i64* %a0.addr, align 8, !dbg !4212
  %cmp1 = icmp ule i64 %shl, %4, !dbg !4213
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !4214

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !4214

cond.false:                                       ; preds = %if.end
  %5 = load i64, i64* %a0.addr, align 8, !dbg !4215
  %6 = load i64, i64* %b0, align 8, !dbg !4216
  %div = udiv i64 %5, %6, !dbg !4217
  %shl2 = shl i64 %div, 32, !dbg !4218
  br label %cond.end, !dbg !4214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -4294967296, %cond.true ], [ %shl2, %cond.false ], !dbg !4214
  store i64 %cond, i64* %z, align 8, !dbg !4219
  %7 = load i64, i64* %b.addr, align 8, !dbg !4220
  %8 = load i64, i64* %z, align 8, !dbg !4221
  call void @mul64To128(i64 %7, i64 %8, i64* %term0, i64* %term1), !dbg !4222
  %9 = load i64, i64* %a0.addr, align 8, !dbg !4223
  %10 = load i64, i64* %a1.addr, align 8, !dbg !4224
  %11 = load i64, i64* %term0, align 8, !dbg !4225
  %12 = load i64, i64* %term1, align 8, !dbg !4226
  call void @sub128(i64 %9, i64 %10, i64 %11, i64 %12, i64* %rem0, i64* %rem1), !dbg !4227
  br label %while.cond, !dbg !4228

while.cond:                                       ; preds = %while.body, %cond.end
  %13 = load i64, i64* %rem0, align 8, !dbg !4229
  %cmp3 = icmp slt i64 %13, 0, !dbg !4230
  br i1 %cmp3, label %while.body, label %while.end, !dbg !4228

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %z, align 8, !dbg !4231
  %sub = sub i64 %14, 4294967296, !dbg !4231
  store i64 %sub, i64* %z, align 8, !dbg !4231
  %15 = load i64, i64* %b.addr, align 8, !dbg !4233
  %shl4 = shl i64 %15, 32, !dbg !4234
  store i64 %shl4, i64* %b1, align 8, !dbg !4235
  %16 = load i64, i64* %rem0, align 8, !dbg !4236
  %17 = load i64, i64* %rem1, align 8, !dbg !4237
  %18 = load i64, i64* %b0, align 8, !dbg !4238
  %19 = load i64, i64* %b1, align 8, !dbg !4239
  call void @add128(i64 %16, i64 %17, i64 %18, i64 %19, i64* %rem0, i64* %rem1), !dbg !4240
  br label %while.cond, !dbg !4228, !llvm.loop !4241

while.end:                                        ; preds = %while.cond
  %20 = load i64, i64* %rem0, align 8, !dbg !4243
  %shl5 = shl i64 %20, 32, !dbg !4244
  %21 = load i64, i64* %rem1, align 8, !dbg !4245
  %shr6 = lshr i64 %21, 32, !dbg !4246
  %or = or i64 %shl5, %shr6, !dbg !4247
  store i64 %or, i64* %rem0, align 8, !dbg !4248
  %22 = load i64, i64* %b0, align 8, !dbg !4249
  %shl7 = shl i64 %22, 32, !dbg !4250
  %23 = load i64, i64* %rem0, align 8, !dbg !4251
  %cmp8 = icmp ule i64 %shl7, %23, !dbg !4252
  br i1 %cmp8, label %cond.true9, label %cond.false10, !dbg !4253

cond.true9:                                       ; preds = %while.end
  br label %cond.end12, !dbg !4253

cond.false10:                                     ; preds = %while.end
  %24 = load i64, i64* %rem0, align 8, !dbg !4254
  %25 = load i64, i64* %b0, align 8, !dbg !4255
  %div11 = udiv i64 %24, %25, !dbg !4256
  br label %cond.end12, !dbg !4253

cond.end12:                                       ; preds = %cond.false10, %cond.true9
  %cond13 = phi i64 [ 4294967295, %cond.true9 ], [ %div11, %cond.false10 ], !dbg !4253
  %26 = load i64, i64* %z, align 8, !dbg !4257
  %or14 = or i64 %26, %cond13, !dbg !4257
  store i64 %or14, i64* %z, align 8, !dbg !4257
  %27 = load i64, i64* %z, align 8, !dbg !4258
  store i64 %27, i64* %retval, align 8, !dbg !4259
  br label %return, !dbg !4259

return:                                           ; preds = %cond.end12, %if.then
  %28 = load i64, i64* %retval, align 8, !dbg !4260
  ret i64 %28, !dbg !4260
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float32_sqrt(i32 %a) #0 !dbg !4261 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i32, align 4
  %zSig = alloca i32, align 4
  %rem = alloca i64, align 8
  %term = alloca i64, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4262, metadata !DIExpression()), !dbg !4263
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4264, metadata !DIExpression()), !dbg !4265
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !4266, metadata !DIExpression()), !dbg !4267
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !4268, metadata !DIExpression()), !dbg !4269
  call void @llvm.dbg.declare(metadata i32* %aSig, metadata !4270, metadata !DIExpression()), !dbg !4271
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !4272, metadata !DIExpression()), !dbg !4273
  call void @llvm.dbg.declare(metadata i64* %rem, metadata !4274, metadata !DIExpression()), !dbg !4275
  call void @llvm.dbg.declare(metadata i64* %term, metadata !4276, metadata !DIExpression()), !dbg !4277
  %0 = load i32, i32* %a.addr, align 4, !dbg !4278
  %call = call i32 @extractFloat32Frac(i32 %0), !dbg !4279
  store i32 %call, i32* %aSig, align 4, !dbg !4280
  %1 = load i32, i32* %a.addr, align 4, !dbg !4281
  %call1 = call i32 @extractFloat32Exp(i32 %1), !dbg !4282
  store i32 %call1, i32* %aExp, align 4, !dbg !4283
  %2 = load i32, i32* %a.addr, align 4, !dbg !4284
  %call2 = call i32 @extractFloat32Sign(i32 %2), !dbg !4285
  store i32 %call2, i32* %aSign, align 4, !dbg !4286
  %3 = load i32, i32* %aExp, align 4, !dbg !4287
  %cmp = icmp eq i32 %3, 255, !dbg !4289
  br i1 %cmp, label %if.then, label %if.end8, !dbg !4290

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %aSig, align 4, !dbg !4291
  %tobool = icmp ne i32 %4, 0, !dbg !4291
  br i1 %tobool, label %if.then3, label %if.end, !dbg !4294

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %a.addr, align 4, !dbg !4295
  %call4 = call i32 @propagateFloat32NaN(i32 %5, i32 0), !dbg !4296
  store i32 %call4, i32* %retval, align 4, !dbg !4297
  br label %return, !dbg !4297

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %aSign, align 4, !dbg !4298
  %tobool5 = icmp ne i32 %6, 0, !dbg !4298
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !4300

if.then6:                                         ; preds = %if.end
  %7 = load i32, i32* %a.addr, align 4, !dbg !4301
  store i32 %7, i32* %retval, align 4, !dbg !4302
  br label %return, !dbg !4302

if.end7:                                          ; preds = %if.end
  call void @float_raise(i32 16), !dbg !4303
  store i32 2147483647, i32* %retval, align 4, !dbg !4304
  br label %return, !dbg !4304

if.end8:                                          ; preds = %entry
  %8 = load i32, i32* %aSign, align 4, !dbg !4305
  %tobool9 = icmp ne i32 %8, 0, !dbg !4305
  br i1 %tobool9, label %if.then10, label %if.end14, !dbg !4307

if.then10:                                        ; preds = %if.end8
  %9 = load i32, i32* %aExp, align 4, !dbg !4308
  %10 = load i32, i32* %aSig, align 4, !dbg !4311
  %or = or i32 %9, %10, !dbg !4312
  %cmp11 = icmp eq i32 %or, 0, !dbg !4313
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !4314

if.then12:                                        ; preds = %if.then10
  %11 = load i32, i32* %a.addr, align 4, !dbg !4315
  store i32 %11, i32* %retval, align 4, !dbg !4316
  br label %return, !dbg !4316

if.end13:                                         ; preds = %if.then10
  call void @float_raise(i32 16), !dbg !4317
  store i32 2147483647, i32* %retval, align 4, !dbg !4318
  br label %return, !dbg !4318

if.end14:                                         ; preds = %if.end8
  %12 = load i32, i32* %aExp, align 4, !dbg !4319
  %cmp15 = icmp eq i32 %12, 0, !dbg !4321
  br i1 %cmp15, label %if.then16, label %if.end20, !dbg !4322

if.then16:                                        ; preds = %if.end14
  %13 = load i32, i32* %aSig, align 4, !dbg !4323
  %cmp17 = icmp eq i32 %13, 0, !dbg !4326
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !4327

if.then18:                                        ; preds = %if.then16
  store i32 0, i32* %retval, align 4, !dbg !4328
  br label %return, !dbg !4328

if.end19:                                         ; preds = %if.then16
  %14 = load i32, i32* %aSig, align 4, !dbg !4329
  call void @normalizeFloat32Subnormal(i32 %14, i32* %aExp, i32* %aSig), !dbg !4330
  br label %if.end20, !dbg !4331

if.end20:                                         ; preds = %if.end19, %if.end14
  %15 = load i32, i32* %aExp, align 4, !dbg !4332
  %sub = sub nsw i32 %15, 127, !dbg !4333
  %shr = ashr i32 %sub, 1, !dbg !4334
  %add = add nsw i32 %shr, 126, !dbg !4335
  store i32 %add, i32* %zExp, align 4, !dbg !4336
  %16 = load i32, i32* %aSig, align 4, !dbg !4337
  %or21 = or i32 %16, 8388608, !dbg !4338
  %shl = shl i32 %or21, 8, !dbg !4339
  store i32 %shl, i32* %aSig, align 4, !dbg !4340
  %17 = load i32, i32* %aExp, align 4, !dbg !4341
  %18 = load i32, i32* %aSig, align 4, !dbg !4342
  %call22 = call i32 @estimateSqrt32(i32 %17, i32 %18), !dbg !4343
  %add23 = add i32 %call22, 2, !dbg !4344
  store i32 %add23, i32* %zSig, align 4, !dbg !4345
  %19 = load i32, i32* %zSig, align 4, !dbg !4346
  %and = and i32 %19, 127, !dbg !4348
  %cmp24 = icmp ule i32 %and, 5, !dbg !4349
  br i1 %cmp24, label %if.then25, label %if.end44, !dbg !4350

if.then25:                                        ; preds = %if.end20
  %20 = load i32, i32* %zSig, align 4, !dbg !4351
  %cmp26 = icmp ult i32 %20, 2, !dbg !4354
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !4355

if.then27:                                        ; preds = %if.then25
  store i32 2147483647, i32* %zSig, align 4, !dbg !4356
  br label %roundAndPack, !dbg !4358

if.end28:                                         ; preds = %if.then25
  %21 = load i32, i32* %aExp, align 4, !dbg !4359
  %and29 = and i32 %21, 1, !dbg !4360
  %22 = load i32, i32* %aSig, align 4, !dbg !4361
  %shr30 = lshr i32 %22, %and29, !dbg !4361
  store i32 %shr30, i32* %aSig, align 4, !dbg !4361
  %23 = load i32, i32* %zSig, align 4, !dbg !4362
  %conv = zext i32 %23 to i64, !dbg !4363
  %24 = load i32, i32* %zSig, align 4, !dbg !4364
  %conv31 = zext i32 %24 to i64, !dbg !4364
  %mul = mul i64 %conv, %conv31, !dbg !4365
  store i64 %mul, i64* %term, align 8, !dbg !4366
  %25 = load i32, i32* %aSig, align 4, !dbg !4367
  %conv32 = zext i32 %25 to i64, !dbg !4368
  %shl33 = shl i64 %conv32, 32, !dbg !4369
  %26 = load i64, i64* %term, align 8, !dbg !4370
  %sub34 = sub i64 %shl33, %26, !dbg !4371
  store i64 %sub34, i64* %rem, align 8, !dbg !4372
  br label %while.cond, !dbg !4373

while.cond:                                       ; preds = %while.body, %if.end28
  %27 = load i64, i64* %rem, align 8, !dbg !4374
  %cmp35 = icmp slt i64 %27, 0, !dbg !4375
  br i1 %cmp35, label %while.body, label %while.end, !dbg !4373

while.body:                                       ; preds = %while.cond
  %28 = load i32, i32* %zSig, align 4, !dbg !4376
  %dec = add i32 %28, -1, !dbg !4376
  store i32 %dec, i32* %zSig, align 4, !dbg !4376
  %29 = load i32, i32* %zSig, align 4, !dbg !4378
  %conv37 = zext i32 %29 to i64, !dbg !4379
  %shl38 = shl i64 %conv37, 1, !dbg !4380
  %or39 = or i64 %shl38, 1, !dbg !4381
  %30 = load i64, i64* %rem, align 8, !dbg !4382
  %add40 = add i64 %30, %or39, !dbg !4382
  store i64 %add40, i64* %rem, align 8, !dbg !4382
  br label %while.cond, !dbg !4373, !llvm.loop !4383

while.end:                                        ; preds = %while.cond
  %31 = load i64, i64* %rem, align 8, !dbg !4385
  %cmp41 = icmp ne i64 %31, 0, !dbg !4386
  %conv42 = zext i1 %cmp41 to i32, !dbg !4386
  %32 = load i32, i32* %zSig, align 4, !dbg !4387
  %or43 = or i32 %32, %conv42, !dbg !4387
  store i32 %or43, i32* %zSig, align 4, !dbg !4387
  br label %if.end44, !dbg !4388

if.end44:                                         ; preds = %while.end, %if.end20
  %33 = load i32, i32* %zSig, align 4, !dbg !4389
  call void @shift32RightJamming(i32 %33, i32 1, i32* %zSig), !dbg !4390
  br label %roundAndPack, !dbg !4390

roundAndPack:                                     ; preds = %if.end44, %if.then27
  %34 = load i32, i32* %zExp, align 4, !dbg !4391
  %35 = load i32, i32* %zSig, align 4, !dbg !4392
  %call45 = call i32 @roundAndPackFloat32(i32 0, i32 %34, i32 %35), !dbg !4393
  store i32 %call45, i32* %retval, align 4, !dbg !4394
  br label %return, !dbg !4394

return:                                           ; preds = %roundAndPack, %if.then18, %if.end13, %if.then12, %if.end7, %if.then6, %if.then3
  %36 = load i32, i32* %retval, align 4, !dbg !4395
  ret i32 %36, !dbg !4395
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @estimateSqrt32(i32 %aExp, i32 %a) #0 !dbg !57 {
entry:
  %retval = alloca i32, align 4
  %aExp.addr = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %index = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %aExp, i32* %aExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aExp.addr, metadata !4396, metadata !DIExpression()), !dbg !4397
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4398, metadata !DIExpression()), !dbg !4399
  call void @llvm.dbg.declare(metadata i32* %index, metadata !4400, metadata !DIExpression()), !dbg !4401
  call void @llvm.dbg.declare(metadata i32* %z, metadata !4402, metadata !DIExpression()), !dbg !4403
  %0 = load i32, i32* %a.addr, align 4, !dbg !4404
  %shr = lshr i32 %0, 27, !dbg !4405
  %and = and i32 %shr, 15, !dbg !4406
  store i32 %and, i32* %index, align 4, !dbg !4407
  %1 = load i32, i32* %aExp.addr, align 4, !dbg !4408
  %and1 = and i32 %1, 1, !dbg !4410
  %tobool = icmp ne i32 %and1, 0, !dbg !4410
  br i1 %tobool, label %if.then, label %if.else, !dbg !4411

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !4412
  %shr2 = lshr i32 %2, 17, !dbg !4414
  %add = add i32 16384, %shr2, !dbg !4415
  %3 = load i32, i32* %index, align 4, !dbg !4416
  %idxprom = sext i32 %3 to i64, !dbg !4417
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %idxprom, !dbg !4417
  %4 = load i16, i16* %arrayidx, align 2, !dbg !4417
  %conv = zext i16 %4 to i32, !dbg !4417
  %sub = sub i32 %add, %conv, !dbg !4418
  store i32 %sub, i32* %z, align 4, !dbg !4419
  %5 = load i32, i32* %a.addr, align 4, !dbg !4420
  %6 = load i32, i32* %z, align 4, !dbg !4421
  %div = udiv i32 %5, %6, !dbg !4422
  %shl = shl i32 %div, 14, !dbg !4423
  %7 = load i32, i32* %z, align 4, !dbg !4424
  %shl3 = shl i32 %7, 15, !dbg !4425
  %add4 = add i32 %shl, %shl3, !dbg !4426
  store i32 %add4, i32* %z, align 4, !dbg !4427
  %8 = load i32, i32* %a.addr, align 4, !dbg !4428
  %shr5 = lshr i32 %8, 1, !dbg !4428
  store i32 %shr5, i32* %a.addr, align 4, !dbg !4428
  br label %if.end20, !dbg !4429

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %a.addr, align 4, !dbg !4430
  %shr6 = lshr i32 %9, 17, !dbg !4432
  %add7 = add i32 32768, %shr6, !dbg !4433
  %10 = load i32, i32* %index, align 4, !dbg !4434
  %idxprom8 = sext i32 %10 to i64, !dbg !4435
  %arrayidx9 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %idxprom8, !dbg !4435
  %11 = load i16, i16* %arrayidx9, align 2, !dbg !4435
  %conv10 = zext i16 %11 to i32, !dbg !4435
  %sub11 = sub i32 %add7, %conv10, !dbg !4436
  store i32 %sub11, i32* %z, align 4, !dbg !4437
  %12 = load i32, i32* %a.addr, align 4, !dbg !4438
  %13 = load i32, i32* %z, align 4, !dbg !4439
  %div12 = udiv i32 %12, %13, !dbg !4440
  %14 = load i32, i32* %z, align 4, !dbg !4441
  %add13 = add i32 %div12, %14, !dbg !4442
  store i32 %add13, i32* %z, align 4, !dbg !4443
  %15 = load i32, i32* %z, align 4, !dbg !4444
  %cmp = icmp ule i32 131072, %15, !dbg !4445
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4446

cond.true:                                        ; preds = %if.else
  br label %cond.end, !dbg !4446

cond.false:                                       ; preds = %if.else
  %16 = load i32, i32* %z, align 4, !dbg !4447
  %shl15 = shl i32 %16, 15, !dbg !4448
  br label %cond.end, !dbg !4446

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -32768, %cond.true ], [ %shl15, %cond.false ], !dbg !4446
  store i32 %cond, i32* %z, align 4, !dbg !4449
  %17 = load i32, i32* %z, align 4, !dbg !4450
  %18 = load i32, i32* %a.addr, align 4, !dbg !4452
  %cmp16 = icmp ule i32 %17, %18, !dbg !4453
  br i1 %cmp16, label %if.then18, label %if.end, !dbg !4454

if.then18:                                        ; preds = %cond.end
  %19 = load i32, i32* %a.addr, align 4, !dbg !4455
  %shr19 = ashr i32 %19, 1, !dbg !4456
  store i32 %shr19, i32* %retval, align 4, !dbg !4457
  br label %return, !dbg !4457

if.end:                                           ; preds = %cond.end
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  %20 = load i32, i32* %a.addr, align 4, !dbg !4458
  %conv21 = zext i32 %20 to i64, !dbg !4459
  %shl22 = shl i64 %conv21, 31, !dbg !4460
  %21 = load i32, i32* %z, align 4, !dbg !4461
  %conv23 = zext i32 %21 to i64, !dbg !4461
  %div24 = udiv i64 %shl22, %conv23, !dbg !4462
  %conv25 = trunc i64 %div24 to i32, !dbg !4463
  %22 = load i32, i32* %z, align 4, !dbg !4464
  %shr26 = lshr i32 %22, 1, !dbg !4465
  %add27 = add i32 %conv25, %shr26, !dbg !4466
  store i32 %add27, i32* %retval, align 4, !dbg !4467
  br label %return, !dbg !4467

return:                                           ; preds = %if.end20, %if.then18
  %23 = load i32, i32* %retval, align 4, !dbg !4468
  ret i32 %23, !dbg !4468
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_eq(i32 %a, i32 %b) #0 !dbg !4469 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4472, metadata !DIExpression()), !dbg !4473
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4474, metadata !DIExpression()), !dbg !4475
  %0 = load i32, i32* %a.addr, align 4, !dbg !4476
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !4478
  %cmp = icmp eq i32 %call, 255, !dbg !4479
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4480

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !4481
  %call1 = call i32 @extractFloat32Frac(i32 %1), !dbg !4482
  %tobool = icmp ne i32 %call1, 0, !dbg !4482
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4483

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !4484
  %call2 = call i32 @extractFloat32Exp(i32 %2), !dbg !4485
  %cmp3 = icmp eq i32 %call2, 255, !dbg !4486
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !4487

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %b.addr, align 4, !dbg !4488
  %call5 = call i32 @extractFloat32Frac(i32 %3), !dbg !4489
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4489
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !4490

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %4 = load i32, i32* %a.addr, align 4, !dbg !4491
  %call7 = call zeroext i1 @float32_is_nan(i32 %4), !dbg !4494
  br i1 %call7, label %if.then10, label %lor.lhs.false8, !dbg !4495

lor.lhs.false8:                                   ; preds = %if.then
  %5 = load i32, i32* %b.addr, align 4, !dbg !4496
  %call9 = call zeroext i1 @float32_is_nan(i32 %5), !dbg !4497
  br i1 %call9, label %if.then10, label %if.end, !dbg !4498

if.then10:                                        ; preds = %lor.lhs.false8, %if.then
  call void @float_raise(i32 16), !dbg !4499
  br label %if.end, !dbg !4501

if.end:                                           ; preds = %if.then10, %lor.lhs.false8
  store i1 false, i1* %retval, align 1, !dbg !4502
  br label %return, !dbg !4502

if.end11:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %6 = load i32, i32* %a.addr, align 4, !dbg !4503
  %7 = load i32, i32* %b.addr, align 4, !dbg !4504
  %cmp12 = icmp eq i32 %6, %7, !dbg !4505
  br i1 %cmp12, label %lor.end, label %lor.rhs, !dbg !4506

lor.rhs:                                          ; preds = %if.end11
  %8 = load i32, i32* %a.addr, align 4, !dbg !4507
  %9 = load i32, i32* %b.addr, align 4, !dbg !4508
  %or = or i32 %8, %9, !dbg !4509
  %shl = shl i32 %or, 1, !dbg !4510
  %cmp13 = icmp eq i32 %shl, 0, !dbg !4511
  br label %lor.end, !dbg !4506

lor.end:                                          ; preds = %lor.rhs, %if.end11
  %10 = phi i1 [ true, %if.end11 ], [ %cmp13, %lor.rhs ]
  store i1 %10, i1* %retval, align 1, !dbg !4512
  br label %return, !dbg !4512

return:                                           ; preds = %lor.end, %if.end
  %11 = load i1, i1* %retval, align 1, !dbg !4513
  ret i1 %11, !dbg !4513
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_le(i32 %a, i32 %b) #0 !dbg !4514 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4515, metadata !DIExpression()), !dbg !4516
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4517, metadata !DIExpression()), !dbg !4518
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4519, metadata !DIExpression()), !dbg !4520
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !4521, metadata !DIExpression()), !dbg !4522
  %0 = load i32, i32* %a.addr, align 4, !dbg !4523
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !4525
  %cmp = icmp eq i32 %call, 255, !dbg !4526
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4527

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !4528
  %call1 = call i32 @extractFloat32Frac(i32 %1), !dbg !4529
  %tobool = icmp ne i32 %call1, 0, !dbg !4529
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4530

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !4531
  %call2 = call i32 @extractFloat32Exp(i32 %2), !dbg !4532
  %cmp3 = icmp eq i32 %call2, 255, !dbg !4533
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4534

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %b.addr, align 4, !dbg !4535
  %call5 = call i32 @extractFloat32Frac(i32 %3), !dbg !4536
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4536
  br i1 %tobool6, label %if.then, label %if.end, !dbg !4537

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !4538
  store i1 false, i1* %retval, align 1, !dbg !4540
  br label %return, !dbg !4540

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %4 = load i32, i32* %a.addr, align 4, !dbg !4541
  %call7 = call i32 @extractFloat32Sign(i32 %4), !dbg !4542
  store i32 %call7, i32* %aSign, align 4, !dbg !4543
  %5 = load i32, i32* %b.addr, align 4, !dbg !4544
  %call8 = call i32 @extractFloat32Sign(i32 %5), !dbg !4545
  store i32 %call8, i32* %bSign, align 4, !dbg !4546
  %6 = load i32, i32* %aSign, align 4, !dbg !4547
  %7 = load i32, i32* %bSign, align 4, !dbg !4549
  %cmp9 = icmp ne i32 %6, %7, !dbg !4550
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !4551

if.then10:                                        ; preds = %if.end
  %8 = load i32, i32* %aSign, align 4, !dbg !4552
  %tobool11 = icmp ne i32 %8, 0, !dbg !4552
  br i1 %tobool11, label %lor.end, label %lor.rhs, !dbg !4553

lor.rhs:                                          ; preds = %if.then10
  %9 = load i32, i32* %a.addr, align 4, !dbg !4554
  %10 = load i32, i32* %b.addr, align 4, !dbg !4555
  %or = or i32 %9, %10, !dbg !4556
  %shl = shl i32 %or, 1, !dbg !4557
  %cmp12 = icmp eq i32 %shl, 0, !dbg !4558
  br label %lor.end, !dbg !4553

lor.end:                                          ; preds = %lor.rhs, %if.then10
  %11 = phi i1 [ true, %if.then10 ], [ %cmp12, %lor.rhs ]
  store i1 %11, i1* %retval, align 1, !dbg !4559
  br label %return, !dbg !4559

if.end13:                                         ; preds = %if.end
  %12 = load i32, i32* %a.addr, align 4, !dbg !4560
  %13 = load i32, i32* %b.addr, align 4, !dbg !4561
  %cmp14 = icmp eq i32 %12, %13, !dbg !4562
  br i1 %cmp14, label %lor.end18, label %lor.rhs15, !dbg !4563

lor.rhs15:                                        ; preds = %if.end13
  %14 = load i32, i32* %aSign, align 4, !dbg !4564
  %15 = load i32, i32* %a.addr, align 4, !dbg !4565
  %16 = load i32, i32* %b.addr, align 4, !dbg !4566
  %cmp16 = icmp ult i32 %15, %16, !dbg !4567
  %conv = zext i1 %cmp16 to i32, !dbg !4567
  %xor = xor i32 %14, %conv, !dbg !4568
  %tobool17 = icmp ne i32 %xor, 0, !dbg !4563
  br label %lor.end18, !dbg !4563

lor.end18:                                        ; preds = %lor.rhs15, %if.end13
  %17 = phi i1 [ true, %if.end13 ], [ %tobool17, %lor.rhs15 ]
  store i1 %17, i1* %retval, align 1, !dbg !4569
  br label %return, !dbg !4569

return:                                           ; preds = %lor.end18, %lor.end, %if.then
  %18 = load i1, i1* %retval, align 1, !dbg !4570
  ret i1 %18, !dbg !4570
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_lt(i32 %a, i32 %b) #0 !dbg !4571 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4572, metadata !DIExpression()), !dbg !4573
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4574, metadata !DIExpression()), !dbg !4575
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4576, metadata !DIExpression()), !dbg !4577
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !4578, metadata !DIExpression()), !dbg !4579
  %0 = load i32, i32* %a.addr, align 4, !dbg !4580
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !4582
  %cmp = icmp eq i32 %call, 255, !dbg !4583
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4584

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !4585
  %call1 = call i32 @extractFloat32Frac(i32 %1), !dbg !4586
  %tobool = icmp ne i32 %call1, 0, !dbg !4586
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4587

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !4588
  %call2 = call i32 @extractFloat32Exp(i32 %2), !dbg !4589
  %cmp3 = icmp eq i32 %call2, 255, !dbg !4590
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4591

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %b.addr, align 4, !dbg !4592
  %call5 = call i32 @extractFloat32Frac(i32 %3), !dbg !4593
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4593
  br i1 %tobool6, label %if.then, label %if.end, !dbg !4594

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !4595
  store i1 false, i1* %retval, align 1, !dbg !4597
  br label %return, !dbg !4597

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %4 = load i32, i32* %a.addr, align 4, !dbg !4598
  %call7 = call i32 @extractFloat32Sign(i32 %4), !dbg !4599
  store i32 %call7, i32* %aSign, align 4, !dbg !4600
  %5 = load i32, i32* %b.addr, align 4, !dbg !4601
  %call8 = call i32 @extractFloat32Sign(i32 %5), !dbg !4602
  store i32 %call8, i32* %bSign, align 4, !dbg !4603
  %6 = load i32, i32* %aSign, align 4, !dbg !4604
  %7 = load i32, i32* %bSign, align 4, !dbg !4606
  %cmp9 = icmp ne i32 %6, %7, !dbg !4607
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !4608

if.then10:                                        ; preds = %if.end
  %8 = load i32, i32* %aSign, align 4, !dbg !4609
  %tobool11 = icmp ne i32 %8, 0, !dbg !4609
  br i1 %tobool11, label %land.rhs, label %land.end, !dbg !4610

land.rhs:                                         ; preds = %if.then10
  %9 = load i32, i32* %a.addr, align 4, !dbg !4611
  %10 = load i32, i32* %b.addr, align 4, !dbg !4612
  %or = or i32 %9, %10, !dbg !4613
  %shl = shl i32 %or, 1, !dbg !4614
  %cmp12 = icmp ne i32 %shl, 0, !dbg !4615
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %11 = phi i1 [ false, %if.then10 ], [ %cmp12, %land.rhs ]
  store i1 %11, i1* %retval, align 1, !dbg !4616
  br label %return, !dbg !4616

if.end13:                                         ; preds = %if.end
  %12 = load i32, i32* %a.addr, align 4, !dbg !4617
  %13 = load i32, i32* %b.addr, align 4, !dbg !4618
  %cmp14 = icmp ne i32 %12, %13, !dbg !4619
  br i1 %cmp14, label %land.rhs15, label %land.end18, !dbg !4620

land.rhs15:                                       ; preds = %if.end13
  %14 = load i32, i32* %aSign, align 4, !dbg !4621
  %15 = load i32, i32* %a.addr, align 4, !dbg !4622
  %16 = load i32, i32* %b.addr, align 4, !dbg !4623
  %cmp16 = icmp ult i32 %15, %16, !dbg !4624
  %conv = zext i1 %cmp16 to i32, !dbg !4624
  %xor = xor i32 %14, %conv, !dbg !4625
  %tobool17 = icmp ne i32 %xor, 0, !dbg !4620
  br label %land.end18

land.end18:                                       ; preds = %land.rhs15, %if.end13
  %17 = phi i1 [ false, %if.end13 ], [ %tobool17, %land.rhs15 ]
  store i1 %17, i1* %retval, align 1, !dbg !4626
  br label %return, !dbg !4626

return:                                           ; preds = %land.end18, %land.end, %if.then
  %18 = load i1, i1* %retval, align 1, !dbg !4627
  ret i1 %18, !dbg !4627
}

; Function Attrs: noinline nounwind optnone uwtable
define void @marktrue() #0 !dbg !4628 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i32 0, i32 0)), !dbg !4629
  ret void, !dbg !4630
}

; Function Attrs: noinline nounwind optnone uwtable
define void @markfalse() #0 !dbg !4631 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0)), !dbg !4632
  ret void, !dbg !4633
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_ge(i32 %a, i32 %b) #0 !dbg !4634 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4635, metadata !DIExpression()), !dbg !4636
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4637, metadata !DIExpression()), !dbg !4638
  %0 = load i32, i32* %a.addr, align 4, !dbg !4639
  %1 = load i32, i32* %b.addr, align 4, !dbg !4640
  %call = call zeroext i1 @float32_lt(i32 %0, i32 %1), !dbg !4641
  %lnot = xor i1 %call, true, !dbg !4642
  ret i1 %lnot, !dbg !4643
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_gt(i32 %a, i32 %b) #0 !dbg !4644 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4645, metadata !DIExpression()), !dbg !4646
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4647, metadata !DIExpression()), !dbg !4648
  %0 = load i32, i32* %a.addr, align 4, !dbg !4649
  %1 = load i32, i32* %b.addr, align 4, !dbg !4650
  %call = call zeroext i1 @float32_le(i32 %0, i32 %1), !dbg !4651
  %lnot = xor i1 %call, true, !dbg !4652
  ret i1 %lnot, !dbg !4653
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_ge_quiet(i32 %a, i32 %b) #0 !dbg !4654 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4655, metadata !DIExpression()), !dbg !4656
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4657, metadata !DIExpression()), !dbg !4658
  %0 = load i32, i32* %a.addr, align 4, !dbg !4659
  %1 = load i32, i32* %b.addr, align 4, !dbg !4660
  %call = call zeroext i1 @float32_uno_quiet(i32 %0, i32 %1), !dbg !4661
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !4662

lor.rhs:                                          ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !4663
  %3 = load i32, i32* %b.addr, align 4, !dbg !4664
  %call1 = call zeroext i1 @float32_ge(i32 %2, i32 %3), !dbg !4665
  br label %lor.end, !dbg !4662

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %4, !dbg !4666
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_uno_quiet(i32 %a, i32 %b) #0 !dbg !4667 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4668, metadata !DIExpression()), !dbg !4669
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4670, metadata !DIExpression()), !dbg !4671
  %0 = load i32, i32* %a.addr, align 4, !dbg !4672
  %call = call zeroext i1 @float32_is_nan(i32 %0), !dbg !4673
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !4674

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4, !dbg !4675
  %call1 = call zeroext i1 @float32_is_nan(i32 %1), !dbg !4676
  br label %lor.end, !dbg !4674

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %2, !dbg !4677
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_gt_quiet(i32 %a, i32 %b) #0 !dbg !4678 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4679, metadata !DIExpression()), !dbg !4680
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4681, metadata !DIExpression()), !dbg !4682
  %0 = load i32, i32* %a.addr, align 4, !dbg !4683
  %1 = load i32, i32* %b.addr, align 4, !dbg !4684
  %call = call zeroext i1 @float32_uno_quiet(i32 %0, i32 %1), !dbg !4685
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !4686

lor.rhs:                                          ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !4687
  %3 = load i32, i32* %b.addr, align 4, !dbg !4688
  %call1 = call zeroext i1 @float32_gt(i32 %2, i32 %3), !dbg !4689
  br label %lor.end, !dbg !4686

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %4, !dbg !4690
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_ne(i32 %a, i32 %b) #0 !dbg !4691 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4692, metadata !DIExpression()), !dbg !4693
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4694, metadata !DIExpression()), !dbg !4695
  %0 = load i32, i32* %a.addr, align 4, !dbg !4696
  %1 = load i32, i32* %b.addr, align 4, !dbg !4697
  %call = call zeroext i1 @float32_eq(i32 %0, i32 %1), !dbg !4698
  %lnot = xor i1 %call, true, !dbg !4699
  ret i1 %lnot, !dbg !4700
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_one_quiet(i32 %a, i32 %b) #0 !dbg !4701 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4704, metadata !DIExpression()), !dbg !4705
  %0 = load i32, i32* %a.addr, align 4, !dbg !4706
  %1 = load i32, i32* %b.addr, align 4, !dbg !4707
  %call = call zeroext i1 @float32_ord_quiet(i32 %0, i32 %1), !dbg !4708
  br i1 %call, label %land.rhs, label %land.end, !dbg !4709

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !4710
  %3 = load i32, i32* %b.addr, align 4, !dbg !4711
  %call1 = call zeroext i1 @float32_ne(i32 %2, i32 %3), !dbg !4712
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %call1, %land.rhs ]
  ret i1 %4, !dbg !4713
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_ord_quiet(i32 %a, i32 %b) #0 !dbg !4714 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4715, metadata !DIExpression()), !dbg !4716
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4717, metadata !DIExpression()), !dbg !4718
  %0 = load i32, i32* %a.addr, align 4, !dbg !4719
  %call = call zeroext i1 @float32_is_nan(i32 %0), !dbg !4720
  br i1 %call, label %land.end, label %land.rhs, !dbg !4721

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4, !dbg !4722
  %call1 = call zeroext i1 @float32_is_nan(i32 %1), !dbg !4723
  %lnot = xor i1 %call1, true, !dbg !4724
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %2, !dbg !4725
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_eq_signaling(i32 %a, i32 %b) #0 !dbg !4726 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4727, metadata !DIExpression()), !dbg !4728
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4729, metadata !DIExpression()), !dbg !4730
  %0 = load i32, i32* %a.addr, align 4, !dbg !4731
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !4733
  %cmp = icmp eq i32 %call, 255, !dbg !4734
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4735

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !4736
  %call1 = call i32 @extractFloat32Frac(i32 %1), !dbg !4737
  %tobool = icmp ne i32 %call1, 0, !dbg !4737
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4738

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !4739
  %call2 = call i32 @extractFloat32Exp(i32 %2), !dbg !4740
  %cmp3 = icmp eq i32 %call2, 255, !dbg !4741
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4742

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %b.addr, align 4, !dbg !4743
  %call5 = call i32 @extractFloat32Frac(i32 %3), !dbg !4744
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4744
  br i1 %tobool6, label %if.then, label %if.end, !dbg !4745

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !4746
  store i1 false, i1* %retval, align 1, !dbg !4748
  br label %return, !dbg !4748

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %4 = load i32, i32* %a.addr, align 4, !dbg !4749
  %5 = load i32, i32* %b.addr, align 4, !dbg !4750
  %cmp7 = icmp eq i32 %4, %5, !dbg !4751
  br i1 %cmp7, label %lor.end, label %lor.rhs, !dbg !4752

lor.rhs:                                          ; preds = %if.end
  %6 = load i32, i32* %a.addr, align 4, !dbg !4753
  %7 = load i32, i32* %b.addr, align 4, !dbg !4754
  %or = or i32 %6, %7, !dbg !4755
  %shl = shl i32 %or, 1, !dbg !4756
  %cmp8 = icmp eq i32 %shl, 0, !dbg !4757
  br label %lor.end, !dbg !4752

lor.end:                                          ; preds = %lor.rhs, %if.end
  %8 = phi i1 [ true, %if.end ], [ %cmp8, %lor.rhs ]
  store i1 %8, i1* %retval, align 1, !dbg !4758
  br label %return, !dbg !4758

return:                                           ; preds = %lor.end, %if.then
  %9 = load i1, i1* %retval, align 1, !dbg !4759
  ret i1 %9, !dbg !4759
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_le_quiet(i32 %a, i32 %b) #0 !dbg !4760 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4761, metadata !DIExpression()), !dbg !4762
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4763, metadata !DIExpression()), !dbg !4764
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4765, metadata !DIExpression()), !dbg !4766
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !4767, metadata !DIExpression()), !dbg !4768
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !4769, metadata !DIExpression()), !dbg !4770
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !4771, metadata !DIExpression()), !dbg !4772
  %0 = load i32, i32* %a.addr, align 4, !dbg !4773
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !4775
  %cmp = icmp eq i32 %call, 255, !dbg !4776
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4777

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !4778
  %call1 = call i32 @extractFloat32Frac(i32 %1), !dbg !4779
  %tobool = icmp ne i32 %call1, 0, !dbg !4779
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4780

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !4781
  %call2 = call i32 @extractFloat32Exp(i32 %2), !dbg !4782
  %cmp3 = icmp eq i32 %call2, 255, !dbg !4783
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !4784

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %b.addr, align 4, !dbg !4785
  %call5 = call i32 @extractFloat32Frac(i32 %3), !dbg !4786
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4786
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !4787

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %4 = load i32, i32* %a.addr, align 4, !dbg !4788
  %call7 = call zeroext i1 @float32_is_nan(i32 %4), !dbg !4791
  br i1 %call7, label %if.then10, label %lor.lhs.false8, !dbg !4792

lor.lhs.false8:                                   ; preds = %if.then
  %5 = load i32, i32* %b.addr, align 4, !dbg !4793
  %call9 = call zeroext i1 @float32_is_nan(i32 %5), !dbg !4794
  br i1 %call9, label %if.then10, label %if.end, !dbg !4795

if.then10:                                        ; preds = %lor.lhs.false8, %if.then
  call void @float_raise(i32 16), !dbg !4796
  br label %if.end, !dbg !4798

if.end:                                           ; preds = %if.then10, %lor.lhs.false8
  store i1 false, i1* %retval, align 1, !dbg !4799
  br label %return, !dbg !4799

if.end11:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %6 = load i32, i32* %a.addr, align 4, !dbg !4800
  %call12 = call i32 @extractFloat32Sign(i32 %6), !dbg !4801
  store i32 %call12, i32* %aSign, align 4, !dbg !4802
  %7 = load i32, i32* %b.addr, align 4, !dbg !4803
  %call13 = call i32 @extractFloat32Sign(i32 %7), !dbg !4804
  store i32 %call13, i32* %bSign, align 4, !dbg !4805
  %8 = load i32, i32* %aSign, align 4, !dbg !4806
  %9 = load i32, i32* %bSign, align 4, !dbg !4808
  %cmp14 = icmp ne i32 %8, %9, !dbg !4809
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !4810

if.then15:                                        ; preds = %if.end11
  %10 = load i32, i32* %aSign, align 4, !dbg !4811
  %tobool16 = icmp ne i32 %10, 0, !dbg !4811
  br i1 %tobool16, label %lor.end, label %lor.rhs, !dbg !4812

lor.rhs:                                          ; preds = %if.then15
  %11 = load i32, i32* %a.addr, align 4, !dbg !4813
  %12 = load i32, i32* %b.addr, align 4, !dbg !4814
  %or = or i32 %11, %12, !dbg !4815
  %shl = shl i32 %or, 1, !dbg !4816
  %cmp17 = icmp eq i32 %shl, 0, !dbg !4817
  br label %lor.end, !dbg !4812

lor.end:                                          ; preds = %lor.rhs, %if.then15
  %13 = phi i1 [ true, %if.then15 ], [ %cmp17, %lor.rhs ]
  store i1 %13, i1* %retval, align 1, !dbg !4818
  br label %return, !dbg !4818

if.end18:                                         ; preds = %if.end11
  %14 = load i32, i32* %a.addr, align 4, !dbg !4819
  %15 = load i32, i32* %b.addr, align 4, !dbg !4820
  %cmp19 = icmp eq i32 %14, %15, !dbg !4821
  br i1 %cmp19, label %lor.end23, label %lor.rhs20, !dbg !4822

lor.rhs20:                                        ; preds = %if.end18
  %16 = load i32, i32* %aSign, align 4, !dbg !4823
  %17 = load i32, i32* %a.addr, align 4, !dbg !4824
  %18 = load i32, i32* %b.addr, align 4, !dbg !4825
  %cmp21 = icmp ult i32 %17, %18, !dbg !4826
  %conv = zext i1 %cmp21 to i32, !dbg !4826
  %xor = xor i32 %16, %conv, !dbg !4827
  %tobool22 = icmp ne i32 %xor, 0, !dbg !4822
  br label %lor.end23, !dbg !4822

lor.end23:                                        ; preds = %lor.rhs20, %if.end18
  %19 = phi i1 [ true, %if.end18 ], [ %tobool22, %lor.rhs20 ]
  store i1 %19, i1* %retval, align 1, !dbg !4828
  br label %return, !dbg !4828

return:                                           ; preds = %lor.end23, %lor.end, %if.end
  %20 = load i1, i1* %retval, align 1, !dbg !4829
  ret i1 %20, !dbg !4829
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float32_lt_quiet(i32 %a, i32 %b) #0 !dbg !4830 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4831, metadata !DIExpression()), !dbg !4832
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4833, metadata !DIExpression()), !dbg !4834
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4835, metadata !DIExpression()), !dbg !4836
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !4837, metadata !DIExpression()), !dbg !4838
  %0 = load i32, i32* %a.addr, align 4, !dbg !4839
  %call = call i32 @extractFloat32Exp(i32 %0), !dbg !4841
  %cmp = icmp eq i32 %call, 255, !dbg !4842
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4843

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4, !dbg !4844
  %call1 = call i32 @extractFloat32Frac(i32 %1), !dbg !4845
  %tobool = icmp ne i32 %call1, 0, !dbg !4845
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4846

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !4847
  %call2 = call i32 @extractFloat32Exp(i32 %2), !dbg !4848
  %cmp3 = icmp eq i32 %call2, 255, !dbg !4849
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !4850

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %b.addr, align 4, !dbg !4851
  %call5 = call i32 @extractFloat32Frac(i32 %3), !dbg !4852
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4852
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !4853

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %4 = load i32, i32* %a.addr, align 4, !dbg !4854
  %call7 = call zeroext i1 @float32_is_nan(i32 %4), !dbg !4857
  br i1 %call7, label %if.then10, label %lor.lhs.false8, !dbg !4858

lor.lhs.false8:                                   ; preds = %if.then
  %5 = load i32, i32* %b.addr, align 4, !dbg !4859
  %call9 = call zeroext i1 @float32_is_nan(i32 %5), !dbg !4860
  br i1 %call9, label %if.then10, label %if.end, !dbg !4861

if.then10:                                        ; preds = %lor.lhs.false8, %if.then
  call void @float_raise(i32 16), !dbg !4862
  br label %if.end, !dbg !4864

if.end:                                           ; preds = %if.then10, %lor.lhs.false8
  store i1 false, i1* %retval, align 1, !dbg !4865
  br label %return, !dbg !4865

if.end11:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %6 = load i32, i32* %a.addr, align 4, !dbg !4866
  %call12 = call i32 @extractFloat32Sign(i32 %6), !dbg !4867
  store i32 %call12, i32* %aSign, align 4, !dbg !4868
  %7 = load i32, i32* %b.addr, align 4, !dbg !4869
  %call13 = call i32 @extractFloat32Sign(i32 %7), !dbg !4870
  store i32 %call13, i32* %bSign, align 4, !dbg !4871
  %8 = load i32, i32* %aSign, align 4, !dbg !4872
  %9 = load i32, i32* %bSign, align 4, !dbg !4874
  %cmp14 = icmp ne i32 %8, %9, !dbg !4875
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !4876

if.then15:                                        ; preds = %if.end11
  %10 = load i32, i32* %aSign, align 4, !dbg !4877
  %tobool16 = icmp ne i32 %10, 0, !dbg !4877
  br i1 %tobool16, label %land.rhs, label %land.end, !dbg !4878

land.rhs:                                         ; preds = %if.then15
  %11 = load i32, i32* %a.addr, align 4, !dbg !4879
  %12 = load i32, i32* %b.addr, align 4, !dbg !4880
  %or = or i32 %11, %12, !dbg !4881
  %shl = shl i32 %or, 1, !dbg !4882
  %cmp17 = icmp ne i32 %shl, 0, !dbg !4883
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then15
  %13 = phi i1 [ false, %if.then15 ], [ %cmp17, %land.rhs ]
  store i1 %13, i1* %retval, align 1, !dbg !4884
  br label %return, !dbg !4884

if.end18:                                         ; preds = %if.end11
  %14 = load i32, i32* %a.addr, align 4, !dbg !4885
  %15 = load i32, i32* %b.addr, align 4, !dbg !4886
  %cmp19 = icmp ne i32 %14, %15, !dbg !4887
  br i1 %cmp19, label %land.rhs20, label %land.end23, !dbg !4888

land.rhs20:                                       ; preds = %if.end18
  %16 = load i32, i32* %aSign, align 4, !dbg !4889
  %17 = load i32, i32* %a.addr, align 4, !dbg !4890
  %18 = load i32, i32* %b.addr, align 4, !dbg !4891
  %cmp21 = icmp ult i32 %17, %18, !dbg !4892
  %conv = zext i1 %cmp21 to i32, !dbg !4892
  %xor = xor i32 %16, %conv, !dbg !4893
  %tobool22 = icmp ne i32 %xor, 0, !dbg !4888
  br label %land.end23

land.end23:                                       ; preds = %land.rhs20, %if.end18
  %19 = phi i1 [ false, %if.end18 ], [ %tobool22, %land.rhs20 ]
  store i1 %19, i1* %retval, align 1, !dbg !4894
  br label %return, !dbg !4894

return:                                           ; preds = %land.end23, %land.end, %if.end
  %20 = load i1, i1* %retval, align 1, !dbg !4895
  ret i1 %20, !dbg !4895
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float64_to_int32(i64 %a) #0 !dbg !4896 {
entry:
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !4899, metadata !DIExpression()), !dbg !4900
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4901, metadata !DIExpression()), !dbg !4902
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !4903, metadata !DIExpression()), !dbg !4904
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !4905, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !4907, metadata !DIExpression()), !dbg !4908
  %0 = load i64, i64* %a.addr, align 8, !dbg !4909
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !4910
  store i64 %call, i64* %aSig, align 8, !dbg !4911
  %1 = load i64, i64* %a.addr, align 8, !dbg !4912
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !4913
  store i32 %call1, i32* %aExp, align 4, !dbg !4914
  %2 = load i64, i64* %a.addr, align 8, !dbg !4915
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !4916
  store i32 %call2, i32* %aSign, align 4, !dbg !4917
  %3 = load i32, i32* %aExp, align 4, !dbg !4918
  %cmp = icmp eq i32 %3, 2047, !dbg !4920
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4921

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !4922
  %tobool = icmp ne i64 %4, 0, !dbg !4922
  br i1 %tobool, label %if.then, label %if.end, !dbg !4923

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !4924
  br label %if.end, !dbg !4925

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32, i32* %aExp, align 4, !dbg !4926
  %tobool3 = icmp ne i32 %5, 0, !dbg !4926
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !4928

if.then4:                                         ; preds = %if.end
  %6 = load i64, i64* %aSig, align 8, !dbg !4929
  %or = or i64 %6, 4503599627370496, !dbg !4929
  store i64 %or, i64* %aSig, align 8, !dbg !4929
  br label %if.end5, !dbg !4930

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load i32, i32* %aExp, align 4, !dbg !4931
  %sub = sub nsw i32 1068, %7, !dbg !4932
  store i32 %sub, i32* %shiftCount, align 4, !dbg !4933
  %8 = load i32, i32* %shiftCount, align 4, !dbg !4934
  %cmp6 = icmp slt i32 0, %8, !dbg !4936
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !4937

if.then7:                                         ; preds = %if.end5
  %9 = load i64, i64* %aSig, align 8, !dbg !4938
  %10 = load i32, i32* %shiftCount, align 4, !dbg !4939
  call void @shift64RightJamming(i64 %9, i32 %10, i64* %aSig), !dbg !4940
  br label %if.end8, !dbg !4940

if.end8:                                          ; preds = %if.then7, %if.end5
  %11 = load i32, i32* %aSign, align 4, !dbg !4941
  %12 = load i64, i64* %aSig, align 8, !dbg !4942
  %call9 = call i32 @roundAndPackInt32(i32 %11, i64 %12), !dbg !4943
  ret i32 %call9, !dbg !4944
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float64_to_int32_round_to_zero(i64 %a) #0 !dbg !4945 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %savedASig = alloca i64, align 8
  %z = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !4946, metadata !DIExpression()), !dbg !4947
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !4948, metadata !DIExpression()), !dbg !4949
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !4950, metadata !DIExpression()), !dbg !4951
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !4952, metadata !DIExpression()), !dbg !4953
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !4954, metadata !DIExpression()), !dbg !4955
  call void @llvm.dbg.declare(metadata i64* %savedASig, metadata !4956, metadata !DIExpression()), !dbg !4957
  call void @llvm.dbg.declare(metadata i32* %z, metadata !4958, metadata !DIExpression()), !dbg !4959
  %0 = load i64, i64* %a.addr, align 8, !dbg !4960
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !4961
  store i64 %call, i64* %aSig, align 8, !dbg !4962
  %1 = load i64, i64* %a.addr, align 8, !dbg !4963
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !4964
  store i32 %call1, i32* %aExp, align 4, !dbg !4965
  %2 = load i64, i64* %a.addr, align 8, !dbg !4966
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !4967
  store i32 %call2, i32* %aSign, align 4, !dbg !4968
  %3 = load i32, i32* %aExp, align 4, !dbg !4969
  %cmp = icmp slt i32 1054, %3, !dbg !4971
  br i1 %cmp, label %if.then, label %if.else, !dbg !4972

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %aExp, align 4, !dbg !4973
  %cmp3 = icmp eq i32 %4, 2047, !dbg !4976
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !4977

land.lhs.true:                                    ; preds = %if.then
  %5 = load i64, i64* %aSig, align 8, !dbg !4978
  %tobool = icmp ne i64 %5, 0, !dbg !4978
  br i1 %tobool, label %if.then4, label %if.end, !dbg !4979

if.then4:                                         ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !4980
  br label %if.end, !dbg !4981

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %invalid, !dbg !4982

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %aExp, align 4, !dbg !4983
  %cmp5 = icmp slt i32 %6, 1023, !dbg !4985
  br i1 %cmp5, label %if.then6, label %if.end11, !dbg !4986

if.then6:                                         ; preds = %if.else
  %7 = load i32, i32* %aExp, align 4, !dbg !4987
  %tobool7 = icmp ne i32 %7, 0, !dbg !4987
  br i1 %tobool7, label %if.then9, label %lor.lhs.false, !dbg !4990

lor.lhs.false:                                    ; preds = %if.then6
  %8 = load i64, i64* %aSig, align 8, !dbg !4991
  %tobool8 = icmp ne i64 %8, 0, !dbg !4991
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !4992

if.then9:                                         ; preds = %lor.lhs.false, %if.then6
  %9 = load i32, i32* @float_exception_flags, align 4, !dbg !4993
  %or = or i32 %9, 1, !dbg !4993
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !4993
  br label %if.end10, !dbg !4994

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !4995
  br label %return, !dbg !4995

if.end11:                                         ; preds = %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11
  %10 = load i64, i64* %aSig, align 8, !dbg !4996
  %or13 = or i64 %10, 4503599627370496, !dbg !4996
  store i64 %or13, i64* %aSig, align 8, !dbg !4996
  %11 = load i32, i32* %aExp, align 4, !dbg !4997
  %sub = sub nsw i32 1075, %11, !dbg !4998
  store i32 %sub, i32* %shiftCount, align 4, !dbg !4999
  %12 = load i64, i64* %aSig, align 8, !dbg !5000
  store i64 %12, i64* %savedASig, align 8, !dbg !5001
  %13 = load i32, i32* %shiftCount, align 4, !dbg !5002
  %14 = load i64, i64* %aSig, align 8, !dbg !5003
  %sh_prom = zext i32 %13 to i64, !dbg !5003
  %shr = lshr i64 %14, %sh_prom, !dbg !5003
  store i64 %shr, i64* %aSig, align 8, !dbg !5003
  %15 = load i64, i64* %aSig, align 8, !dbg !5004
  %conv = trunc i64 %15 to i32, !dbg !5004
  store i32 %conv, i32* %z, align 4, !dbg !5005
  %16 = load i32, i32* %aSign, align 4, !dbg !5006
  %tobool14 = icmp ne i32 %16, 0, !dbg !5006
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5008

if.then15:                                        ; preds = %if.end12
  %17 = load i32, i32* %z, align 4, !dbg !5009
  %sub16 = sub nsw i32 0, %17, !dbg !5010
  store i32 %sub16, i32* %z, align 4, !dbg !5011
  br label %if.end17, !dbg !5012

if.end17:                                         ; preds = %if.then15, %if.end12
  %18 = load i32, i32* %z, align 4, !dbg !5013
  %cmp18 = icmp slt i32 %18, 0, !dbg !5015
  %conv19 = zext i1 %cmp18 to i32, !dbg !5015
  %19 = load i32, i32* %aSign, align 4, !dbg !5016
  %xor = xor i32 %conv19, %19, !dbg !5017
  %tobool20 = icmp ne i32 %xor, 0, !dbg !5017
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !5018

if.then21:                                        ; preds = %if.end17
  br label %invalid, !dbg !5019

invalid:                                          ; preds = %if.then21, %if.end
  call void @float_raise(i32 16), !dbg !5020
  %20 = load i32, i32* %aSign, align 4, !dbg !5022
  %tobool22 = icmp ne i32 %20, 0, !dbg !5022
  %21 = zext i1 %tobool22 to i64, !dbg !5022
  %cond = select i1 %tobool22, i32 -2147483648, i32 2147483647, !dbg !5022
  store i32 %cond, i32* %retval, align 4, !dbg !5023
  br label %return, !dbg !5023

if.end23:                                         ; preds = %if.end17
  %22 = load i64, i64* %aSig, align 8, !dbg !5024
  %23 = load i32, i32* %shiftCount, align 4, !dbg !5026
  %sh_prom24 = zext i32 %23 to i64, !dbg !5027
  %shl = shl i64 %22, %sh_prom24, !dbg !5027
  %24 = load i64, i64* %savedASig, align 8, !dbg !5028
  %cmp25 = icmp ne i64 %shl, %24, !dbg !5029
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !5030

if.then27:                                        ; preds = %if.end23
  %25 = load i32, i32* @float_exception_flags, align 4, !dbg !5031
  %or28 = or i32 %25, 1, !dbg !5031
  store i32 %or28, i32* @float_exception_flags, align 4, !dbg !5031
  br label %if.end29, !dbg !5033

if.end29:                                         ; preds = %if.then27, %if.end23
  %26 = load i32, i32* %z, align 4, !dbg !5034
  store i32 %26, i32* %retval, align 4, !dbg !5035
  br label %return, !dbg !5035

return:                                           ; preds = %if.end29, %invalid, %if.end10
  %27 = load i32, i32* %retval, align 4, !dbg !5036
  ret i32 %27, !dbg !5036
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_to_int64(i64 %a) #0 !dbg !5037 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %aSigExtra = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5040, metadata !DIExpression()), !dbg !5041
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5042, metadata !DIExpression()), !dbg !5043
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5044, metadata !DIExpression()), !dbg !5045
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !5046, metadata !DIExpression()), !dbg !5047
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5048, metadata !DIExpression()), !dbg !5049
  call void @llvm.dbg.declare(metadata i64* %aSigExtra, metadata !5050, metadata !DIExpression()), !dbg !5051
  %0 = load i64, i64* %a.addr, align 8, !dbg !5052
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5053
  store i64 %call, i64* %aSig, align 8, !dbg !5054
  %1 = load i64, i64* %a.addr, align 8, !dbg !5055
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5056
  store i32 %call1, i32* %aExp, align 4, !dbg !5057
  %2 = load i64, i64* %a.addr, align 8, !dbg !5058
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !5059
  store i32 %call2, i32* %aSign, align 4, !dbg !5060
  %3 = load i32, i32* %aExp, align 4, !dbg !5061
  %tobool = icmp ne i32 %3, 0, !dbg !5061
  br i1 %tobool, label %if.then, label %if.end, !dbg !5063

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !5064
  %or = or i64 %4, 4503599627370496, !dbg !5064
  store i64 %or, i64* %aSig, align 8, !dbg !5064
  br label %if.end, !dbg !5065

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %aExp, align 4, !dbg !5066
  %sub = sub nsw i32 1075, %5, !dbg !5067
  store i32 %sub, i32* %shiftCount, align 4, !dbg !5068
  %6 = load i32, i32* %shiftCount, align 4, !dbg !5069
  %cmp = icmp sle i32 %6, 0, !dbg !5071
  br i1 %cmp, label %if.then3, label %if.else, !dbg !5072

if.then3:                                         ; preds = %if.end
  %7 = load i32, i32* %aExp, align 4, !dbg !5073
  %cmp4 = icmp slt i32 1086, %7, !dbg !5076
  br i1 %cmp4, label %if.then5, label %if.end11, !dbg !5077

if.then5:                                         ; preds = %if.then3
  call void @float_raise(i32 16), !dbg !5078
  %8 = load i32, i32* %aSign, align 4, !dbg !5080
  %tobool6 = icmp ne i32 %8, 0, !dbg !5080
  br i1 %tobool6, label %lor.lhs.false, label %if.then9, !dbg !5082

lor.lhs.false:                                    ; preds = %if.then5
  %9 = load i32, i32* %aExp, align 4, !dbg !5083
  %cmp7 = icmp eq i32 %9, 2047, !dbg !5084
  br i1 %cmp7, label %land.lhs.true, label %if.end10, !dbg !5085

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i64, i64* %aSig, align 8, !dbg !5086
  %cmp8 = icmp ne i64 %10, 4503599627370496, !dbg !5087
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !5088

if.then9:                                         ; preds = %land.lhs.true, %if.then5
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !5089
  br label %return, !dbg !5089

if.end10:                                         ; preds = %land.lhs.true, %lor.lhs.false
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !5091
  br label %return, !dbg !5091

if.end11:                                         ; preds = %if.then3
  store i64 0, i64* %aSigExtra, align 8, !dbg !5092
  %11 = load i32, i32* %shiftCount, align 4, !dbg !5093
  %sub12 = sub nsw i32 0, %11, !dbg !5094
  %12 = load i64, i64* %aSig, align 8, !dbg !5095
  %sh_prom = zext i32 %sub12 to i64, !dbg !5095
  %shl = shl i64 %12, %sh_prom, !dbg !5095
  store i64 %shl, i64* %aSig, align 8, !dbg !5095
  br label %if.end13, !dbg !5096

if.else:                                          ; preds = %if.end
  %13 = load i64, i64* %aSig, align 8, !dbg !5097
  %14 = load i32, i32* %shiftCount, align 4, !dbg !5099
  call void @shift64ExtraRightJamming(i64 %13, i64 0, i32 %14, i64* %aSig, i64* %aSigExtra), !dbg !5100
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end11
  %15 = load i32, i32* %aSign, align 4, !dbg !5101
  %16 = load i64, i64* %aSig, align 8, !dbg !5102
  %17 = load i64, i64* %aSigExtra, align 8, !dbg !5103
  %call14 = call i64 @roundAndPackInt64(i32 %15, i64 %16, i64 %17), !dbg !5104
  store i64 %call14, i64* %retval, align 8, !dbg !5105
  br label %return, !dbg !5105

return:                                           ; preds = %if.end13, %if.end10, %if.then9
  %18 = load i64, i64* %retval, align 8, !dbg !5106
  ret i64 %18, !dbg !5106
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_to_int64_round_to_zero(i64 %a) #0 !dbg !5107 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %z = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5108, metadata !DIExpression()), !dbg !5109
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5110, metadata !DIExpression()), !dbg !5111
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5112, metadata !DIExpression()), !dbg !5113
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !5114, metadata !DIExpression()), !dbg !5115
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5116, metadata !DIExpression()), !dbg !5117
  call void @llvm.dbg.declare(metadata i64* %z, metadata !5118, metadata !DIExpression()), !dbg !5119
  %0 = load i64, i64* %a.addr, align 8, !dbg !5120
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5121
  store i64 %call, i64* %aSig, align 8, !dbg !5122
  %1 = load i64, i64* %a.addr, align 8, !dbg !5123
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5124
  store i32 %call1, i32* %aExp, align 4, !dbg !5125
  %2 = load i64, i64* %a.addr, align 8, !dbg !5126
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !5127
  store i32 %call2, i32* %aSign, align 4, !dbg !5128
  %3 = load i32, i32* %aExp, align 4, !dbg !5129
  %tobool = icmp ne i32 %3, 0, !dbg !5129
  br i1 %tobool, label %if.then, label %if.end, !dbg !5131

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !5132
  %or = or i64 %4, 4503599627370496, !dbg !5132
  store i64 %or, i64* %aSig, align 8, !dbg !5132
  br label %if.end, !dbg !5133

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %aExp, align 4, !dbg !5134
  %sub = sub nsw i32 %5, 1075, !dbg !5135
  store i32 %sub, i32* %shiftCount, align 4, !dbg !5136
  %6 = load i32, i32* %shiftCount, align 4, !dbg !5137
  %cmp = icmp sle i32 0, %6, !dbg !5139
  br i1 %cmp, label %if.then3, label %if.else, !dbg !5140

if.then3:                                         ; preds = %if.end
  %7 = load i32, i32* %aExp, align 4, !dbg !5141
  %cmp4 = icmp sle i32 1086, %7, !dbg !5144
  br i1 %cmp4, label %if.then5, label %if.end14, !dbg !5145

if.then5:                                         ; preds = %if.then3
  %8 = load i64, i64* %a.addr, align 8, !dbg !5146
  %cmp6 = icmp ne i64 %8, -4332462841530417152, !dbg !5149
  br i1 %cmp6, label %if.then7, label %if.end13, !dbg !5150

if.then7:                                         ; preds = %if.then5
  call void @float_raise(i32 16), !dbg !5151
  %9 = load i32, i32* %aSign, align 4, !dbg !5153
  %tobool8 = icmp ne i32 %9, 0, !dbg !5153
  br i1 %tobool8, label %lor.lhs.false, label %if.then11, !dbg !5155

lor.lhs.false:                                    ; preds = %if.then7
  %10 = load i32, i32* %aExp, align 4, !dbg !5156
  %cmp9 = icmp eq i32 %10, 2047, !dbg !5157
  br i1 %cmp9, label %land.lhs.true, label %if.end12, !dbg !5158

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load i64, i64* %aSig, align 8, !dbg !5159
  %cmp10 = icmp ne i64 %11, 4503599627370496, !dbg !5160
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !5161

if.then11:                                        ; preds = %land.lhs.true, %if.then7
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !5162
  br label %return, !dbg !5162

if.end12:                                         ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end13, !dbg !5164

if.end13:                                         ; preds = %if.end12, %if.then5
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !5165
  br label %return, !dbg !5165

if.end14:                                         ; preds = %if.then3
  %12 = load i64, i64* %aSig, align 8, !dbg !5166
  %13 = load i32, i32* %shiftCount, align 4, !dbg !5167
  %sh_prom = zext i32 %13 to i64, !dbg !5168
  %shl = shl i64 %12, %sh_prom, !dbg !5168
  store i64 %shl, i64* %z, align 8, !dbg !5169
  br label %if.end31, !dbg !5170

if.else:                                          ; preds = %if.end
  %14 = load i32, i32* %aExp, align 4, !dbg !5171
  %cmp15 = icmp slt i32 %14, 1022, !dbg !5174
  br i1 %cmp15, label %if.then16, label %if.end22, !dbg !5175

if.then16:                                        ; preds = %if.else
  %15 = load i32, i32* %aExp, align 4, !dbg !5176
  %conv = sext i32 %15 to i64, !dbg !5176
  %16 = load i64, i64* %aSig, align 8, !dbg !5179
  %or17 = or i64 %conv, %16, !dbg !5180
  %tobool18 = icmp ne i64 %or17, 0, !dbg !5180
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !5181

if.then19:                                        ; preds = %if.then16
  %17 = load i32, i32* @float_exception_flags, align 4, !dbg !5182
  %or20 = or i32 %17, 1, !dbg !5182
  store i32 %or20, i32* @float_exception_flags, align 4, !dbg !5182
  br label %if.end21, !dbg !5183

if.end21:                                         ; preds = %if.then19, %if.then16
  store i64 0, i64* %retval, align 8, !dbg !5184
  br label %return, !dbg !5184

if.end22:                                         ; preds = %if.else
  %18 = load i64, i64* %aSig, align 8, !dbg !5185
  %19 = load i32, i32* %shiftCount, align 4, !dbg !5186
  %sub23 = sub nsw i32 0, %19, !dbg !5187
  %sh_prom24 = zext i32 %sub23 to i64, !dbg !5188
  %shr = lshr i64 %18, %sh_prom24, !dbg !5188
  store i64 %shr, i64* %z, align 8, !dbg !5189
  %20 = load i64, i64* %aSig, align 8, !dbg !5190
  %21 = load i32, i32* %shiftCount, align 4, !dbg !5192
  %and = and i32 %21, 63, !dbg !5193
  %sh_prom25 = zext i32 %and to i64, !dbg !5194
  %shl26 = shl i64 %20, %sh_prom25, !dbg !5194
  %tobool27 = icmp ne i64 %shl26, 0, !dbg !5195
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !5196

if.then28:                                        ; preds = %if.end22
  %22 = load i32, i32* @float_exception_flags, align 4, !dbg !5197
  %or29 = or i32 %22, 1, !dbg !5197
  store i32 %or29, i32* @float_exception_flags, align 4, !dbg !5197
  br label %if.end30, !dbg !5199

if.end30:                                         ; preds = %if.then28, %if.end22
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end14
  %23 = load i32, i32* %aSign, align 4, !dbg !5200
  %tobool32 = icmp ne i32 %23, 0, !dbg !5200
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !5202

if.then33:                                        ; preds = %if.end31
  %24 = load i64, i64* %z, align 8, !dbg !5203
  %sub34 = sub nsw i64 0, %24, !dbg !5204
  store i64 %sub34, i64* %z, align 8, !dbg !5205
  br label %if.end35, !dbg !5206

if.end35:                                         ; preds = %if.then33, %if.end31
  %25 = load i64, i64* %z, align 8, !dbg !5207
  store i64 %25, i64* %retval, align 8, !dbg !5208
  br label %return, !dbg !5208

return:                                           ; preds = %if.end35, %if.end21, %if.end13, %if.then11
  %26 = load i64, i64* %retval, align 8, !dbg !5209
  ret i64 %26, !dbg !5209
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float64_to_float32(i64 %a) #0 !dbg !5210 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %zSig = alloca i32, align 4
  %agg.tmp = alloca %struct.commonNaNT, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5213, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5215, metadata !DIExpression()), !dbg !5216
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5217, metadata !DIExpression()), !dbg !5218
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5219, metadata !DIExpression()), !dbg !5220
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !5221, metadata !DIExpression()), !dbg !5222
  %0 = load i64, i64* %a.addr, align 8, !dbg !5223
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5224
  store i64 %call, i64* %aSig, align 8, !dbg !5225
  %1 = load i64, i64* %a.addr, align 8, !dbg !5226
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5227
  store i32 %call1, i32* %aExp, align 4, !dbg !5228
  %2 = load i64, i64* %a.addr, align 8, !dbg !5229
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !5230
  store i32 %call2, i32* %aSign, align 4, !dbg !5231
  %3 = load i32, i32* %aExp, align 4, !dbg !5232
  %cmp = icmp eq i32 %3, 2047, !dbg !5234
  br i1 %cmp, label %if.then, label %if.end6, !dbg !5235

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !5236
  %tobool = icmp ne i64 %4, 0, !dbg !5236
  br i1 %tobool, label %if.then3, label %if.end, !dbg !5239

if.then3:                                         ; preds = %if.then
  %5 = load i64, i64* %a.addr, align 8, !dbg !5240
  call void @float64ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i64 %5), !dbg !5241
  %call4 = call i32 @commonNaNToFloat32(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !5242
  store i32 %call4, i32* %retval, align 4, !dbg !5243
  br label %return, !dbg !5243

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %aSign, align 4, !dbg !5244
  %call5 = call i32 @packFloat32(i32 %6, i32 255, i32 0), !dbg !5245
  store i32 %call5, i32* %retval, align 4, !dbg !5246
  br label %return, !dbg !5246

if.end6:                                          ; preds = %entry
  %7 = load i64, i64* %aSig, align 8, !dbg !5247
  call void @shift64RightJamming(i64 %7, i32 22, i64* %aSig), !dbg !5248
  %8 = load i64, i64* %aSig, align 8, !dbg !5249
  %conv = trunc i64 %8 to i32, !dbg !5249
  store i32 %conv, i32* %zSig, align 4, !dbg !5250
  %9 = load i32, i32* %aExp, align 4, !dbg !5251
  %tobool7 = icmp ne i32 %9, 0, !dbg !5251
  br i1 %tobool7, label %if.then9, label %lor.lhs.false, !dbg !5253

lor.lhs.false:                                    ; preds = %if.end6
  %10 = load i32, i32* %zSig, align 4, !dbg !5254
  %tobool8 = icmp ne i32 %10, 0, !dbg !5254
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !5255

if.then9:                                         ; preds = %lor.lhs.false, %if.end6
  %11 = load i32, i32* %zSig, align 4, !dbg !5256
  %or = or i32 %11, 1073741824, !dbg !5256
  store i32 %or, i32* %zSig, align 4, !dbg !5256
  %12 = load i32, i32* %aExp, align 4, !dbg !5258
  %sub = sub nsw i32 %12, 897, !dbg !5258
  store i32 %sub, i32* %aExp, align 4, !dbg !5258
  br label %if.end10, !dbg !5259

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  %13 = load i32, i32* %aSign, align 4, !dbg !5260
  %14 = load i32, i32* %aExp, align 4, !dbg !5261
  %15 = load i32, i32* %zSig, align 4, !dbg !5262
  %call11 = call i32 @roundAndPackFloat32(i32 %13, i32 %14, i32 %15), !dbg !5263
  store i32 %call11, i32* %retval, align 4, !dbg !5264
  br label %return, !dbg !5264

return:                                           ; preds = %if.end10, %if.end, %if.then3
  %16 = load i32, i32* %retval, align 4, !dbg !5265
  ret i32 %16, !dbg !5265
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @commonNaNToFloat32(%struct.commonNaNT* byval align 8 %a) #0 !dbg !5266 {
entry:
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %a, metadata !5269, metadata !DIExpression()), !dbg !5270
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 0, !dbg !5271
  %0 = load i32, i32* %sign, align 8, !dbg !5271
  %shl = shl i32 %0, 31, !dbg !5272
  %or = or i32 %shl, 2143289344, !dbg !5273
  %conv = zext i32 %or to i64, !dbg !5274
  %high = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %a, i32 0, i32 1, !dbg !5275
  %1 = load i64, i64* %high, align 8, !dbg !5275
  %shr = lshr i64 %1, 41, !dbg !5276
  %or1 = or i64 %conv, %shr, !dbg !5277
  %conv2 = trunc i64 %or1 to i32, !dbg !5274
  ret i32 %conv2, !dbg !5278
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @float64ToCommonNaN(%struct.commonNaNT* noalias sret %agg.result, i64 %a) #0 !dbg !5279 {
entry:
  %a.addr = alloca i64, align 8
  %z = alloca %struct.commonNaNT, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5282, metadata !DIExpression()), !dbg !5283
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %z, metadata !5284, metadata !DIExpression()), !dbg !5285
  %0 = load i64, i64* %a.addr, align 8, !dbg !5286
  %call = call zeroext i1 @float64_is_signaling_nan(i64 %0), !dbg !5288
  br i1 %call, label %if.then, label %if.end, !dbg !5289

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !5290
  br label %if.end, !dbg !5290

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !5291
  %shr = lshr i64 %1, 63, !dbg !5292
  %conv = trunc i64 %shr to i32, !dbg !5291
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 0, !dbg !5293
  store i32 %conv, i32* %sign, align 8, !dbg !5294
  %low = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 2, !dbg !5295
  store i64 0, i64* %low, align 8, !dbg !5296
  %2 = load i64, i64* %a.addr, align 8, !dbg !5297
  %shl = shl i64 %2, 12, !dbg !5298
  %high = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 1, !dbg !5299
  store i64 %shl, i64* %high, align 8, !dbg !5300
  %3 = bitcast %struct.commonNaNT* %agg.result to i8*, !dbg !5301
  %4 = bitcast %struct.commonNaNT* %z to i8*, !dbg !5301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 24, i32 8, i1 false), !dbg !5301
  ret void, !dbg !5302
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @float64_to_floatx80(i64 %a) #0 !dbg !5303 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5306, metadata !DIExpression()), !dbg !5307
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5310, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5312, metadata !DIExpression()), !dbg !5313
  %0 = load i64, i64* %a.addr, align 8, !dbg !5314
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5315
  store i64 %call, i64* %aSig, align 8, !dbg !5316
  %1 = load i64, i64* %a.addr, align 8, !dbg !5317
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5318
  store i32 %call1, i32* %aExp, align 4, !dbg !5319
  %2 = load i64, i64* %a.addr, align 8, !dbg !5320
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !5321
  store i32 %call2, i32* %aSign, align 4, !dbg !5322
  %3 = load i32, i32* %aExp, align 4, !dbg !5323
  %cmp = icmp eq i32 %3, 2047, !dbg !5325
  br i1 %cmp, label %if.then, label %if.end6, !dbg !5326

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !5327
  %tobool = icmp ne i64 %4, 0, !dbg !5327
  br i1 %tobool, label %if.then3, label %if.end, !dbg !5330

if.then3:                                         ; preds = %if.then
  %5 = load i64, i64* %a.addr, align 8, !dbg !5331
  call void @float64ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i64 %5), !dbg !5332
  %call4 = call { i16, i64 } @commonNaNToFloatx80(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !5333
  %6 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !5333
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !5333
  %8 = extractvalue { i16, i64 } %call4, 0, !dbg !5333
  store i16 %8, i16* %7, align 8, !dbg !5333
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !5333
  %10 = extractvalue { i16, i64 } %call4, 1, !dbg !5333
  store i64 %10, i64* %9, align 8, !dbg !5333
  br label %return, !dbg !5334

if.end:                                           ; preds = %if.then
  %11 = load i32, i32* %aSign, align 4, !dbg !5335
  %call5 = call { i16, i64 } @packFloatx80(i32 %11, i32 32767, i64 -9223372036854775808), !dbg !5336
  %12 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !5336
  %13 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %12, i32 0, i32 0, !dbg !5336
  %14 = extractvalue { i16, i64 } %call5, 0, !dbg !5336
  store i16 %14, i16* %13, align 8, !dbg !5336
  %15 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %12, i32 0, i32 1, !dbg !5336
  %16 = extractvalue { i16, i64 } %call5, 1, !dbg !5336
  store i64 %16, i64* %15, align 8, !dbg !5336
  br label %return, !dbg !5337

if.end6:                                          ; preds = %entry
  %17 = load i32, i32* %aExp, align 4, !dbg !5338
  %cmp7 = icmp eq i32 %17, 0, !dbg !5340
  br i1 %cmp7, label %if.then8, label %if.end13, !dbg !5341

if.then8:                                         ; preds = %if.end6
  %18 = load i64, i64* %aSig, align 8, !dbg !5342
  %cmp9 = icmp eq i64 %18, 0, !dbg !5345
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !5346

if.then10:                                        ; preds = %if.then8
  %19 = load i32, i32* %aSign, align 4, !dbg !5347
  %call11 = call { i16, i64 } @packFloatx80(i32 %19, i32 0, i64 0), !dbg !5348
  %20 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !5348
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !5348
  %22 = extractvalue { i16, i64 } %call11, 0, !dbg !5348
  store i16 %22, i16* %21, align 8, !dbg !5348
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !5348
  %24 = extractvalue { i16, i64 } %call11, 1, !dbg !5348
  store i64 %24, i64* %23, align 8, !dbg !5348
  br label %return, !dbg !5349

if.end12:                                         ; preds = %if.then8
  %25 = load i64, i64* %aSig, align 8, !dbg !5350
  call void @normalizeFloat64Subnormal(i64 %25, i32* %aExp, i64* %aSig), !dbg !5351
  br label %if.end13, !dbg !5352

if.end13:                                         ; preds = %if.end12, %if.end6
  %26 = load i32, i32* %aSign, align 4, !dbg !5353
  %27 = load i32, i32* %aExp, align 4, !dbg !5354
  %add = add nsw i32 %27, 15360, !dbg !5355
  %28 = load i64, i64* %aSig, align 8, !dbg !5356
  %or = or i64 %28, 4503599627370496, !dbg !5357
  %shl = shl i64 %or, 11, !dbg !5358
  %call14 = call { i16, i64 } @packFloatx80(i32 %26, i32 %add, i64 %shl), !dbg !5359
  %29 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !5359
  %30 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %29, i32 0, i32 0, !dbg !5359
  %31 = extractvalue { i16, i64 } %call14, 0, !dbg !5359
  store i16 %31, i16* %30, align 8, !dbg !5359
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %29, i32 0, i32 1, !dbg !5359
  %33 = extractvalue { i16, i64 } %call14, 1, !dbg !5359
  store i64 %33, i64* %32, align 8, !dbg !5359
  br label %return, !dbg !5360

return:                                           ; preds = %if.end13, %if.then10, %if.end, %if.then3
  %34 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !5361
  %35 = load { i16, i64 }, { i16, i64 }* %34, align 8, !dbg !5361
  ret { i16, i64 } %35, !dbg !5361
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @normalizeFloat64Subnormal(i64 %aSig, i32* %zExpPtr, i64* %zSigPtr) #0 !dbg !5362 {
entry:
  %aSig.addr = alloca i64, align 8
  %zExpPtr.addr = alloca i32*, align 8
  %zSigPtr.addr = alloca i64*, align 8
  %shiftCount = alloca i32, align 4
  store i64 %aSig, i64* %aSig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %aSig.addr, metadata !5365, metadata !DIExpression()), !dbg !5366
  store i32* %zExpPtr, i32** %zExpPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %zExpPtr.addr, metadata !5367, metadata !DIExpression()), !dbg !5368
  store i64* %zSigPtr, i64** %zSigPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %zSigPtr.addr, metadata !5369, metadata !DIExpression()), !dbg !5370
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !5371, metadata !DIExpression()), !dbg !5372
  %0 = load i64, i64* %aSig.addr, align 8, !dbg !5373
  %call = call i32 @countLeadingZeros64(i64 %0), !dbg !5374
  %sub = sub nsw i32 %call, 11, !dbg !5375
  store i32 %sub, i32* %shiftCount, align 4, !dbg !5376
  %1 = load i64, i64* %aSig.addr, align 8, !dbg !5377
  %2 = load i32, i32* %shiftCount, align 4, !dbg !5378
  %sh_prom = zext i32 %2 to i64, !dbg !5379
  %shl = shl i64 %1, %sh_prom, !dbg !5379
  %3 = load i64*, i64** %zSigPtr.addr, align 8, !dbg !5380
  store i64 %shl, i64* %3, align 8, !dbg !5381
  %4 = load i32, i32* %shiftCount, align 4, !dbg !5382
  %sub1 = sub nsw i32 1, %4, !dbg !5383
  %5 = load i32*, i32** %zExpPtr.addr, align 8, !dbg !5384
  store i32 %sub1, i32* %5, align 4, !dbg !5385
  ret void, !dbg !5386
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float64_to_float128(i64 %a) #0 !dbg !5387 {
entry:
  %retval = alloca %struct.float128, align 8
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5390, metadata !DIExpression()), !dbg !5391
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5392, metadata !DIExpression()), !dbg !5393
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5394, metadata !DIExpression()), !dbg !5395
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5396, metadata !DIExpression()), !dbg !5397
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !5398, metadata !DIExpression()), !dbg !5399
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !5400, metadata !DIExpression()), !dbg !5401
  %0 = load i64, i64* %a.addr, align 8, !dbg !5402
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5403
  store i64 %call, i64* %aSig, align 8, !dbg !5404
  %1 = load i64, i64* %a.addr, align 8, !dbg !5405
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5406
  store i32 %call1, i32* %aExp, align 4, !dbg !5407
  %2 = load i64, i64* %a.addr, align 8, !dbg !5408
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !5409
  store i32 %call2, i32* %aSign, align 4, !dbg !5410
  %3 = load i32, i32* %aExp, align 4, !dbg !5411
  %cmp = icmp eq i32 %3, 2047, !dbg !5413
  br i1 %cmp, label %if.then, label %if.end6, !dbg !5414

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !5415
  %tobool = icmp ne i64 %4, 0, !dbg !5415
  br i1 %tobool, label %if.then3, label %if.end, !dbg !5418

if.then3:                                         ; preds = %if.then
  %5 = load i64, i64* %a.addr, align 8, !dbg !5419
  call void @float64ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i64 %5), !dbg !5420
  %call4 = call { i64, i64 } @commonNaNToFloat128(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !5421
  %6 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !5421
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !5421
  %8 = extractvalue { i64, i64 } %call4, 0, !dbg !5421
  store i64 %8, i64* %7, align 8, !dbg !5421
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !5421
  %10 = extractvalue { i64, i64 } %call4, 1, !dbg !5421
  store i64 %10, i64* %9, align 8, !dbg !5421
  br label %return, !dbg !5422

if.end:                                           ; preds = %if.then
  %11 = load i32, i32* %aSign, align 4, !dbg !5423
  %call5 = call { i64, i64 } @packFloat128(i32 %11, i32 32767, i64 0, i64 0), !dbg !5424
  %12 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !5424
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !5424
  %14 = extractvalue { i64, i64 } %call5, 0, !dbg !5424
  store i64 %14, i64* %13, align 8, !dbg !5424
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !5424
  %16 = extractvalue { i64, i64 } %call5, 1, !dbg !5424
  store i64 %16, i64* %15, align 8, !dbg !5424
  br label %return, !dbg !5425

if.end6:                                          ; preds = %entry
  %17 = load i32, i32* %aExp, align 4, !dbg !5426
  %cmp7 = icmp eq i32 %17, 0, !dbg !5428
  br i1 %cmp7, label %if.then8, label %if.end13, !dbg !5429

if.then8:                                         ; preds = %if.end6
  %18 = load i64, i64* %aSig, align 8, !dbg !5430
  %cmp9 = icmp eq i64 %18, 0, !dbg !5433
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !5434

if.then10:                                        ; preds = %if.then8
  %19 = load i32, i32* %aSign, align 4, !dbg !5435
  %call11 = call { i64, i64 } @packFloat128(i32 %19, i32 0, i64 0, i64 0), !dbg !5436
  %20 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !5436
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0, !dbg !5436
  %22 = extractvalue { i64, i64 } %call11, 0, !dbg !5436
  store i64 %22, i64* %21, align 8, !dbg !5436
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !5436
  %24 = extractvalue { i64, i64 } %call11, 1, !dbg !5436
  store i64 %24, i64* %23, align 8, !dbg !5436
  br label %return, !dbg !5437

if.end12:                                         ; preds = %if.then8
  %25 = load i64, i64* %aSig, align 8, !dbg !5438
  call void @normalizeFloat64Subnormal(i64 %25, i32* %aExp, i64* %aSig), !dbg !5439
  %26 = load i32, i32* %aExp, align 4, !dbg !5440
  %dec = add nsw i32 %26, -1, !dbg !5440
  store i32 %dec, i32* %aExp, align 4, !dbg !5440
  br label %if.end13, !dbg !5441

if.end13:                                         ; preds = %if.end12, %if.end6
  %27 = load i64, i64* %aSig, align 8, !dbg !5442
  call void @shift128Right(i64 %27, i64 0, i32 4, i64* %zSig0, i64* %zSig1), !dbg !5443
  %28 = load i32, i32* %aSign, align 4, !dbg !5444
  %29 = load i32, i32* %aExp, align 4, !dbg !5445
  %add = add nsw i32 %29, 15360, !dbg !5446
  %30 = load i64, i64* %zSig0, align 8, !dbg !5447
  %31 = load i64, i64* %zSig1, align 8, !dbg !5448
  %call14 = call { i64, i64 } @packFloat128(i32 %28, i32 %add, i64 %30, i64 %31), !dbg !5449
  %32 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !5449
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0, !dbg !5449
  %34 = extractvalue { i64, i64 } %call14, 0, !dbg !5449
  store i64 %34, i64* %33, align 8, !dbg !5449
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1, !dbg !5449
  %36 = extractvalue { i64, i64 } %call14, 1, !dbg !5449
  store i64 %36, i64* %35, align 8, !dbg !5449
  br label %return, !dbg !5450

return:                                           ; preds = %if.end13, %if.then10, %if.end, %if.then3
  %37 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !5451
  %38 = load { i64, i64 }, { i64, i64 }* %37, align 8, !dbg !5451
  ret { i64, i64 } %38, !dbg !5451
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_round_to_int(i64 %a) #0 !dbg !5452 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %lastBitMask = alloca i64, align 8
  %roundBitsMask = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %z = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5455, metadata !DIExpression()), !dbg !5456
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5457, metadata !DIExpression()), !dbg !5458
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5459, metadata !DIExpression()), !dbg !5460
  call void @llvm.dbg.declare(metadata i64* %lastBitMask, metadata !5461, metadata !DIExpression()), !dbg !5462
  call void @llvm.dbg.declare(metadata i64* %roundBitsMask, metadata !5463, metadata !DIExpression()), !dbg !5464
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !5465, metadata !DIExpression()), !dbg !5466
  call void @llvm.dbg.declare(metadata i64* %z, metadata !5467, metadata !DIExpression()), !dbg !5468
  %0 = load i64, i64* %a.addr, align 8, !dbg !5469
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !5470
  store i32 %call, i32* %aExp, align 4, !dbg !5471
  %1 = load i32, i32* %aExp, align 4, !dbg !5472
  %cmp = icmp sle i32 1075, %1, !dbg !5474
  br i1 %cmp, label %if.then, label %if.end5, !dbg !5475

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %aExp, align 4, !dbg !5476
  %cmp1 = icmp eq i32 %2, 2047, !dbg !5479
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !5480

land.lhs.true:                                    ; preds = %if.then
  %3 = load i64, i64* %a.addr, align 8, !dbg !5481
  %call2 = call i64 @extractFloat64Frac(i64 %3), !dbg !5482
  %tobool = icmp ne i64 %call2, 0, !dbg !5482
  br i1 %tobool, label %if.then3, label %if.end, !dbg !5483

if.then3:                                         ; preds = %land.lhs.true
  %4 = load i64, i64* %a.addr, align 8, !dbg !5484
  %5 = load i64, i64* %a.addr, align 8, !dbg !5486
  %call4 = call i64 @propagateFloat64NaN(i64 %4, i64 %5), !dbg !5487
  store i64 %call4, i64* %retval, align 8, !dbg !5488
  br label %return, !dbg !5488

if.end:                                           ; preds = %land.lhs.true, %if.then
  %6 = load i64, i64* %a.addr, align 8, !dbg !5489
  store i64 %6, i64* %retval, align 8, !dbg !5490
  br label %return, !dbg !5490

if.end5:                                          ; preds = %entry
  %7 = load i32, i32* %aExp, align 4, !dbg !5491
  %cmp6 = icmp slt i32 %7, 1023, !dbg !5493
  br i1 %cmp6, label %if.then7, label %if.end25, !dbg !5494

if.then7:                                         ; preds = %if.end5
  %8 = load i64, i64* %a.addr, align 8, !dbg !5495
  %shl = shl i64 %8, 1, !dbg !5498
  %cmp8 = icmp eq i64 %shl, 0, !dbg !5499
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !5500

if.then9:                                         ; preds = %if.then7
  %9 = load i64, i64* %a.addr, align 8, !dbg !5501
  store i64 %9, i64* %retval, align 8, !dbg !5502
  br label %return, !dbg !5502

if.end10:                                         ; preds = %if.then7
  %10 = load i32, i32* @float_exception_flags, align 4, !dbg !5503
  %or = or i32 %10, 1, !dbg !5503
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !5503
  %11 = load i64, i64* %a.addr, align 8, !dbg !5504
  %call11 = call i32 @extractFloat64Sign(i64 %11), !dbg !5505
  store i32 %call11, i32* %aSign, align 4, !dbg !5506
  %12 = load i32, i32* @float_rounding_mode, align 4, !dbg !5507
  switch i32 %12, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb19
    i32 2, label %sw.bb21
  ], !dbg !5508

sw.bb:                                            ; preds = %if.end10
  %13 = load i32, i32* %aExp, align 4, !dbg !5509
  %cmp12 = icmp eq i32 %13, 1022, !dbg !5512
  br i1 %cmp12, label %land.lhs.true13, label %if.end18, !dbg !5513

land.lhs.true13:                                  ; preds = %sw.bb
  %14 = load i64, i64* %a.addr, align 8, !dbg !5514
  %call14 = call i64 @extractFloat64Frac(i64 %14), !dbg !5515
  %tobool15 = icmp ne i64 %call14, 0, !dbg !5515
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !5516

if.then16:                                        ; preds = %land.lhs.true13
  %15 = load i32, i32* %aSign, align 4, !dbg !5517
  %call17 = call i64 @packFloat64(i32 %15, i32 1023, i64 0), !dbg !5519
  store i64 %call17, i64* %retval, align 8, !dbg !5520
  br label %return, !dbg !5520

if.end18:                                         ; preds = %land.lhs.true13, %sw.bb
  br label %sw.epilog, !dbg !5521

sw.bb19:                                          ; preds = %if.end10
  %16 = load i32, i32* %aSign, align 4, !dbg !5522
  %tobool20 = icmp ne i32 %16, 0, !dbg !5522
  %17 = zext i1 %tobool20 to i64, !dbg !5522
  %cond = select i1 %tobool20, i64 -4616189618054758400, i64 0, !dbg !5522
  store i64 %cond, i64* %retval, align 8, !dbg !5523
  br label %return, !dbg !5523

sw.bb21:                                          ; preds = %if.end10
  %18 = load i32, i32* %aSign, align 4, !dbg !5524
  %tobool22 = icmp ne i32 %18, 0, !dbg !5524
  %19 = zext i1 %tobool22 to i64, !dbg !5524
  %cond23 = select i1 %tobool22, i64 -9223372036854775808, i64 4607182418800017408, !dbg !5524
  store i64 %cond23, i64* %retval, align 8, !dbg !5525
  br label %return, !dbg !5525

sw.epilog:                                        ; preds = %if.end10, %if.end18
  %20 = load i32, i32* %aSign, align 4, !dbg !5526
  %call24 = call i64 @packFloat64(i32 %20, i32 0, i64 0), !dbg !5527
  store i64 %call24, i64* %retval, align 8, !dbg !5528
  br label %return, !dbg !5528

if.end25:                                         ; preds = %if.end5
  store i64 1, i64* %lastBitMask, align 8, !dbg !5529
  %21 = load i32, i32* %aExp, align 4, !dbg !5530
  %sub = sub nsw i32 1075, %21, !dbg !5531
  %22 = load i64, i64* %lastBitMask, align 8, !dbg !5532
  %sh_prom = zext i32 %sub to i64, !dbg !5532
  %shl26 = shl i64 %22, %sh_prom, !dbg !5532
  store i64 %shl26, i64* %lastBitMask, align 8, !dbg !5532
  %23 = load i64, i64* %lastBitMask, align 8, !dbg !5533
  %sub27 = sub i64 %23, 1, !dbg !5534
  store i64 %sub27, i64* %roundBitsMask, align 8, !dbg !5535
  %24 = load i64, i64* %a.addr, align 8, !dbg !5536
  store i64 %24, i64* %z, align 8, !dbg !5537
  %25 = load i32, i32* @float_rounding_mode, align 4, !dbg !5538
  store i32 %25, i32* %roundingMode, align 4, !dbg !5539
  %26 = load i32, i32* %roundingMode, align 4, !dbg !5540
  %cmp28 = icmp eq i32 %26, 0, !dbg !5542
  br i1 %cmp28, label %if.then29, label %if.else, !dbg !5543

if.then29:                                        ; preds = %if.end25
  %27 = load i64, i64* %lastBitMask, align 8, !dbg !5544
  %shr = lshr i64 %27, 1, !dbg !5546
  %28 = load i64, i64* %z, align 8, !dbg !5547
  %add = add i64 %28, %shr, !dbg !5547
  store i64 %add, i64* %z, align 8, !dbg !5547
  %29 = load i64, i64* %z, align 8, !dbg !5548
  %30 = load i64, i64* %roundBitsMask, align 8, !dbg !5550
  %and = and i64 %29, %30, !dbg !5551
  %cmp30 = icmp eq i64 %and, 0, !dbg !5552
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !5553

if.then31:                                        ; preds = %if.then29
  %31 = load i64, i64* %lastBitMask, align 8, !dbg !5554
  %neg = xor i64 %31, -1, !dbg !5555
  %32 = load i64, i64* %z, align 8, !dbg !5556
  %and32 = and i64 %32, %neg, !dbg !5556
  store i64 %and32, i64* %z, align 8, !dbg !5556
  br label %if.end33, !dbg !5557

if.end33:                                         ; preds = %if.then31, %if.then29
  br label %if.end43, !dbg !5558

if.else:                                          ; preds = %if.end25
  %33 = load i32, i32* %roundingMode, align 4, !dbg !5559
  %cmp34 = icmp ne i32 %33, 1, !dbg !5561
  br i1 %cmp34, label %if.then35, label %if.end42, !dbg !5562

if.then35:                                        ; preds = %if.else
  %34 = load i64, i64* %z, align 8, !dbg !5563
  %call36 = call i32 @extractFloat64Sign(i64 %34), !dbg !5566
  %35 = load i32, i32* %roundingMode, align 4, !dbg !5567
  %cmp37 = icmp eq i32 %35, 2, !dbg !5568
  %conv = zext i1 %cmp37 to i32, !dbg !5568
  %xor = xor i32 %call36, %conv, !dbg !5569
  %tobool38 = icmp ne i32 %xor, 0, !dbg !5569
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !5570

if.then39:                                        ; preds = %if.then35
  %36 = load i64, i64* %roundBitsMask, align 8, !dbg !5571
  %37 = load i64, i64* %z, align 8, !dbg !5573
  %add40 = add i64 %37, %36, !dbg !5573
  store i64 %add40, i64* %z, align 8, !dbg !5573
  br label %if.end41, !dbg !5574

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !5575

if.end42:                                         ; preds = %if.end41, %if.else
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end33
  %38 = load i64, i64* %roundBitsMask, align 8, !dbg !5576
  %neg44 = xor i64 %38, -1, !dbg !5577
  %39 = load i64, i64* %z, align 8, !dbg !5578
  %and45 = and i64 %39, %neg44, !dbg !5578
  store i64 %and45, i64* %z, align 8, !dbg !5578
  %40 = load i64, i64* %z, align 8, !dbg !5579
  %41 = load i64, i64* %a.addr, align 8, !dbg !5581
  %cmp46 = icmp ne i64 %40, %41, !dbg !5582
  br i1 %cmp46, label %if.then48, label %if.end50, !dbg !5583

if.then48:                                        ; preds = %if.end43
  %42 = load i32, i32* @float_exception_flags, align 4, !dbg !5584
  %or49 = or i32 %42, 1, !dbg !5584
  store i32 %or49, i32* @float_exception_flags, align 4, !dbg !5584
  br label %if.end50, !dbg !5585

if.end50:                                         ; preds = %if.then48, %if.end43
  %43 = load i64, i64* %z, align 8, !dbg !5586
  store i64 %43, i64* %retval, align 8, !dbg !5587
  br label %return, !dbg !5587

return:                                           ; preds = %if.end50, %sw.epilog, %sw.bb21, %sw.bb19, %if.then16, %if.then9, %if.end, %if.then3
  %44 = load i64, i64* %retval, align 8, !dbg !5588
  ret i64 %44, !dbg !5588
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @propagateFloat64NaN(i64 %a, i64 %b) #0 !dbg !5589 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aIsNaN = alloca i32, align 4
  %aIsSignalingNaN = alloca i32, align 4
  %bIsNaN = alloca i32, align 4
  %bIsSignalingNaN = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5592, metadata !DIExpression()), !dbg !5593
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !5594, metadata !DIExpression()), !dbg !5595
  call void @llvm.dbg.declare(metadata i32* %aIsNaN, metadata !5596, metadata !DIExpression()), !dbg !5597
  call void @llvm.dbg.declare(metadata i32* %aIsSignalingNaN, metadata !5598, metadata !DIExpression()), !dbg !5599
  call void @llvm.dbg.declare(metadata i32* %bIsNaN, metadata !5600, metadata !DIExpression()), !dbg !5601
  call void @llvm.dbg.declare(metadata i32* %bIsSignalingNaN, metadata !5602, metadata !DIExpression()), !dbg !5603
  %0 = load i64, i64* %a.addr, align 8, !dbg !5604
  %call = call zeroext i1 @float64_is_nan(i64 %0), !dbg !5605
  %conv = zext i1 %call to i32, !dbg !5605
  store i32 %conv, i32* %aIsNaN, align 4, !dbg !5606
  %1 = load i64, i64* %a.addr, align 8, !dbg !5607
  %call1 = call zeroext i1 @float64_is_signaling_nan(i64 %1), !dbg !5608
  %conv2 = zext i1 %call1 to i32, !dbg !5608
  store i32 %conv2, i32* %aIsSignalingNaN, align 4, !dbg !5609
  %2 = load i64, i64* %b.addr, align 8, !dbg !5610
  %call3 = call zeroext i1 @float64_is_nan(i64 %2), !dbg !5611
  %conv4 = zext i1 %call3 to i32, !dbg !5611
  store i32 %conv4, i32* %bIsNaN, align 4, !dbg !5612
  %3 = load i64, i64* %b.addr, align 8, !dbg !5613
  %call5 = call zeroext i1 @float64_is_signaling_nan(i64 %3), !dbg !5614
  %conv6 = zext i1 %call5 to i32, !dbg !5614
  store i32 %conv6, i32* %bIsSignalingNaN, align 4, !dbg !5615
  %4 = load i64, i64* %a.addr, align 8, !dbg !5616
  %or = or i64 %4, 2251799813685248, !dbg !5616
  store i64 %or, i64* %a.addr, align 8, !dbg !5616
  %5 = load i64, i64* %b.addr, align 8, !dbg !5617
  %or7 = or i64 %5, 2251799813685248, !dbg !5617
  store i64 %or7, i64* %b.addr, align 8, !dbg !5617
  %6 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !5618
  %7 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !5620
  %or8 = or i32 %6, %7, !dbg !5621
  %tobool = icmp ne i32 %or8, 0, !dbg !5621
  br i1 %tobool, label %if.then, label %if.end, !dbg !5622

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !5623
  br label %if.end, !dbg !5623

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !5624
  %tobool9 = icmp ne i32 %8, 0, !dbg !5624
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5624

cond.true:                                        ; preds = %if.end
  %9 = load i64, i64* %b.addr, align 8, !dbg !5625
  br label %cond.end18, !dbg !5624

cond.false:                                       ; preds = %if.end
  %10 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !5626
  %tobool10 = icmp ne i32 %10, 0, !dbg !5626
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !5626

cond.true11:                                      ; preds = %cond.false
  %11 = load i64, i64* %a.addr, align 8, !dbg !5627
  br label %cond.end16, !dbg !5626

cond.false12:                                     ; preds = %cond.false
  %12 = load i32, i32* %bIsNaN, align 4, !dbg !5628
  %tobool13 = icmp ne i32 %12, 0, !dbg !5628
  br i1 %tobool13, label %cond.true14, label %cond.false15, !dbg !5628

cond.true14:                                      ; preds = %cond.false12
  %13 = load i64, i64* %b.addr, align 8, !dbg !5629
  br label %cond.end, !dbg !5628

cond.false15:                                     ; preds = %cond.false12
  %14 = load i64, i64* %a.addr, align 8, !dbg !5630
  br label %cond.end, !dbg !5628

cond.end:                                         ; preds = %cond.false15, %cond.true14
  %cond = phi i64 [ %13, %cond.true14 ], [ %14, %cond.false15 ], !dbg !5628
  br label %cond.end16, !dbg !5626

cond.end16:                                       ; preds = %cond.end, %cond.true11
  %cond17 = phi i64 [ %11, %cond.true11 ], [ %cond, %cond.end ], !dbg !5626
  br label %cond.end18, !dbg !5624

cond.end18:                                       ; preds = %cond.end16, %cond.true
  %cond19 = phi i64 [ %9, %cond.true ], [ %cond17, %cond.end16 ], !dbg !5624
  ret i64 %cond19, !dbg !5631
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_add(i64 %a, i64 %b) #0 !dbg !5632 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5633, metadata !DIExpression()), !dbg !5634
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !5635, metadata !DIExpression()), !dbg !5636
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !5637, metadata !DIExpression()), !dbg !5638
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !5639, metadata !DIExpression()), !dbg !5640
  %0 = load i64, i64* %a.addr, align 8, !dbg !5641
  %call = call i32 @extractFloat64Sign(i64 %0), !dbg !5642
  store i32 %call, i32* %aSign, align 4, !dbg !5643
  %1 = load i64, i64* %b.addr, align 8, !dbg !5644
  %call1 = call i32 @extractFloat64Sign(i64 %1), !dbg !5645
  store i32 %call1, i32* %bSign, align 4, !dbg !5646
  %2 = load i32, i32* %aSign, align 4, !dbg !5647
  %3 = load i32, i32* %bSign, align 4, !dbg !5649
  %cmp = icmp eq i32 %2, %3, !dbg !5650
  br i1 %cmp, label %if.then, label %if.else, !dbg !5651

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %a.addr, align 8, !dbg !5652
  %5 = load i64, i64* %b.addr, align 8, !dbg !5654
  %6 = load i32, i32* %aSign, align 4, !dbg !5655
  %call2 = call i64 @addFloat64Sigs(i64 %4, i64 %5, i32 %6), !dbg !5656
  store i64 %call2, i64* %retval, align 8, !dbg !5657
  br label %return, !dbg !5657

if.else:                                          ; preds = %entry
  %7 = load i64, i64* %a.addr, align 8, !dbg !5658
  %8 = load i64, i64* %b.addr, align 8, !dbg !5660
  %9 = load i32, i32* %aSign, align 4, !dbg !5661
  %call3 = call i64 @subFloat64Sigs(i64 %7, i64 %8, i32 %9), !dbg !5662
  store i64 %call3, i64* %retval, align 8, !dbg !5663
  br label %return, !dbg !5663

return:                                           ; preds = %if.else, %if.then
  %10 = load i64, i64* %retval, align 8, !dbg !5664
  ret i64 %10, !dbg !5664
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @addFloat64Sigs(i64 %a, i64 %b, i32 %zSign) #0 !dbg !5665 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig = alloca i64, align 8
  %expDiff = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5668, metadata !DIExpression()), !dbg !5669
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !5670, metadata !DIExpression()), !dbg !5671
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !5672, metadata !DIExpression()), !dbg !5673
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5674, metadata !DIExpression()), !dbg !5675
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !5676, metadata !DIExpression()), !dbg !5677
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !5678, metadata !DIExpression()), !dbg !5679
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5680, metadata !DIExpression()), !dbg !5681
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !5682, metadata !DIExpression()), !dbg !5683
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !5684, metadata !DIExpression()), !dbg !5685
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !5686, metadata !DIExpression()), !dbg !5687
  %0 = load i64, i64* %a.addr, align 8, !dbg !5688
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5689
  store i64 %call, i64* %aSig, align 8, !dbg !5690
  %1 = load i64, i64* %a.addr, align 8, !dbg !5691
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5692
  store i32 %call1, i32* %aExp, align 4, !dbg !5693
  %2 = load i64, i64* %b.addr, align 8, !dbg !5694
  %call2 = call i64 @extractFloat64Frac(i64 %2), !dbg !5695
  store i64 %call2, i64* %bSig, align 8, !dbg !5696
  %3 = load i64, i64* %b.addr, align 8, !dbg !5697
  %call3 = call i32 @extractFloat64Exp(i64 %3), !dbg !5698
  store i32 %call3, i32* %bExp, align 4, !dbg !5699
  %4 = load i32, i32* %aExp, align 4, !dbg !5700
  %5 = load i32, i32* %bExp, align 4, !dbg !5701
  %sub = sub nsw i32 %4, %5, !dbg !5702
  store i32 %sub, i32* %expDiff, align 4, !dbg !5703
  %6 = load i64, i64* %aSig, align 8, !dbg !5704
  %shl = shl i64 %6, 9, !dbg !5704
  store i64 %shl, i64* %aSig, align 8, !dbg !5704
  %7 = load i64, i64* %bSig, align 8, !dbg !5705
  %shl4 = shl i64 %7, 9, !dbg !5705
  store i64 %shl4, i64* %bSig, align 8, !dbg !5705
  %8 = load i32, i32* %expDiff, align 4, !dbg !5706
  %cmp = icmp slt i32 0, %8, !dbg !5708
  br i1 %cmp, label %if.then, label %if.else13, !dbg !5709

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %aExp, align 4, !dbg !5710
  %cmp5 = icmp eq i32 %9, 2047, !dbg !5713
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !5714

if.then6:                                         ; preds = %if.then
  %10 = load i64, i64* %aSig, align 8, !dbg !5715
  %tobool = icmp ne i64 %10, 0, !dbg !5715
  br i1 %tobool, label %if.then7, label %if.end, !dbg !5718

if.then7:                                         ; preds = %if.then6
  %11 = load i64, i64* %a.addr, align 8, !dbg !5719
  %12 = load i64, i64* %b.addr, align 8, !dbg !5720
  %call8 = call i64 @propagateFloat64NaN(i64 %11, i64 %12), !dbg !5721
  store i64 %call8, i64* %retval, align 8, !dbg !5722
  br label %return, !dbg !5722

if.end:                                           ; preds = %if.then6
  %13 = load i64, i64* %a.addr, align 8, !dbg !5723
  store i64 %13, i64* %retval, align 8, !dbg !5724
  br label %return, !dbg !5724

if.end9:                                          ; preds = %if.then
  %14 = load i32, i32* %bExp, align 4, !dbg !5725
  %cmp10 = icmp eq i32 %14, 0, !dbg !5727
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !5728

if.then11:                                        ; preds = %if.end9
  %15 = load i32, i32* %expDiff, align 4, !dbg !5729
  %dec = add nsw i32 %15, -1, !dbg !5729
  store i32 %dec, i32* %expDiff, align 4, !dbg !5729
  br label %if.end12, !dbg !5731

if.else:                                          ; preds = %if.end9
  %16 = load i64, i64* %bSig, align 8, !dbg !5732
  %or = or i64 %16, 2305843009213693952, !dbg !5732
  store i64 %or, i64* %bSig, align 8, !dbg !5732
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then11
  %17 = load i64, i64* %bSig, align 8, !dbg !5734
  %18 = load i32, i32* %expDiff, align 4, !dbg !5735
  call void @shift64RightJamming(i64 %17, i32 %18, i64* %bSig), !dbg !5736
  %19 = load i32, i32* %aExp, align 4, !dbg !5737
  store i32 %19, i32* %zExp, align 4, !dbg !5738
  br label %if.end46, !dbg !5739

if.else13:                                        ; preds = %entry
  %20 = load i32, i32* %expDiff, align 4, !dbg !5740
  %cmp14 = icmp slt i32 %20, 0, !dbg !5742
  br i1 %cmp14, label %if.then15, label %if.else30, !dbg !5743

if.then15:                                        ; preds = %if.else13
  %21 = load i32, i32* %bExp, align 4, !dbg !5744
  %cmp16 = icmp eq i32 %21, 2047, !dbg !5747
  br i1 %cmp16, label %if.then17, label %if.end23, !dbg !5748

if.then17:                                        ; preds = %if.then15
  %22 = load i64, i64* %bSig, align 8, !dbg !5749
  %tobool18 = icmp ne i64 %22, 0, !dbg !5749
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !5752

if.then19:                                        ; preds = %if.then17
  %23 = load i64, i64* %a.addr, align 8, !dbg !5753
  %24 = load i64, i64* %b.addr, align 8, !dbg !5754
  %call20 = call i64 @propagateFloat64NaN(i64 %23, i64 %24), !dbg !5755
  store i64 %call20, i64* %retval, align 8, !dbg !5756
  br label %return, !dbg !5756

if.end21:                                         ; preds = %if.then17
  %25 = load i32, i32* %zSign.addr, align 4, !dbg !5757
  %call22 = call i64 @packFloat64(i32 %25, i32 2047, i64 0), !dbg !5758
  store i64 %call22, i64* %retval, align 8, !dbg !5759
  br label %return, !dbg !5759

if.end23:                                         ; preds = %if.then15
  %26 = load i32, i32* %aExp, align 4, !dbg !5760
  %cmp24 = icmp eq i32 %26, 0, !dbg !5762
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !5763

if.then25:                                        ; preds = %if.end23
  %27 = load i32, i32* %expDiff, align 4, !dbg !5764
  %inc = add nsw i32 %27, 1, !dbg !5764
  store i32 %inc, i32* %expDiff, align 4, !dbg !5764
  br label %if.end28, !dbg !5766

if.else26:                                        ; preds = %if.end23
  %28 = load i64, i64* %aSig, align 8, !dbg !5767
  %or27 = or i64 %28, 2305843009213693952, !dbg !5767
  store i64 %or27, i64* %aSig, align 8, !dbg !5767
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %if.then25
  %29 = load i64, i64* %aSig, align 8, !dbg !5769
  %30 = load i32, i32* %expDiff, align 4, !dbg !5770
  %sub29 = sub nsw i32 0, %30, !dbg !5771
  call void @shift64RightJamming(i64 %29, i32 %sub29, i64* %aSig), !dbg !5772
  %31 = load i32, i32* %bExp, align 4, !dbg !5773
  store i32 %31, i32* %zExp, align 4, !dbg !5774
  br label %if.end45, !dbg !5775

if.else30:                                        ; preds = %if.else13
  %32 = load i32, i32* %aExp, align 4, !dbg !5776
  %cmp31 = icmp eq i32 %32, 2047, !dbg !5779
  br i1 %cmp31, label %if.then32, label %if.end38, !dbg !5780

if.then32:                                        ; preds = %if.else30
  %33 = load i64, i64* %aSig, align 8, !dbg !5781
  %34 = load i64, i64* %bSig, align 8, !dbg !5784
  %or33 = or i64 %33, %34, !dbg !5785
  %tobool34 = icmp ne i64 %or33, 0, !dbg !5785
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !5786

if.then35:                                        ; preds = %if.then32
  %35 = load i64, i64* %a.addr, align 8, !dbg !5787
  %36 = load i64, i64* %b.addr, align 8, !dbg !5788
  %call36 = call i64 @propagateFloat64NaN(i64 %35, i64 %36), !dbg !5789
  store i64 %call36, i64* %retval, align 8, !dbg !5790
  br label %return, !dbg !5790

if.end37:                                         ; preds = %if.then32
  %37 = load i64, i64* %a.addr, align 8, !dbg !5791
  store i64 %37, i64* %retval, align 8, !dbg !5792
  br label %return, !dbg !5792

if.end38:                                         ; preds = %if.else30
  %38 = load i32, i32* %aExp, align 4, !dbg !5793
  %cmp39 = icmp eq i32 %38, 0, !dbg !5795
  br i1 %cmp39, label %if.then40, label %if.end42, !dbg !5796

if.then40:                                        ; preds = %if.end38
  %39 = load i32, i32* %zSign.addr, align 4, !dbg !5797
  %40 = load i64, i64* %aSig, align 8, !dbg !5798
  %41 = load i64, i64* %bSig, align 8, !dbg !5799
  %add = add i64 %40, %41, !dbg !5800
  %shr = lshr i64 %add, 9, !dbg !5801
  %call41 = call i64 @packFloat64(i32 %39, i32 0, i64 %shr), !dbg !5802
  store i64 %call41, i64* %retval, align 8, !dbg !5803
  br label %return, !dbg !5803

if.end42:                                         ; preds = %if.end38
  %42 = load i64, i64* %aSig, align 8, !dbg !5804
  %add43 = add i64 4611686018427387904, %42, !dbg !5805
  %43 = load i64, i64* %bSig, align 8, !dbg !5806
  %add44 = add i64 %add43, %43, !dbg !5807
  store i64 %add44, i64* %zSig, align 8, !dbg !5808
  %44 = load i32, i32* %aExp, align 4, !dbg !5809
  store i32 %44, i32* %zExp, align 4, !dbg !5810
  br label %roundAndPack, !dbg !5811

if.end45:                                         ; preds = %if.end28
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end12
  %45 = load i64, i64* %aSig, align 8, !dbg !5812
  %or47 = or i64 %45, 2305843009213693952, !dbg !5812
  store i64 %or47, i64* %aSig, align 8, !dbg !5812
  %46 = load i64, i64* %aSig, align 8, !dbg !5813
  %47 = load i64, i64* %bSig, align 8, !dbg !5814
  %add48 = add i64 %46, %47, !dbg !5815
  %shl49 = shl i64 %add48, 1, !dbg !5816
  store i64 %shl49, i64* %zSig, align 8, !dbg !5817
  %48 = load i32, i32* %zExp, align 4, !dbg !5818
  %dec50 = add nsw i32 %48, -1, !dbg !5818
  store i32 %dec50, i32* %zExp, align 4, !dbg !5818
  %49 = load i64, i64* %zSig, align 8, !dbg !5819
  %cmp51 = icmp slt i64 %49, 0, !dbg !5821
  br i1 %cmp51, label %if.then52, label %if.end55, !dbg !5822

if.then52:                                        ; preds = %if.end46
  %50 = load i64, i64* %aSig, align 8, !dbg !5823
  %51 = load i64, i64* %bSig, align 8, !dbg !5825
  %add53 = add i64 %50, %51, !dbg !5826
  store i64 %add53, i64* %zSig, align 8, !dbg !5827
  %52 = load i32, i32* %zExp, align 4, !dbg !5828
  %inc54 = add nsw i32 %52, 1, !dbg !5828
  store i32 %inc54, i32* %zExp, align 4, !dbg !5828
  br label %if.end55, !dbg !5829

if.end55:                                         ; preds = %if.then52, %if.end46
  br label %roundAndPack, !dbg !5830

roundAndPack:                                     ; preds = %if.end55, %if.end42
  %53 = load i32, i32* %zSign.addr, align 4, !dbg !5831
  %54 = load i32, i32* %zExp, align 4, !dbg !5832
  %55 = load i64, i64* %zSig, align 8, !dbg !5833
  %call56 = call i64 @roundAndPackFloat64(i32 %53, i32 %54, i64 %55), !dbg !5834
  store i64 %call56, i64* %retval, align 8, !dbg !5835
  br label %return, !dbg !5835

return:                                           ; preds = %roundAndPack, %if.then40, %if.end37, %if.then35, %if.end21, %if.then19, %if.end, %if.then7
  %56 = load i64, i64* %retval, align 8, !dbg !5836
  ret i64 %56, !dbg !5836
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @subFloat64Sigs(i64 %a, i64 %b, i32 %zSign) #0 !dbg !5837 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig = alloca i64, align 8
  %expDiff = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !5838, metadata !DIExpression()), !dbg !5839
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !5840, metadata !DIExpression()), !dbg !5841
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !5842, metadata !DIExpression()), !dbg !5843
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !5844, metadata !DIExpression()), !dbg !5845
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !5846, metadata !DIExpression()), !dbg !5847
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !5848, metadata !DIExpression()), !dbg !5849
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !5850, metadata !DIExpression()), !dbg !5851
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !5852, metadata !DIExpression()), !dbg !5853
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !5854, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !5856, metadata !DIExpression()), !dbg !5857
  %0 = load i64, i64* %a.addr, align 8, !dbg !5858
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !5859
  store i64 %call, i64* %aSig, align 8, !dbg !5860
  %1 = load i64, i64* %a.addr, align 8, !dbg !5861
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !5862
  store i32 %call1, i32* %aExp, align 4, !dbg !5863
  %2 = load i64, i64* %b.addr, align 8, !dbg !5864
  %call2 = call i64 @extractFloat64Frac(i64 %2), !dbg !5865
  store i64 %call2, i64* %bSig, align 8, !dbg !5866
  %3 = load i64, i64* %b.addr, align 8, !dbg !5867
  %call3 = call i32 @extractFloat64Exp(i64 %3), !dbg !5868
  store i32 %call3, i32* %bExp, align 4, !dbg !5869
  %4 = load i32, i32* %aExp, align 4, !dbg !5870
  %5 = load i32, i32* %bExp, align 4, !dbg !5871
  %sub = sub nsw i32 %4, %5, !dbg !5872
  store i32 %sub, i32* %expDiff, align 4, !dbg !5873
  %6 = load i64, i64* %aSig, align 8, !dbg !5874
  %shl = shl i64 %6, 10, !dbg !5874
  store i64 %shl, i64* %aSig, align 8, !dbg !5874
  %7 = load i64, i64* %bSig, align 8, !dbg !5875
  %shl4 = shl i64 %7, 10, !dbg !5875
  store i64 %shl4, i64* %bSig, align 8, !dbg !5875
  %8 = load i32, i32* %expDiff, align 4, !dbg !5876
  %cmp = icmp slt i32 0, %8, !dbg !5878
  br i1 %cmp, label %if.then, label %if.end, !dbg !5879

if.then:                                          ; preds = %entry
  br label %aExpBigger, !dbg !5880

if.end:                                           ; preds = %entry
  %9 = load i32, i32* %expDiff, align 4, !dbg !5881
  %cmp5 = icmp slt i32 %9, 0, !dbg !5883
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5884

if.then6:                                         ; preds = %if.end
  br label %bExpBigger, !dbg !5885

if.end7:                                          ; preds = %if.end
  %10 = load i32, i32* %aExp, align 4, !dbg !5886
  %cmp8 = icmp eq i32 %10, 2047, !dbg !5888
  br i1 %cmp8, label %if.then9, label %if.end13, !dbg !5889

if.then9:                                         ; preds = %if.end7
  %11 = load i64, i64* %aSig, align 8, !dbg !5890
  %12 = load i64, i64* %bSig, align 8, !dbg !5893
  %or = or i64 %11, %12, !dbg !5894
  %tobool = icmp ne i64 %or, 0, !dbg !5894
  br i1 %tobool, label %if.then10, label %if.end12, !dbg !5895

if.then10:                                        ; preds = %if.then9
  %13 = load i64, i64* %a.addr, align 8, !dbg !5896
  %14 = load i64, i64* %b.addr, align 8, !dbg !5897
  %call11 = call i64 @propagateFloat64NaN(i64 %13, i64 %14), !dbg !5898
  store i64 %call11, i64* %retval, align 8, !dbg !5899
  br label %return, !dbg !5899

if.end12:                                         ; preds = %if.then9
  call void @float_raise(i32 16), !dbg !5900
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !5901
  br label %return, !dbg !5901

if.end13:                                         ; preds = %if.end7
  %15 = load i32, i32* %aExp, align 4, !dbg !5902
  %cmp14 = icmp eq i32 %15, 0, !dbg !5904
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !5905

if.then15:                                        ; preds = %if.end13
  store i32 1, i32* %aExp, align 4, !dbg !5906
  store i32 1, i32* %bExp, align 4, !dbg !5908
  br label %if.end16, !dbg !5909

if.end16:                                         ; preds = %if.then15, %if.end13
  %16 = load i64, i64* %bSig, align 8, !dbg !5910
  %17 = load i64, i64* %aSig, align 8, !dbg !5912
  %cmp17 = icmp ult i64 %16, %17, !dbg !5913
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !5914

if.then18:                                        ; preds = %if.end16
  br label %aBigger, !dbg !5915

if.end19:                                         ; preds = %if.end16
  %18 = load i64, i64* %aSig, align 8, !dbg !5916
  %19 = load i64, i64* %bSig, align 8, !dbg !5918
  %cmp20 = icmp ult i64 %18, %19, !dbg !5919
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !5920

if.then21:                                        ; preds = %if.end19
  br label %bBigger, !dbg !5921

if.end22:                                         ; preds = %if.end19
  %20 = load i32, i32* @float_rounding_mode, align 4, !dbg !5922
  %cmp23 = icmp eq i32 %20, 3, !dbg !5923
  %conv = zext i1 %cmp23 to i32, !dbg !5923
  %call24 = call i64 @packFloat64(i32 %conv, i32 0, i64 0), !dbg !5924
  store i64 %call24, i64* %retval, align 8, !dbg !5925
  br label %return, !dbg !5925

bExpBigger:                                       ; preds = %if.then6
  %21 = load i32, i32* %bExp, align 4, !dbg !5926
  %cmp25 = icmp eq i32 %21, 2047, !dbg !5928
  br i1 %cmp25, label %if.then27, label %if.end33, !dbg !5929

if.then27:                                        ; preds = %bExpBigger
  %22 = load i64, i64* %bSig, align 8, !dbg !5930
  %tobool28 = icmp ne i64 %22, 0, !dbg !5930
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !5933

if.then29:                                        ; preds = %if.then27
  %23 = load i64, i64* %a.addr, align 8, !dbg !5934
  %24 = load i64, i64* %b.addr, align 8, !dbg !5935
  %call30 = call i64 @propagateFloat64NaN(i64 %23, i64 %24), !dbg !5936
  store i64 %call30, i64* %retval, align 8, !dbg !5937
  br label %return, !dbg !5937

if.end31:                                         ; preds = %if.then27
  %25 = load i32, i32* %zSign.addr, align 4, !dbg !5938
  %xor = xor i32 %25, 1, !dbg !5939
  %call32 = call i64 @packFloat64(i32 %xor, i32 2047, i64 0), !dbg !5940
  store i64 %call32, i64* %retval, align 8, !dbg !5941
  br label %return, !dbg !5941

if.end33:                                         ; preds = %bExpBigger
  %26 = load i32, i32* %aExp, align 4, !dbg !5942
  %cmp34 = icmp eq i32 %26, 0, !dbg !5944
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !5945

if.then36:                                        ; preds = %if.end33
  %27 = load i32, i32* %expDiff, align 4, !dbg !5946
  %inc = add nsw i32 %27, 1, !dbg !5946
  store i32 %inc, i32* %expDiff, align 4, !dbg !5946
  br label %if.end38, !dbg !5948

if.else:                                          ; preds = %if.end33
  %28 = load i64, i64* %aSig, align 8, !dbg !5949
  %or37 = or i64 %28, 4611686018427387904, !dbg !5949
  store i64 %or37, i64* %aSig, align 8, !dbg !5949
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then36
  %29 = load i64, i64* %aSig, align 8, !dbg !5951
  %30 = load i32, i32* %expDiff, align 4, !dbg !5952
  %sub39 = sub nsw i32 0, %30, !dbg !5953
  call void @shift64RightJamming(i64 %29, i32 %sub39, i64* %aSig), !dbg !5954
  %31 = load i64, i64* %bSig, align 8, !dbg !5955
  %or40 = or i64 %31, 4611686018427387904, !dbg !5955
  store i64 %or40, i64* %bSig, align 8, !dbg !5955
  br label %bBigger, !dbg !5956

bBigger:                                          ; preds = %if.end38, %if.then21
  %32 = load i64, i64* %bSig, align 8, !dbg !5957
  %33 = load i64, i64* %aSig, align 8, !dbg !5958
  %sub41 = sub i64 %32, %33, !dbg !5959
  store i64 %sub41, i64* %zSig, align 8, !dbg !5960
  %34 = load i32, i32* %bExp, align 4, !dbg !5961
  store i32 %34, i32* %zExp, align 4, !dbg !5962
  %35 = load i32, i32* %zSign.addr, align 4, !dbg !5963
  %xor42 = xor i32 %35, 1, !dbg !5963
  store i32 %xor42, i32* %zSign.addr, align 4, !dbg !5963
  br label %normalizeRoundAndPack, !dbg !5964

aExpBigger:                                       ; preds = %if.then
  %36 = load i32, i32* %aExp, align 4, !dbg !5965
  %cmp43 = icmp eq i32 %36, 2047, !dbg !5967
  br i1 %cmp43, label %if.then45, label %if.end50, !dbg !5968

if.then45:                                        ; preds = %aExpBigger
  %37 = load i64, i64* %aSig, align 8, !dbg !5969
  %tobool46 = icmp ne i64 %37, 0, !dbg !5969
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !5972

if.then47:                                        ; preds = %if.then45
  %38 = load i64, i64* %a.addr, align 8, !dbg !5973
  %39 = load i64, i64* %b.addr, align 8, !dbg !5974
  %call48 = call i64 @propagateFloat64NaN(i64 %38, i64 %39), !dbg !5975
  store i64 %call48, i64* %retval, align 8, !dbg !5976
  br label %return, !dbg !5976

if.end49:                                         ; preds = %if.then45
  %40 = load i64, i64* %a.addr, align 8, !dbg !5977
  store i64 %40, i64* %retval, align 8, !dbg !5978
  br label %return, !dbg !5978

if.end50:                                         ; preds = %aExpBigger
  %41 = load i32, i32* %bExp, align 4, !dbg !5979
  %cmp51 = icmp eq i32 %41, 0, !dbg !5981
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !5982

if.then53:                                        ; preds = %if.end50
  %42 = load i32, i32* %expDiff, align 4, !dbg !5983
  %dec = add nsw i32 %42, -1, !dbg !5983
  store i32 %dec, i32* %expDiff, align 4, !dbg !5983
  br label %if.end56, !dbg !5985

if.else54:                                        ; preds = %if.end50
  %43 = load i64, i64* %bSig, align 8, !dbg !5986
  %or55 = or i64 %43, 4611686018427387904, !dbg !5986
  store i64 %or55, i64* %bSig, align 8, !dbg !5986
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then53
  %44 = load i64, i64* %bSig, align 8, !dbg !5988
  %45 = load i32, i32* %expDiff, align 4, !dbg !5989
  call void @shift64RightJamming(i64 %44, i32 %45, i64* %bSig), !dbg !5990
  %46 = load i64, i64* %aSig, align 8, !dbg !5991
  %or57 = or i64 %46, 4611686018427387904, !dbg !5991
  store i64 %or57, i64* %aSig, align 8, !dbg !5991
  br label %aBigger, !dbg !5992

aBigger:                                          ; preds = %if.end56, %if.then18
  %47 = load i64, i64* %aSig, align 8, !dbg !5993
  %48 = load i64, i64* %bSig, align 8, !dbg !5994
  %sub58 = sub i64 %47, %48, !dbg !5995
  store i64 %sub58, i64* %zSig, align 8, !dbg !5996
  %49 = load i32, i32* %aExp, align 4, !dbg !5997
  store i32 %49, i32* %zExp, align 4, !dbg !5998
  br label %normalizeRoundAndPack, !dbg !5999

normalizeRoundAndPack:                            ; preds = %aBigger, %bBigger
  %50 = load i32, i32* %zExp, align 4, !dbg !6000
  %dec59 = add nsw i32 %50, -1, !dbg !6000
  store i32 %dec59, i32* %zExp, align 4, !dbg !6000
  %51 = load i32, i32* %zSign.addr, align 4, !dbg !6001
  %52 = load i32, i32* %zExp, align 4, !dbg !6002
  %53 = load i64, i64* %zSig, align 8, !dbg !6003
  %call60 = call i64 @normalizeRoundAndPackFloat64(i32 %51, i32 %52, i64 %53), !dbg !6004
  store i64 %call60, i64* %retval, align 8, !dbg !6005
  br label %return, !dbg !6005

return:                                           ; preds = %normalizeRoundAndPack, %if.end49, %if.then47, %if.end31, %if.then29, %if.end22, %if.end12, %if.then10
  %54 = load i64, i64* %retval, align 8, !dbg !6006
  ret i64 %54, !dbg !6006
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_sub(i64 %a, i64 %b) #0 !dbg !6007 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6008, metadata !DIExpression()), !dbg !6009
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !6010, metadata !DIExpression()), !dbg !6011
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !6012, metadata !DIExpression()), !dbg !6013
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !6014, metadata !DIExpression()), !dbg !6015
  %0 = load i64, i64* %a.addr, align 8, !dbg !6016
  %call = call i32 @extractFloat64Sign(i64 %0), !dbg !6017
  store i32 %call, i32* %aSign, align 4, !dbg !6018
  %1 = load i64, i64* %b.addr, align 8, !dbg !6019
  %call1 = call i32 @extractFloat64Sign(i64 %1), !dbg !6020
  store i32 %call1, i32* %bSign, align 4, !dbg !6021
  %2 = load i32, i32* %aSign, align 4, !dbg !6022
  %3 = load i32, i32* %bSign, align 4, !dbg !6024
  %cmp = icmp eq i32 %2, %3, !dbg !6025
  br i1 %cmp, label %if.then, label %if.else, !dbg !6026

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %a.addr, align 8, !dbg !6027
  %5 = load i64, i64* %b.addr, align 8, !dbg !6029
  %6 = load i32, i32* %aSign, align 4, !dbg !6030
  %call2 = call i64 @subFloat64Sigs(i64 %4, i64 %5, i32 %6), !dbg !6031
  store i64 %call2, i64* %retval, align 8, !dbg !6032
  br label %return, !dbg !6032

if.else:                                          ; preds = %entry
  %7 = load i64, i64* %a.addr, align 8, !dbg !6033
  %8 = load i64, i64* %b.addr, align 8, !dbg !6035
  %9 = load i32, i32* %aSign, align 4, !dbg !6036
  %call3 = call i64 @addFloat64Sigs(i64 %7, i64 %8, i32 %9), !dbg !6037
  store i64 %call3, i64* %retval, align 8, !dbg !6038
  br label %return, !dbg !6038

return:                                           ; preds = %if.else, %if.then
  %10 = load i64, i64* %retval, align 8, !dbg !6039
  ret i64 %10, !dbg !6039
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_mul(i64 %a, i64 %b) #0 !dbg !6040 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6041, metadata !DIExpression()), !dbg !6042
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !6043, metadata !DIExpression()), !dbg !6044
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !6045, metadata !DIExpression()), !dbg !6046
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !6047, metadata !DIExpression()), !dbg !6048
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !6049, metadata !DIExpression()), !dbg !6050
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !6051, metadata !DIExpression()), !dbg !6052
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !6053, metadata !DIExpression()), !dbg !6054
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !6055, metadata !DIExpression()), !dbg !6056
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !6057, metadata !DIExpression()), !dbg !6058
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !6059, metadata !DIExpression()), !dbg !6060
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !6061, metadata !DIExpression()), !dbg !6062
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !6063, metadata !DIExpression()), !dbg !6064
  %0 = load i64, i64* %a.addr, align 8, !dbg !6065
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !6066
  store i64 %call, i64* %aSig, align 8, !dbg !6067
  %1 = load i64, i64* %a.addr, align 8, !dbg !6068
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !6069
  store i32 %call1, i32* %aExp, align 4, !dbg !6070
  %2 = load i64, i64* %a.addr, align 8, !dbg !6071
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !6072
  store i32 %call2, i32* %aSign, align 4, !dbg !6073
  %3 = load i64, i64* %b.addr, align 8, !dbg !6074
  %call3 = call i64 @extractFloat64Frac(i64 %3), !dbg !6075
  store i64 %call3, i64* %bSig, align 8, !dbg !6076
  %4 = load i64, i64* %b.addr, align 8, !dbg !6077
  %call4 = call i32 @extractFloat64Exp(i64 %4), !dbg !6078
  store i32 %call4, i32* %bExp, align 4, !dbg !6079
  %5 = load i64, i64* %b.addr, align 8, !dbg !6080
  %call5 = call i32 @extractFloat64Sign(i64 %5), !dbg !6081
  store i32 %call5, i32* %bSign, align 4, !dbg !6082
  %6 = load i32, i32* %aSign, align 4, !dbg !6083
  %7 = load i32, i32* %bSign, align 4, !dbg !6084
  %xor = xor i32 %6, %7, !dbg !6085
  store i32 %xor, i32* %zSign, align 4, !dbg !6086
  %8 = load i32, i32* %aExp, align 4, !dbg !6087
  %cmp = icmp eq i32 %8, 2047, !dbg !6089
  br i1 %cmp, label %if.then, label %if.end15, !dbg !6090

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %aSig, align 8, !dbg !6091
  %tobool = icmp ne i64 %9, 0, !dbg !6091
  br i1 %tobool, label %if.then8, label %lor.lhs.false, !dbg !6094

lor.lhs.false:                                    ; preds = %if.then
  %10 = load i32, i32* %bExp, align 4, !dbg !6095
  %cmp6 = icmp eq i32 %10, 2047, !dbg !6096
  br i1 %cmp6, label %land.lhs.true, label %if.end, !dbg !6097

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load i64, i64* %bSig, align 8, !dbg !6098
  %tobool7 = icmp ne i64 %11, 0, !dbg !6098
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !6099

if.then8:                                         ; preds = %land.lhs.true, %if.then
  %12 = load i64, i64* %a.addr, align 8, !dbg !6100
  %13 = load i64, i64* %b.addr, align 8, !dbg !6102
  %call9 = call i64 @propagateFloat64NaN(i64 %12, i64 %13), !dbg !6103
  store i64 %call9, i64* %retval, align 8, !dbg !6104
  br label %return, !dbg !6104

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %14 = load i32, i32* %bExp, align 4, !dbg !6105
  %conv = sext i32 %14 to i64, !dbg !6105
  %15 = load i64, i64* %bSig, align 8, !dbg !6107
  %or = or i64 %conv, %15, !dbg !6108
  %cmp10 = icmp eq i64 %or, 0, !dbg !6109
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !6110

if.then12:                                        ; preds = %if.end
  call void @float_raise(i32 16), !dbg !6111
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6113
  br label %return, !dbg !6113

if.end13:                                         ; preds = %if.end
  %16 = load i32, i32* %zSign, align 4, !dbg !6114
  %call14 = call i64 @packFloat64(i32 %16, i32 2047, i64 0), !dbg !6115
  store i64 %call14, i64* %retval, align 8, !dbg !6116
  br label %return, !dbg !6116

if.end15:                                         ; preds = %entry
  %17 = load i32, i32* %bExp, align 4, !dbg !6117
  %cmp16 = icmp eq i32 %17, 2047, !dbg !6119
  br i1 %cmp16, label %if.then18, label %if.end30, !dbg !6120

if.then18:                                        ; preds = %if.end15
  %18 = load i64, i64* %bSig, align 8, !dbg !6121
  %tobool19 = icmp ne i64 %18, 0, !dbg !6121
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !6124

if.then20:                                        ; preds = %if.then18
  %19 = load i64, i64* %a.addr, align 8, !dbg !6125
  %20 = load i64, i64* %b.addr, align 8, !dbg !6126
  %call21 = call i64 @propagateFloat64NaN(i64 %19, i64 %20), !dbg !6127
  store i64 %call21, i64* %retval, align 8, !dbg !6128
  br label %return, !dbg !6128

if.end22:                                         ; preds = %if.then18
  %21 = load i32, i32* %aExp, align 4, !dbg !6129
  %conv23 = sext i32 %21 to i64, !dbg !6129
  %22 = load i64, i64* %aSig, align 8, !dbg !6131
  %or24 = or i64 %conv23, %22, !dbg !6132
  %cmp25 = icmp eq i64 %or24, 0, !dbg !6133
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !6134

if.then27:                                        ; preds = %if.end22
  call void @float_raise(i32 16), !dbg !6135
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6137
  br label %return, !dbg !6137

if.end28:                                         ; preds = %if.end22
  %23 = load i32, i32* %zSign, align 4, !dbg !6138
  %call29 = call i64 @packFloat64(i32 %23, i32 2047, i64 0), !dbg !6139
  store i64 %call29, i64* %retval, align 8, !dbg !6140
  br label %return, !dbg !6140

if.end30:                                         ; preds = %if.end15
  %24 = load i32, i32* %aExp, align 4, !dbg !6141
  %cmp31 = icmp eq i32 %24, 0, !dbg !6143
  br i1 %cmp31, label %if.then33, label %if.end39, !dbg !6144

if.then33:                                        ; preds = %if.end30
  %25 = load i64, i64* %aSig, align 8, !dbg !6145
  %cmp34 = icmp eq i64 %25, 0, !dbg !6148
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !6149

if.then36:                                        ; preds = %if.then33
  %26 = load i32, i32* %zSign, align 4, !dbg !6150
  %call37 = call i64 @packFloat64(i32 %26, i32 0, i64 0), !dbg !6151
  store i64 %call37, i64* %retval, align 8, !dbg !6152
  br label %return, !dbg !6152

if.end38:                                         ; preds = %if.then33
  %27 = load i64, i64* %aSig, align 8, !dbg !6153
  call void @normalizeFloat64Subnormal(i64 %27, i32* %aExp, i64* %aSig), !dbg !6154
  br label %if.end39, !dbg !6155

if.end39:                                         ; preds = %if.end38, %if.end30
  %28 = load i32, i32* %bExp, align 4, !dbg !6156
  %cmp40 = icmp eq i32 %28, 0, !dbg !6158
  br i1 %cmp40, label %if.then42, label %if.end48, !dbg !6159

if.then42:                                        ; preds = %if.end39
  %29 = load i64, i64* %bSig, align 8, !dbg !6160
  %cmp43 = icmp eq i64 %29, 0, !dbg !6163
  br i1 %cmp43, label %if.then45, label %if.end47, !dbg !6164

if.then45:                                        ; preds = %if.then42
  %30 = load i32, i32* %zSign, align 4, !dbg !6165
  %call46 = call i64 @packFloat64(i32 %30, i32 0, i64 0), !dbg !6166
  store i64 %call46, i64* %retval, align 8, !dbg !6167
  br label %return, !dbg !6167

if.end47:                                         ; preds = %if.then42
  %31 = load i64, i64* %bSig, align 8, !dbg !6168
  call void @normalizeFloat64Subnormal(i64 %31, i32* %bExp, i64* %bSig), !dbg !6169
  br label %if.end48, !dbg !6170

if.end48:                                         ; preds = %if.end47, %if.end39
  %32 = load i32, i32* %aExp, align 4, !dbg !6171
  %33 = load i32, i32* %bExp, align 4, !dbg !6172
  %add = add nsw i32 %32, %33, !dbg !6173
  %sub = sub nsw i32 %add, 1023, !dbg !6174
  store i32 %sub, i32* %zExp, align 4, !dbg !6175
  %34 = load i64, i64* %aSig, align 8, !dbg !6176
  %or49 = or i64 %34, 4503599627370496, !dbg !6177
  %shl = shl i64 %or49, 10, !dbg !6178
  store i64 %shl, i64* %aSig, align 8, !dbg !6179
  %35 = load i64, i64* %bSig, align 8, !dbg !6180
  %or50 = or i64 %35, 4503599627370496, !dbg !6181
  %shl51 = shl i64 %or50, 11, !dbg !6182
  store i64 %shl51, i64* %bSig, align 8, !dbg !6183
  %36 = load i64, i64* %aSig, align 8, !dbg !6184
  %37 = load i64, i64* %bSig, align 8, !dbg !6185
  call void @mul64To128(i64 %36, i64 %37, i64* %zSig0, i64* %zSig1), !dbg !6186
  %38 = load i64, i64* %zSig1, align 8, !dbg !6187
  %cmp52 = icmp ne i64 %38, 0, !dbg !6188
  %conv53 = zext i1 %cmp52 to i32, !dbg !6188
  %conv54 = sext i32 %conv53 to i64, !dbg !6189
  %39 = load i64, i64* %zSig0, align 8, !dbg !6190
  %or55 = or i64 %39, %conv54, !dbg !6190
  store i64 %or55, i64* %zSig0, align 8, !dbg !6190
  %40 = load i64, i64* %zSig0, align 8, !dbg !6191
  %shl56 = shl i64 %40, 1, !dbg !6193
  %cmp57 = icmp sle i64 0, %shl56, !dbg !6194
  br i1 %cmp57, label %if.then59, label %if.end61, !dbg !6195

if.then59:                                        ; preds = %if.end48
  %41 = load i64, i64* %zSig0, align 8, !dbg !6196
  %shl60 = shl i64 %41, 1, !dbg !6196
  store i64 %shl60, i64* %zSig0, align 8, !dbg !6196
  %42 = load i32, i32* %zExp, align 4, !dbg !6198
  %dec = add nsw i32 %42, -1, !dbg !6198
  store i32 %dec, i32* %zExp, align 4, !dbg !6198
  br label %if.end61, !dbg !6199

if.end61:                                         ; preds = %if.then59, %if.end48
  %43 = load i32, i32* %zSign, align 4, !dbg !6200
  %44 = load i32, i32* %zExp, align 4, !dbg !6201
  %45 = load i64, i64* %zSig0, align 8, !dbg !6202
  %call62 = call i64 @roundAndPackFloat64(i32 %43, i32 %44, i64 %45), !dbg !6203
  store i64 %call62, i64* %retval, align 8, !dbg !6204
  br label %return, !dbg !6204

return:                                           ; preds = %if.end61, %if.then45, %if.then36, %if.end28, %if.then27, %if.then20, %if.end13, %if.then12, %if.then8
  %46 = load i64, i64* %retval, align 8, !dbg !6205
  ret i64 %46, !dbg !6205
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @roundAndPackFloat64(i32 %zSign, i32 %zExp, i64 %zSig) #0 !dbg !6206 {
entry:
  %retval = alloca i64, align 8
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig.addr = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %roundNearestEven = alloca i32, align 4
  %roundIncrement = alloca i32, align 4
  %roundBits = alloca i32, align 4
  %isTiny = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !6207, metadata !DIExpression()), !dbg !6208
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !6209, metadata !DIExpression()), !dbg !6210
  store i64 %zSig, i64* %zSig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !6213, metadata !DIExpression()), !dbg !6214
  call void @llvm.dbg.declare(metadata i32* %roundNearestEven, metadata !6215, metadata !DIExpression()), !dbg !6216
  call void @llvm.dbg.declare(metadata i32* %roundIncrement, metadata !6217, metadata !DIExpression()), !dbg !6218
  call void @llvm.dbg.declare(metadata i32* %roundBits, metadata !6219, metadata !DIExpression()), !dbg !6220
  call void @llvm.dbg.declare(metadata i32* %isTiny, metadata !6221, metadata !DIExpression()), !dbg !6222
  %0 = load i32, i32* @float_rounding_mode, align 4, !dbg !6223
  store i32 %0, i32* %roundingMode, align 4, !dbg !6224
  %1 = load i32, i32* %roundingMode, align 4, !dbg !6225
  %cmp = icmp eq i32 %1, 0, !dbg !6226
  %conv = zext i1 %cmp to i32, !dbg !6226
  store i32 %conv, i32* %roundNearestEven, align 4, !dbg !6227
  store i32 512, i32* %roundIncrement, align 4, !dbg !6228
  %2 = load i32, i32* %roundNearestEven, align 4, !dbg !6229
  %tobool = icmp ne i32 %2, 0, !dbg !6229
  br i1 %tobool, label %if.end16, label %if.then, !dbg !6231

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %roundingMode, align 4, !dbg !6232
  %cmp1 = icmp eq i32 %3, 1, !dbg !6235
  br i1 %cmp1, label %if.then3, label %if.else, !dbg !6236

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %roundIncrement, align 4, !dbg !6237
  br label %if.end15, !dbg !6239

if.else:                                          ; preds = %if.then
  store i32 1023, i32* %roundIncrement, align 4, !dbg !6240
  %4 = load i32, i32* %zSign.addr, align 4, !dbg !6242
  %tobool4 = icmp ne i32 %4, 0, !dbg !6242
  br i1 %tobool4, label %if.then5, label %if.else9, !dbg !6244

if.then5:                                         ; preds = %if.else
  %5 = load i32, i32* %roundingMode, align 4, !dbg !6245
  %cmp6 = icmp eq i32 %5, 2, !dbg !6248
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !6249

if.then8:                                         ; preds = %if.then5
  store i32 0, i32* %roundIncrement, align 4, !dbg !6250
  br label %if.end, !dbg !6251

if.end:                                           ; preds = %if.then8, %if.then5
  br label %if.end14, !dbg !6252

if.else9:                                         ; preds = %if.else
  %6 = load i32, i32* %roundingMode, align 4, !dbg !6253
  %cmp10 = icmp eq i32 %6, 3, !dbg !6256
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !6257

if.then12:                                        ; preds = %if.else9
  store i32 0, i32* %roundIncrement, align 4, !dbg !6258
  br label %if.end13, !dbg !6259

if.end13:                                         ; preds = %if.then12, %if.else9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then3
  br label %if.end16, !dbg !6260

if.end16:                                         ; preds = %if.end15, %entry
  %7 = load i64, i64* %zSig.addr, align 8, !dbg !6261
  %and = and i64 %7, 1023, !dbg !6262
  %conv17 = trunc i64 %and to i32, !dbg !6261
  store i32 %conv17, i32* %roundBits, align 4, !dbg !6263
  %8 = load i32, i32* %zExp.addr, align 4, !dbg !6264
  %conv18 = trunc i32 %8 to i16, !dbg !6266
  %conv19 = zext i16 %conv18 to i32, !dbg !6266
  %cmp20 = icmp sle i32 2045, %conv19, !dbg !6267
  br i1 %cmp20, label %if.then22, label %if.end56, !dbg !6268

if.then22:                                        ; preds = %if.end16
  %9 = load i32, i32* %zExp.addr, align 4, !dbg !6269
  %cmp23 = icmp slt i32 2045, %9, !dbg !6272
  br i1 %cmp23, label %if.then30, label %lor.lhs.false, !dbg !6273

lor.lhs.false:                                    ; preds = %if.then22
  %10 = load i32, i32* %zExp.addr, align 4, !dbg !6274
  %cmp25 = icmp eq i32 %10, 2045, !dbg !6275
  br i1 %cmp25, label %land.lhs.true, label %if.end34, !dbg !6276

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load i64, i64* %zSig.addr, align 8, !dbg !6277
  %12 = load i32, i32* %roundIncrement, align 4, !dbg !6278
  %conv27 = sext i32 %12 to i64, !dbg !6278
  %add = add i64 %11, %conv27, !dbg !6279
  %cmp28 = icmp slt i64 %add, 0, !dbg !6280
  br i1 %cmp28, label %if.then30, label %if.end34, !dbg !6281

if.then30:                                        ; preds = %land.lhs.true, %if.then22
  call void @float_raise(i32 9), !dbg !6282
  %13 = load i32, i32* %zSign.addr, align 4, !dbg !6284
  %call = call i64 @packFloat64(i32 %13, i32 2047, i64 0), !dbg !6285
  %14 = load i32, i32* %roundIncrement, align 4, !dbg !6286
  %cmp31 = icmp eq i32 %14, 0, !dbg !6287
  %conv32 = zext i1 %cmp31 to i32, !dbg !6287
  %conv33 = sext i32 %conv32 to i64, !dbg !6288
  %sub = sub i64 %call, %conv33, !dbg !6289
  store i64 %sub, i64* %retval, align 8, !dbg !6290
  br label %return, !dbg !6290

if.end34:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %15 = load i32, i32* %zExp.addr, align 4, !dbg !6291
  %cmp35 = icmp slt i32 %15, 0, !dbg !6293
  br i1 %cmp35, label %if.then37, label %if.end55, !dbg !6294

if.then37:                                        ; preds = %if.end34
  %16 = load i32, i32* @float_detect_tininess, align 4, !dbg !6295
  %cmp38 = icmp eq i32 %16, 1, !dbg !6297
  br i1 %cmp38, label %lor.end, label %lor.lhs.false40, !dbg !6298

lor.lhs.false40:                                  ; preds = %if.then37
  %17 = load i32, i32* %zExp.addr, align 4, !dbg !6299
  %cmp41 = icmp slt i32 %17, -1, !dbg !6300
  br i1 %cmp41, label %lor.end, label %lor.rhs, !dbg !6301

lor.rhs:                                          ; preds = %lor.lhs.false40
  %18 = load i64, i64* %zSig.addr, align 8, !dbg !6302
  %19 = load i32, i32* %roundIncrement, align 4, !dbg !6303
  %conv43 = sext i32 %19 to i64, !dbg !6303
  %add44 = add i64 %18, %conv43, !dbg !6304
  %cmp45 = icmp ult i64 %add44, -9223372036854775808, !dbg !6305
  br label %lor.end, !dbg !6301

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false40, %if.then37
  %20 = phi i1 [ true, %lor.lhs.false40 ], [ true, %if.then37 ], [ %cmp45, %lor.rhs ]
  %lor.ext = zext i1 %20 to i32, !dbg !6301
  store i32 %lor.ext, i32* %isTiny, align 4, !dbg !6306
  %21 = load i64, i64* %zSig.addr, align 8, !dbg !6307
  %22 = load i32, i32* %zExp.addr, align 4, !dbg !6308
  %sub47 = sub nsw i32 0, %22, !dbg !6309
  call void @shift64RightJamming(i64 %21, i32 %sub47, i64* %zSig.addr), !dbg !6310
  store i32 0, i32* %zExp.addr, align 4, !dbg !6311
  %23 = load i64, i64* %zSig.addr, align 8, !dbg !6312
  %and48 = and i64 %23, 1023, !dbg !6313
  %conv49 = trunc i64 %and48 to i32, !dbg !6312
  store i32 %conv49, i32* %roundBits, align 4, !dbg !6314
  %24 = load i32, i32* %isTiny, align 4, !dbg !6315
  %tobool50 = icmp ne i32 %24, 0, !dbg !6315
  br i1 %tobool50, label %land.lhs.true51, label %if.end54, !dbg !6317

land.lhs.true51:                                  ; preds = %lor.end
  %25 = load i32, i32* %roundBits, align 4, !dbg !6318
  %tobool52 = icmp ne i32 %25, 0, !dbg !6318
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !6319

if.then53:                                        ; preds = %land.lhs.true51
  call void @float_raise(i32 4), !dbg !6320
  br label %if.end54, !dbg !6320

if.end54:                                         ; preds = %if.then53, %land.lhs.true51, %lor.end
  br label %if.end55, !dbg !6321

if.end55:                                         ; preds = %if.end54, %if.end34
  br label %if.end56, !dbg !6322

if.end56:                                         ; preds = %if.end55, %if.end16
  %26 = load i32, i32* %roundBits, align 4, !dbg !6323
  %tobool57 = icmp ne i32 %26, 0, !dbg !6323
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !6325

if.then58:                                        ; preds = %if.end56
  %27 = load i32, i32* @float_exception_flags, align 4, !dbg !6326
  %or = or i32 %27, 1, !dbg !6326
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !6326
  br label %if.end59, !dbg !6327

if.end59:                                         ; preds = %if.then58, %if.end56
  %28 = load i64, i64* %zSig.addr, align 8, !dbg !6328
  %29 = load i32, i32* %roundIncrement, align 4, !dbg !6329
  %conv60 = sext i32 %29 to i64, !dbg !6329
  %add61 = add i64 %28, %conv60, !dbg !6330
  %shr = lshr i64 %add61, 10, !dbg !6331
  store i64 %shr, i64* %zSig.addr, align 8, !dbg !6332
  %30 = load i32, i32* %roundBits, align 4, !dbg !6333
  %xor = xor i32 %30, 512, !dbg !6334
  %cmp62 = icmp eq i32 %xor, 0, !dbg !6335
  %conv63 = zext i1 %cmp62 to i32, !dbg !6335
  %31 = load i32, i32* %roundNearestEven, align 4, !dbg !6336
  %and64 = and i32 %conv63, %31, !dbg !6337
  %neg = xor i32 %and64, -1, !dbg !6338
  %conv65 = sext i32 %neg to i64, !dbg !6338
  %32 = load i64, i64* %zSig.addr, align 8, !dbg !6339
  %and66 = and i64 %32, %conv65, !dbg !6339
  store i64 %and66, i64* %zSig.addr, align 8, !dbg !6339
  %33 = load i64, i64* %zSig.addr, align 8, !dbg !6340
  %cmp67 = icmp eq i64 %33, 0, !dbg !6342
  br i1 %cmp67, label %if.then69, label %if.end70, !dbg !6343

if.then69:                                        ; preds = %if.end59
  store i32 0, i32* %zExp.addr, align 4, !dbg !6344
  br label %if.end70, !dbg !6345

if.end70:                                         ; preds = %if.then69, %if.end59
  %34 = load i32, i32* %zSign.addr, align 4, !dbg !6346
  %35 = load i32, i32* %zExp.addr, align 4, !dbg !6347
  %36 = load i64, i64* %zSig.addr, align 8, !dbg !6348
  %call71 = call i64 @packFloat64(i32 %34, i32 %35, i64 %36), !dbg !6349
  store i64 %call71, i64* %retval, align 8, !dbg !6350
  br label %return, !dbg !6350

return:                                           ; preds = %if.end70, %if.then30
  %37 = load i64, i64* %retval, align 8, !dbg !6351
  ret i64 %37, !dbg !6351
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_div(i64 %a, i64 %b) #0 !dbg !6352 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6353, metadata !DIExpression()), !dbg !6354
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !6355, metadata !DIExpression()), !dbg !6356
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !6357, metadata !DIExpression()), !dbg !6358
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !6359, metadata !DIExpression()), !dbg !6360
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !6361, metadata !DIExpression()), !dbg !6362
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !6363, metadata !DIExpression()), !dbg !6364
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !6365, metadata !DIExpression()), !dbg !6366
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !6367, metadata !DIExpression()), !dbg !6368
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !6369, metadata !DIExpression()), !dbg !6370
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !6371, metadata !DIExpression()), !dbg !6372
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !6373, metadata !DIExpression()), !dbg !6374
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !6375, metadata !DIExpression()), !dbg !6376
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !6377, metadata !DIExpression()), !dbg !6378
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !6379, metadata !DIExpression()), !dbg !6380
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !6381, metadata !DIExpression()), !dbg !6382
  %0 = load i64, i64* %a.addr, align 8, !dbg !6383
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !6384
  store i64 %call, i64* %aSig, align 8, !dbg !6385
  %1 = load i64, i64* %a.addr, align 8, !dbg !6386
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !6387
  store i32 %call1, i32* %aExp, align 4, !dbg !6388
  %2 = load i64, i64* %a.addr, align 8, !dbg !6389
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !6390
  store i32 %call2, i32* %aSign, align 4, !dbg !6391
  %3 = load i64, i64* %b.addr, align 8, !dbg !6392
  %call3 = call i64 @extractFloat64Frac(i64 %3), !dbg !6393
  store i64 %call3, i64* %bSig, align 8, !dbg !6394
  %4 = load i64, i64* %b.addr, align 8, !dbg !6395
  %call4 = call i32 @extractFloat64Exp(i64 %4), !dbg !6396
  store i32 %call4, i32* %bExp, align 4, !dbg !6397
  %5 = load i64, i64* %b.addr, align 8, !dbg !6398
  %call5 = call i32 @extractFloat64Sign(i64 %5), !dbg !6399
  store i32 %call5, i32* %bSign, align 4, !dbg !6400
  %6 = load i32, i32* %aSign, align 4, !dbg !6401
  %7 = load i32, i32* %bSign, align 4, !dbg !6402
  %xor = xor i32 %6, %7, !dbg !6403
  store i32 %xor, i32* %zSign, align 4, !dbg !6404
  %8 = load i32, i32* %aExp, align 4, !dbg !6405
  %cmp = icmp eq i32 %8, 2047, !dbg !6407
  br i1 %cmp, label %if.then, label %if.end16, !dbg !6408

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %aSig, align 8, !dbg !6409
  %tobool = icmp ne i64 %9, 0, !dbg !6409
  br i1 %tobool, label %if.then6, label %if.end, !dbg !6412

if.then6:                                         ; preds = %if.then
  %10 = load i64, i64* %a.addr, align 8, !dbg !6413
  %11 = load i64, i64* %b.addr, align 8, !dbg !6414
  %call7 = call i64 @propagateFloat64NaN(i64 %10, i64 %11), !dbg !6415
  store i64 %call7, i64* %retval, align 8, !dbg !6416
  br label %return, !dbg !6416

if.end:                                           ; preds = %if.then
  %12 = load i32, i32* %bExp, align 4, !dbg !6417
  %cmp8 = icmp eq i32 %12, 2047, !dbg !6419
  br i1 %cmp8, label %if.then9, label %if.end14, !dbg !6420

if.then9:                                         ; preds = %if.end
  %13 = load i64, i64* %bSig, align 8, !dbg !6421
  %tobool10 = icmp ne i64 %13, 0, !dbg !6421
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !6424

if.then11:                                        ; preds = %if.then9
  %14 = load i64, i64* %a.addr, align 8, !dbg !6425
  %15 = load i64, i64* %b.addr, align 8, !dbg !6426
  %call12 = call i64 @propagateFloat64NaN(i64 %14, i64 %15), !dbg !6427
  store i64 %call12, i64* %retval, align 8, !dbg !6428
  br label %return, !dbg !6428

if.end13:                                         ; preds = %if.then9
  call void @float_raise(i32 16), !dbg !6429
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6430
  br label %return, !dbg !6430

if.end14:                                         ; preds = %if.end
  %16 = load i32, i32* %zSign, align 4, !dbg !6431
  %call15 = call i64 @packFloat64(i32 %16, i32 2047, i64 0), !dbg !6432
  store i64 %call15, i64* %retval, align 8, !dbg !6433
  br label %return, !dbg !6433

if.end16:                                         ; preds = %entry
  %17 = load i32, i32* %bExp, align 4, !dbg !6434
  %cmp17 = icmp eq i32 %17, 2047, !dbg !6436
  br i1 %cmp17, label %if.then18, label %if.end24, !dbg !6437

if.then18:                                        ; preds = %if.end16
  %18 = load i64, i64* %bSig, align 8, !dbg !6438
  %tobool19 = icmp ne i64 %18, 0, !dbg !6438
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !6441

if.then20:                                        ; preds = %if.then18
  %19 = load i64, i64* %a.addr, align 8, !dbg !6442
  %20 = load i64, i64* %b.addr, align 8, !dbg !6443
  %call21 = call i64 @propagateFloat64NaN(i64 %19, i64 %20), !dbg !6444
  store i64 %call21, i64* %retval, align 8, !dbg !6445
  br label %return, !dbg !6445

if.end22:                                         ; preds = %if.then18
  %21 = load i32, i32* %zSign, align 4, !dbg !6446
  %call23 = call i64 @packFloat64(i32 %21, i32 0, i64 0), !dbg !6447
  store i64 %call23, i64* %retval, align 8, !dbg !6448
  br label %return, !dbg !6448

if.end24:                                         ; preds = %if.end16
  %22 = load i32, i32* %bExp, align 4, !dbg !6449
  %cmp25 = icmp eq i32 %22, 0, !dbg !6451
  br i1 %cmp25, label %if.then26, label %if.end35, !dbg !6452

if.then26:                                        ; preds = %if.end24
  %23 = load i64, i64* %bSig, align 8, !dbg !6453
  %cmp27 = icmp eq i64 %23, 0, !dbg !6456
  br i1 %cmp27, label %if.then28, label %if.end34, !dbg !6457

if.then28:                                        ; preds = %if.then26
  %24 = load i32, i32* %aExp, align 4, !dbg !6458
  %conv = sext i32 %24 to i64, !dbg !6458
  %25 = load i64, i64* %aSig, align 8, !dbg !6461
  %or = or i64 %conv, %25, !dbg !6462
  %cmp29 = icmp eq i64 %or, 0, !dbg !6463
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !6464

if.then31:                                        ; preds = %if.then28
  call void @float_raise(i32 16), !dbg !6465
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6467
  br label %return, !dbg !6467

if.end32:                                         ; preds = %if.then28
  call void @float_raise(i32 2), !dbg !6468
  %26 = load i32, i32* %zSign, align 4, !dbg !6469
  %call33 = call i64 @packFloat64(i32 %26, i32 2047, i64 0), !dbg !6470
  store i64 %call33, i64* %retval, align 8, !dbg !6471
  br label %return, !dbg !6471

if.end34:                                         ; preds = %if.then26
  %27 = load i64, i64* %bSig, align 8, !dbg !6472
  call void @normalizeFloat64Subnormal(i64 %27, i32* %bExp, i64* %bSig), !dbg !6473
  br label %if.end35, !dbg !6474

if.end35:                                         ; preds = %if.end34, %if.end24
  %28 = load i32, i32* %aExp, align 4, !dbg !6475
  %cmp36 = icmp eq i32 %28, 0, !dbg !6477
  br i1 %cmp36, label %if.then38, label %if.end44, !dbg !6478

if.then38:                                        ; preds = %if.end35
  %29 = load i64, i64* %aSig, align 8, !dbg !6479
  %cmp39 = icmp eq i64 %29, 0, !dbg !6482
  br i1 %cmp39, label %if.then41, label %if.end43, !dbg !6483

if.then41:                                        ; preds = %if.then38
  %30 = load i32, i32* %zSign, align 4, !dbg !6484
  %call42 = call i64 @packFloat64(i32 %30, i32 0, i64 0), !dbg !6485
  store i64 %call42, i64* %retval, align 8, !dbg !6486
  br label %return, !dbg !6486

if.end43:                                         ; preds = %if.then38
  %31 = load i64, i64* %aSig, align 8, !dbg !6487
  call void @normalizeFloat64Subnormal(i64 %31, i32* %aExp, i64* %aSig), !dbg !6488
  br label %if.end44, !dbg !6489

if.end44:                                         ; preds = %if.end43, %if.end35
  %32 = load i32, i32* %aExp, align 4, !dbg !6490
  %33 = load i32, i32* %bExp, align 4, !dbg !6491
  %sub = sub nsw i32 %32, %33, !dbg !6492
  %add = add nsw i32 %sub, 1021, !dbg !6493
  store i32 %add, i32* %zExp, align 4, !dbg !6494
  %34 = load i64, i64* %aSig, align 8, !dbg !6495
  %or45 = or i64 %34, 4503599627370496, !dbg !6496
  %shl = shl i64 %or45, 10, !dbg !6497
  store i64 %shl, i64* %aSig, align 8, !dbg !6498
  %35 = load i64, i64* %bSig, align 8, !dbg !6499
  %or46 = or i64 %35, 4503599627370496, !dbg !6500
  %shl47 = shl i64 %or46, 11, !dbg !6501
  store i64 %shl47, i64* %bSig, align 8, !dbg !6502
  %36 = load i64, i64* %bSig, align 8, !dbg !6503
  %37 = load i64, i64* %aSig, align 8, !dbg !6505
  %38 = load i64, i64* %aSig, align 8, !dbg !6506
  %add48 = add i64 %37, %38, !dbg !6507
  %cmp49 = icmp ule i64 %36, %add48, !dbg !6508
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !6509

if.then51:                                        ; preds = %if.end44
  %39 = load i64, i64* %aSig, align 8, !dbg !6510
  %shr = lshr i64 %39, 1, !dbg !6510
  store i64 %shr, i64* %aSig, align 8, !dbg !6510
  %40 = load i32, i32* %zExp, align 4, !dbg !6512
  %inc = add nsw i32 %40, 1, !dbg !6512
  store i32 %inc, i32* %zExp, align 4, !dbg !6512
  br label %if.end52, !dbg !6513

if.end52:                                         ; preds = %if.then51, %if.end44
  %41 = load i64, i64* %aSig, align 8, !dbg !6514
  %42 = load i64, i64* %bSig, align 8, !dbg !6515
  %call53 = call i64 @estimateDiv128To64(i64 %41, i64 0, i64 %42), !dbg !6516
  store i64 %call53, i64* %zSig, align 8, !dbg !6517
  %43 = load i64, i64* %zSig, align 8, !dbg !6518
  %and = and i64 %43, 511, !dbg !6520
  %cmp54 = icmp ule i64 %and, 2, !dbg !6521
  br i1 %cmp54, label %if.then56, label %if.end63, !dbg !6522

if.then56:                                        ; preds = %if.end52
  %44 = load i64, i64* %bSig, align 8, !dbg !6523
  %45 = load i64, i64* %zSig, align 8, !dbg !6525
  call void @mul64To128(i64 %44, i64 %45, i64* %term0, i64* %term1), !dbg !6526
  %46 = load i64, i64* %aSig, align 8, !dbg !6527
  %47 = load i64, i64* %term0, align 8, !dbg !6528
  %48 = load i64, i64* %term1, align 8, !dbg !6529
  call void @sub128(i64 %46, i64 0, i64 %47, i64 %48, i64* %rem0, i64* %rem1), !dbg !6530
  br label %while.cond, !dbg !6531

while.cond:                                       ; preds = %while.body, %if.then56
  %49 = load i64, i64* %rem0, align 8, !dbg !6532
  %cmp57 = icmp slt i64 %49, 0, !dbg !6533
  br i1 %cmp57, label %while.body, label %while.end, !dbg !6531

while.body:                                       ; preds = %while.cond
  %50 = load i64, i64* %zSig, align 8, !dbg !6534
  %dec = add i64 %50, -1, !dbg !6534
  store i64 %dec, i64* %zSig, align 8, !dbg !6534
  %51 = load i64, i64* %rem0, align 8, !dbg !6536
  %52 = load i64, i64* %rem1, align 8, !dbg !6537
  %53 = load i64, i64* %bSig, align 8, !dbg !6538
  call void @add128(i64 %51, i64 %52, i64 0, i64 %53, i64* %rem0, i64* %rem1), !dbg !6539
  br label %while.cond, !dbg !6531, !llvm.loop !6540

while.end:                                        ; preds = %while.cond
  %54 = load i64, i64* %rem1, align 8, !dbg !6542
  %cmp59 = icmp ne i64 %54, 0, !dbg !6543
  %conv60 = zext i1 %cmp59 to i32, !dbg !6543
  %conv61 = sext i32 %conv60 to i64, !dbg !6544
  %55 = load i64, i64* %zSig, align 8, !dbg !6545
  %or62 = or i64 %55, %conv61, !dbg !6545
  store i64 %or62, i64* %zSig, align 8, !dbg !6545
  br label %if.end63, !dbg !6546

if.end63:                                         ; preds = %while.end, %if.end52
  %56 = load i32, i32* %zSign, align 4, !dbg !6547
  %57 = load i32, i32* %zExp, align 4, !dbg !6548
  %58 = load i64, i64* %zSig, align 8, !dbg !6549
  %call64 = call i64 @roundAndPackFloat64(i32 %56, i32 %57, i64 %58), !dbg !6550
  store i64 %call64, i64* %retval, align 8, !dbg !6551
  br label %return, !dbg !6551

return:                                           ; preds = %if.end63, %if.then41, %if.end32, %if.then31, %if.end22, %if.then20, %if.end14, %if.end13, %if.then11, %if.then6
  %59 = load i64, i64* %retval, align 8, !dbg !6552
  ret i64 %59, !dbg !6552
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_rem(i64 %a, i64 %b) #0 !dbg !6553 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %expDiff = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %q = alloca i64, align 8
  %alternateASig = alloca i64, align 8
  %sigMean = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6554, metadata !DIExpression()), !dbg !6555
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !6556, metadata !DIExpression()), !dbg !6557
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !6558, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !6560, metadata !DIExpression()), !dbg !6561
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !6562, metadata !DIExpression()), !dbg !6563
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !6564, metadata !DIExpression()), !dbg !6565
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !6566, metadata !DIExpression()), !dbg !6567
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !6568, metadata !DIExpression()), !dbg !6569
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !6570, metadata !DIExpression()), !dbg !6571
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !6572, metadata !DIExpression()), !dbg !6573
  call void @llvm.dbg.declare(metadata i64* %q, metadata !6574, metadata !DIExpression()), !dbg !6575
  call void @llvm.dbg.declare(metadata i64* %alternateASig, metadata !6576, metadata !DIExpression()), !dbg !6577
  call void @llvm.dbg.declare(metadata i64* %sigMean, metadata !6578, metadata !DIExpression()), !dbg !6579
  %0 = load i64, i64* %a.addr, align 8, !dbg !6580
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !6581
  store i64 %call, i64* %aSig, align 8, !dbg !6582
  %1 = load i64, i64* %a.addr, align 8, !dbg !6583
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !6584
  store i32 %call1, i32* %aExp, align 4, !dbg !6585
  %2 = load i64, i64* %a.addr, align 8, !dbg !6586
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !6587
  store i32 %call2, i32* %aSign, align 4, !dbg !6588
  %3 = load i64, i64* %b.addr, align 8, !dbg !6589
  %call3 = call i64 @extractFloat64Frac(i64 %3), !dbg !6590
  store i64 %call3, i64* %bSig, align 8, !dbg !6591
  %4 = load i64, i64* %b.addr, align 8, !dbg !6592
  %call4 = call i32 @extractFloat64Exp(i64 %4), !dbg !6593
  store i32 %call4, i32* %bExp, align 4, !dbg !6594
  %5 = load i64, i64* %b.addr, align 8, !dbg !6595
  %call5 = call i32 @extractFloat64Sign(i64 %5), !dbg !6596
  store i32 %call5, i32* %bSign, align 4, !dbg !6597
  %6 = load i32, i32* %aExp, align 4, !dbg !6598
  %cmp = icmp eq i32 %6, 2047, !dbg !6600
  br i1 %cmp, label %if.then, label %if.end10, !dbg !6601

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %aSig, align 8, !dbg !6602
  %tobool = icmp ne i64 %7, 0, !dbg !6602
  br i1 %tobool, label %if.then8, label %lor.lhs.false, !dbg !6605

lor.lhs.false:                                    ; preds = %if.then
  %8 = load i32, i32* %bExp, align 4, !dbg !6606
  %cmp6 = icmp eq i32 %8, 2047, !dbg !6607
  br i1 %cmp6, label %land.lhs.true, label %if.end, !dbg !6608

land.lhs.true:                                    ; preds = %lor.lhs.false
  %9 = load i64, i64* %bSig, align 8, !dbg !6609
  %tobool7 = icmp ne i64 %9, 0, !dbg !6609
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !6610

if.then8:                                         ; preds = %land.lhs.true, %if.then
  %10 = load i64, i64* %a.addr, align 8, !dbg !6611
  %11 = load i64, i64* %b.addr, align 8, !dbg !6613
  %call9 = call i64 @propagateFloat64NaN(i64 %10, i64 %11), !dbg !6614
  store i64 %call9, i64* %retval, align 8, !dbg !6615
  br label %return, !dbg !6615

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  call void @float_raise(i32 16), !dbg !6616
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6617
  br label %return, !dbg !6617

if.end10:                                         ; preds = %entry
  %12 = load i32, i32* %bExp, align 4, !dbg !6618
  %cmp11 = icmp eq i32 %12, 2047, !dbg !6620
  br i1 %cmp11, label %if.then12, label %if.end17, !dbg !6621

if.then12:                                        ; preds = %if.end10
  %13 = load i64, i64* %bSig, align 8, !dbg !6622
  %tobool13 = icmp ne i64 %13, 0, !dbg !6622
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !6625

if.then14:                                        ; preds = %if.then12
  %14 = load i64, i64* %a.addr, align 8, !dbg !6626
  %15 = load i64, i64* %b.addr, align 8, !dbg !6627
  %call15 = call i64 @propagateFloat64NaN(i64 %14, i64 %15), !dbg !6628
  store i64 %call15, i64* %retval, align 8, !dbg !6629
  br label %return, !dbg !6629

if.end16:                                         ; preds = %if.then12
  %16 = load i64, i64* %a.addr, align 8, !dbg !6630
  store i64 %16, i64* %retval, align 8, !dbg !6631
  br label %return, !dbg !6631

if.end17:                                         ; preds = %if.end10
  %17 = load i32, i32* %bExp, align 4, !dbg !6632
  %cmp18 = icmp eq i32 %17, 0, !dbg !6634
  br i1 %cmp18, label %if.then19, label %if.end23, !dbg !6635

if.then19:                                        ; preds = %if.end17
  %18 = load i64, i64* %bSig, align 8, !dbg !6636
  %cmp20 = icmp eq i64 %18, 0, !dbg !6639
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !6640

if.then21:                                        ; preds = %if.then19
  call void @float_raise(i32 16), !dbg !6641
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6643
  br label %return, !dbg !6643

if.end22:                                         ; preds = %if.then19
  %19 = load i64, i64* %bSig, align 8, !dbg !6644
  call void @normalizeFloat64Subnormal(i64 %19, i32* %bExp, i64* %bSig), !dbg !6645
  br label %if.end23, !dbg !6646

if.end23:                                         ; preds = %if.end22, %if.end17
  %20 = load i32, i32* %aExp, align 4, !dbg !6647
  %cmp24 = icmp eq i32 %20, 0, !dbg !6649
  br i1 %cmp24, label %if.then25, label %if.end29, !dbg !6650

if.then25:                                        ; preds = %if.end23
  %21 = load i64, i64* %aSig, align 8, !dbg !6651
  %cmp26 = icmp eq i64 %21, 0, !dbg !6654
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !6655

if.then27:                                        ; preds = %if.then25
  %22 = load i64, i64* %a.addr, align 8, !dbg !6656
  store i64 %22, i64* %retval, align 8, !dbg !6657
  br label %return, !dbg !6657

if.end28:                                         ; preds = %if.then25
  %23 = load i64, i64* %aSig, align 8, !dbg !6658
  call void @normalizeFloat64Subnormal(i64 %23, i32* %aExp, i64* %aSig), !dbg !6659
  br label %if.end29, !dbg !6660

if.end29:                                         ; preds = %if.end28, %if.end23
  %24 = load i32, i32* %aExp, align 4, !dbg !6661
  %25 = load i32, i32* %bExp, align 4, !dbg !6662
  %sub = sub nsw i32 %24, %25, !dbg !6663
  store i32 %sub, i32* %expDiff, align 4, !dbg !6664
  %26 = load i64, i64* %aSig, align 8, !dbg !6665
  %or = or i64 %26, 4503599627370496, !dbg !6666
  %shl = shl i64 %or, 11, !dbg !6667
  store i64 %shl, i64* %aSig, align 8, !dbg !6668
  %27 = load i64, i64* %bSig, align 8, !dbg !6669
  %or30 = or i64 %27, 4503599627370496, !dbg !6670
  %shl31 = shl i64 %or30, 11, !dbg !6671
  store i64 %shl31, i64* %bSig, align 8, !dbg !6672
  %28 = load i32, i32* %expDiff, align 4, !dbg !6673
  %cmp32 = icmp slt i32 %28, 0, !dbg !6675
  br i1 %cmp32, label %if.then33, label %if.end37, !dbg !6676

if.then33:                                        ; preds = %if.end29
  %29 = load i32, i32* %expDiff, align 4, !dbg !6677
  %cmp34 = icmp slt i32 %29, -1, !dbg !6680
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !6681

if.then35:                                        ; preds = %if.then33
  %30 = load i64, i64* %a.addr, align 8, !dbg !6682
  store i64 %30, i64* %retval, align 8, !dbg !6683
  br label %return, !dbg !6683

if.end36:                                         ; preds = %if.then33
  %31 = load i64, i64* %aSig, align 8, !dbg !6684
  %shr = lshr i64 %31, 1, !dbg !6684
  store i64 %shr, i64* %aSig, align 8, !dbg !6684
  br label %if.end37, !dbg !6685

if.end37:                                         ; preds = %if.end36, %if.end29
  %32 = load i64, i64* %bSig, align 8, !dbg !6686
  %33 = load i64, i64* %aSig, align 8, !dbg !6687
  %cmp38 = icmp ule i64 %32, %33, !dbg !6688
  %conv = zext i1 %cmp38 to i32, !dbg !6688
  %conv39 = sext i32 %conv to i64, !dbg !6689
  store i64 %conv39, i64* %q, align 8, !dbg !6690
  %34 = load i64, i64* %q, align 8, !dbg !6691
  %tobool40 = icmp ne i64 %34, 0, !dbg !6691
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !6693

if.then41:                                        ; preds = %if.end37
  %35 = load i64, i64* %bSig, align 8, !dbg !6694
  %36 = load i64, i64* %aSig, align 8, !dbg !6695
  %sub42 = sub i64 %36, %35, !dbg !6695
  store i64 %sub42, i64* %aSig, align 8, !dbg !6695
  br label %if.end43, !dbg !6696

if.end43:                                         ; preds = %if.then41, %if.end37
  %37 = load i32, i32* %expDiff, align 4, !dbg !6697
  %sub44 = sub nsw i32 %37, 64, !dbg !6697
  store i32 %sub44, i32* %expDiff, align 4, !dbg !6697
  br label %while.cond, !dbg !6698

while.cond:                                       ; preds = %cond.end, %if.end43
  %38 = load i32, i32* %expDiff, align 4, !dbg !6699
  %cmp45 = icmp slt i32 0, %38, !dbg !6700
  br i1 %cmp45, label %while.body, label %while.end, !dbg !6698

while.body:                                       ; preds = %while.cond
  %39 = load i64, i64* %aSig, align 8, !dbg !6701
  %40 = load i64, i64* %bSig, align 8, !dbg !6703
  %call47 = call i64 @estimateDiv128To64(i64 %39, i64 0, i64 %40), !dbg !6704
  store i64 %call47, i64* %q, align 8, !dbg !6705
  %41 = load i64, i64* %q, align 8, !dbg !6706
  %cmp48 = icmp ult i64 2, %41, !dbg !6707
  br i1 %cmp48, label %cond.true, label %cond.false, !dbg !6708

cond.true:                                        ; preds = %while.body
  %42 = load i64, i64* %q, align 8, !dbg !6709
  %sub50 = sub i64 %42, 2, !dbg !6710
  br label %cond.end, !dbg !6708

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !6708

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub50, %cond.true ], [ 0, %cond.false ], !dbg !6708
  store i64 %cond, i64* %q, align 8, !dbg !6711
  %43 = load i64, i64* %bSig, align 8, !dbg !6712
  %shr51 = lshr i64 %43, 2, !dbg !6713
  %44 = load i64, i64* %q, align 8, !dbg !6714
  %mul = mul i64 %shr51, %44, !dbg !6715
  %sub52 = sub i64 0, %mul, !dbg !6716
  store i64 %sub52, i64* %aSig, align 8, !dbg !6717
  %45 = load i32, i32* %expDiff, align 4, !dbg !6718
  %sub53 = sub nsw i32 %45, 62, !dbg !6718
  store i32 %sub53, i32* %expDiff, align 4, !dbg !6718
  br label %while.cond, !dbg !6698, !llvm.loop !6719

while.end:                                        ; preds = %while.cond
  %46 = load i32, i32* %expDiff, align 4, !dbg !6721
  %add = add nsw i32 %46, 64, !dbg !6721
  store i32 %add, i32* %expDiff, align 4, !dbg !6721
  %47 = load i32, i32* %expDiff, align 4, !dbg !6722
  %cmp54 = icmp slt i32 0, %47, !dbg !6724
  br i1 %cmp54, label %if.then56, label %if.else, !dbg !6725

if.then56:                                        ; preds = %while.end
  %48 = load i64, i64* %aSig, align 8, !dbg !6726
  %49 = load i64, i64* %bSig, align 8, !dbg !6728
  %call57 = call i64 @estimateDiv128To64(i64 %48, i64 0, i64 %49), !dbg !6729
  store i64 %call57, i64* %q, align 8, !dbg !6730
  %50 = load i64, i64* %q, align 8, !dbg !6731
  %cmp58 = icmp ult i64 2, %50, !dbg !6732
  br i1 %cmp58, label %cond.true60, label %cond.false62, !dbg !6733

cond.true60:                                      ; preds = %if.then56
  %51 = load i64, i64* %q, align 8, !dbg !6734
  %sub61 = sub i64 %51, 2, !dbg !6735
  br label %cond.end63, !dbg !6733

cond.false62:                                     ; preds = %if.then56
  br label %cond.end63, !dbg !6733

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi i64 [ %sub61, %cond.true60 ], [ 0, %cond.false62 ], !dbg !6733
  store i64 %cond64, i64* %q, align 8, !dbg !6736
  %52 = load i32, i32* %expDiff, align 4, !dbg !6737
  %sub65 = sub nsw i32 64, %52, !dbg !6738
  %53 = load i64, i64* %q, align 8, !dbg !6739
  %sh_prom = zext i32 %sub65 to i64, !dbg !6739
  %shr66 = lshr i64 %53, %sh_prom, !dbg !6739
  store i64 %shr66, i64* %q, align 8, !dbg !6739
  %54 = load i64, i64* %bSig, align 8, !dbg !6740
  %shr67 = lshr i64 %54, 2, !dbg !6740
  store i64 %shr67, i64* %bSig, align 8, !dbg !6740
  %55 = load i64, i64* %aSig, align 8, !dbg !6741
  %shr68 = lshr i64 %55, 1, !dbg !6742
  %56 = load i32, i32* %expDiff, align 4, !dbg !6743
  %sub69 = sub nsw i32 %56, 1, !dbg !6744
  %sh_prom70 = zext i32 %sub69 to i64, !dbg !6745
  %shl71 = shl i64 %shr68, %sh_prom70, !dbg !6745
  %57 = load i64, i64* %bSig, align 8, !dbg !6746
  %58 = load i64, i64* %q, align 8, !dbg !6747
  %mul72 = mul i64 %57, %58, !dbg !6748
  %sub73 = sub i64 %shl71, %mul72, !dbg !6749
  store i64 %sub73, i64* %aSig, align 8, !dbg !6750
  br label %if.end76, !dbg !6751

if.else:                                          ; preds = %while.end
  %59 = load i64, i64* %aSig, align 8, !dbg !6752
  %shr74 = lshr i64 %59, 2, !dbg !6752
  store i64 %shr74, i64* %aSig, align 8, !dbg !6752
  %60 = load i64, i64* %bSig, align 8, !dbg !6754
  %shr75 = lshr i64 %60, 2, !dbg !6754
  store i64 %shr75, i64* %bSig, align 8, !dbg !6754
  br label %if.end76

if.end76:                                         ; preds = %if.else, %cond.end63
  br label %do.body, !dbg !6755, !llvm.loop !6756

do.body:                                          ; preds = %do.cond, %if.end76
  %61 = load i64, i64* %aSig, align 8, !dbg !6758
  store i64 %61, i64* %alternateASig, align 8, !dbg !6760
  %62 = load i64, i64* %q, align 8, !dbg !6761
  %inc = add i64 %62, 1, !dbg !6761
  store i64 %inc, i64* %q, align 8, !dbg !6761
  %63 = load i64, i64* %bSig, align 8, !dbg !6762
  %64 = load i64, i64* %aSig, align 8, !dbg !6763
  %sub77 = sub i64 %64, %63, !dbg !6763
  store i64 %sub77, i64* %aSig, align 8, !dbg !6763
  br label %do.cond, !dbg !6764

do.cond:                                          ; preds = %do.body
  %65 = load i64, i64* %aSig, align 8, !dbg !6765
  %cmp78 = icmp sle i64 0, %65, !dbg !6766
  br i1 %cmp78, label %do.body, label %do.end, !dbg !6764, !llvm.loop !6756

do.end:                                           ; preds = %do.cond
  %66 = load i64, i64* %aSig, align 8, !dbg !6767
  %67 = load i64, i64* %alternateASig, align 8, !dbg !6768
  %add80 = add i64 %66, %67, !dbg !6769
  store i64 %add80, i64* %sigMean, align 8, !dbg !6770
  %68 = load i64, i64* %sigMean, align 8, !dbg !6771
  %cmp81 = icmp slt i64 %68, 0, !dbg !6773
  br i1 %cmp81, label %if.then88, label %lor.lhs.false83, !dbg !6774

lor.lhs.false83:                                  ; preds = %do.end
  %69 = load i64, i64* %sigMean, align 8, !dbg !6775
  %cmp84 = icmp eq i64 %69, 0, !dbg !6776
  br i1 %cmp84, label %land.lhs.true86, label %if.end89, !dbg !6777

land.lhs.true86:                                  ; preds = %lor.lhs.false83
  %70 = load i64, i64* %q, align 8, !dbg !6778
  %and = and i64 %70, 1, !dbg !6779
  %tobool87 = icmp ne i64 %and, 0, !dbg !6779
  br i1 %tobool87, label %if.then88, label %if.end89, !dbg !6780

if.then88:                                        ; preds = %land.lhs.true86, %do.end
  %71 = load i64, i64* %alternateASig, align 8, !dbg !6781
  store i64 %71, i64* %aSig, align 8, !dbg !6783
  br label %if.end89, !dbg !6784

if.end89:                                         ; preds = %if.then88, %land.lhs.true86, %lor.lhs.false83
  %72 = load i64, i64* %aSig, align 8, !dbg !6785
  %cmp90 = icmp slt i64 %72, 0, !dbg !6786
  %conv91 = zext i1 %cmp90 to i32, !dbg !6786
  store i32 %conv91, i32* %zSign, align 4, !dbg !6787
  %73 = load i32, i32* %zSign, align 4, !dbg !6788
  %tobool92 = icmp ne i32 %73, 0, !dbg !6788
  br i1 %tobool92, label %if.then93, label %if.end95, !dbg !6790

if.then93:                                        ; preds = %if.end89
  %74 = load i64, i64* %aSig, align 8, !dbg !6791
  %sub94 = sub i64 0, %74, !dbg !6792
  store i64 %sub94, i64* %aSig, align 8, !dbg !6793
  br label %if.end95, !dbg !6794

if.end95:                                         ; preds = %if.then93, %if.end89
  %75 = load i32, i32* %aSign, align 4, !dbg !6795
  %76 = load i32, i32* %zSign, align 4, !dbg !6796
  %xor = xor i32 %75, %76, !dbg !6797
  %77 = load i32, i32* %bExp, align 4, !dbg !6798
  %78 = load i64, i64* %aSig, align 8, !dbg !6799
  %call96 = call i64 @normalizeRoundAndPackFloat64(i32 %xor, i32 %77, i64 %78), !dbg !6800
  store i64 %call96, i64* %retval, align 8, !dbg !6801
  br label %return, !dbg !6801

return:                                           ; preds = %if.end95, %if.then35, %if.then27, %if.then21, %if.end16, %if.then14, %if.end, %if.then8
  %79 = load i64, i64* %retval, align 8, !dbg !6802
  ret i64 %79, !dbg !6802
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float64_sqrt(i64 %a) #0 !dbg !6803 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %zSig = alloca i64, align 8
  %doubleZSig = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %z = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6804, metadata !DIExpression()), !dbg !6805
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !6806, metadata !DIExpression()), !dbg !6807
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !6808, metadata !DIExpression()), !dbg !6809
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !6810, metadata !DIExpression()), !dbg !6811
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !6812, metadata !DIExpression()), !dbg !6813
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !6814, metadata !DIExpression()), !dbg !6815
  call void @llvm.dbg.declare(metadata i64* %doubleZSig, metadata !6816, metadata !DIExpression()), !dbg !6817
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !6818, metadata !DIExpression()), !dbg !6819
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !6820, metadata !DIExpression()), !dbg !6821
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !6822, metadata !DIExpression()), !dbg !6823
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !6824, metadata !DIExpression()), !dbg !6825
  call void @llvm.dbg.declare(metadata i64* %z, metadata !6826, metadata !DIExpression()), !dbg !6827
  %0 = load i64, i64* %a.addr, align 8, !dbg !6828
  %call = call i64 @extractFloat64Frac(i64 %0), !dbg !6829
  store i64 %call, i64* %aSig, align 8, !dbg !6830
  %1 = load i64, i64* %a.addr, align 8, !dbg !6831
  %call1 = call i32 @extractFloat64Exp(i64 %1), !dbg !6832
  store i32 %call1, i32* %aExp, align 4, !dbg !6833
  %2 = load i64, i64* %a.addr, align 8, !dbg !6834
  %call2 = call i32 @extractFloat64Sign(i64 %2), !dbg !6835
  store i32 %call2, i32* %aSign, align 4, !dbg !6836
  %3 = load i32, i32* %aExp, align 4, !dbg !6837
  %cmp = icmp eq i32 %3, 2047, !dbg !6839
  br i1 %cmp, label %if.then, label %if.end8, !dbg !6840

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %aSig, align 8, !dbg !6841
  %tobool = icmp ne i64 %4, 0, !dbg !6841
  br i1 %tobool, label %if.then3, label %if.end, !dbg !6844

if.then3:                                         ; preds = %if.then
  %5 = load i64, i64* %a.addr, align 8, !dbg !6845
  %6 = load i64, i64* %a.addr, align 8, !dbg !6846
  %call4 = call i64 @propagateFloat64NaN(i64 %5, i64 %6), !dbg !6847
  store i64 %call4, i64* %retval, align 8, !dbg !6848
  br label %return, !dbg !6848

if.end:                                           ; preds = %if.then
  %7 = load i32, i32* %aSign, align 4, !dbg !6849
  %tobool5 = icmp ne i32 %7, 0, !dbg !6849
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !6851

if.then6:                                         ; preds = %if.end
  %8 = load i64, i64* %a.addr, align 8, !dbg !6852
  store i64 %8, i64* %retval, align 8, !dbg !6853
  br label %return, !dbg !6853

if.end7:                                          ; preds = %if.end
  call void @float_raise(i32 16), !dbg !6854
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6855
  br label %return, !dbg !6855

if.end8:                                          ; preds = %entry
  %9 = load i32, i32* %aSign, align 4, !dbg !6856
  %tobool9 = icmp ne i32 %9, 0, !dbg !6856
  br i1 %tobool9, label %if.then10, label %if.end15, !dbg !6858

if.then10:                                        ; preds = %if.end8
  %10 = load i32, i32* %aExp, align 4, !dbg !6859
  %conv = sext i32 %10 to i64, !dbg !6859
  %11 = load i64, i64* %aSig, align 8, !dbg !6862
  %or = or i64 %conv, %11, !dbg !6863
  %cmp11 = icmp eq i64 %or, 0, !dbg !6864
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !6865

if.then13:                                        ; preds = %if.then10
  %12 = load i64, i64* %a.addr, align 8, !dbg !6866
  store i64 %12, i64* %retval, align 8, !dbg !6867
  br label %return, !dbg !6867

if.end14:                                         ; preds = %if.then10
  call void @float_raise(i32 16), !dbg !6868
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !6869
  br label %return, !dbg !6869

if.end15:                                         ; preds = %if.end8
  %13 = load i32, i32* %aExp, align 4, !dbg !6870
  %cmp16 = icmp eq i32 %13, 0, !dbg !6872
  br i1 %cmp16, label %if.then18, label %if.end23, !dbg !6873

if.then18:                                        ; preds = %if.end15
  %14 = load i64, i64* %aSig, align 8, !dbg !6874
  %cmp19 = icmp eq i64 %14, 0, !dbg !6877
  br i1 %cmp19, label %if.then21, label %if.end22, !dbg !6878

if.then21:                                        ; preds = %if.then18
  store i64 0, i64* %retval, align 8, !dbg !6879
  br label %return, !dbg !6879

if.end22:                                         ; preds = %if.then18
  %15 = load i64, i64* %aSig, align 8, !dbg !6880
  call void @normalizeFloat64Subnormal(i64 %15, i32* %aExp, i64* %aSig), !dbg !6881
  br label %if.end23, !dbg !6882

if.end23:                                         ; preds = %if.end22, %if.end15
  %16 = load i32, i32* %aExp, align 4, !dbg !6883
  %sub = sub nsw i32 %16, 1023, !dbg !6884
  %shr = ashr i32 %sub, 1, !dbg !6885
  %add = add nsw i32 %shr, 1022, !dbg !6886
  store i32 %add, i32* %zExp, align 4, !dbg !6887
  %17 = load i64, i64* %aSig, align 8, !dbg !6888
  %or24 = or i64 %17, 4503599627370496, !dbg !6888
  store i64 %or24, i64* %aSig, align 8, !dbg !6888
  %18 = load i32, i32* %aExp, align 4, !dbg !6889
  %19 = load i64, i64* %aSig, align 8, !dbg !6890
  %shr25 = lshr i64 %19, 21, !dbg !6891
  %conv26 = trunc i64 %shr25 to i32, !dbg !6890
  %call27 = call i32 @estimateSqrt32(i32 %18, i32 %conv26), !dbg !6892
  %conv28 = zext i32 %call27 to i64, !dbg !6892
  store i64 %conv28, i64* %zSig, align 8, !dbg !6893
  %20 = load i32, i32* %aExp, align 4, !dbg !6894
  %and = and i32 %20, 1, !dbg !6895
  %sub29 = sub nsw i32 9, %and, !dbg !6896
  %21 = load i64, i64* %aSig, align 8, !dbg !6897
  %sh_prom = zext i32 %sub29 to i64, !dbg !6897
  %shl = shl i64 %21, %sh_prom, !dbg !6897
  store i64 %shl, i64* %aSig, align 8, !dbg !6897
  %22 = load i64, i64* %aSig, align 8, !dbg !6898
  %23 = load i64, i64* %zSig, align 8, !dbg !6899
  %shl30 = shl i64 %23, 32, !dbg !6900
  %call31 = call i64 @estimateDiv128To64(i64 %22, i64 0, i64 %shl30), !dbg !6901
  %24 = load i64, i64* %zSig, align 8, !dbg !6902
  %shl32 = shl i64 %24, 30, !dbg !6903
  %add33 = add i64 %call31, %shl32, !dbg !6904
  store i64 %add33, i64* %zSig, align 8, !dbg !6905
  %25 = load i64, i64* %zSig, align 8, !dbg !6906
  %and34 = and i64 %25, 511, !dbg !6908
  %cmp35 = icmp ule i64 %and34, 5, !dbg !6909
  br i1 %cmp35, label %if.then37, label %if.end49, !dbg !6910

if.then37:                                        ; preds = %if.end23
  %26 = load i64, i64* %zSig, align 8, !dbg !6911
  %shl38 = shl i64 %26, 1, !dbg !6913
  store i64 %shl38, i64* %doubleZSig, align 8, !dbg !6914
  %27 = load i64, i64* %zSig, align 8, !dbg !6915
  %28 = load i64, i64* %zSig, align 8, !dbg !6916
  call void @mul64To128(i64 %27, i64 %28, i64* %term0, i64* %term1), !dbg !6917
  %29 = load i64, i64* %aSig, align 8, !dbg !6918
  %30 = load i64, i64* %term0, align 8, !dbg !6919
  %31 = load i64, i64* %term1, align 8, !dbg !6920
  call void @sub128(i64 %29, i64 0, i64 %30, i64 %31, i64* %rem0, i64* %rem1), !dbg !6921
  br label %while.cond, !dbg !6922

while.cond:                                       ; preds = %while.body, %if.then37
  %32 = load i64, i64* %rem0, align 8, !dbg !6923
  %cmp39 = icmp slt i64 %32, 0, !dbg !6924
  br i1 %cmp39, label %while.body, label %while.end, !dbg !6922

while.body:                                       ; preds = %while.cond
  %33 = load i64, i64* %zSig, align 8, !dbg !6925
  %dec = add i64 %33, -1, !dbg !6925
  store i64 %dec, i64* %zSig, align 8, !dbg !6925
  %34 = load i64, i64* %doubleZSig, align 8, !dbg !6927
  %sub41 = sub i64 %34, 2, !dbg !6927
  store i64 %sub41, i64* %doubleZSig, align 8, !dbg !6927
  %35 = load i64, i64* %rem0, align 8, !dbg !6928
  %36 = load i64, i64* %rem1, align 8, !dbg !6929
  %37 = load i64, i64* %zSig, align 8, !dbg !6930
  %shr42 = lshr i64 %37, 63, !dbg !6931
  %38 = load i64, i64* %doubleZSig, align 8, !dbg !6932
  %or43 = or i64 %38, 1, !dbg !6933
  call void @add128(i64 %35, i64 %36, i64 %shr42, i64 %or43, i64* %rem0, i64* %rem1), !dbg !6934
  br label %while.cond, !dbg !6922, !llvm.loop !6935

while.end:                                        ; preds = %while.cond
  %39 = load i64, i64* %rem0, align 8, !dbg !6937
  %40 = load i64, i64* %rem1, align 8, !dbg !6938
  %or44 = or i64 %39, %40, !dbg !6939
  %cmp45 = icmp ne i64 %or44, 0, !dbg !6940
  %conv46 = zext i1 %cmp45 to i32, !dbg !6940
  %conv47 = sext i32 %conv46 to i64, !dbg !6941
  %41 = load i64, i64* %zSig, align 8, !dbg !6942
  %or48 = or i64 %41, %conv47, !dbg !6942
  store i64 %or48, i64* %zSig, align 8, !dbg !6942
  br label %if.end49, !dbg !6943

if.end49:                                         ; preds = %while.end, %if.end23
  %42 = load i32, i32* %zExp, align 4, !dbg !6944
  %43 = load i64, i64* %zSig, align 8, !dbg !6945
  %call50 = call i64 @roundAndPackFloat64(i32 0, i32 %42, i64 %43), !dbg !6946
  store i64 %call50, i64* %retval, align 8, !dbg !6947
  br label %return, !dbg !6947

return:                                           ; preds = %if.end49, %if.then21, %if.end14, %if.then13, %if.end7, %if.then6, %if.then3
  %44 = load i64, i64* %retval, align 8, !dbg !6948
  ret i64 %44, !dbg !6948
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_eq(i64 %a, i64 %b) #0 !dbg !6949 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6952, metadata !DIExpression()), !dbg !6953
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !6954, metadata !DIExpression()), !dbg !6955
  %0 = load i64, i64* %a.addr, align 8, !dbg !6956
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !6958
  %cmp = icmp eq i32 %call, 2047, !dbg !6959
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6960

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !6961
  %call1 = call i64 @extractFloat64Frac(i64 %1), !dbg !6962
  %tobool = icmp ne i64 %call1, 0, !dbg !6962
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6963

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !6964
  %call2 = call i32 @extractFloat64Exp(i64 %2), !dbg !6965
  %cmp3 = icmp eq i32 %call2, 2047, !dbg !6966
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !6967

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %b.addr, align 8, !dbg !6968
  %call5 = call i64 @extractFloat64Frac(i64 %3), !dbg !6969
  %tobool6 = icmp ne i64 %call5, 0, !dbg !6969
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !6970

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %4 = load i64, i64* %a.addr, align 8, !dbg !6971
  %call7 = call zeroext i1 @float64_is_nan(i64 %4), !dbg !6974
  br i1 %call7, label %if.then10, label %lor.lhs.false8, !dbg !6975

lor.lhs.false8:                                   ; preds = %if.then
  %5 = load i64, i64* %b.addr, align 8, !dbg !6976
  %call9 = call zeroext i1 @float64_is_nan(i64 %5), !dbg !6977
  br i1 %call9, label %if.then10, label %if.end, !dbg !6978

if.then10:                                        ; preds = %lor.lhs.false8, %if.then
  call void @float_raise(i32 16), !dbg !6979
  br label %if.end, !dbg !6981

if.end:                                           ; preds = %if.then10, %lor.lhs.false8
  store i1 false, i1* %retval, align 1, !dbg !6982
  br label %return, !dbg !6982

if.end11:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %6 = load i64, i64* %a.addr, align 8, !dbg !6983
  %7 = load i64, i64* %b.addr, align 8, !dbg !6984
  %cmp12 = icmp eq i64 %6, %7, !dbg !6985
  br i1 %cmp12, label %lor.end, label %lor.rhs, !dbg !6986

lor.rhs:                                          ; preds = %if.end11
  %8 = load i64, i64* %a.addr, align 8, !dbg !6987
  %9 = load i64, i64* %b.addr, align 8, !dbg !6988
  %or = or i64 %8, %9, !dbg !6989
  %shl = shl i64 %or, 1, !dbg !6990
  %cmp13 = icmp eq i64 %shl, 0, !dbg !6991
  br label %lor.end, !dbg !6986

lor.end:                                          ; preds = %lor.rhs, %if.end11
  %10 = phi i1 [ true, %if.end11 ], [ %cmp13, %lor.rhs ]
  store i1 %10, i1* %retval, align 1, !dbg !6992
  br label %return, !dbg !6992

return:                                           ; preds = %lor.end, %if.end
  %11 = load i1, i1* %retval, align 1, !dbg !6993
  ret i1 %11, !dbg !6993
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_le(i64 %a, i64 %b) #0 !dbg !6994 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !6995, metadata !DIExpression()), !dbg !6996
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !6997, metadata !DIExpression()), !dbg !6998
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !6999, metadata !DIExpression()), !dbg !7000
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !7001, metadata !DIExpression()), !dbg !7002
  %0 = load i64, i64* %a.addr, align 8, !dbg !7003
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !7005
  %cmp = icmp eq i32 %call, 2047, !dbg !7006
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7007

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !7008
  %call1 = call i64 @extractFloat64Frac(i64 %1), !dbg !7009
  %tobool = icmp ne i64 %call1, 0, !dbg !7009
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7010

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !7011
  %call2 = call i32 @extractFloat64Exp(i64 %2), !dbg !7012
  %cmp3 = icmp eq i32 %call2, 2047, !dbg !7013
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !7014

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %b.addr, align 8, !dbg !7015
  %call5 = call i64 @extractFloat64Frac(i64 %3), !dbg !7016
  %tobool6 = icmp ne i64 %call5, 0, !dbg !7016
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7017

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !7018
  store i1 false, i1* %retval, align 1, !dbg !7020
  br label %return, !dbg !7020

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %4 = load i64, i64* %a.addr, align 8, !dbg !7021
  %call7 = call i32 @extractFloat64Sign(i64 %4), !dbg !7022
  store i32 %call7, i32* %aSign, align 4, !dbg !7023
  %5 = load i64, i64* %b.addr, align 8, !dbg !7024
  %call8 = call i32 @extractFloat64Sign(i64 %5), !dbg !7025
  store i32 %call8, i32* %bSign, align 4, !dbg !7026
  %6 = load i32, i32* %aSign, align 4, !dbg !7027
  %7 = load i32, i32* %bSign, align 4, !dbg !7029
  %cmp9 = icmp ne i32 %6, %7, !dbg !7030
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !7031

if.then10:                                        ; preds = %if.end
  %8 = load i32, i32* %aSign, align 4, !dbg !7032
  %tobool11 = icmp ne i32 %8, 0, !dbg !7032
  br i1 %tobool11, label %lor.end, label %lor.rhs, !dbg !7033

lor.rhs:                                          ; preds = %if.then10
  %9 = load i64, i64* %a.addr, align 8, !dbg !7034
  %10 = load i64, i64* %b.addr, align 8, !dbg !7035
  %or = or i64 %9, %10, !dbg !7036
  %shl = shl i64 %or, 1, !dbg !7037
  %cmp12 = icmp eq i64 %shl, 0, !dbg !7038
  br label %lor.end, !dbg !7033

lor.end:                                          ; preds = %lor.rhs, %if.then10
  %11 = phi i1 [ true, %if.then10 ], [ %cmp12, %lor.rhs ]
  store i1 %11, i1* %retval, align 1, !dbg !7039
  br label %return, !dbg !7039

if.end13:                                         ; preds = %if.end
  %12 = load i64, i64* %a.addr, align 8, !dbg !7040
  %13 = load i64, i64* %b.addr, align 8, !dbg !7041
  %cmp14 = icmp eq i64 %12, %13, !dbg !7042
  br i1 %cmp14, label %lor.end18, label %lor.rhs15, !dbg !7043

lor.rhs15:                                        ; preds = %if.end13
  %14 = load i32, i32* %aSign, align 4, !dbg !7044
  %15 = load i64, i64* %a.addr, align 8, !dbg !7045
  %16 = load i64, i64* %b.addr, align 8, !dbg !7046
  %cmp16 = icmp ult i64 %15, %16, !dbg !7047
  %conv = zext i1 %cmp16 to i32, !dbg !7047
  %xor = xor i32 %14, %conv, !dbg !7048
  %tobool17 = icmp ne i32 %xor, 0, !dbg !7043
  br label %lor.end18, !dbg !7043

lor.end18:                                        ; preds = %lor.rhs15, %if.end13
  %17 = phi i1 [ true, %if.end13 ], [ %tobool17, %lor.rhs15 ]
  store i1 %17, i1* %retval, align 1, !dbg !7049
  br label %return, !dbg !7049

return:                                           ; preds = %lor.end18, %lor.end, %if.then
  %18 = load i1, i1* %retval, align 1, !dbg !7050
  ret i1 %18, !dbg !7050
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_lt(i64 %a, i64 %b) #0 !dbg !7051 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7052, metadata !DIExpression()), !dbg !7053
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7054, metadata !DIExpression()), !dbg !7055
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7056, metadata !DIExpression()), !dbg !7057
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !7058, metadata !DIExpression()), !dbg !7059
  %0 = load i64, i64* %a.addr, align 8, !dbg !7060
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !7062
  %cmp = icmp eq i32 %call, 2047, !dbg !7063
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7064

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !7065
  %call1 = call i64 @extractFloat64Frac(i64 %1), !dbg !7066
  %tobool = icmp ne i64 %call1, 0, !dbg !7066
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7067

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !7068
  %call2 = call i32 @extractFloat64Exp(i64 %2), !dbg !7069
  %cmp3 = icmp eq i32 %call2, 2047, !dbg !7070
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !7071

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %b.addr, align 8, !dbg !7072
  %call5 = call i64 @extractFloat64Frac(i64 %3), !dbg !7073
  %tobool6 = icmp ne i64 %call5, 0, !dbg !7073
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7074

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !7075
  store i1 false, i1* %retval, align 1, !dbg !7077
  br label %return, !dbg !7077

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %4 = load i64, i64* %a.addr, align 8, !dbg !7078
  %call7 = call i32 @extractFloat64Sign(i64 %4), !dbg !7079
  store i32 %call7, i32* %aSign, align 4, !dbg !7080
  %5 = load i64, i64* %b.addr, align 8, !dbg !7081
  %call8 = call i32 @extractFloat64Sign(i64 %5), !dbg !7082
  store i32 %call8, i32* %bSign, align 4, !dbg !7083
  %6 = load i32, i32* %aSign, align 4, !dbg !7084
  %7 = load i32, i32* %bSign, align 4, !dbg !7086
  %cmp9 = icmp ne i32 %6, %7, !dbg !7087
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !7088

if.then10:                                        ; preds = %if.end
  %8 = load i32, i32* %aSign, align 4, !dbg !7089
  %tobool11 = icmp ne i32 %8, 0, !dbg !7089
  br i1 %tobool11, label %land.rhs, label %land.end, !dbg !7090

land.rhs:                                         ; preds = %if.then10
  %9 = load i64, i64* %a.addr, align 8, !dbg !7091
  %10 = load i64, i64* %b.addr, align 8, !dbg !7092
  %or = or i64 %9, %10, !dbg !7093
  %shl = shl i64 %or, 1, !dbg !7094
  %cmp12 = icmp ne i64 %shl, 0, !dbg !7095
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %11 = phi i1 [ false, %if.then10 ], [ %cmp12, %land.rhs ]
  store i1 %11, i1* %retval, align 1, !dbg !7096
  br label %return, !dbg !7096

if.end13:                                         ; preds = %if.end
  %12 = load i64, i64* %a.addr, align 8, !dbg !7097
  %13 = load i64, i64* %b.addr, align 8, !dbg !7098
  %cmp14 = icmp ne i64 %12, %13, !dbg !7099
  br i1 %cmp14, label %land.rhs15, label %land.end18, !dbg !7100

land.rhs15:                                       ; preds = %if.end13
  %14 = load i32, i32* %aSign, align 4, !dbg !7101
  %15 = load i64, i64* %a.addr, align 8, !dbg !7102
  %16 = load i64, i64* %b.addr, align 8, !dbg !7103
  %cmp16 = icmp ult i64 %15, %16, !dbg !7104
  %conv = zext i1 %cmp16 to i32, !dbg !7104
  %xor = xor i32 %14, %conv, !dbg !7105
  %tobool17 = icmp ne i32 %xor, 0, !dbg !7100
  br label %land.end18

land.end18:                                       ; preds = %land.rhs15, %if.end13
  %17 = phi i1 [ false, %if.end13 ], [ %tobool17, %land.rhs15 ]
  store i1 %17, i1* %retval, align 1, !dbg !7106
  br label %return, !dbg !7106

return:                                           ; preds = %land.end18, %land.end, %if.then
  %18 = load i1, i1* %retval, align 1, !dbg !7107
  ret i1 %18, !dbg !7107
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_ge(i64 %a, i64 %b) #0 !dbg !7108 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7109, metadata !DIExpression()), !dbg !7110
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7111, metadata !DIExpression()), !dbg !7112
  %0 = load i64, i64* %a.addr, align 8, !dbg !7113
  %1 = load i64, i64* %b.addr, align 8, !dbg !7114
  %call = call zeroext i1 @float64_lt(i64 %0, i64 %1), !dbg !7115
  %lnot = xor i1 %call, true, !dbg !7116
  ret i1 %lnot, !dbg !7117
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_gt(i64 %a, i64 %b) #0 !dbg !7118 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7119, metadata !DIExpression()), !dbg !7120
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7121, metadata !DIExpression()), !dbg !7122
  %0 = load i64, i64* %a.addr, align 8, !dbg !7123
  %1 = load i64, i64* %b.addr, align 8, !dbg !7124
  %call = call zeroext i1 @float64_le(i64 %0, i64 %1), !dbg !7125
  %lnot = xor i1 %call, true, !dbg !7126
  ret i1 %lnot, !dbg !7127
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_ge_quiet(i64 %a, i64 %b) #0 !dbg !7128 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7129, metadata !DIExpression()), !dbg !7130
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7131, metadata !DIExpression()), !dbg !7132
  %0 = load i64, i64* %a.addr, align 8, !dbg !7133
  %1 = load i64, i64* %b.addr, align 8, !dbg !7134
  %call = call zeroext i1 @float64_uno_quiet(i64 %0, i64 %1), !dbg !7135
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !7136

lor.rhs:                                          ; preds = %entry
  %2 = load i64, i64* %a.addr, align 8, !dbg !7137
  %3 = load i64, i64* %b.addr, align 8, !dbg !7138
  %call1 = call zeroext i1 @float64_ge(i64 %2, i64 %3), !dbg !7139
  br label %lor.end, !dbg !7136

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %4, !dbg !7140
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_uno_quiet(i64 %a, i64 %b) #0 !dbg !7141 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7142, metadata !DIExpression()), !dbg !7143
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7144, metadata !DIExpression()), !dbg !7145
  %0 = load i64, i64* %a.addr, align 8, !dbg !7146
  %call = call zeroext i1 @float64_is_nan(i64 %0), !dbg !7147
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !7148

lor.rhs:                                          ; preds = %entry
  %1 = load i64, i64* %b.addr, align 8, !dbg !7149
  %call1 = call zeroext i1 @float64_is_nan(i64 %1), !dbg !7150
  br label %lor.end, !dbg !7148

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %2, !dbg !7151
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_gt_quiet(i64 %a, i64 %b) #0 !dbg !7152 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7153, metadata !DIExpression()), !dbg !7154
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7155, metadata !DIExpression()), !dbg !7156
  %0 = load i64, i64* %a.addr, align 8, !dbg !7157
  %1 = load i64, i64* %b.addr, align 8, !dbg !7158
  %call = call zeroext i1 @float64_uno_quiet(i64 %0, i64 %1), !dbg !7159
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !7160

lor.rhs:                                          ; preds = %entry
  %2 = load i64, i64* %a.addr, align 8, !dbg !7161
  %3 = load i64, i64* %b.addr, align 8, !dbg !7162
  %call1 = call zeroext i1 @float64_gt(i64 %2, i64 %3), !dbg !7163
  br label %lor.end, !dbg !7160

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %4, !dbg !7164
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_ne(i64 %a, i64 %b) #0 !dbg !7165 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7166, metadata !DIExpression()), !dbg !7167
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7168, metadata !DIExpression()), !dbg !7169
  %0 = load i64, i64* %a.addr, align 8, !dbg !7170
  %1 = load i64, i64* %b.addr, align 8, !dbg !7171
  %call = call zeroext i1 @float64_eq(i64 %0, i64 %1), !dbg !7172
  %lnot = xor i1 %call, true, !dbg !7173
  ret i1 %lnot, !dbg !7174
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_one_quiet(i64 %a, i64 %b) #0 !dbg !7175 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7176, metadata !DIExpression()), !dbg !7177
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7178, metadata !DIExpression()), !dbg !7179
  %0 = load i64, i64* %a.addr, align 8, !dbg !7180
  %1 = load i64, i64* %b.addr, align 8, !dbg !7181
  %call = call zeroext i1 @float64_ord_quiet(i64 %0, i64 %1), !dbg !7182
  br i1 %call, label %land.rhs, label %land.end, !dbg !7183

land.rhs:                                         ; preds = %entry
  %2 = load i64, i64* %a.addr, align 8, !dbg !7184
  %3 = load i64, i64* %b.addr, align 8, !dbg !7185
  %call1 = call zeroext i1 @float64_ne(i64 %2, i64 %3), !dbg !7186
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %call1, %land.rhs ]
  ret i1 %4, !dbg !7187
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_ord_quiet(i64 %a, i64 %b) #0 !dbg !7188 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7189, metadata !DIExpression()), !dbg !7190
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7191, metadata !DIExpression()), !dbg !7192
  %0 = load i64, i64* %a.addr, align 8, !dbg !7193
  %call = call zeroext i1 @float64_is_nan(i64 %0), !dbg !7194
  br i1 %call, label %land.end, label %land.rhs, !dbg !7195

land.rhs:                                         ; preds = %entry
  %1 = load i64, i64* %b.addr, align 8, !dbg !7196
  %call1 = call zeroext i1 @float64_is_nan(i64 %1), !dbg !7197
  %lnot = xor i1 %call1, true, !dbg !7198
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %2, !dbg !7199
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_eq_signaling(i64 %a, i64 %b) #0 !dbg !7200 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7201, metadata !DIExpression()), !dbg !7202
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  %0 = load i64, i64* %a.addr, align 8, !dbg !7205
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !7207
  %cmp = icmp eq i32 %call, 2047, !dbg !7208
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7209

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !7210
  %call1 = call i64 @extractFloat64Frac(i64 %1), !dbg !7211
  %tobool = icmp ne i64 %call1, 0, !dbg !7211
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7212

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !7213
  %call2 = call i32 @extractFloat64Exp(i64 %2), !dbg !7214
  %cmp3 = icmp eq i32 %call2, 2047, !dbg !7215
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !7216

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %b.addr, align 8, !dbg !7217
  %call5 = call i64 @extractFloat64Frac(i64 %3), !dbg !7218
  %tobool6 = icmp ne i64 %call5, 0, !dbg !7218
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7219

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !7220
  store i1 false, i1* %retval, align 1, !dbg !7222
  br label %return, !dbg !7222

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %4 = load i64, i64* %a.addr, align 8, !dbg !7223
  %5 = load i64, i64* %b.addr, align 8, !dbg !7224
  %cmp7 = icmp eq i64 %4, %5, !dbg !7225
  br i1 %cmp7, label %lor.end, label %lor.rhs, !dbg !7226

lor.rhs:                                          ; preds = %if.end
  %6 = load i64, i64* %a.addr, align 8, !dbg !7227
  %7 = load i64, i64* %b.addr, align 8, !dbg !7228
  %or = or i64 %6, %7, !dbg !7229
  %shl = shl i64 %or, 1, !dbg !7230
  %cmp8 = icmp eq i64 %shl, 0, !dbg !7231
  br label %lor.end, !dbg !7226

lor.end:                                          ; preds = %lor.rhs, %if.end
  %8 = phi i1 [ true, %if.end ], [ %cmp8, %lor.rhs ]
  store i1 %8, i1* %retval, align 1, !dbg !7232
  br label %return, !dbg !7232

return:                                           ; preds = %lor.end, %if.then
  %9 = load i1, i1* %retval, align 1, !dbg !7233
  ret i1 %9, !dbg !7233
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_le_quiet(i64 %a, i64 %b) #0 !dbg !7234 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7235, metadata !DIExpression()), !dbg !7236
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7237, metadata !DIExpression()), !dbg !7238
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7239, metadata !DIExpression()), !dbg !7240
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !7241, metadata !DIExpression()), !dbg !7242
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7243, metadata !DIExpression()), !dbg !7244
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !7245, metadata !DIExpression()), !dbg !7246
  %0 = load i64, i64* %a.addr, align 8, !dbg !7247
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !7249
  %cmp = icmp eq i32 %call, 2047, !dbg !7250
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7251

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !7252
  %call1 = call i64 @extractFloat64Frac(i64 %1), !dbg !7253
  %tobool = icmp ne i64 %call1, 0, !dbg !7253
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7254

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !7255
  %call2 = call i32 @extractFloat64Exp(i64 %2), !dbg !7256
  %cmp3 = icmp eq i32 %call2, 2047, !dbg !7257
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !7258

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %b.addr, align 8, !dbg !7259
  %call5 = call i64 @extractFloat64Frac(i64 %3), !dbg !7260
  %tobool6 = icmp ne i64 %call5, 0, !dbg !7260
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !7261

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %4 = load i64, i64* %a.addr, align 8, !dbg !7262
  %call7 = call zeroext i1 @float64_is_nan(i64 %4), !dbg !7265
  br i1 %call7, label %if.then10, label %lor.lhs.false8, !dbg !7266

lor.lhs.false8:                                   ; preds = %if.then
  %5 = load i64, i64* %b.addr, align 8, !dbg !7267
  %call9 = call zeroext i1 @float64_is_nan(i64 %5), !dbg !7268
  br i1 %call9, label %if.then10, label %if.end, !dbg !7269

if.then10:                                        ; preds = %lor.lhs.false8, %if.then
  call void @float_raise(i32 16), !dbg !7270
  br label %if.end, !dbg !7272

if.end:                                           ; preds = %if.then10, %lor.lhs.false8
  store i1 false, i1* %retval, align 1, !dbg !7273
  br label %return, !dbg !7273

if.end11:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %6 = load i64, i64* %a.addr, align 8, !dbg !7274
  %call12 = call i32 @extractFloat64Sign(i64 %6), !dbg !7275
  store i32 %call12, i32* %aSign, align 4, !dbg !7276
  %7 = load i64, i64* %b.addr, align 8, !dbg !7277
  %call13 = call i32 @extractFloat64Sign(i64 %7), !dbg !7278
  store i32 %call13, i32* %bSign, align 4, !dbg !7279
  %8 = load i32, i32* %aSign, align 4, !dbg !7280
  %9 = load i32, i32* %bSign, align 4, !dbg !7282
  %cmp14 = icmp ne i32 %8, %9, !dbg !7283
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !7284

if.then15:                                        ; preds = %if.end11
  %10 = load i32, i32* %aSign, align 4, !dbg !7285
  %tobool16 = icmp ne i32 %10, 0, !dbg !7285
  br i1 %tobool16, label %lor.end, label %lor.rhs, !dbg !7286

lor.rhs:                                          ; preds = %if.then15
  %11 = load i64, i64* %a.addr, align 8, !dbg !7287
  %12 = load i64, i64* %b.addr, align 8, !dbg !7288
  %or = or i64 %11, %12, !dbg !7289
  %shl = shl i64 %or, 1, !dbg !7290
  %cmp17 = icmp eq i64 %shl, 0, !dbg !7291
  br label %lor.end, !dbg !7286

lor.end:                                          ; preds = %lor.rhs, %if.then15
  %13 = phi i1 [ true, %if.then15 ], [ %cmp17, %lor.rhs ]
  store i1 %13, i1* %retval, align 1, !dbg !7292
  br label %return, !dbg !7292

if.end18:                                         ; preds = %if.end11
  %14 = load i64, i64* %a.addr, align 8, !dbg !7293
  %15 = load i64, i64* %b.addr, align 8, !dbg !7294
  %cmp19 = icmp eq i64 %14, %15, !dbg !7295
  br i1 %cmp19, label %lor.end23, label %lor.rhs20, !dbg !7296

lor.rhs20:                                        ; preds = %if.end18
  %16 = load i32, i32* %aSign, align 4, !dbg !7297
  %17 = load i64, i64* %a.addr, align 8, !dbg !7298
  %18 = load i64, i64* %b.addr, align 8, !dbg !7299
  %cmp21 = icmp ult i64 %17, %18, !dbg !7300
  %conv = zext i1 %cmp21 to i32, !dbg !7300
  %xor = xor i32 %16, %conv, !dbg !7301
  %tobool22 = icmp ne i32 %xor, 0, !dbg !7296
  br label %lor.end23, !dbg !7296

lor.end23:                                        ; preds = %lor.rhs20, %if.end18
  %19 = phi i1 [ true, %if.end18 ], [ %tobool22, %lor.rhs20 ]
  store i1 %19, i1* %retval, align 1, !dbg !7302
  br label %return, !dbg !7302

return:                                           ; preds = %lor.end23, %lor.end, %if.end
  %20 = load i1, i1* %retval, align 1, !dbg !7303
  ret i1 %20, !dbg !7303
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float64_lt_quiet(i64 %a, i64 %b) #0 !dbg !7304 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7307, metadata !DIExpression()), !dbg !7308
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7309, metadata !DIExpression()), !dbg !7310
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !7311, metadata !DIExpression()), !dbg !7312
  %0 = load i64, i64* %a.addr, align 8, !dbg !7313
  %call = call i32 @extractFloat64Exp(i64 %0), !dbg !7315
  %cmp = icmp eq i32 %call, 2047, !dbg !7316
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7317

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !7318
  %call1 = call i64 @extractFloat64Frac(i64 %1), !dbg !7319
  %tobool = icmp ne i64 %call1, 0, !dbg !7319
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7320

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %b.addr, align 8, !dbg !7321
  %call2 = call i32 @extractFloat64Exp(i64 %2), !dbg !7322
  %cmp3 = icmp eq i32 %call2, 2047, !dbg !7323
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !7324

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %b.addr, align 8, !dbg !7325
  %call5 = call i64 @extractFloat64Frac(i64 %3), !dbg !7326
  %tobool6 = icmp ne i64 %call5, 0, !dbg !7326
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !7327

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %4 = load i64, i64* %a.addr, align 8, !dbg !7328
  %call7 = call zeroext i1 @float64_is_nan(i64 %4), !dbg !7331
  br i1 %call7, label %if.then10, label %lor.lhs.false8, !dbg !7332

lor.lhs.false8:                                   ; preds = %if.then
  %5 = load i64, i64* %b.addr, align 8, !dbg !7333
  %call9 = call zeroext i1 @float64_is_nan(i64 %5), !dbg !7334
  br i1 %call9, label %if.then10, label %if.end, !dbg !7335

if.then10:                                        ; preds = %lor.lhs.false8, %if.then
  call void @float_raise(i32 16), !dbg !7336
  br label %if.end, !dbg !7338

if.end:                                           ; preds = %if.then10, %lor.lhs.false8
  store i1 false, i1* %retval, align 1, !dbg !7339
  br label %return, !dbg !7339

if.end11:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %6 = load i64, i64* %a.addr, align 8, !dbg !7340
  %call12 = call i32 @extractFloat64Sign(i64 %6), !dbg !7341
  store i32 %call12, i32* %aSign, align 4, !dbg !7342
  %7 = load i64, i64* %b.addr, align 8, !dbg !7343
  %call13 = call i32 @extractFloat64Sign(i64 %7), !dbg !7344
  store i32 %call13, i32* %bSign, align 4, !dbg !7345
  %8 = load i32, i32* %aSign, align 4, !dbg !7346
  %9 = load i32, i32* %bSign, align 4, !dbg !7348
  %cmp14 = icmp ne i32 %8, %9, !dbg !7349
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !7350

if.then15:                                        ; preds = %if.end11
  %10 = load i32, i32* %aSign, align 4, !dbg !7351
  %tobool16 = icmp ne i32 %10, 0, !dbg !7351
  br i1 %tobool16, label %land.rhs, label %land.end, !dbg !7352

land.rhs:                                         ; preds = %if.then15
  %11 = load i64, i64* %a.addr, align 8, !dbg !7353
  %12 = load i64, i64* %b.addr, align 8, !dbg !7354
  %or = or i64 %11, %12, !dbg !7355
  %shl = shl i64 %or, 1, !dbg !7356
  %cmp17 = icmp ne i64 %shl, 0, !dbg !7357
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then15
  %13 = phi i1 [ false, %if.then15 ], [ %cmp17, %land.rhs ]
  store i1 %13, i1* %retval, align 1, !dbg !7358
  br label %return, !dbg !7358

if.end18:                                         ; preds = %if.end11
  %14 = load i64, i64* %a.addr, align 8, !dbg !7359
  %15 = load i64, i64* %b.addr, align 8, !dbg !7360
  %cmp19 = icmp ne i64 %14, %15, !dbg !7361
  br i1 %cmp19, label %land.rhs20, label %land.end23, !dbg !7362

land.rhs20:                                       ; preds = %if.end18
  %16 = load i32, i32* %aSign, align 4, !dbg !7363
  %17 = load i64, i64* %a.addr, align 8, !dbg !7364
  %18 = load i64, i64* %b.addr, align 8, !dbg !7365
  %cmp21 = icmp ult i64 %17, %18, !dbg !7366
  %conv = zext i1 %cmp21 to i32, !dbg !7366
  %xor = xor i32 %16, %conv, !dbg !7367
  %tobool22 = icmp ne i32 %xor, 0, !dbg !7362
  br label %land.end23

land.end23:                                       ; preds = %land.rhs20, %if.end18
  %19 = phi i1 [ false, %if.end18 ], [ %tobool22, %land.rhs20 ]
  store i1 %19, i1* %retval, align 1, !dbg !7368
  br label %return, !dbg !7368

return:                                           ; preds = %land.end23, %land.end, %if.end
  %20 = load i1, i1* %retval, align 1, !dbg !7369
  ret i1 %20, !dbg !7369
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @floatx80_to_int32(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7370 {
entry:
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7373, metadata !DIExpression()), !dbg !7374
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7375, metadata !DIExpression()), !dbg !7376
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7377, metadata !DIExpression()), !dbg !7378
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !7379, metadata !DIExpression()), !dbg !7380
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7381, metadata !DIExpression()), !dbg !7382
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7383
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7383
  %5 = load i16, i16* %4, align 8, !dbg !7383
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7383
  %7 = load i64, i64* %6, align 8, !dbg !7383
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7383
  store i64 %call, i64* %aSig, align 8, !dbg !7384
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7385
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7385
  %10 = load i16, i16* %9, align 8, !dbg !7385
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7385
  %12 = load i64, i64* %11, align 8, !dbg !7385
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7385
  store i32 %call1, i32* %aExp, align 4, !dbg !7386
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7387
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7387
  %15 = load i16, i16* %14, align 8, !dbg !7387
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7387
  %17 = load i64, i64* %16, align 8, !dbg !7387
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7387
  store i32 %call2, i32* %aSign, align 4, !dbg !7388
  %18 = load i32, i32* %aExp, align 4, !dbg !7389
  %cmp = icmp eq i32 %18, 32767, !dbg !7391
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7392

land.lhs.true:                                    ; preds = %entry
  %19 = load i64, i64* %aSig, align 8, !dbg !7393
  %shl = shl i64 %19, 1, !dbg !7394
  %tobool = icmp ne i64 %shl, 0, !dbg !7395
  br i1 %tobool, label %if.then, label %if.end, !dbg !7396

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !7397
  br label %if.end, !dbg !7398

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %20 = load i32, i32* %aExp, align 4, !dbg !7399
  %sub = sub nsw i32 16439, %20, !dbg !7400
  store i32 %sub, i32* %shiftCount, align 4, !dbg !7401
  %21 = load i32, i32* %shiftCount, align 4, !dbg !7402
  %cmp3 = icmp sle i32 %21, 0, !dbg !7404
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !7405

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %shiftCount, align 4, !dbg !7406
  br label %if.end5, !dbg !7407

if.end5:                                          ; preds = %if.then4, %if.end
  %22 = load i64, i64* %aSig, align 8, !dbg !7408
  %23 = load i32, i32* %shiftCount, align 4, !dbg !7409
  call void @shift64RightJamming(i64 %22, i32 %23, i64* %aSig), !dbg !7410
  %24 = load i32, i32* %aSign, align 4, !dbg !7411
  %25 = load i64, i64* %aSig, align 8, !dbg !7412
  %call6 = call i32 @roundAndPackInt32(i32 %24, i64 %25), !dbg !7413
  ret i32 %call6, !dbg !7414
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @floatx80_to_int32_round_to_zero(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7415 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %savedASig = alloca i64, align 8
  %z = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7416, metadata !DIExpression()), !dbg !7417
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7418, metadata !DIExpression()), !dbg !7419
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7420, metadata !DIExpression()), !dbg !7421
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !7422, metadata !DIExpression()), !dbg !7423
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7424, metadata !DIExpression()), !dbg !7425
  call void @llvm.dbg.declare(metadata i64* %savedASig, metadata !7426, metadata !DIExpression()), !dbg !7427
  call void @llvm.dbg.declare(metadata i32* %z, metadata !7428, metadata !DIExpression()), !dbg !7429
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7430
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7430
  %5 = load i16, i16* %4, align 8, !dbg !7430
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7430
  %7 = load i64, i64* %6, align 8, !dbg !7430
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7430
  store i64 %call, i64* %aSig, align 8, !dbg !7431
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7432
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7432
  %10 = load i16, i16* %9, align 8, !dbg !7432
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7432
  %12 = load i64, i64* %11, align 8, !dbg !7432
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7432
  store i32 %call1, i32* %aExp, align 4, !dbg !7433
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7434
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7434
  %15 = load i16, i16* %14, align 8, !dbg !7434
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7434
  %17 = load i64, i64* %16, align 8, !dbg !7434
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7434
  store i32 %call2, i32* %aSign, align 4, !dbg !7435
  %18 = load i32, i32* %aExp, align 4, !dbg !7436
  %cmp = icmp slt i32 16414, %18, !dbg !7438
  br i1 %cmp, label %if.then, label %if.else, !dbg !7439

if.then:                                          ; preds = %entry
  %19 = load i32, i32* %aExp, align 4, !dbg !7440
  %cmp3 = icmp eq i32 %19, 32767, !dbg !7443
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !7444

land.lhs.true:                                    ; preds = %if.then
  %20 = load i64, i64* %aSig, align 8, !dbg !7445
  %shl = shl i64 %20, 1, !dbg !7446
  %tobool = icmp ne i64 %shl, 0, !dbg !7447
  br i1 %tobool, label %if.then4, label %if.end, !dbg !7448

if.then4:                                         ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !7449
  br label %if.end, !dbg !7450

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %invalid, !dbg !7451

if.else:                                          ; preds = %entry
  %21 = load i32, i32* %aExp, align 4, !dbg !7452
  %cmp5 = icmp slt i32 %21, 16383, !dbg !7454
  br i1 %cmp5, label %if.then6, label %if.end11, !dbg !7455

if.then6:                                         ; preds = %if.else
  %22 = load i32, i32* %aExp, align 4, !dbg !7456
  %tobool7 = icmp ne i32 %22, 0, !dbg !7456
  br i1 %tobool7, label %if.then9, label %lor.lhs.false, !dbg !7459

lor.lhs.false:                                    ; preds = %if.then6
  %23 = load i64, i64* %aSig, align 8, !dbg !7460
  %tobool8 = icmp ne i64 %23, 0, !dbg !7460
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !7461

if.then9:                                         ; preds = %lor.lhs.false, %if.then6
  %24 = load i32, i32* @float_exception_flags, align 4, !dbg !7462
  %or = or i32 %24, 1, !dbg !7462
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !7462
  br label %if.end10, !dbg !7463

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !7464
  br label %return, !dbg !7464

if.end11:                                         ; preds = %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11
  %25 = load i32, i32* %aExp, align 4, !dbg !7465
  %sub = sub nsw i32 16446, %25, !dbg !7466
  store i32 %sub, i32* %shiftCount, align 4, !dbg !7467
  %26 = load i64, i64* %aSig, align 8, !dbg !7468
  store i64 %26, i64* %savedASig, align 8, !dbg !7469
  %27 = load i32, i32* %shiftCount, align 4, !dbg !7470
  %28 = load i64, i64* %aSig, align 8, !dbg !7471
  %sh_prom = zext i32 %27 to i64, !dbg !7471
  %shr = lshr i64 %28, %sh_prom, !dbg !7471
  store i64 %shr, i64* %aSig, align 8, !dbg !7471
  %29 = load i64, i64* %aSig, align 8, !dbg !7472
  %conv = trunc i64 %29 to i32, !dbg !7472
  store i32 %conv, i32* %z, align 4, !dbg !7473
  %30 = load i32, i32* %aSign, align 4, !dbg !7474
  %tobool13 = icmp ne i32 %30, 0, !dbg !7474
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !7476

if.then14:                                        ; preds = %if.end12
  %31 = load i32, i32* %z, align 4, !dbg !7477
  %sub15 = sub nsw i32 0, %31, !dbg !7478
  store i32 %sub15, i32* %z, align 4, !dbg !7479
  br label %if.end16, !dbg !7480

if.end16:                                         ; preds = %if.then14, %if.end12
  %32 = load i32, i32* %z, align 4, !dbg !7481
  %cmp17 = icmp slt i32 %32, 0, !dbg !7483
  %conv18 = zext i1 %cmp17 to i32, !dbg !7483
  %33 = load i32, i32* %aSign, align 4, !dbg !7484
  %xor = xor i32 %conv18, %33, !dbg !7485
  %tobool19 = icmp ne i32 %xor, 0, !dbg !7485
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !7486

if.then20:                                        ; preds = %if.end16
  br label %invalid, !dbg !7487

invalid:                                          ; preds = %if.then20, %if.end
  call void @float_raise(i32 16), !dbg !7488
  %34 = load i32, i32* %aSign, align 4, !dbg !7490
  %tobool21 = icmp ne i32 %34, 0, !dbg !7490
  %35 = zext i1 %tobool21 to i64, !dbg !7490
  %cond = select i1 %tobool21, i32 -2147483648, i32 2147483647, !dbg !7490
  store i32 %cond, i32* %retval, align 4, !dbg !7491
  br label %return, !dbg !7491

if.end22:                                         ; preds = %if.end16
  %36 = load i64, i64* %aSig, align 8, !dbg !7492
  %37 = load i32, i32* %shiftCount, align 4, !dbg !7494
  %sh_prom23 = zext i32 %37 to i64, !dbg !7495
  %shl24 = shl i64 %36, %sh_prom23, !dbg !7495
  %38 = load i64, i64* %savedASig, align 8, !dbg !7496
  %cmp25 = icmp ne i64 %shl24, %38, !dbg !7497
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !7498

if.then27:                                        ; preds = %if.end22
  %39 = load i32, i32* @float_exception_flags, align 4, !dbg !7499
  %or28 = or i32 %39, 1, !dbg !7499
  store i32 %or28, i32* @float_exception_flags, align 4, !dbg !7499
  br label %if.end29, !dbg !7501

if.end29:                                         ; preds = %if.then27, %if.end22
  %40 = load i32, i32* %z, align 4, !dbg !7502
  store i32 %40, i32* %retval, align 4, !dbg !7503
  br label %return, !dbg !7503

return:                                           ; preds = %if.end29, %invalid, %if.end10
  %41 = load i32, i32* %retval, align 4, !dbg !7504
  ret i32 %41, !dbg !7504
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @floatx80_to_int64(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7505 {
entry:
  %retval = alloca i64, align 8
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %aSigExtra = alloca i64, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7508, metadata !DIExpression()), !dbg !7509
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7510, metadata !DIExpression()), !dbg !7511
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7512, metadata !DIExpression()), !dbg !7513
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !7514, metadata !DIExpression()), !dbg !7515
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7516, metadata !DIExpression()), !dbg !7517
  call void @llvm.dbg.declare(metadata i64* %aSigExtra, metadata !7518, metadata !DIExpression()), !dbg !7519
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7520
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7520
  %5 = load i16, i16* %4, align 8, !dbg !7520
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7520
  %7 = load i64, i64* %6, align 8, !dbg !7520
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7520
  store i64 %call, i64* %aSig, align 8, !dbg !7521
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7522
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7522
  %10 = load i16, i16* %9, align 8, !dbg !7522
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7522
  %12 = load i64, i64* %11, align 8, !dbg !7522
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7522
  store i32 %call1, i32* %aExp, align 4, !dbg !7523
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7524
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7524
  %15 = load i16, i16* %14, align 8, !dbg !7524
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7524
  %17 = load i64, i64* %16, align 8, !dbg !7524
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7524
  store i32 %call2, i32* %aSign, align 4, !dbg !7525
  %18 = load i32, i32* %aExp, align 4, !dbg !7526
  %sub = sub nsw i32 16446, %18, !dbg !7527
  store i32 %sub, i32* %shiftCount, align 4, !dbg !7528
  %19 = load i32, i32* %shiftCount, align 4, !dbg !7529
  %cmp = icmp sle i32 %19, 0, !dbg !7531
  br i1 %cmp, label %if.then, label %if.else, !dbg !7532

if.then:                                          ; preds = %entry
  %20 = load i32, i32* %shiftCount, align 4, !dbg !7533
  %tobool = icmp ne i32 %20, 0, !dbg !7533
  br i1 %tobool, label %if.then3, label %if.end8, !dbg !7536

if.then3:                                         ; preds = %if.then
  call void @float_raise(i32 16), !dbg !7537
  %21 = load i32, i32* %aSign, align 4, !dbg !7539
  %tobool4 = icmp ne i32 %21, 0, !dbg !7539
  br i1 %tobool4, label %lor.lhs.false, label %if.then7, !dbg !7541

lor.lhs.false:                                    ; preds = %if.then3
  %22 = load i32, i32* %aExp, align 4, !dbg !7542
  %cmp5 = icmp eq i32 %22, 32767, !dbg !7543
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !7544

land.lhs.true:                                    ; preds = %lor.lhs.false
  %23 = load i64, i64* %aSig, align 8, !dbg !7545
  %cmp6 = icmp ne i64 %23, -9223372036854775808, !dbg !7546
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !7547

if.then7:                                         ; preds = %land.lhs.true, %if.then3
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !7548
  br label %return, !dbg !7548

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !7550
  br label %return, !dbg !7550

if.end8:                                          ; preds = %if.then
  store i64 0, i64* %aSigExtra, align 8, !dbg !7551
  br label %if.end9, !dbg !7552

if.else:                                          ; preds = %entry
  %24 = load i64, i64* %aSig, align 8, !dbg !7553
  %25 = load i32, i32* %shiftCount, align 4, !dbg !7555
  call void @shift64ExtraRightJamming(i64 %24, i64 0, i32 %25, i64* %aSig, i64* %aSigExtra), !dbg !7556
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.end8
  %26 = load i32, i32* %aSign, align 4, !dbg !7557
  %27 = load i64, i64* %aSig, align 8, !dbg !7558
  %28 = load i64, i64* %aSigExtra, align 8, !dbg !7559
  %call10 = call i64 @roundAndPackInt64(i32 %26, i64 %27, i64 %28), !dbg !7560
  store i64 %call10, i64* %retval, align 8, !dbg !7561
  br label %return, !dbg !7561

return:                                           ; preds = %if.end9, %if.end, %if.then7
  %29 = load i64, i64* %retval, align 8, !dbg !7562
  ret i64 %29, !dbg !7562
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @floatx80_to_int64_round_to_zero(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7563 {
entry:
  %retval = alloca i64, align 8
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig = alloca i64, align 8
  %z = alloca i64, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7564, metadata !DIExpression()), !dbg !7565
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7566, metadata !DIExpression()), !dbg !7567
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7568, metadata !DIExpression()), !dbg !7569
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !7570, metadata !DIExpression()), !dbg !7571
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7572, metadata !DIExpression()), !dbg !7573
  call void @llvm.dbg.declare(metadata i64* %z, metadata !7574, metadata !DIExpression()), !dbg !7575
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7576
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7576
  %5 = load i16, i16* %4, align 8, !dbg !7576
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7576
  %7 = load i64, i64* %6, align 8, !dbg !7576
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7576
  store i64 %call, i64* %aSig, align 8, !dbg !7577
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7578
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7578
  %10 = load i16, i16* %9, align 8, !dbg !7578
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7578
  %12 = load i64, i64* %11, align 8, !dbg !7578
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7578
  store i32 %call1, i32* %aExp, align 4, !dbg !7579
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7580
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7580
  %15 = load i16, i16* %14, align 8, !dbg !7580
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7580
  %17 = load i64, i64* %16, align 8, !dbg !7580
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7580
  store i32 %call2, i32* %aSign, align 4, !dbg !7581
  %18 = load i32, i32* %aExp, align 4, !dbg !7582
  %sub = sub nsw i32 %18, 16446, !dbg !7583
  store i32 %sub, i32* %shiftCount, align 4, !dbg !7584
  %19 = load i32, i32* %shiftCount, align 4, !dbg !7585
  %cmp = icmp sle i32 0, %19, !dbg !7587
  br i1 %cmp, label %if.then, label %if.else, !dbg !7588

if.then:                                          ; preds = %entry
  %20 = load i64, i64* %aSig, align 8, !dbg !7589
  %and = and i64 %20, 9223372036854775807, !dbg !7589
  store i64 %and, i64* %aSig, align 8, !dbg !7589
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !7591
  %21 = load i16, i16* %high, align 8, !dbg !7591
  %conv = zext i16 %21 to i32, !dbg !7593
  %cmp3 = icmp ne i32 %conv, 49214, !dbg !7594
  br i1 %cmp3, label %if.then5, label %lor.lhs.false, !dbg !7595

lor.lhs.false:                                    ; preds = %if.then
  %22 = load i64, i64* %aSig, align 8, !dbg !7596
  %tobool = icmp ne i64 %22, 0, !dbg !7596
  br i1 %tobool, label %if.then5, label %if.end12, !dbg !7597

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  call void @float_raise(i32 16), !dbg !7598
  %23 = load i32, i32* %aSign, align 4, !dbg !7600
  %tobool6 = icmp ne i32 %23, 0, !dbg !7600
  br i1 %tobool6, label %lor.lhs.false7, label %if.then11, !dbg !7602

lor.lhs.false7:                                   ; preds = %if.then5
  %24 = load i32, i32* %aExp, align 4, !dbg !7603
  %cmp8 = icmp eq i32 %24, 32767, !dbg !7604
  br i1 %cmp8, label %land.lhs.true, label %if.end, !dbg !7605

land.lhs.true:                                    ; preds = %lor.lhs.false7
  %25 = load i64, i64* %aSig, align 8, !dbg !7606
  %tobool10 = icmp ne i64 %25, 0, !dbg !7606
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !7607

if.then11:                                        ; preds = %land.lhs.true, %if.then5
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !7608
  br label %return, !dbg !7608

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false7
  br label %if.end12, !dbg !7610

if.end12:                                         ; preds = %if.end, %lor.lhs.false
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !7611
  br label %return, !dbg !7611

if.else:                                          ; preds = %entry
  %26 = load i32, i32* %aExp, align 4, !dbg !7612
  %cmp13 = icmp slt i32 %26, 16383, !dbg !7614
  br i1 %cmp13, label %if.then15, label %if.end21, !dbg !7615

if.then15:                                        ; preds = %if.else
  %27 = load i32, i32* %aExp, align 4, !dbg !7616
  %conv16 = sext i32 %27 to i64, !dbg !7616
  %28 = load i64, i64* %aSig, align 8, !dbg !7619
  %or = or i64 %conv16, %28, !dbg !7620
  %tobool17 = icmp ne i64 %or, 0, !dbg !7620
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !7621

if.then18:                                        ; preds = %if.then15
  %29 = load i32, i32* @float_exception_flags, align 4, !dbg !7622
  %or19 = or i32 %29, 1, !dbg !7622
  store i32 %or19, i32* @float_exception_flags, align 4, !dbg !7622
  br label %if.end20, !dbg !7623

if.end20:                                         ; preds = %if.then18, %if.then15
  store i64 0, i64* %retval, align 8, !dbg !7624
  br label %return, !dbg !7624

if.end21:                                         ; preds = %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21
  %30 = load i64, i64* %aSig, align 8, !dbg !7625
  %31 = load i32, i32* %shiftCount, align 4, !dbg !7626
  %sub23 = sub nsw i32 0, %31, !dbg !7627
  %sh_prom = zext i32 %sub23 to i64, !dbg !7628
  %shr = lshr i64 %30, %sh_prom, !dbg !7628
  store i64 %shr, i64* %z, align 8, !dbg !7629
  %32 = load i64, i64* %aSig, align 8, !dbg !7630
  %33 = load i32, i32* %shiftCount, align 4, !dbg !7632
  %and24 = and i32 %33, 63, !dbg !7633
  %sh_prom25 = zext i32 %and24 to i64, !dbg !7634
  %shl = shl i64 %32, %sh_prom25, !dbg !7634
  %tobool26 = icmp ne i64 %shl, 0, !dbg !7635
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !7636

if.then27:                                        ; preds = %if.end22
  %34 = load i32, i32* @float_exception_flags, align 4, !dbg !7637
  %or28 = or i32 %34, 1, !dbg !7637
  store i32 %or28, i32* @float_exception_flags, align 4, !dbg !7637
  br label %if.end29, !dbg !7639

if.end29:                                         ; preds = %if.then27, %if.end22
  %35 = load i32, i32* %aSign, align 4, !dbg !7640
  %tobool30 = icmp ne i32 %35, 0, !dbg !7640
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !7642

if.then31:                                        ; preds = %if.end29
  %36 = load i64, i64* %z, align 8, !dbg !7643
  %sub32 = sub nsw i64 0, %36, !dbg !7644
  store i64 %sub32, i64* %z, align 8, !dbg !7645
  br label %if.end33, !dbg !7646

if.end33:                                         ; preds = %if.then31, %if.end29
  %37 = load i64, i64* %z, align 8, !dbg !7647
  store i64 %37, i64* %retval, align 8, !dbg !7648
  br label %return, !dbg !7648

return:                                           ; preds = %if.end33, %if.end20, %if.end12, %if.then11
  %38 = load i64, i64* %retval, align 8, !dbg !7649
  ret i64 %38, !dbg !7649
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @floatx80_to_float32(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7650 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7653, metadata !DIExpression()), !dbg !7654
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7655, metadata !DIExpression()), !dbg !7656
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7657, metadata !DIExpression()), !dbg !7658
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7659, metadata !DIExpression()), !dbg !7660
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7661
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7661
  %5 = load i16, i16* %4, align 8, !dbg !7661
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7661
  %7 = load i64, i64* %6, align 8, !dbg !7661
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7661
  store i64 %call, i64* %aSig, align 8, !dbg !7662
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7663
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7663
  %10 = load i16, i16* %9, align 8, !dbg !7663
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7663
  %12 = load i64, i64* %11, align 8, !dbg !7663
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7663
  store i32 %call1, i32* %aExp, align 4, !dbg !7664
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7665
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7665
  %15 = load i16, i16* %14, align 8, !dbg !7665
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7665
  %17 = load i64, i64* %16, align 8, !dbg !7665
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7665
  store i32 %call2, i32* %aSign, align 4, !dbg !7666
  %18 = load i32, i32* %aExp, align 4, !dbg !7667
  %cmp = icmp eq i32 %18, 32767, !dbg !7669
  br i1 %cmp, label %if.then, label %if.end6, !dbg !7670

if.then:                                          ; preds = %entry
  %19 = load i64, i64* %aSig, align 8, !dbg !7671
  %shl = shl i64 %19, 1, !dbg !7674
  %tobool = icmp ne i64 %shl, 0, !dbg !7675
  br i1 %tobool, label %if.then3, label %if.end, !dbg !7676

if.then3:                                         ; preds = %if.then
  %20 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7677
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !7677
  %22 = load i16, i16* %21, align 8, !dbg !7677
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !7677
  %24 = load i64, i64* %23, align 8, !dbg !7677
  call void @floatx80ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i16 %22, i64 %24), !dbg !7677
  %call4 = call i32 @commonNaNToFloat32(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !7679
  store i32 %call4, i32* %retval, align 4, !dbg !7680
  br label %return, !dbg !7680

if.end:                                           ; preds = %if.then
  %25 = load i32, i32* %aSign, align 4, !dbg !7681
  %call5 = call i32 @packFloat32(i32 %25, i32 255, i32 0), !dbg !7682
  store i32 %call5, i32* %retval, align 4, !dbg !7683
  br label %return, !dbg !7683

if.end6:                                          ; preds = %entry
  %26 = load i64, i64* %aSig, align 8, !dbg !7684
  call void @shift64RightJamming(i64 %26, i32 33, i64* %aSig), !dbg !7685
  %27 = load i32, i32* %aExp, align 4, !dbg !7686
  %tobool7 = icmp ne i32 %27, 0, !dbg !7686
  br i1 %tobool7, label %if.then9, label %lor.lhs.false, !dbg !7688

lor.lhs.false:                                    ; preds = %if.end6
  %28 = load i64, i64* %aSig, align 8, !dbg !7689
  %tobool8 = icmp ne i64 %28, 0, !dbg !7689
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !7690

if.then9:                                         ; preds = %lor.lhs.false, %if.end6
  %29 = load i32, i32* %aExp, align 4, !dbg !7691
  %sub = sub nsw i32 %29, 16257, !dbg !7691
  store i32 %sub, i32* %aExp, align 4, !dbg !7691
  br label %if.end10, !dbg !7692

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  %30 = load i32, i32* %aSign, align 4, !dbg !7693
  %31 = load i32, i32* %aExp, align 4, !dbg !7694
  %32 = load i64, i64* %aSig, align 8, !dbg !7695
  %conv = trunc i64 %32 to i32, !dbg !7695
  %call11 = call i32 @roundAndPackFloat32(i32 %30, i32 %31, i32 %conv), !dbg !7696
  store i32 %call11, i32* %retval, align 4, !dbg !7697
  br label %return, !dbg !7697

return:                                           ; preds = %if.end10, %if.end, %if.then3
  %33 = load i32, i32* %retval, align 4, !dbg !7698
  ret i32 %33, !dbg !7698
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @floatx80ToCommonNaN(%struct.commonNaNT* noalias sret %agg.result, i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7699 {
entry:
  %a = alloca %struct.floatx80, align 8
  %z = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7702, metadata !DIExpression()), !dbg !7703
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %z, metadata !7704, metadata !DIExpression()), !dbg !7705
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7706
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7706
  %5 = load i16, i16* %4, align 8, !dbg !7706
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7706
  %7 = load i64, i64* %6, align 8, !dbg !7706
  %call = call zeroext i1 @floatx80_is_signaling_nan(i16 %5, i64 %7), !dbg !7706
  br i1 %call, label %if.then, label %if.end, !dbg !7708

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !7709
  br label %if.end, !dbg !7709

if.end:                                           ; preds = %if.then, %entry
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !7710
  %8 = load i16, i16* %high, align 8, !dbg !7710
  %conv = zext i16 %8 to i32, !dbg !7711
  %shr = ashr i32 %conv, 15, !dbg !7712
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 0, !dbg !7713
  store i32 %shr, i32* %sign, align 8, !dbg !7714
  %low = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 2, !dbg !7715
  store i64 0, i64* %low, align 8, !dbg !7716
  %low1 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !7717
  %9 = load i64, i64* %low1, align 8, !dbg !7717
  %shl = shl i64 %9, 1, !dbg !7718
  %high2 = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 1, !dbg !7719
  store i64 %shl, i64* %high2, align 8, !dbg !7720
  %10 = bitcast %struct.commonNaNT* %agg.result to i8*, !dbg !7721
  %11 = bitcast %struct.commonNaNT* %z to i8*, !dbg !7721
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 24, i32 8, i1 false), !dbg !7721
  ret void, !dbg !7722
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @floatx80_to_float64(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7723 {
entry:
  %retval = alloca i64, align 8
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %zSig = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7726, metadata !DIExpression()), !dbg !7727
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7728, metadata !DIExpression()), !dbg !7729
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7730, metadata !DIExpression()), !dbg !7731
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7732, metadata !DIExpression()), !dbg !7733
  call void @llvm.dbg.declare(metadata i64* %zSig, metadata !7734, metadata !DIExpression()), !dbg !7735
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7736
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7736
  %5 = load i16, i16* %4, align 8, !dbg !7736
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7736
  %7 = load i64, i64* %6, align 8, !dbg !7736
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7736
  store i64 %call, i64* %aSig, align 8, !dbg !7737
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7738
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7738
  %10 = load i16, i16* %9, align 8, !dbg !7738
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7738
  %12 = load i64, i64* %11, align 8, !dbg !7738
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7738
  store i32 %call1, i32* %aExp, align 4, !dbg !7739
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7740
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7740
  %15 = load i16, i16* %14, align 8, !dbg !7740
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7740
  %17 = load i64, i64* %16, align 8, !dbg !7740
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7740
  store i32 %call2, i32* %aSign, align 4, !dbg !7741
  %18 = load i32, i32* %aExp, align 4, !dbg !7742
  %cmp = icmp eq i32 %18, 32767, !dbg !7744
  br i1 %cmp, label %if.then, label %if.end6, !dbg !7745

if.then:                                          ; preds = %entry
  %19 = load i64, i64* %aSig, align 8, !dbg !7746
  %shl = shl i64 %19, 1, !dbg !7749
  %tobool = icmp ne i64 %shl, 0, !dbg !7750
  br i1 %tobool, label %if.then3, label %if.end, !dbg !7751

if.then3:                                         ; preds = %if.then
  %20 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7752
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !7752
  %22 = load i16, i16* %21, align 8, !dbg !7752
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !7752
  %24 = load i64, i64* %23, align 8, !dbg !7752
  call void @floatx80ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i16 %22, i64 %24), !dbg !7752
  %call4 = call i64 @commonNaNToFloat64(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !7754
  store i64 %call4, i64* %retval, align 8, !dbg !7755
  br label %return, !dbg !7755

if.end:                                           ; preds = %if.then
  %25 = load i32, i32* %aSign, align 4, !dbg !7756
  %call5 = call i64 @packFloat64(i32 %25, i32 2047, i64 0), !dbg !7757
  store i64 %call5, i64* %retval, align 8, !dbg !7758
  br label %return, !dbg !7758

if.end6:                                          ; preds = %entry
  %26 = load i64, i64* %aSig, align 8, !dbg !7759
  call void @shift64RightJamming(i64 %26, i32 1, i64* %zSig), !dbg !7760
  %27 = load i32, i32* %aExp, align 4, !dbg !7761
  %tobool7 = icmp ne i32 %27, 0, !dbg !7761
  br i1 %tobool7, label %if.then9, label %lor.lhs.false, !dbg !7763

lor.lhs.false:                                    ; preds = %if.end6
  %28 = load i64, i64* %aSig, align 8, !dbg !7764
  %tobool8 = icmp ne i64 %28, 0, !dbg !7764
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !7765

if.then9:                                         ; preds = %lor.lhs.false, %if.end6
  %29 = load i32, i32* %aExp, align 4, !dbg !7766
  %sub = sub nsw i32 %29, 15361, !dbg !7766
  store i32 %sub, i32* %aExp, align 4, !dbg !7766
  br label %if.end10, !dbg !7767

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  %30 = load i32, i32* %aSign, align 4, !dbg !7768
  %31 = load i32, i32* %aExp, align 4, !dbg !7769
  %32 = load i64, i64* %zSig, align 8, !dbg !7770
  %call11 = call i64 @roundAndPackFloat64(i32 %30, i32 %31, i64 %32), !dbg !7771
  store i64 %call11, i64* %retval, align 8, !dbg !7772
  br label %return, !dbg !7772

return:                                           ; preds = %if.end10, %if.end, %if.then3
  %33 = load i64, i64* %retval, align 8, !dbg !7773
  ret i64 %33, !dbg !7773
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @floatx80_to_float128(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7774 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7777, metadata !DIExpression()), !dbg !7778
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7779, metadata !DIExpression()), !dbg !7780
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7781, metadata !DIExpression()), !dbg !7782
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !7783, metadata !DIExpression()), !dbg !7784
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !7785, metadata !DIExpression()), !dbg !7786
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !7787, metadata !DIExpression()), !dbg !7788
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7789
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7789
  %5 = load i16, i16* %4, align 8, !dbg !7789
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7789
  %7 = load i64, i64* %6, align 8, !dbg !7789
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !7789
  store i64 %call, i64* %aSig, align 8, !dbg !7790
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7791
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !7791
  %10 = load i16, i16* %9, align 8, !dbg !7791
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !7791
  %12 = load i64, i64* %11, align 8, !dbg !7791
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !7791
  store i32 %call1, i32* %aExp, align 4, !dbg !7792
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7793
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !7793
  %15 = load i16, i16* %14, align 8, !dbg !7793
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !7793
  %17 = load i64, i64* %16, align 8, !dbg !7793
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !7793
  store i32 %call2, i32* %aSign, align 4, !dbg !7794
  %18 = load i32, i32* %aExp, align 4, !dbg !7795
  %cmp = icmp eq i32 %18, 32767, !dbg !7797
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7798

land.lhs.true:                                    ; preds = %entry
  %19 = load i64, i64* %aSig, align 8, !dbg !7799
  %shl = shl i64 %19, 1, !dbg !7800
  %tobool = icmp ne i64 %shl, 0, !dbg !7801
  br i1 %tobool, label %if.then, label %if.end, !dbg !7802

if.then:                                          ; preds = %land.lhs.true
  %20 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7803
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !7803
  %22 = load i16, i16* %21, align 8, !dbg !7803
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !7803
  %24 = load i64, i64* %23, align 8, !dbg !7803
  call void @floatx80ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i16 %22, i64 %24), !dbg !7803
  %call3 = call { i64, i64 } @commonNaNToFloat128(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !7805
  %25 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !7805
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 0, !dbg !7805
  %27 = extractvalue { i64, i64 } %call3, 0, !dbg !7805
  store i64 %27, i64* %26, align 8, !dbg !7805
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 1, !dbg !7805
  %29 = extractvalue { i64, i64 } %call3, 1, !dbg !7805
  store i64 %29, i64* %28, align 8, !dbg !7805
  br label %return, !dbg !7806

if.end:                                           ; preds = %land.lhs.true, %entry
  %30 = load i64, i64* %aSig, align 8, !dbg !7807
  %shl4 = shl i64 %30, 1, !dbg !7808
  call void @shift128Right(i64 %shl4, i64 0, i32 16, i64* %zSig0, i64* %zSig1), !dbg !7809
  %31 = load i32, i32* %aSign, align 4, !dbg !7810
  %32 = load i32, i32* %aExp, align 4, !dbg !7811
  %33 = load i64, i64* %zSig0, align 8, !dbg !7812
  %34 = load i64, i64* %zSig1, align 8, !dbg !7813
  %call5 = call { i64, i64 } @packFloat128(i32 %31, i32 %32, i64 %33, i64 %34), !dbg !7814
  %35 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !7814
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !7814
  %37 = extractvalue { i64, i64 } %call5, 0, !dbg !7814
  store i64 %37, i64* %36, align 8, !dbg !7814
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !7814
  %39 = extractvalue { i64, i64 } %call5, 1, !dbg !7814
  store i64 %39, i64* %38, align 8, !dbg !7814
  br label %return, !dbg !7815

return:                                           ; preds = %if.end, %if.then
  %40 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !7816
  %41 = load { i64, i64 }, { i64, i64 }* %40, align 8, !dbg !7816
  ret { i64, i64 } %41, !dbg !7816
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_round_to_int(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !7817 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %lastBitMask = alloca i64, align 8
  %roundBitsMask = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %z = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7820, metadata !DIExpression()), !dbg !7821
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !7822, metadata !DIExpression()), !dbg !7823
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !7824, metadata !DIExpression()), !dbg !7825
  call void @llvm.dbg.declare(metadata i64* %lastBitMask, metadata !7826, metadata !DIExpression()), !dbg !7827
  call void @llvm.dbg.declare(metadata i64* %roundBitsMask, metadata !7828, metadata !DIExpression()), !dbg !7829
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !7830, metadata !DIExpression()), !dbg !7831
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !7832, metadata !DIExpression()), !dbg !7833
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7834
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !7834
  %5 = load i16, i16* %4, align 8, !dbg !7834
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !7834
  %7 = load i64, i64* %6, align 8, !dbg !7834
  %call = call i32 @extractFloatx80Exp(i16 %5, i64 %7), !dbg !7834
  store i32 %call, i32* %aExp, align 4, !dbg !7835
  %8 = load i32, i32* %aExp, align 4, !dbg !7836
  %cmp = icmp sle i32 16446, %8, !dbg !7838
  br i1 %cmp, label %if.then, label %if.end5, !dbg !7839

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %aExp, align 4, !dbg !7840
  %cmp1 = icmp eq i32 %9, 32767, !dbg !7843
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !7844

land.lhs.true:                                    ; preds = %if.then
  %10 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7845
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %10, i32 0, i32 0, !dbg !7845
  %12 = load i16, i16* %11, align 8, !dbg !7845
  %13 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %10, i32 0, i32 1, !dbg !7845
  %14 = load i64, i64* %13, align 8, !dbg !7845
  %call2 = call i64 @extractFloatx80Frac(i16 %12, i64 %14), !dbg !7845
  %shl = shl i64 %call2, 1, !dbg !7846
  %tobool = icmp ne i64 %shl, 0, !dbg !7847
  br i1 %tobool, label %if.then3, label %if.end, !dbg !7848

if.then3:                                         ; preds = %land.lhs.true
  %15 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7849
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %15, i32 0, i32 0, !dbg !7849
  %17 = load i16, i16* %16, align 8, !dbg !7849
  %18 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %15, i32 0, i32 1, !dbg !7849
  %19 = load i64, i64* %18, align 8, !dbg !7849
  %20 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7849
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !7849
  %22 = load i16, i16* %21, align 8, !dbg !7849
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !7849
  %24 = load i64, i64* %23, align 8, !dbg !7849
  %call4 = call { i16, i64 } @propagateFloatx80NaN(i16 %17, i64 %19, i16 %22, i64 %24), !dbg !7849
  %25 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7849
  %26 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %25, i32 0, i32 0, !dbg !7849
  %27 = extractvalue { i16, i64 } %call4, 0, !dbg !7849
  store i16 %27, i16* %26, align 8, !dbg !7849
  %28 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %25, i32 0, i32 1, !dbg !7849
  %29 = extractvalue { i16, i64 } %call4, 1, !dbg !7849
  store i64 %29, i64* %28, align 8, !dbg !7849
  br label %return, !dbg !7851

if.end:                                           ; preds = %land.lhs.true, %if.then
  %30 = bitcast %struct.floatx80* %retval to i8*, !dbg !7852
  %31 = bitcast %struct.floatx80* %a to i8*, !dbg !7852
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false), !dbg !7852
  br label %return, !dbg !7853

if.end5:                                          ; preds = %entry
  %32 = load i32, i32* %aExp, align 4, !dbg !7854
  %cmp6 = icmp slt i32 %32, 16383, !dbg !7856
  br i1 %cmp6, label %if.then7, label %if.end36, !dbg !7857

if.then7:                                         ; preds = %if.end5
  %33 = load i32, i32* %aExp, align 4, !dbg !7858
  %cmp8 = icmp eq i32 %33, 0, !dbg !7861
  br i1 %cmp8, label %land.lhs.true9, label %if.end14, !dbg !7862

land.lhs.true9:                                   ; preds = %if.then7
  %34 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7863
  %35 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %34, i32 0, i32 0, !dbg !7863
  %36 = load i16, i16* %35, align 8, !dbg !7863
  %37 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %34, i32 0, i32 1, !dbg !7863
  %38 = load i64, i64* %37, align 8, !dbg !7863
  %call10 = call i64 @extractFloatx80Frac(i16 %36, i64 %38), !dbg !7863
  %shl11 = shl i64 %call10, 1, !dbg !7864
  %cmp12 = icmp eq i64 %shl11, 0, !dbg !7865
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !7866

if.then13:                                        ; preds = %land.lhs.true9
  %39 = bitcast %struct.floatx80* %retval to i8*, !dbg !7867
  %40 = bitcast %struct.floatx80* %a to i8*, !dbg !7867
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false), !dbg !7867
  br label %return, !dbg !7869

if.end14:                                         ; preds = %land.lhs.true9, %if.then7
  %41 = load i32, i32* @float_exception_flags, align 4, !dbg !7870
  %or = or i32 %41, 1, !dbg !7870
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !7870
  %42 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7871
  %43 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %42, i32 0, i32 0, !dbg !7871
  %44 = load i16, i16* %43, align 8, !dbg !7871
  %45 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %42, i32 0, i32 1, !dbg !7871
  %46 = load i64, i64* %45, align 8, !dbg !7871
  %call15 = call i32 @extractFloatx80Sign(i16 %44, i64 %46), !dbg !7871
  store i32 %call15, i32* %aSign, align 4, !dbg !7872
  %47 = load i32, i32* @float_rounding_mode, align 4, !dbg !7873
  switch i32 %47, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb24
    i32 2, label %sw.bb28
  ], !dbg !7874

sw.bb:                                            ; preds = %if.end14
  %48 = load i32, i32* %aExp, align 4, !dbg !7875
  %cmp16 = icmp eq i32 %48, 16382, !dbg !7878
  br i1 %cmp16, label %land.lhs.true17, label %if.end23, !dbg !7879

land.lhs.true17:                                  ; preds = %sw.bb
  %49 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7880
  %50 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %49, i32 0, i32 0, !dbg !7880
  %51 = load i16, i16* %50, align 8, !dbg !7880
  %52 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %49, i32 0, i32 1, !dbg !7880
  %53 = load i64, i64* %52, align 8, !dbg !7880
  %call18 = call i64 @extractFloatx80Frac(i16 %51, i64 %53), !dbg !7880
  %shl19 = shl i64 %call18, 1, !dbg !7881
  %tobool20 = icmp ne i64 %shl19, 0, !dbg !7882
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !7883

if.then21:                                        ; preds = %land.lhs.true17
  %54 = load i32, i32* %aSign, align 4, !dbg !7884
  %call22 = call { i16, i64 } @packFloatx80(i32 %54, i32 16383, i64 -9223372036854775808), !dbg !7886
  %55 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7886
  %56 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %55, i32 0, i32 0, !dbg !7886
  %57 = extractvalue { i16, i64 } %call22, 0, !dbg !7886
  store i16 %57, i16* %56, align 8, !dbg !7886
  %58 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %55, i32 0, i32 1, !dbg !7886
  %59 = extractvalue { i16, i64 } %call22, 1, !dbg !7886
  store i64 %59, i64* %58, align 8, !dbg !7886
  br label %return, !dbg !7887

if.end23:                                         ; preds = %land.lhs.true17, %sw.bb
  br label %sw.epilog, !dbg !7888

sw.bb24:                                          ; preds = %if.end14
  %60 = load i32, i32* %aSign, align 4, !dbg !7889
  %tobool25 = icmp ne i32 %60, 0, !dbg !7889
  br i1 %tobool25, label %cond.true, label %cond.false, !dbg !7889

cond.true:                                        ; preds = %sw.bb24
  %call26 = call { i16, i64 } @packFloatx80(i32 1, i32 16383, i64 -9223372036854775808), !dbg !7890
  %61 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7890
  %62 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %61, i32 0, i32 0, !dbg !7890
  %63 = extractvalue { i16, i64 } %call26, 0, !dbg !7890
  store i16 %63, i16* %62, align 8, !dbg !7890
  %64 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %61, i32 0, i32 1, !dbg !7890
  %65 = extractvalue { i16, i64 } %call26, 1, !dbg !7890
  store i64 %65, i64* %64, align 8, !dbg !7890
  br label %cond.end, !dbg !7889

cond.false:                                       ; preds = %sw.bb24
  %call27 = call { i16, i64 } @packFloatx80(i32 0, i32 0, i64 0), !dbg !7891
  %66 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7891
  %67 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %66, i32 0, i32 0, !dbg !7891
  %68 = extractvalue { i16, i64 } %call27, 0, !dbg !7891
  store i16 %68, i16* %67, align 8, !dbg !7891
  %69 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %66, i32 0, i32 1, !dbg !7891
  %70 = extractvalue { i16, i64 } %call27, 1, !dbg !7891
  store i64 %70, i64* %69, align 8, !dbg !7891
  br label %cond.end, !dbg !7889

cond.end:                                         ; preds = %cond.false, %cond.true
  br label %return, !dbg !7892

sw.bb28:                                          ; preds = %if.end14
  %71 = load i32, i32* %aSign, align 4, !dbg !7893
  %tobool29 = icmp ne i32 %71, 0, !dbg !7893
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !7893

cond.true30:                                      ; preds = %sw.bb28
  %call31 = call { i16, i64 } @packFloatx80(i32 1, i32 0, i64 0), !dbg !7894
  %72 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7894
  %73 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %72, i32 0, i32 0, !dbg !7894
  %74 = extractvalue { i16, i64 } %call31, 0, !dbg !7894
  store i16 %74, i16* %73, align 8, !dbg !7894
  %75 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %72, i32 0, i32 1, !dbg !7894
  %76 = extractvalue { i16, i64 } %call31, 1, !dbg !7894
  store i64 %76, i64* %75, align 8, !dbg !7894
  br label %cond.end34, !dbg !7893

cond.false32:                                     ; preds = %sw.bb28
  %call33 = call { i16, i64 } @packFloatx80(i32 0, i32 16383, i64 -9223372036854775808), !dbg !7895
  %77 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7895
  %78 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %77, i32 0, i32 0, !dbg !7895
  %79 = extractvalue { i16, i64 } %call33, 0, !dbg !7895
  store i16 %79, i16* %78, align 8, !dbg !7895
  %80 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %77, i32 0, i32 1, !dbg !7895
  %81 = extractvalue { i16, i64 } %call33, 1, !dbg !7895
  store i64 %81, i64* %80, align 8, !dbg !7895
  br label %cond.end34, !dbg !7893

cond.end34:                                       ; preds = %cond.false32, %cond.true30
  br label %return, !dbg !7896

sw.epilog:                                        ; preds = %if.end14, %if.end23
  %82 = load i32, i32* %aSign, align 4, !dbg !7897
  %call35 = call { i16, i64 } @packFloatx80(i32 %82, i32 0, i64 0), !dbg !7898
  %83 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7898
  %84 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %83, i32 0, i32 0, !dbg !7898
  %85 = extractvalue { i16, i64 } %call35, 0, !dbg !7898
  store i16 %85, i16* %84, align 8, !dbg !7898
  %86 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %83, i32 0, i32 1, !dbg !7898
  %87 = extractvalue { i16, i64 } %call35, 1, !dbg !7898
  store i64 %87, i64* %86, align 8, !dbg !7898
  br label %return, !dbg !7899

if.end36:                                         ; preds = %if.end5
  store i64 1, i64* %lastBitMask, align 8, !dbg !7900
  %88 = load i32, i32* %aExp, align 4, !dbg !7901
  %sub = sub nsw i32 16446, %88, !dbg !7902
  %89 = load i64, i64* %lastBitMask, align 8, !dbg !7903
  %sh_prom = zext i32 %sub to i64, !dbg !7903
  %shl37 = shl i64 %89, %sh_prom, !dbg !7903
  store i64 %shl37, i64* %lastBitMask, align 8, !dbg !7903
  %90 = load i64, i64* %lastBitMask, align 8, !dbg !7904
  %sub38 = sub i64 %90, 1, !dbg !7905
  store i64 %sub38, i64* %roundBitsMask, align 8, !dbg !7906
  %91 = bitcast %struct.floatx80* %z to i8*, !dbg !7907
  %92 = bitcast %struct.floatx80* %a to i8*, !dbg !7907
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 16, i32 8, i1 false), !dbg !7907
  %93 = load i32, i32* @float_rounding_mode, align 4, !dbg !7908
  store i32 %93, i32* %roundingMode, align 4, !dbg !7909
  %94 = load i32, i32* %roundingMode, align 4, !dbg !7910
  %cmp39 = icmp eq i32 %94, 0, !dbg !7912
  br i1 %cmp39, label %if.then40, label %if.else, !dbg !7913

if.then40:                                        ; preds = %if.end36
  %95 = load i64, i64* %lastBitMask, align 8, !dbg !7914
  %shr = lshr i64 %95, 1, !dbg !7916
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7917
  %96 = load i64, i64* %low, align 8, !dbg !7918
  %add = add i64 %96, %shr, !dbg !7918
  store i64 %add, i64* %low, align 8, !dbg !7918
  %low41 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7919
  %97 = load i64, i64* %low41, align 8, !dbg !7919
  %98 = load i64, i64* %roundBitsMask, align 8, !dbg !7921
  %and = and i64 %97, %98, !dbg !7922
  %cmp42 = icmp eq i64 %and, 0, !dbg !7923
  br i1 %cmp42, label %if.then43, label %if.end46, !dbg !7924

if.then43:                                        ; preds = %if.then40
  %99 = load i64, i64* %lastBitMask, align 8, !dbg !7925
  %neg = xor i64 %99, -1, !dbg !7926
  %low44 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7927
  %100 = load i64, i64* %low44, align 8, !dbg !7928
  %and45 = and i64 %100, %neg, !dbg !7928
  store i64 %and45, i64* %low44, align 8, !dbg !7928
  br label %if.end46, !dbg !7929

if.end46:                                         ; preds = %if.then43, %if.then40
  br label %if.end57, !dbg !7930

if.else:                                          ; preds = %if.end36
  %101 = load i32, i32* %roundingMode, align 4, !dbg !7931
  %cmp47 = icmp ne i32 %101, 1, !dbg !7933
  br i1 %cmp47, label %if.then48, label %if.end56, !dbg !7934

if.then48:                                        ; preds = %if.else
  %102 = bitcast %struct.floatx80* %z to { i16, i64 }*, !dbg !7935
  %103 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %102, i32 0, i32 0, !dbg !7935
  %104 = load i16, i16* %103, align 8, !dbg !7935
  %105 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %102, i32 0, i32 1, !dbg !7935
  %106 = load i64, i64* %105, align 8, !dbg !7935
  %call49 = call i32 @extractFloatx80Sign(i16 %104, i64 %106), !dbg !7935
  %107 = load i32, i32* %roundingMode, align 4, !dbg !7938
  %cmp50 = icmp eq i32 %107, 2, !dbg !7939
  %conv = zext i1 %cmp50 to i32, !dbg !7939
  %xor = xor i32 %call49, %conv, !dbg !7940
  %tobool51 = icmp ne i32 %xor, 0, !dbg !7940
  br i1 %tobool51, label %if.then52, label %if.end55, !dbg !7941

if.then52:                                        ; preds = %if.then48
  %108 = load i64, i64* %roundBitsMask, align 8, !dbg !7942
  %low53 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7944
  %109 = load i64, i64* %low53, align 8, !dbg !7945
  %add54 = add i64 %109, %108, !dbg !7945
  store i64 %add54, i64* %low53, align 8, !dbg !7945
  br label %if.end55, !dbg !7946

if.end55:                                         ; preds = %if.then52, %if.then48
  br label %if.end56, !dbg !7947

if.end56:                                         ; preds = %if.end55, %if.else
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end46
  %110 = load i64, i64* %roundBitsMask, align 8, !dbg !7948
  %neg58 = xor i64 %110, -1, !dbg !7949
  %low59 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7950
  %111 = load i64, i64* %low59, align 8, !dbg !7951
  %and60 = and i64 %111, %neg58, !dbg !7951
  store i64 %and60, i64* %low59, align 8, !dbg !7951
  %low61 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7952
  %112 = load i64, i64* %low61, align 8, !dbg !7952
  %cmp62 = icmp eq i64 %112, 0, !dbg !7954
  br i1 %cmp62, label %if.then64, label %if.end66, !dbg !7955

if.then64:                                        ; preds = %if.end57
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !7956
  %113 = load i16, i16* %high, align 8, !dbg !7958
  %inc = add i16 %113, 1, !dbg !7958
  store i16 %inc, i16* %high, align 8, !dbg !7958
  %low65 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7959
  store i64 -9223372036854775808, i64* %low65, align 8, !dbg !7960
  br label %if.end66, !dbg !7961

if.end66:                                         ; preds = %if.then64, %if.end57
  %low67 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !7962
  %114 = load i64, i64* %low67, align 8, !dbg !7962
  %low68 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !7964
  %115 = load i64, i64* %low68, align 8, !dbg !7964
  %cmp69 = icmp ne i64 %114, %115, !dbg !7965
  br i1 %cmp69, label %if.then71, label %if.end73, !dbg !7966

if.then71:                                        ; preds = %if.end66
  %116 = load i32, i32* @float_exception_flags, align 4, !dbg !7967
  %or72 = or i32 %116, 1, !dbg !7967
  store i32 %or72, i32* @float_exception_flags, align 4, !dbg !7967
  br label %if.end73, !dbg !7968

if.end73:                                         ; preds = %if.then71, %if.end66
  %117 = bitcast %struct.floatx80* %retval to i8*, !dbg !7969
  %118 = bitcast %struct.floatx80* %z to i8*, !dbg !7969
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %117, i8* %118, i64 16, i32 8, i1 false), !dbg !7969
  br label %return, !dbg !7970

return:                                           ; preds = %if.end73, %sw.epilog, %cond.end34, %cond.end, %if.then21, %if.then13, %if.end, %if.then3
  %119 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !7971
  %120 = load { i16, i64 }, { i16, i64 }* %119, align 8, !dbg !7971
  ret { i16, i64 } %120, !dbg !7971
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i16, i64 } @propagateFloatx80NaN(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !7972 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aIsNaN = alloca i32, align 4
  %aIsSignalingNaN = alloca i32, align 4
  %bIsNaN = alloca i32, align 4
  %bIsSignalingNaN = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !7975, metadata !DIExpression()), !dbg !7976
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !7977, metadata !DIExpression()), !dbg !7978
  call void @llvm.dbg.declare(metadata i32* %aIsNaN, metadata !7979, metadata !DIExpression()), !dbg !7980
  call void @llvm.dbg.declare(metadata i32* %aIsSignalingNaN, metadata !7981, metadata !DIExpression()), !dbg !7982
  call void @llvm.dbg.declare(metadata i32* %bIsNaN, metadata !7983, metadata !DIExpression()), !dbg !7984
  call void @llvm.dbg.declare(metadata i32* %bIsSignalingNaN, metadata !7985, metadata !DIExpression()), !dbg !7986
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7987
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !7987
  %8 = load i16, i16* %7, align 8, !dbg !7987
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !7987
  %10 = load i64, i64* %9, align 8, !dbg !7987
  %call = call zeroext i1 @floatx80_is_nan(i16 %8, i64 %10), !dbg !7987
  %conv = zext i1 %call to i32, !dbg !7987
  store i32 %conv, i32* %aIsNaN, align 4, !dbg !7988
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !7989
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !7989
  %13 = load i16, i16* %12, align 8, !dbg !7989
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !7989
  %15 = load i64, i64* %14, align 8, !dbg !7989
  %call1 = call zeroext i1 @floatx80_is_signaling_nan(i16 %13, i64 %15), !dbg !7989
  %conv2 = zext i1 %call1 to i32, !dbg !7989
  store i32 %conv2, i32* %aIsSignalingNaN, align 4, !dbg !7990
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !7991
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !7991
  %18 = load i16, i16* %17, align 8, !dbg !7991
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !7991
  %20 = load i64, i64* %19, align 8, !dbg !7991
  %call3 = call zeroext i1 @floatx80_is_nan(i16 %18, i64 %20), !dbg !7991
  %conv4 = zext i1 %call3 to i32, !dbg !7991
  store i32 %conv4, i32* %bIsNaN, align 4, !dbg !7992
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !7993
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !7993
  %23 = load i16, i16* %22, align 8, !dbg !7993
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !7993
  %25 = load i64, i64* %24, align 8, !dbg !7993
  %call5 = call zeroext i1 @floatx80_is_signaling_nan(i16 %23, i64 %25), !dbg !7993
  %conv6 = zext i1 %call5 to i32, !dbg !7993
  store i32 %conv6, i32* %bIsSignalingNaN, align 4, !dbg !7994
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !7995
  %26 = load i64, i64* %low, align 8, !dbg !7996
  %or = or i64 %26, -4611686018427387904, !dbg !7996
  store i64 %or, i64* %low, align 8, !dbg !7996
  %low7 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !7997
  %27 = load i64, i64* %low7, align 8, !dbg !7998
  %or8 = or i64 %27, -4611686018427387904, !dbg !7998
  store i64 %or8, i64* %low7, align 8, !dbg !7998
  %28 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !7999
  %29 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !8001
  %or9 = or i32 %28, %29, !dbg !8002
  %tobool = icmp ne i32 %or9, 0, !dbg !8002
  br i1 %tobool, label %if.then, label %if.end, !dbg !8003

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !8004
  br label %if.end, !dbg !8004

if.end:                                           ; preds = %if.then, %entry
  %30 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !8005
  %tobool10 = icmp ne i32 %30, 0, !dbg !8005
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !8005

cond.true:                                        ; preds = %if.end
  %31 = bitcast %struct.floatx80* %retval to i8*, !dbg !8006
  %32 = bitcast %struct.floatx80* %b to i8*, !dbg !8006
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false), !dbg !8006
  br label %cond.end18, !dbg !8005

cond.false:                                       ; preds = %if.end
  %33 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !8007
  %tobool11 = icmp ne i32 %33, 0, !dbg !8007
  br i1 %tobool11, label %cond.true12, label %cond.false13, !dbg !8007

cond.true12:                                      ; preds = %cond.false
  %34 = bitcast %struct.floatx80* %retval to i8*, !dbg !8008
  %35 = bitcast %struct.floatx80* %a to i8*, !dbg !8008
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 16, i32 8, i1 false), !dbg !8008
  br label %cond.end17, !dbg !8007

cond.false13:                                     ; preds = %cond.false
  %36 = load i32, i32* %bIsNaN, align 4, !dbg !8009
  %tobool14 = icmp ne i32 %36, 0, !dbg !8009
  br i1 %tobool14, label %cond.true15, label %cond.false16, !dbg !8009

cond.true15:                                      ; preds = %cond.false13
  %37 = bitcast %struct.floatx80* %retval to i8*, !dbg !8010
  %38 = bitcast %struct.floatx80* %b to i8*, !dbg !8010
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false), !dbg !8010
  br label %cond.end, !dbg !8009

cond.false16:                                     ; preds = %cond.false13
  %39 = bitcast %struct.floatx80* %retval to i8*, !dbg !8011
  %40 = bitcast %struct.floatx80* %a to i8*, !dbg !8011
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false), !dbg !8011
  br label %cond.end, !dbg !8009

cond.end:                                         ; preds = %cond.false16, %cond.true15
  br label %cond.end17, !dbg !8007

cond.end17:                                       ; preds = %cond.end, %cond.true12
  br label %cond.end18, !dbg !8005

cond.end18:                                       ; preds = %cond.end17, %cond.true
  %41 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8012
  %42 = load { i16, i64 }, { i16, i64 }* %41, align 8, !dbg !8012
  ret { i16, i64 } %42, !dbg !8012
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_add(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !8013 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !8014, metadata !DIExpression()), !dbg !8015
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !8016, metadata !DIExpression()), !dbg !8017
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !8018, metadata !DIExpression()), !dbg !8019
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !8020, metadata !DIExpression()), !dbg !8021
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8022
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !8022
  %8 = load i16, i16* %7, align 8, !dbg !8022
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !8022
  %10 = load i64, i64* %9, align 8, !dbg !8022
  %call = call i32 @extractFloatx80Sign(i16 %8, i64 %10), !dbg !8022
  store i32 %call, i32* %aSign, align 4, !dbg !8023
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8024
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !8024
  %13 = load i16, i16* %12, align 8, !dbg !8024
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !8024
  %15 = load i64, i64* %14, align 8, !dbg !8024
  %call1 = call i32 @extractFloatx80Sign(i16 %13, i64 %15), !dbg !8024
  store i32 %call1, i32* %bSign, align 4, !dbg !8025
  %16 = load i32, i32* %aSign, align 4, !dbg !8026
  %17 = load i32, i32* %bSign, align 4, !dbg !8028
  %cmp = icmp eq i32 %16, %17, !dbg !8029
  br i1 %cmp, label %if.then, label %if.else, !dbg !8030

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %aSign, align 4, !dbg !8031
  %19 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8033
  %20 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %19, i32 0, i32 0, !dbg !8033
  %21 = load i16, i16* %20, align 8, !dbg !8033
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %19, i32 0, i32 1, !dbg !8033
  %23 = load i64, i64* %22, align 8, !dbg !8033
  %24 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8033
  %25 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %24, i32 0, i32 0, !dbg !8033
  %26 = load i16, i16* %25, align 8, !dbg !8033
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %24, i32 0, i32 1, !dbg !8033
  %28 = load i64, i64* %27, align 8, !dbg !8033
  %call2 = call { i16, i64 } @addFloatx80Sigs(i16 %21, i64 %23, i16 %26, i64 %28, i32 %18), !dbg !8033
  %29 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8033
  %30 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %29, i32 0, i32 0, !dbg !8033
  %31 = extractvalue { i16, i64 } %call2, 0, !dbg !8033
  store i16 %31, i16* %30, align 8, !dbg !8033
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %29, i32 0, i32 1, !dbg !8033
  %33 = extractvalue { i16, i64 } %call2, 1, !dbg !8033
  store i64 %33, i64* %32, align 8, !dbg !8033
  br label %return, !dbg !8034

if.else:                                          ; preds = %entry
  %34 = load i32, i32* %aSign, align 4, !dbg !8035
  %35 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8037
  %36 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %35, i32 0, i32 0, !dbg !8037
  %37 = load i16, i16* %36, align 8, !dbg !8037
  %38 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %35, i32 0, i32 1, !dbg !8037
  %39 = load i64, i64* %38, align 8, !dbg !8037
  %40 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8037
  %41 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 0, !dbg !8037
  %42 = load i16, i16* %41, align 8, !dbg !8037
  %43 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 1, !dbg !8037
  %44 = load i64, i64* %43, align 8, !dbg !8037
  %call3 = call { i16, i64 } @subFloatx80Sigs(i16 %37, i64 %39, i16 %42, i64 %44, i32 %34), !dbg !8037
  %45 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8037
  %46 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 0, !dbg !8037
  %47 = extractvalue { i16, i64 } %call3, 0, !dbg !8037
  store i16 %47, i16* %46, align 8, !dbg !8037
  %48 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 1, !dbg !8037
  %49 = extractvalue { i16, i64 } %call3, 1, !dbg !8037
  store i64 %49, i64* %48, align 8, !dbg !8037
  br label %return, !dbg !8038

return:                                           ; preds = %if.else, %if.then
  %50 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8039
  %51 = load { i16, i64 }, { i16, i64 }* %50, align 8, !dbg !8039
  ret { i16, i64 } %51, !dbg !8039
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i16, i64 } @addFloatx80Sigs(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1, i32 %zSign) #0 !dbg !8040 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %expDiff = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !8043, metadata !DIExpression()), !dbg !8044
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !8045, metadata !DIExpression()), !dbg !8046
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !8047, metadata !DIExpression()), !dbg !8048
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !8049, metadata !DIExpression()), !dbg !8050
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !8051, metadata !DIExpression()), !dbg !8052
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !8053, metadata !DIExpression()), !dbg !8054
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !8055, metadata !DIExpression()), !dbg !8056
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !8057, metadata !DIExpression()), !dbg !8058
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !8059, metadata !DIExpression()), !dbg !8060
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !8061, metadata !DIExpression()), !dbg !8062
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !8063, metadata !DIExpression()), !dbg !8064
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8065
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !8065
  %8 = load i16, i16* %7, align 8, !dbg !8065
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !8065
  %10 = load i64, i64* %9, align 8, !dbg !8065
  %call = call i64 @extractFloatx80Frac(i16 %8, i64 %10), !dbg !8065
  store i64 %call, i64* %aSig, align 8, !dbg !8066
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8067
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !8067
  %13 = load i16, i16* %12, align 8, !dbg !8067
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !8067
  %15 = load i64, i64* %14, align 8, !dbg !8067
  %call1 = call i32 @extractFloatx80Exp(i16 %13, i64 %15), !dbg !8067
  store i32 %call1, i32* %aExp, align 4, !dbg !8068
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8069
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !8069
  %18 = load i16, i16* %17, align 8, !dbg !8069
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !8069
  %20 = load i64, i64* %19, align 8, !dbg !8069
  %call2 = call i64 @extractFloatx80Frac(i16 %18, i64 %20), !dbg !8069
  store i64 %call2, i64* %bSig, align 8, !dbg !8070
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8071
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !8071
  %23 = load i16, i16* %22, align 8, !dbg !8071
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !8071
  %25 = load i64, i64* %24, align 8, !dbg !8071
  %call3 = call i32 @extractFloatx80Exp(i16 %23, i64 %25), !dbg !8071
  store i32 %call3, i32* %bExp, align 4, !dbg !8072
  %26 = load i32, i32* %aExp, align 4, !dbg !8073
  %27 = load i32, i32* %bExp, align 4, !dbg !8074
  %sub = sub nsw i32 %26, %27, !dbg !8075
  store i32 %sub, i32* %expDiff, align 4, !dbg !8076
  %28 = load i32, i32* %expDiff, align 4, !dbg !8077
  %cmp = icmp slt i32 0, %28, !dbg !8079
  br i1 %cmp, label %if.then, label %if.else, !dbg !8080

if.then:                                          ; preds = %entry
  %29 = load i32, i32* %aExp, align 4, !dbg !8081
  %cmp4 = icmp eq i32 %29, 32767, !dbg !8084
  br i1 %cmp4, label %if.then5, label %if.end8, !dbg !8085

if.then5:                                         ; preds = %if.then
  %30 = load i64, i64* %aSig, align 8, !dbg !8086
  %shl = shl i64 %30, 1, !dbg !8089
  %tobool = icmp ne i64 %shl, 0, !dbg !8090
  br i1 %tobool, label %if.then6, label %if.end, !dbg !8091

if.then6:                                         ; preds = %if.then5
  %31 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8092
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !8092
  %33 = load i16, i16* %32, align 8, !dbg !8092
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !8092
  %35 = load i64, i64* %34, align 8, !dbg !8092
  %36 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8092
  %37 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %36, i32 0, i32 0, !dbg !8092
  %38 = load i16, i16* %37, align 8, !dbg !8092
  %39 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %36, i32 0, i32 1, !dbg !8092
  %40 = load i64, i64* %39, align 8, !dbg !8092
  %call7 = call { i16, i64 } @propagateFloatx80NaN(i16 %33, i64 %35, i16 %38, i64 %40), !dbg !8092
  %41 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8092
  %42 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %41, i32 0, i32 0, !dbg !8092
  %43 = extractvalue { i16, i64 } %call7, 0, !dbg !8092
  store i16 %43, i16* %42, align 8, !dbg !8092
  %44 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %41, i32 0, i32 1, !dbg !8092
  %45 = extractvalue { i16, i64 } %call7, 1, !dbg !8092
  store i64 %45, i64* %44, align 8, !dbg !8092
  br label %return, !dbg !8093

if.end:                                           ; preds = %if.then5
  %46 = bitcast %struct.floatx80* %retval to i8*, !dbg !8094
  %47 = bitcast %struct.floatx80* %a to i8*, !dbg !8094
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %46, i8* %47, i64 16, i32 8, i1 false), !dbg !8094
  br label %return, !dbg !8095

if.end8:                                          ; preds = %if.then
  %48 = load i32, i32* %bExp, align 4, !dbg !8096
  %cmp9 = icmp eq i32 %48, 0, !dbg !8098
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !8099

if.then10:                                        ; preds = %if.end8
  %49 = load i32, i32* %expDiff, align 4, !dbg !8100
  %dec = add nsw i32 %49, -1, !dbg !8100
  store i32 %dec, i32* %expDiff, align 4, !dbg !8100
  br label %if.end11, !dbg !8100

if.end11:                                         ; preds = %if.then10, %if.end8
  %50 = load i64, i64* %bSig, align 8, !dbg !8101
  %51 = load i32, i32* %expDiff, align 4, !dbg !8102
  call void @shift64ExtraRightJamming(i64 %50, i64 0, i32 %51, i64* %bSig, i64* %zSig1), !dbg !8103
  %52 = load i32, i32* %aExp, align 4, !dbg !8104
  store i32 %52, i32* %zExp, align 4, !dbg !8105
  br label %if.end40, !dbg !8106

if.else:                                          ; preds = %entry
  %53 = load i32, i32* %expDiff, align 4, !dbg !8107
  %cmp12 = icmp slt i32 %53, 0, !dbg !8109
  br i1 %cmp12, label %if.then13, label %if.else27, !dbg !8110

if.then13:                                        ; preds = %if.else
  %54 = load i32, i32* %bExp, align 4, !dbg !8111
  %cmp14 = icmp eq i32 %54, 32767, !dbg !8114
  br i1 %cmp14, label %if.then15, label %if.end22, !dbg !8115

if.then15:                                        ; preds = %if.then13
  %55 = load i64, i64* %bSig, align 8, !dbg !8116
  %shl16 = shl i64 %55, 1, !dbg !8119
  %tobool17 = icmp ne i64 %shl16, 0, !dbg !8120
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !8121

if.then18:                                        ; preds = %if.then15
  %56 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8122
  %57 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %56, i32 0, i32 0, !dbg !8122
  %58 = load i16, i16* %57, align 8, !dbg !8122
  %59 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %56, i32 0, i32 1, !dbg !8122
  %60 = load i64, i64* %59, align 8, !dbg !8122
  %61 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8122
  %62 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %61, i32 0, i32 0, !dbg !8122
  %63 = load i16, i16* %62, align 8, !dbg !8122
  %64 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %61, i32 0, i32 1, !dbg !8122
  %65 = load i64, i64* %64, align 8, !dbg !8122
  %call19 = call { i16, i64 } @propagateFloatx80NaN(i16 %58, i64 %60, i16 %63, i64 %65), !dbg !8122
  %66 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8122
  %67 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %66, i32 0, i32 0, !dbg !8122
  %68 = extractvalue { i16, i64 } %call19, 0, !dbg !8122
  store i16 %68, i16* %67, align 8, !dbg !8122
  %69 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %66, i32 0, i32 1, !dbg !8122
  %70 = extractvalue { i16, i64 } %call19, 1, !dbg !8122
  store i64 %70, i64* %69, align 8, !dbg !8122
  br label %return, !dbg !8123

if.end20:                                         ; preds = %if.then15
  %71 = load i32, i32* %zSign.addr, align 4, !dbg !8124
  %call21 = call { i16, i64 } @packFloatx80(i32 %71, i32 32767, i64 -9223372036854775808), !dbg !8125
  %72 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8125
  %73 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %72, i32 0, i32 0, !dbg !8125
  %74 = extractvalue { i16, i64 } %call21, 0, !dbg !8125
  store i16 %74, i16* %73, align 8, !dbg !8125
  %75 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %72, i32 0, i32 1, !dbg !8125
  %76 = extractvalue { i16, i64 } %call21, 1, !dbg !8125
  store i64 %76, i64* %75, align 8, !dbg !8125
  br label %return, !dbg !8126

if.end22:                                         ; preds = %if.then13
  %77 = load i32, i32* %aExp, align 4, !dbg !8127
  %cmp23 = icmp eq i32 %77, 0, !dbg !8129
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !8130

if.then24:                                        ; preds = %if.end22
  %78 = load i32, i32* %expDiff, align 4, !dbg !8131
  %inc = add nsw i32 %78, 1, !dbg !8131
  store i32 %inc, i32* %expDiff, align 4, !dbg !8131
  br label %if.end25, !dbg !8131

if.end25:                                         ; preds = %if.then24, %if.end22
  %79 = load i64, i64* %aSig, align 8, !dbg !8132
  %80 = load i32, i32* %expDiff, align 4, !dbg !8133
  %sub26 = sub nsw i32 0, %80, !dbg !8134
  call void @shift64ExtraRightJamming(i64 %79, i64 0, i32 %sub26, i64* %aSig, i64* %zSig1), !dbg !8135
  %81 = load i32, i32* %bExp, align 4, !dbg !8136
  store i32 %81, i32* %zExp, align 4, !dbg !8137
  br label %if.end39, !dbg !8138

if.else27:                                        ; preds = %if.else
  %82 = load i32, i32* %aExp, align 4, !dbg !8139
  %cmp28 = icmp eq i32 %82, 32767, !dbg !8142
  br i1 %cmp28, label %if.then29, label %if.end35, !dbg !8143

if.then29:                                        ; preds = %if.else27
  %83 = load i64, i64* %aSig, align 8, !dbg !8144
  %84 = load i64, i64* %bSig, align 8, !dbg !8147
  %or = or i64 %83, %84, !dbg !8148
  %shl30 = shl i64 %or, 1, !dbg !8149
  %tobool31 = icmp ne i64 %shl30, 0, !dbg !8150
  br i1 %tobool31, label %if.then32, label %if.end34, !dbg !8151

if.then32:                                        ; preds = %if.then29
  %85 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8152
  %86 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %85, i32 0, i32 0, !dbg !8152
  %87 = load i16, i16* %86, align 8, !dbg !8152
  %88 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %85, i32 0, i32 1, !dbg !8152
  %89 = load i64, i64* %88, align 8, !dbg !8152
  %90 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8152
  %91 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %90, i32 0, i32 0, !dbg !8152
  %92 = load i16, i16* %91, align 8, !dbg !8152
  %93 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %90, i32 0, i32 1, !dbg !8152
  %94 = load i64, i64* %93, align 8, !dbg !8152
  %call33 = call { i16, i64 } @propagateFloatx80NaN(i16 %87, i64 %89, i16 %92, i64 %94), !dbg !8152
  %95 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8152
  %96 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %95, i32 0, i32 0, !dbg !8152
  %97 = extractvalue { i16, i64 } %call33, 0, !dbg !8152
  store i16 %97, i16* %96, align 8, !dbg !8152
  %98 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %95, i32 0, i32 1, !dbg !8152
  %99 = extractvalue { i16, i64 } %call33, 1, !dbg !8152
  store i64 %99, i64* %98, align 8, !dbg !8152
  br label %return, !dbg !8154

if.end34:                                         ; preds = %if.then29
  %100 = bitcast %struct.floatx80* %retval to i8*, !dbg !8155
  %101 = bitcast %struct.floatx80* %a to i8*, !dbg !8155
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 16, i32 8, i1 false), !dbg !8155
  br label %return, !dbg !8156

if.end35:                                         ; preds = %if.else27
  store i64 0, i64* %zSig1, align 8, !dbg !8157
  %102 = load i64, i64* %aSig, align 8, !dbg !8158
  %103 = load i64, i64* %bSig, align 8, !dbg !8159
  %add = add i64 %102, %103, !dbg !8160
  store i64 %add, i64* %zSig0, align 8, !dbg !8161
  %104 = load i32, i32* %aExp, align 4, !dbg !8162
  %cmp36 = icmp eq i32 %104, 0, !dbg !8164
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !8165

if.then37:                                        ; preds = %if.end35
  %105 = load i64, i64* %zSig0, align 8, !dbg !8166
  call void @normalizeFloatx80Subnormal(i64 %105, i32* %zExp, i64* %zSig0), !dbg !8168
  br label %roundAndPack, !dbg !8169

if.end38:                                         ; preds = %if.end35
  %106 = load i32, i32* %aExp, align 4, !dbg !8170
  store i32 %106, i32* %zExp, align 4, !dbg !8171
  br label %shiftRight1, !dbg !8172

if.end39:                                         ; preds = %if.end25
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end11
  %107 = load i64, i64* %aSig, align 8, !dbg !8173
  %108 = load i64, i64* %bSig, align 8, !dbg !8174
  %add41 = add i64 %107, %108, !dbg !8175
  store i64 %add41, i64* %zSig0, align 8, !dbg !8176
  %109 = load i64, i64* %zSig0, align 8, !dbg !8177
  %cmp42 = icmp slt i64 %109, 0, !dbg !8179
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !8180

if.then43:                                        ; preds = %if.end40
  br label %roundAndPack, !dbg !8181

if.end44:                                         ; preds = %if.end40
  br label %shiftRight1, !dbg !8182

shiftRight1:                                      ; preds = %if.end44, %if.end38
  %110 = load i64, i64* %zSig0, align 8, !dbg !8183
  %111 = load i64, i64* %zSig1, align 8, !dbg !8184
  call void @shift64ExtraRightJamming(i64 %110, i64 %111, i32 1, i64* %zSig0, i64* %zSig1), !dbg !8185
  %112 = load i64, i64* %zSig0, align 8, !dbg !8186
  %or45 = or i64 %112, -9223372036854775808, !dbg !8186
  store i64 %or45, i64* %zSig0, align 8, !dbg !8186
  %113 = load i32, i32* %zExp, align 4, !dbg !8187
  %inc46 = add nsw i32 %113, 1, !dbg !8187
  store i32 %inc46, i32* %zExp, align 4, !dbg !8187
  br label %roundAndPack, !dbg !8187

roundAndPack:                                     ; preds = %shiftRight1, %if.then43, %if.then37
  %114 = load i32, i32* @floatx80_rounding_precision, align 4, !dbg !8188
  %115 = load i32, i32* %zSign.addr, align 4, !dbg !8189
  %116 = load i32, i32* %zExp, align 4, !dbg !8190
  %117 = load i64, i64* %zSig0, align 8, !dbg !8191
  %118 = load i64, i64* %zSig1, align 8, !dbg !8192
  %call47 = call { i16, i64 } @roundAndPackFloatx80(i32 %114, i32 %115, i32 %116, i64 %117, i64 %118), !dbg !8193
  %119 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8193
  %120 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %119, i32 0, i32 0, !dbg !8193
  %121 = extractvalue { i16, i64 } %call47, 0, !dbg !8193
  store i16 %121, i16* %120, align 8, !dbg !8193
  %122 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %119, i32 0, i32 1, !dbg !8193
  %123 = extractvalue { i16, i64 } %call47, 1, !dbg !8193
  store i64 %123, i64* %122, align 8, !dbg !8193
  br label %return, !dbg !8194

return:                                           ; preds = %roundAndPack, %if.end34, %if.then32, %if.end20, %if.then18, %if.end, %if.then6
  %124 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8195
  %125 = load { i16, i64 }, { i16, i64 }* %124, align 8, !dbg !8195
  ret { i16, i64 } %125, !dbg !8195
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i16, i64 } @subFloatx80Sigs(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1, i32 %zSign) #0 !dbg !8196 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %expDiff = alloca i32, align 4
  %z = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !8197, metadata !DIExpression()), !dbg !8198
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !8199, metadata !DIExpression()), !dbg !8200
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !8201, metadata !DIExpression()), !dbg !8202
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !8203, metadata !DIExpression()), !dbg !8204
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !8205, metadata !DIExpression()), !dbg !8206
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !8207, metadata !DIExpression()), !dbg !8208
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !8209, metadata !DIExpression()), !dbg !8210
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !8211, metadata !DIExpression()), !dbg !8212
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !8213, metadata !DIExpression()), !dbg !8214
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !8215, metadata !DIExpression()), !dbg !8216
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !8217, metadata !DIExpression()), !dbg !8218
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !8219, metadata !DIExpression()), !dbg !8220
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8221
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !8221
  %8 = load i16, i16* %7, align 8, !dbg !8221
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !8221
  %10 = load i64, i64* %9, align 8, !dbg !8221
  %call = call i64 @extractFloatx80Frac(i16 %8, i64 %10), !dbg !8221
  store i64 %call, i64* %aSig, align 8, !dbg !8222
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8223
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !8223
  %13 = load i16, i16* %12, align 8, !dbg !8223
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !8223
  %15 = load i64, i64* %14, align 8, !dbg !8223
  %call1 = call i32 @extractFloatx80Exp(i16 %13, i64 %15), !dbg !8223
  store i32 %call1, i32* %aExp, align 4, !dbg !8224
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8225
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !8225
  %18 = load i16, i16* %17, align 8, !dbg !8225
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !8225
  %20 = load i64, i64* %19, align 8, !dbg !8225
  %call2 = call i64 @extractFloatx80Frac(i16 %18, i64 %20), !dbg !8225
  store i64 %call2, i64* %bSig, align 8, !dbg !8226
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8227
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !8227
  %23 = load i16, i16* %22, align 8, !dbg !8227
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !8227
  %25 = load i64, i64* %24, align 8, !dbg !8227
  %call3 = call i32 @extractFloatx80Exp(i16 %23, i64 %25), !dbg !8227
  store i32 %call3, i32* %bExp, align 4, !dbg !8228
  %26 = load i32, i32* %aExp, align 4, !dbg !8229
  %27 = load i32, i32* %bExp, align 4, !dbg !8230
  %sub = sub nsw i32 %26, %27, !dbg !8231
  store i32 %sub, i32* %expDiff, align 4, !dbg !8232
  %28 = load i32, i32* %expDiff, align 4, !dbg !8233
  %cmp = icmp slt i32 0, %28, !dbg !8235
  br i1 %cmp, label %if.then, label %if.end, !dbg !8236

if.then:                                          ; preds = %entry
  br label %aExpBigger, !dbg !8237

if.end:                                           ; preds = %entry
  %29 = load i32, i32* %expDiff, align 4, !dbg !8238
  %cmp4 = icmp slt i32 %29, 0, !dbg !8240
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !8241

if.then5:                                         ; preds = %if.end
  br label %bExpBigger, !dbg !8242

if.end6:                                          ; preds = %if.end
  %30 = load i32, i32* %aExp, align 4, !dbg !8243
  %cmp7 = icmp eq i32 %30, 32767, !dbg !8245
  br i1 %cmp7, label %if.then8, label %if.end12, !dbg !8246

if.then8:                                         ; preds = %if.end6
  %31 = load i64, i64* %aSig, align 8, !dbg !8247
  %32 = load i64, i64* %bSig, align 8, !dbg !8250
  %or = or i64 %31, %32, !dbg !8251
  %shl = shl i64 %or, 1, !dbg !8252
  %tobool = icmp ne i64 %shl, 0, !dbg !8253
  br i1 %tobool, label %if.then9, label %if.end11, !dbg !8254

if.then9:                                         ; preds = %if.then8
  %33 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8255
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %33, i32 0, i32 0, !dbg !8255
  %35 = load i16, i16* %34, align 8, !dbg !8255
  %36 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %33, i32 0, i32 1, !dbg !8255
  %37 = load i64, i64* %36, align 8, !dbg !8255
  %38 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8255
  %39 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %38, i32 0, i32 0, !dbg !8255
  %40 = load i16, i16* %39, align 8, !dbg !8255
  %41 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %38, i32 0, i32 1, !dbg !8255
  %42 = load i64, i64* %41, align 8, !dbg !8255
  %call10 = call { i16, i64 } @propagateFloatx80NaN(i16 %35, i64 %37, i16 %40, i64 %42), !dbg !8255
  %43 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8255
  %44 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %43, i32 0, i32 0, !dbg !8255
  %45 = extractvalue { i16, i64 } %call10, 0, !dbg !8255
  store i16 %45, i16* %44, align 8, !dbg !8255
  %46 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %43, i32 0, i32 1, !dbg !8255
  %47 = extractvalue { i16, i64 } %call10, 1, !dbg !8255
  store i64 %47, i64* %46, align 8, !dbg !8255
  br label %return, !dbg !8257

if.end11:                                         ; preds = %if.then8
  call void @float_raise(i32 16), !dbg !8258
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !8259
  store i64 -1, i64* %low, align 8, !dbg !8260
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !8261
  store i16 32767, i16* %high, align 8, !dbg !8262
  %48 = bitcast %struct.floatx80* %retval to i8*, !dbg !8263
  %49 = bitcast %struct.floatx80* %z to i8*, !dbg !8263
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 16, i32 8, i1 false), !dbg !8263
  br label %return, !dbg !8264

if.end12:                                         ; preds = %if.end6
  %50 = load i32, i32* %aExp, align 4, !dbg !8265
  %cmp13 = icmp eq i32 %50, 0, !dbg !8267
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !8268

if.then14:                                        ; preds = %if.end12
  store i32 1, i32* %aExp, align 4, !dbg !8269
  store i32 1, i32* %bExp, align 4, !dbg !8271
  br label %if.end15, !dbg !8272

if.end15:                                         ; preds = %if.then14, %if.end12
  store i64 0, i64* %zSig1, align 8, !dbg !8273
  %51 = load i64, i64* %bSig, align 8, !dbg !8274
  %52 = load i64, i64* %aSig, align 8, !dbg !8276
  %cmp16 = icmp ult i64 %51, %52, !dbg !8277
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !8278

if.then17:                                        ; preds = %if.end15
  br label %aBigger, !dbg !8279

if.end18:                                         ; preds = %if.end15
  %53 = load i64, i64* %aSig, align 8, !dbg !8280
  %54 = load i64, i64* %bSig, align 8, !dbg !8282
  %cmp19 = icmp ult i64 %53, %54, !dbg !8283
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !8284

if.then20:                                        ; preds = %if.end18
  br label %bBigger, !dbg !8285

if.end21:                                         ; preds = %if.end18
  %55 = load i32, i32* @float_rounding_mode, align 4, !dbg !8286
  %cmp22 = icmp eq i32 %55, 3, !dbg !8287
  %conv = zext i1 %cmp22 to i32, !dbg !8287
  %call23 = call { i16, i64 } @packFloatx80(i32 %conv, i32 0, i64 0), !dbg !8288
  %56 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8288
  %57 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %56, i32 0, i32 0, !dbg !8288
  %58 = extractvalue { i16, i64 } %call23, 0, !dbg !8288
  store i16 %58, i16* %57, align 8, !dbg !8288
  %59 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %56, i32 0, i32 1, !dbg !8288
  %60 = extractvalue { i16, i64 } %call23, 1, !dbg !8288
  store i64 %60, i64* %59, align 8, !dbg !8288
  br label %return, !dbg !8289

bExpBigger:                                       ; preds = %if.then5
  %61 = load i32, i32* %bExp, align 4, !dbg !8290
  %cmp24 = icmp eq i32 %61, 32767, !dbg !8292
  br i1 %cmp24, label %if.then26, label %if.end33, !dbg !8293

if.then26:                                        ; preds = %bExpBigger
  %62 = load i64, i64* %bSig, align 8, !dbg !8294
  %shl27 = shl i64 %62, 1, !dbg !8297
  %tobool28 = icmp ne i64 %shl27, 0, !dbg !8298
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !8299

if.then29:                                        ; preds = %if.then26
  %63 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8300
  %64 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %63, i32 0, i32 0, !dbg !8300
  %65 = load i16, i16* %64, align 8, !dbg !8300
  %66 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %63, i32 0, i32 1, !dbg !8300
  %67 = load i64, i64* %66, align 8, !dbg !8300
  %68 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8300
  %69 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %68, i32 0, i32 0, !dbg !8300
  %70 = load i16, i16* %69, align 8, !dbg !8300
  %71 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %68, i32 0, i32 1, !dbg !8300
  %72 = load i64, i64* %71, align 8, !dbg !8300
  %call30 = call { i16, i64 } @propagateFloatx80NaN(i16 %65, i64 %67, i16 %70, i64 %72), !dbg !8300
  %73 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8300
  %74 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %73, i32 0, i32 0, !dbg !8300
  %75 = extractvalue { i16, i64 } %call30, 0, !dbg !8300
  store i16 %75, i16* %74, align 8, !dbg !8300
  %76 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %73, i32 0, i32 1, !dbg !8300
  %77 = extractvalue { i16, i64 } %call30, 1, !dbg !8300
  store i64 %77, i64* %76, align 8, !dbg !8300
  br label %return, !dbg !8301

if.end31:                                         ; preds = %if.then26
  %78 = load i32, i32* %zSign.addr, align 4, !dbg !8302
  %xor = xor i32 %78, 1, !dbg !8303
  %call32 = call { i16, i64 } @packFloatx80(i32 %xor, i32 32767, i64 -9223372036854775808), !dbg !8304
  %79 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8304
  %80 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %79, i32 0, i32 0, !dbg !8304
  %81 = extractvalue { i16, i64 } %call32, 0, !dbg !8304
  store i16 %81, i16* %80, align 8, !dbg !8304
  %82 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %79, i32 0, i32 1, !dbg !8304
  %83 = extractvalue { i16, i64 } %call32, 1, !dbg !8304
  store i64 %83, i64* %82, align 8, !dbg !8304
  br label %return, !dbg !8305

if.end33:                                         ; preds = %bExpBigger
  %84 = load i32, i32* %aExp, align 4, !dbg !8306
  %cmp34 = icmp eq i32 %84, 0, !dbg !8308
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !8309

if.then36:                                        ; preds = %if.end33
  %85 = load i32, i32* %expDiff, align 4, !dbg !8310
  %inc = add nsw i32 %85, 1, !dbg !8310
  store i32 %inc, i32* %expDiff, align 4, !dbg !8310
  br label %if.end37, !dbg !8310

if.end37:                                         ; preds = %if.then36, %if.end33
  %86 = load i64, i64* %aSig, align 8, !dbg !8311
  %87 = load i32, i32* %expDiff, align 4, !dbg !8312
  %sub38 = sub nsw i32 0, %87, !dbg !8313
  call void @shift128RightJamming(i64 %86, i64 0, i32 %sub38, i64* %aSig, i64* %zSig1), !dbg !8314
  br label %bBigger, !dbg !8314

bBigger:                                          ; preds = %if.end37, %if.then20
  %88 = load i64, i64* %bSig, align 8, !dbg !8315
  %89 = load i64, i64* %aSig, align 8, !dbg !8316
  %90 = load i64, i64* %zSig1, align 8, !dbg !8317
  call void @sub128(i64 %88, i64 0, i64 %89, i64 %90, i64* %zSig0, i64* %zSig1), !dbg !8318
  %91 = load i32, i32* %bExp, align 4, !dbg !8319
  store i32 %91, i32* %zExp, align 4, !dbg !8320
  %92 = load i32, i32* %zSign.addr, align 4, !dbg !8321
  %xor39 = xor i32 %92, 1, !dbg !8321
  store i32 %xor39, i32* %zSign.addr, align 4, !dbg !8321
  br label %normalizeRoundAndPack, !dbg !8322

aExpBigger:                                       ; preds = %if.then
  %93 = load i32, i32* %aExp, align 4, !dbg !8323
  %cmp40 = icmp eq i32 %93, 32767, !dbg !8325
  br i1 %cmp40, label %if.then42, label %if.end48, !dbg !8326

if.then42:                                        ; preds = %aExpBigger
  %94 = load i64, i64* %aSig, align 8, !dbg !8327
  %shl43 = shl i64 %94, 1, !dbg !8330
  %tobool44 = icmp ne i64 %shl43, 0, !dbg !8331
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !8332

if.then45:                                        ; preds = %if.then42
  %95 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8333
  %96 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %95, i32 0, i32 0, !dbg !8333
  %97 = load i16, i16* %96, align 8, !dbg !8333
  %98 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %95, i32 0, i32 1, !dbg !8333
  %99 = load i64, i64* %98, align 8, !dbg !8333
  %100 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8333
  %101 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %100, i32 0, i32 0, !dbg !8333
  %102 = load i16, i16* %101, align 8, !dbg !8333
  %103 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %100, i32 0, i32 1, !dbg !8333
  %104 = load i64, i64* %103, align 8, !dbg !8333
  %call46 = call { i16, i64 } @propagateFloatx80NaN(i16 %97, i64 %99, i16 %102, i64 %104), !dbg !8333
  %105 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8333
  %106 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %105, i32 0, i32 0, !dbg !8333
  %107 = extractvalue { i16, i64 } %call46, 0, !dbg !8333
  store i16 %107, i16* %106, align 8, !dbg !8333
  %108 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %105, i32 0, i32 1, !dbg !8333
  %109 = extractvalue { i16, i64 } %call46, 1, !dbg !8333
  store i64 %109, i64* %108, align 8, !dbg !8333
  br label %return, !dbg !8334

if.end47:                                         ; preds = %if.then42
  %110 = bitcast %struct.floatx80* %retval to i8*, !dbg !8335
  %111 = bitcast %struct.floatx80* %a to i8*, !dbg !8335
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %111, i64 16, i32 8, i1 false), !dbg !8335
  br label %return, !dbg !8336

if.end48:                                         ; preds = %aExpBigger
  %112 = load i32, i32* %bExp, align 4, !dbg !8337
  %cmp49 = icmp eq i32 %112, 0, !dbg !8339
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !8340

if.then51:                                        ; preds = %if.end48
  %113 = load i32, i32* %expDiff, align 4, !dbg !8341
  %dec = add nsw i32 %113, -1, !dbg !8341
  store i32 %dec, i32* %expDiff, align 4, !dbg !8341
  br label %if.end52, !dbg !8341

if.end52:                                         ; preds = %if.then51, %if.end48
  %114 = load i64, i64* %bSig, align 8, !dbg !8342
  %115 = load i32, i32* %expDiff, align 4, !dbg !8343
  call void @shift128RightJamming(i64 %114, i64 0, i32 %115, i64* %bSig, i64* %zSig1), !dbg !8344
  br label %aBigger, !dbg !8344

aBigger:                                          ; preds = %if.end52, %if.then17
  %116 = load i64, i64* %aSig, align 8, !dbg !8345
  %117 = load i64, i64* %bSig, align 8, !dbg !8346
  %118 = load i64, i64* %zSig1, align 8, !dbg !8347
  call void @sub128(i64 %116, i64 0, i64 %117, i64 %118, i64* %zSig0, i64* %zSig1), !dbg !8348
  %119 = load i32, i32* %aExp, align 4, !dbg !8349
  store i32 %119, i32* %zExp, align 4, !dbg !8350
  br label %normalizeRoundAndPack, !dbg !8351

normalizeRoundAndPack:                            ; preds = %aBigger, %bBigger
  %120 = load i32, i32* @floatx80_rounding_precision, align 4, !dbg !8352
  %121 = load i32, i32* %zSign.addr, align 4, !dbg !8353
  %122 = load i32, i32* %zExp, align 4, !dbg !8354
  %123 = load i64, i64* %zSig0, align 8, !dbg !8355
  %124 = load i64, i64* %zSig1, align 8, !dbg !8356
  %call53 = call { i16, i64 } @normalizeRoundAndPackFloatx80(i32 %120, i32 %121, i32 %122, i64 %123, i64 %124), !dbg !8357
  %125 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8357
  %126 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %125, i32 0, i32 0, !dbg !8357
  %127 = extractvalue { i16, i64 } %call53, 0, !dbg !8357
  store i16 %127, i16* %126, align 8, !dbg !8357
  %128 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %125, i32 0, i32 1, !dbg !8357
  %129 = extractvalue { i16, i64 } %call53, 1, !dbg !8357
  store i64 %129, i64* %128, align 8, !dbg !8357
  br label %return, !dbg !8358

return:                                           ; preds = %normalizeRoundAndPack, %if.end47, %if.then45, %if.end31, %if.then29, %if.end21, %if.end11, %if.then9
  %130 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8359
  %131 = load { i16, i64 }, { i16, i64 }* %130, align 8, !dbg !8359
  ret { i16, i64 } %131, !dbg !8359
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_sub(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !8360 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !8361, metadata !DIExpression()), !dbg !8362
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !8363, metadata !DIExpression()), !dbg !8364
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !8365, metadata !DIExpression()), !dbg !8366
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !8367, metadata !DIExpression()), !dbg !8368
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8369
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !8369
  %8 = load i16, i16* %7, align 8, !dbg !8369
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !8369
  %10 = load i64, i64* %9, align 8, !dbg !8369
  %call = call i32 @extractFloatx80Sign(i16 %8, i64 %10), !dbg !8369
  store i32 %call, i32* %aSign, align 4, !dbg !8370
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8371
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !8371
  %13 = load i16, i16* %12, align 8, !dbg !8371
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !8371
  %15 = load i64, i64* %14, align 8, !dbg !8371
  %call1 = call i32 @extractFloatx80Sign(i16 %13, i64 %15), !dbg !8371
  store i32 %call1, i32* %bSign, align 4, !dbg !8372
  %16 = load i32, i32* %aSign, align 4, !dbg !8373
  %17 = load i32, i32* %bSign, align 4, !dbg !8375
  %cmp = icmp eq i32 %16, %17, !dbg !8376
  br i1 %cmp, label %if.then, label %if.else, !dbg !8377

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %aSign, align 4, !dbg !8378
  %19 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8380
  %20 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %19, i32 0, i32 0, !dbg !8380
  %21 = load i16, i16* %20, align 8, !dbg !8380
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %19, i32 0, i32 1, !dbg !8380
  %23 = load i64, i64* %22, align 8, !dbg !8380
  %24 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8380
  %25 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %24, i32 0, i32 0, !dbg !8380
  %26 = load i16, i16* %25, align 8, !dbg !8380
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %24, i32 0, i32 1, !dbg !8380
  %28 = load i64, i64* %27, align 8, !dbg !8380
  %call2 = call { i16, i64 } @subFloatx80Sigs(i16 %21, i64 %23, i16 %26, i64 %28, i32 %18), !dbg !8380
  %29 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8380
  %30 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %29, i32 0, i32 0, !dbg !8380
  %31 = extractvalue { i16, i64 } %call2, 0, !dbg !8380
  store i16 %31, i16* %30, align 8, !dbg !8380
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %29, i32 0, i32 1, !dbg !8380
  %33 = extractvalue { i16, i64 } %call2, 1, !dbg !8380
  store i64 %33, i64* %32, align 8, !dbg !8380
  br label %return, !dbg !8381

if.else:                                          ; preds = %entry
  %34 = load i32, i32* %aSign, align 4, !dbg !8382
  %35 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8384
  %36 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %35, i32 0, i32 0, !dbg !8384
  %37 = load i16, i16* %36, align 8, !dbg !8384
  %38 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %35, i32 0, i32 1, !dbg !8384
  %39 = load i64, i64* %38, align 8, !dbg !8384
  %40 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8384
  %41 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 0, !dbg !8384
  %42 = load i16, i16* %41, align 8, !dbg !8384
  %43 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 1, !dbg !8384
  %44 = load i64, i64* %43, align 8, !dbg !8384
  %call3 = call { i16, i64 } @addFloatx80Sigs(i16 %37, i64 %39, i16 %42, i64 %44, i32 %34), !dbg !8384
  %45 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8384
  %46 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 0, !dbg !8384
  %47 = extractvalue { i16, i64 } %call3, 0, !dbg !8384
  store i16 %47, i16* %46, align 8, !dbg !8384
  %48 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 1, !dbg !8384
  %49 = extractvalue { i16, i64 } %call3, 1, !dbg !8384
  store i64 %49, i64* %48, align 8, !dbg !8384
  br label %return, !dbg !8385

return:                                           ; preds = %if.else, %if.then
  %50 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8386
  %51 = load { i16, i64 }, { i16, i64 }* %50, align 8, !dbg !8386
  ret { i16, i64 } %51, !dbg !8386
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_mul(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !8387 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %z = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !8388, metadata !DIExpression()), !dbg !8389
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !8390, metadata !DIExpression()), !dbg !8391
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !8392, metadata !DIExpression()), !dbg !8393
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !8394, metadata !DIExpression()), !dbg !8395
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !8396, metadata !DIExpression()), !dbg !8397
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !8398, metadata !DIExpression()), !dbg !8399
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !8400, metadata !DIExpression()), !dbg !8401
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !8402, metadata !DIExpression()), !dbg !8403
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !8404, metadata !DIExpression()), !dbg !8405
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !8406, metadata !DIExpression()), !dbg !8407
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !8408, metadata !DIExpression()), !dbg !8409
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !8410, metadata !DIExpression()), !dbg !8411
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !8412, metadata !DIExpression()), !dbg !8413
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8414
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !8414
  %8 = load i16, i16* %7, align 8, !dbg !8414
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !8414
  %10 = load i64, i64* %9, align 8, !dbg !8414
  %call = call i64 @extractFloatx80Frac(i16 %8, i64 %10), !dbg !8414
  store i64 %call, i64* %aSig, align 8, !dbg !8415
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8416
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !8416
  %13 = load i16, i16* %12, align 8, !dbg !8416
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !8416
  %15 = load i64, i64* %14, align 8, !dbg !8416
  %call1 = call i32 @extractFloatx80Exp(i16 %13, i64 %15), !dbg !8416
  store i32 %call1, i32* %aExp, align 4, !dbg !8417
  %16 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8418
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !8418
  %18 = load i16, i16* %17, align 8, !dbg !8418
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !8418
  %20 = load i64, i64* %19, align 8, !dbg !8418
  %call2 = call i32 @extractFloatx80Sign(i16 %18, i64 %20), !dbg !8418
  store i32 %call2, i32* %aSign, align 4, !dbg !8419
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8420
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !8420
  %23 = load i16, i16* %22, align 8, !dbg !8420
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !8420
  %25 = load i64, i64* %24, align 8, !dbg !8420
  %call3 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !8420
  store i64 %call3, i64* %bSig, align 8, !dbg !8421
  %26 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8422
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !8422
  %28 = load i16, i16* %27, align 8, !dbg !8422
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !8422
  %30 = load i64, i64* %29, align 8, !dbg !8422
  %call4 = call i32 @extractFloatx80Exp(i16 %28, i64 %30), !dbg !8422
  store i32 %call4, i32* %bExp, align 4, !dbg !8423
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8424
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !8424
  %33 = load i16, i16* %32, align 8, !dbg !8424
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !8424
  %35 = load i64, i64* %34, align 8, !dbg !8424
  %call5 = call i32 @extractFloatx80Sign(i16 %33, i64 %35), !dbg !8424
  store i32 %call5, i32* %bSign, align 4, !dbg !8425
  %36 = load i32, i32* %aSign, align 4, !dbg !8426
  %37 = load i32, i32* %bSign, align 4, !dbg !8427
  %xor = xor i32 %36, %37, !dbg !8428
  store i32 %xor, i32* %zSign, align 4, !dbg !8429
  %38 = load i32, i32* %aExp, align 4, !dbg !8430
  %cmp = icmp eq i32 %38, 32767, !dbg !8432
  br i1 %cmp, label %if.then, label %if.end16, !dbg !8433

if.then:                                          ; preds = %entry
  %39 = load i64, i64* %aSig, align 8, !dbg !8434
  %shl = shl i64 %39, 1, !dbg !8437
  %tobool = icmp ne i64 %shl, 0, !dbg !8438
  br i1 %tobool, label %if.then9, label %lor.lhs.false, !dbg !8439

lor.lhs.false:                                    ; preds = %if.then
  %40 = load i32, i32* %bExp, align 4, !dbg !8440
  %cmp6 = icmp eq i32 %40, 32767, !dbg !8441
  br i1 %cmp6, label %land.lhs.true, label %if.end, !dbg !8442

land.lhs.true:                                    ; preds = %lor.lhs.false
  %41 = load i64, i64* %bSig, align 8, !dbg !8443
  %shl7 = shl i64 %41, 1, !dbg !8444
  %tobool8 = icmp ne i64 %shl7, 0, !dbg !8445
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !8446

if.then9:                                         ; preds = %land.lhs.true, %if.then
  %42 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8447
  %43 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %42, i32 0, i32 0, !dbg !8447
  %44 = load i16, i16* %43, align 8, !dbg !8447
  %45 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %42, i32 0, i32 1, !dbg !8447
  %46 = load i64, i64* %45, align 8, !dbg !8447
  %47 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8447
  %48 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %47, i32 0, i32 0, !dbg !8447
  %49 = load i16, i16* %48, align 8, !dbg !8447
  %50 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %47, i32 0, i32 1, !dbg !8447
  %51 = load i64, i64* %50, align 8, !dbg !8447
  %call10 = call { i16, i64 } @propagateFloatx80NaN(i16 %44, i64 %46, i16 %49, i64 %51), !dbg !8447
  %52 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8447
  %53 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %52, i32 0, i32 0, !dbg !8447
  %54 = extractvalue { i16, i64 } %call10, 0, !dbg !8447
  store i16 %54, i16* %53, align 8, !dbg !8447
  %55 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %52, i32 0, i32 1, !dbg !8447
  %56 = extractvalue { i16, i64 } %call10, 1, !dbg !8447
  store i64 %56, i64* %55, align 8, !dbg !8447
  br label %return, !dbg !8449

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %57 = load i32, i32* %bExp, align 4, !dbg !8450
  %conv = sext i32 %57 to i64, !dbg !8450
  %58 = load i64, i64* %bSig, align 8, !dbg !8452
  %or = or i64 %conv, %58, !dbg !8453
  %cmp11 = icmp eq i64 %or, 0, !dbg !8454
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !8455

if.then13:                                        ; preds = %if.end
  br label %invalid, !dbg !8456

if.end14:                                         ; preds = %if.end
  %59 = load i32, i32* %zSign, align 4, !dbg !8457
  %call15 = call { i16, i64 } @packFloatx80(i32 %59, i32 32767, i64 -9223372036854775808), !dbg !8458
  %60 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8458
  %61 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %60, i32 0, i32 0, !dbg !8458
  %62 = extractvalue { i16, i64 } %call15, 0, !dbg !8458
  store i16 %62, i16* %61, align 8, !dbg !8458
  %63 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %60, i32 0, i32 1, !dbg !8458
  %64 = extractvalue { i16, i64 } %call15, 1, !dbg !8458
  store i64 %64, i64* %63, align 8, !dbg !8458
  br label %return, !dbg !8459

if.end16:                                         ; preds = %entry
  %65 = load i32, i32* %bExp, align 4, !dbg !8460
  %cmp17 = icmp eq i32 %65, 32767, !dbg !8462
  br i1 %cmp17, label %if.then19, label %if.end32, !dbg !8463

if.then19:                                        ; preds = %if.end16
  %66 = load i64, i64* %bSig, align 8, !dbg !8464
  %shl20 = shl i64 %66, 1, !dbg !8467
  %tobool21 = icmp ne i64 %shl20, 0, !dbg !8468
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !8469

if.then22:                                        ; preds = %if.then19
  %67 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !8470
  %68 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %67, i32 0, i32 0, !dbg !8470
  %69 = load i16, i16* %68, align 8, !dbg !8470
  %70 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %67, i32 0, i32 1, !dbg !8470
  %71 = load i64, i64* %70, align 8, !dbg !8470
  %72 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !8470
  %73 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %72, i32 0, i32 0, !dbg !8470
  %74 = load i16, i16* %73, align 8, !dbg !8470
  %75 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %72, i32 0, i32 1, !dbg !8470
  %76 = load i64, i64* %75, align 8, !dbg !8470
  %call23 = call { i16, i64 } @propagateFloatx80NaN(i16 %69, i64 %71, i16 %74, i64 %76), !dbg !8470
  %77 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8470
  %78 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %77, i32 0, i32 0, !dbg !8470
  %79 = extractvalue { i16, i64 } %call23, 0, !dbg !8470
  store i16 %79, i16* %78, align 8, !dbg !8470
  %80 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %77, i32 0, i32 1, !dbg !8470
  %81 = extractvalue { i16, i64 } %call23, 1, !dbg !8470
  store i64 %81, i64* %80, align 8, !dbg !8470
  br label %return, !dbg !8471

if.end24:                                         ; preds = %if.then19
  %82 = load i32, i32* %aExp, align 4, !dbg !8472
  %conv25 = sext i32 %82 to i64, !dbg !8472
  %83 = load i64, i64* %aSig, align 8, !dbg !8474
  %or26 = or i64 %conv25, %83, !dbg !8475
  %cmp27 = icmp eq i64 %or26, 0, !dbg !8476
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !8477

if.then29:                                        ; preds = %if.end24
  br label %invalid, !dbg !8478

invalid:                                          ; preds = %if.then29, %if.then13
  call void @float_raise(i32 16), !dbg !8479
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !8481
  store i64 -1, i64* %low, align 8, !dbg !8482
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !8483
  store i16 32767, i16* %high, align 8, !dbg !8484
  %84 = bitcast %struct.floatx80* %retval to i8*, !dbg !8485
  %85 = bitcast %struct.floatx80* %z to i8*, !dbg !8485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 16, i32 8, i1 false), !dbg !8485
  br label %return, !dbg !8486

if.end30:                                         ; preds = %if.end24
  %86 = load i32, i32* %zSign, align 4, !dbg !8487
  %call31 = call { i16, i64 } @packFloatx80(i32 %86, i32 32767, i64 -9223372036854775808), !dbg !8488
  %87 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8488
  %88 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %87, i32 0, i32 0, !dbg !8488
  %89 = extractvalue { i16, i64 } %call31, 0, !dbg !8488
  store i16 %89, i16* %88, align 8, !dbg !8488
  %90 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %87, i32 0, i32 1, !dbg !8488
  %91 = extractvalue { i16, i64 } %call31, 1, !dbg !8488
  store i64 %91, i64* %90, align 8, !dbg !8488
  br label %return, !dbg !8489

if.end32:                                         ; preds = %if.end16
  %92 = load i32, i32* %aExp, align 4, !dbg !8490
  %cmp33 = icmp eq i32 %92, 0, !dbg !8492
  br i1 %cmp33, label %if.then35, label %if.end41, !dbg !8493

if.then35:                                        ; preds = %if.end32
  %93 = load i64, i64* %aSig, align 8, !dbg !8494
  %cmp36 = icmp eq i64 %93, 0, !dbg !8497
  br i1 %cmp36, label %if.then38, label %if.end40, !dbg !8498

if.then38:                                        ; preds = %if.then35
  %94 = load i32, i32* %zSign, align 4, !dbg !8499
  %call39 = call { i16, i64 } @packFloatx80(i32 %94, i32 0, i64 0), !dbg !8500
  %95 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8500
  %96 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %95, i32 0, i32 0, !dbg !8500
  %97 = extractvalue { i16, i64 } %call39, 0, !dbg !8500
  store i16 %97, i16* %96, align 8, !dbg !8500
  %98 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %95, i32 0, i32 1, !dbg !8500
  %99 = extractvalue { i16, i64 } %call39, 1, !dbg !8500
  store i64 %99, i64* %98, align 8, !dbg !8500
  br label %return, !dbg !8501

if.end40:                                         ; preds = %if.then35
  %100 = load i64, i64* %aSig, align 8, !dbg !8502
  call void @normalizeFloatx80Subnormal(i64 %100, i32* %aExp, i64* %aSig), !dbg !8503
  br label %if.end41, !dbg !8504

if.end41:                                         ; preds = %if.end40, %if.end32
  %101 = load i32, i32* %bExp, align 4, !dbg !8505
  %cmp42 = icmp eq i32 %101, 0, !dbg !8507
  br i1 %cmp42, label %if.then44, label %if.end50, !dbg !8508

if.then44:                                        ; preds = %if.end41
  %102 = load i64, i64* %bSig, align 8, !dbg !8509
  %cmp45 = icmp eq i64 %102, 0, !dbg !8512
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !8513

if.then47:                                        ; preds = %if.then44
  %103 = load i32, i32* %zSign, align 4, !dbg !8514
  %call48 = call { i16, i64 } @packFloatx80(i32 %103, i32 0, i64 0), !dbg !8515
  %104 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8515
  %105 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %104, i32 0, i32 0, !dbg !8515
  %106 = extractvalue { i16, i64 } %call48, 0, !dbg !8515
  store i16 %106, i16* %105, align 8, !dbg !8515
  %107 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %104, i32 0, i32 1, !dbg !8515
  %108 = extractvalue { i16, i64 } %call48, 1, !dbg !8515
  store i64 %108, i64* %107, align 8, !dbg !8515
  br label %return, !dbg !8516

if.end49:                                         ; preds = %if.then44
  %109 = load i64, i64* %bSig, align 8, !dbg !8517
  call void @normalizeFloatx80Subnormal(i64 %109, i32* %bExp, i64* %bSig), !dbg !8518
  br label %if.end50, !dbg !8519

if.end50:                                         ; preds = %if.end49, %if.end41
  %110 = load i32, i32* %aExp, align 4, !dbg !8520
  %111 = load i32, i32* %bExp, align 4, !dbg !8521
  %add = add nsw i32 %110, %111, !dbg !8522
  %sub = sub nsw i32 %add, 16382, !dbg !8523
  store i32 %sub, i32* %zExp, align 4, !dbg !8524
  %112 = load i64, i64* %aSig, align 8, !dbg !8525
  %113 = load i64, i64* %bSig, align 8, !dbg !8526
  call void @mul64To128(i64 %112, i64 %113, i64* %zSig0, i64* %zSig1), !dbg !8527
  %114 = load i64, i64* %zSig0, align 8, !dbg !8528
  %cmp51 = icmp slt i64 0, %114, !dbg !8530
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !8531

if.then53:                                        ; preds = %if.end50
  %115 = load i64, i64* %zSig0, align 8, !dbg !8532
  %116 = load i64, i64* %zSig1, align 8, !dbg !8534
  call void @shortShift128Left(i64 %115, i64 %116, i32 1, i64* %zSig0, i64* %zSig1), !dbg !8535
  %117 = load i32, i32* %zExp, align 4, !dbg !8536
  %dec = add nsw i32 %117, -1, !dbg !8536
  store i32 %dec, i32* %zExp, align 4, !dbg !8536
  br label %if.end54, !dbg !8537

if.end54:                                         ; preds = %if.then53, %if.end50
  %118 = load i32, i32* @floatx80_rounding_precision, align 4, !dbg !8538
  %119 = load i32, i32* %zSign, align 4, !dbg !8539
  %120 = load i32, i32* %zExp, align 4, !dbg !8540
  %121 = load i64, i64* %zSig0, align 8, !dbg !8541
  %122 = load i64, i64* %zSig1, align 8, !dbg !8542
  %call55 = call { i16, i64 } @roundAndPackFloatx80(i32 %118, i32 %119, i32 %120, i64 %121, i64 %122), !dbg !8543
  %123 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8543
  %124 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %123, i32 0, i32 0, !dbg !8543
  %125 = extractvalue { i16, i64 } %call55, 0, !dbg !8543
  store i16 %125, i16* %124, align 8, !dbg !8543
  %126 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %123, i32 0, i32 1, !dbg !8543
  %127 = extractvalue { i16, i64 } %call55, 1, !dbg !8543
  store i64 %127, i64* %126, align 8, !dbg !8543
  br label %return, !dbg !8544

return:                                           ; preds = %if.end54, %if.then47, %if.then38, %if.end30, %invalid, %if.then22, %if.end14, %if.then9
  %128 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8545
  %129 = load { i16, i64 }, { i16, i64 }* %128, align 8, !dbg !8545
  ret { i16, i64 } %129, !dbg !8545
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @normalizeFloatx80Subnormal(i64 %aSig, i32* %zExpPtr, i64* %zSigPtr) #0 !dbg !8546 {
entry:
  %aSig.addr = alloca i64, align 8
  %zExpPtr.addr = alloca i32*, align 8
  %zSigPtr.addr = alloca i64*, align 8
  %shiftCount = alloca i32, align 4
  store i64 %aSig, i64* %aSig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %aSig.addr, metadata !8550, metadata !DIExpression()), !dbg !8551
  store i32* %zExpPtr, i32** %zExpPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %zExpPtr.addr, metadata !8552, metadata !DIExpression()), !dbg !8553
  store i64* %zSigPtr, i64** %zSigPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %zSigPtr.addr, metadata !8554, metadata !DIExpression()), !dbg !8555
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !8556, metadata !DIExpression()), !dbg !8557
  %0 = load i64, i64* %aSig.addr, align 8, !dbg !8558
  %call = call i32 @countLeadingZeros64(i64 %0), !dbg !8559
  store i32 %call, i32* %shiftCount, align 4, !dbg !8560
  %1 = load i64, i64* %aSig.addr, align 8, !dbg !8561
  %2 = load i32, i32* %shiftCount, align 4, !dbg !8562
  %sh_prom = zext i32 %2 to i64, !dbg !8563
  %shl = shl i64 %1, %sh_prom, !dbg !8563
  %3 = load i64*, i64** %zSigPtr.addr, align 8, !dbg !8564
  store i64 %shl, i64* %3, align 8, !dbg !8565
  %4 = load i32, i32* %shiftCount, align 4, !dbg !8566
  %sub = sub nsw i32 1, %4, !dbg !8567
  %5 = load i32*, i32** %zExpPtr.addr, align 8, !dbg !8568
  store i32 %sub, i32* %5, align 4, !dbg !8569
  ret void, !dbg !8570
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i16, i64 } @roundAndPackFloatx80(i32 %roundingPrecision, i32 %zSign, i32 %zExp, i64 %zSig0, i64 %zSig1) #0 !dbg !8571 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %roundingPrecision.addr = alloca i32, align 4
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig0.addr = alloca i64, align 8
  %zSig1.addr = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %roundNearestEven = alloca i32, align 4
  %increment = alloca i32, align 4
  %isTiny = alloca i32, align 4
  %roundIncrement = alloca i64, align 8
  %roundMask = alloca i64, align 8
  %roundBits = alloca i64, align 8
  store i32 %roundingPrecision, i32* %roundingPrecision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %roundingPrecision.addr, metadata !8574, metadata !DIExpression()), !dbg !8575
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !8576, metadata !DIExpression()), !dbg !8577
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !8578, metadata !DIExpression()), !dbg !8579
  store i64 %zSig0, i64* %zSig0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig0.addr, metadata !8580, metadata !DIExpression()), !dbg !8581
  store i64 %zSig1, i64* %zSig1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig1.addr, metadata !8582, metadata !DIExpression()), !dbg !8583
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !8584, metadata !DIExpression()), !dbg !8585
  call void @llvm.dbg.declare(metadata i32* %roundNearestEven, metadata !8586, metadata !DIExpression()), !dbg !8587
  call void @llvm.dbg.declare(metadata i32* %increment, metadata !8588, metadata !DIExpression()), !dbg !8589
  call void @llvm.dbg.declare(metadata i32* %isTiny, metadata !8590, metadata !DIExpression()), !dbg !8591
  call void @llvm.dbg.declare(metadata i64* %roundIncrement, metadata !8592, metadata !DIExpression()), !dbg !8593
  call void @llvm.dbg.declare(metadata i64* %roundMask, metadata !8594, metadata !DIExpression()), !dbg !8595
  call void @llvm.dbg.declare(metadata i64* %roundBits, metadata !8596, metadata !DIExpression()), !dbg !8597
  %0 = load i32, i32* @float_rounding_mode, align 4, !dbg !8598
  store i32 %0, i32* %roundingMode, align 4, !dbg !8599
  %1 = load i32, i32* %roundingMode, align 4, !dbg !8600
  %cmp = icmp eq i32 %1, 0, !dbg !8601
  %conv = zext i1 %cmp to i32, !dbg !8601
  store i32 %conv, i32* %roundNearestEven, align 4, !dbg !8602
  %2 = load i32, i32* %roundingPrecision.addr, align 4, !dbg !8603
  %cmp1 = icmp eq i32 %2, 80, !dbg !8605
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8606

if.then:                                          ; preds = %entry
  br label %precision80, !dbg !8607

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %roundingPrecision.addr, align 4, !dbg !8608
  %cmp3 = icmp eq i32 %3, 64, !dbg !8610
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !8611

if.then5:                                         ; preds = %if.end
  store i64 1024, i64* %roundIncrement, align 8, !dbg !8612
  store i64 2047, i64* %roundMask, align 8, !dbg !8614
  br label %if.end11, !dbg !8615

if.else:                                          ; preds = %if.end
  %4 = load i32, i32* %roundingPrecision.addr, align 4, !dbg !8616
  %cmp6 = icmp eq i32 %4, 32, !dbg !8618
  br i1 %cmp6, label %if.then8, label %if.else9, !dbg !8619

if.then8:                                         ; preds = %if.else
  store i64 549755813888, i64* %roundIncrement, align 8, !dbg !8620
  store i64 1099511627775, i64* %roundMask, align 8, !dbg !8622
  br label %if.end10, !dbg !8623

if.else9:                                         ; preds = %if.else
  br label %precision80, !dbg !8624

if.end10:                                         ; preds = %if.then8
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then5
  %5 = load i64, i64* %zSig1.addr, align 8, !dbg !8626
  %cmp12 = icmp ne i64 %5, 0, !dbg !8627
  %conv13 = zext i1 %cmp12 to i32, !dbg !8627
  %conv14 = sext i32 %conv13 to i64, !dbg !8628
  %6 = load i64, i64* %zSig0.addr, align 8, !dbg !8629
  %or = or i64 %6, %conv14, !dbg !8629
  store i64 %or, i64* %zSig0.addr, align 8, !dbg !8629
  %7 = load i32, i32* %roundNearestEven, align 4, !dbg !8630
  %tobool = icmp ne i32 %7, 0, !dbg !8630
  br i1 %tobool, label %if.end33, label %if.then15, !dbg !8632

if.then15:                                        ; preds = %if.end11
  %8 = load i32, i32* %roundingMode, align 4, !dbg !8633
  %cmp16 = icmp eq i32 %8, 1, !dbg !8636
  br i1 %cmp16, label %if.then18, label %if.else19, !dbg !8637

if.then18:                                        ; preds = %if.then15
  store i64 0, i64* %roundIncrement, align 8, !dbg !8638
  br label %if.end32, !dbg !8640

if.else19:                                        ; preds = %if.then15
  %9 = load i64, i64* %roundMask, align 8, !dbg !8641
  store i64 %9, i64* %roundIncrement, align 8, !dbg !8643
  %10 = load i32, i32* %zSign.addr, align 4, !dbg !8644
  %tobool20 = icmp ne i32 %10, 0, !dbg !8644
  br i1 %tobool20, label %if.then21, label %if.else26, !dbg !8646

if.then21:                                        ; preds = %if.else19
  %11 = load i32, i32* %roundingMode, align 4, !dbg !8647
  %cmp22 = icmp eq i32 %11, 2, !dbg !8650
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !8651

if.then24:                                        ; preds = %if.then21
  store i64 0, i64* %roundIncrement, align 8, !dbg !8652
  br label %if.end25, !dbg !8653

if.end25:                                         ; preds = %if.then24, %if.then21
  br label %if.end31, !dbg !8654

if.else26:                                        ; preds = %if.else19
  %12 = load i32, i32* %roundingMode, align 4, !dbg !8655
  %cmp27 = icmp eq i32 %12, 3, !dbg !8658
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !8659

if.then29:                                        ; preds = %if.else26
  store i64 0, i64* %roundIncrement, align 8, !dbg !8660
  br label %if.end30, !dbg !8661

if.end30:                                         ; preds = %if.then29, %if.else26
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end25
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then18
  br label %if.end33, !dbg !8662

if.end33:                                         ; preds = %if.end32, %if.end11
  %13 = load i64, i64* %zSig0.addr, align 8, !dbg !8663
  %14 = load i64, i64* %roundMask, align 8, !dbg !8664
  %and = and i64 %13, %14, !dbg !8665
  store i64 %and, i64* %roundBits, align 8, !dbg !8666
  %15 = load i32, i32* %zExp.addr, align 4, !dbg !8667
  %sub = sub nsw i32 %15, 1, !dbg !8669
  %cmp34 = icmp ule i32 32765, %sub, !dbg !8670
  br i1 %cmp34, label %if.then36, label %if.end82, !dbg !8671

if.then36:                                        ; preds = %if.end33
  %16 = load i32, i32* %zExp.addr, align 4, !dbg !8672
  %cmp37 = icmp slt i32 32766, %16, !dbg !8675
  br i1 %cmp37, label %if.then43, label %lor.lhs.false, !dbg !8676

lor.lhs.false:                                    ; preds = %if.then36
  %17 = load i32, i32* %zExp.addr, align 4, !dbg !8677
  %cmp39 = icmp eq i32 %17, 32766, !dbg !8678
  br i1 %cmp39, label %land.lhs.true, label %if.end44, !dbg !8679

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i64, i64* %zSig0.addr, align 8, !dbg !8680
  %19 = load i64, i64* %roundIncrement, align 8, !dbg !8681
  %add = add i64 %18, %19, !dbg !8682
  %20 = load i64, i64* %zSig0.addr, align 8, !dbg !8683
  %cmp41 = icmp ult i64 %add, %20, !dbg !8684
  br i1 %cmp41, label %if.then43, label %if.end44, !dbg !8685

if.then43:                                        ; preds = %land.lhs.true, %if.then36
  br label %overflow, !dbg !8686

if.end44:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %21 = load i32, i32* %zExp.addr, align 4, !dbg !8688
  %cmp45 = icmp sle i32 %21, 0, !dbg !8690
  br i1 %cmp45, label %if.then47, label %if.end81, !dbg !8691

if.then47:                                        ; preds = %if.end44
  %22 = load i32, i32* @float_detect_tininess, align 4, !dbg !8692
  %cmp48 = icmp eq i32 %22, 1, !dbg !8694
  br i1 %cmp48, label %lor.end, label %lor.lhs.false50, !dbg !8695

lor.lhs.false50:                                  ; preds = %if.then47
  %23 = load i32, i32* %zExp.addr, align 4, !dbg !8696
  %cmp51 = icmp slt i32 %23, 0, !dbg !8697
  br i1 %cmp51, label %lor.end, label %lor.rhs, !dbg !8698

lor.rhs:                                          ; preds = %lor.lhs.false50
  %24 = load i64, i64* %zSig0.addr, align 8, !dbg !8699
  %25 = load i64, i64* %zSig0.addr, align 8, !dbg !8700
  %26 = load i64, i64* %roundIncrement, align 8, !dbg !8701
  %add53 = add i64 %25, %26, !dbg !8702
  %cmp54 = icmp ule i64 %24, %add53, !dbg !8703
  br label %lor.end, !dbg !8698

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false50, %if.then47
  %27 = phi i1 [ true, %lor.lhs.false50 ], [ true, %if.then47 ], [ %cmp54, %lor.rhs ]
  %lor.ext = zext i1 %27 to i32, !dbg !8698
  store i32 %lor.ext, i32* %isTiny, align 4, !dbg !8704
  %28 = load i64, i64* %zSig0.addr, align 8, !dbg !8705
  %29 = load i32, i32* %zExp.addr, align 4, !dbg !8706
  %sub56 = sub nsw i32 1, %29, !dbg !8707
  call void @shift64RightJamming(i64 %28, i32 %sub56, i64* %zSig0.addr), !dbg !8708
  store i32 0, i32* %zExp.addr, align 4, !dbg !8709
  %30 = load i64, i64* %zSig0.addr, align 8, !dbg !8710
  %31 = load i64, i64* %roundMask, align 8, !dbg !8711
  %and57 = and i64 %30, %31, !dbg !8712
  store i64 %and57, i64* %roundBits, align 8, !dbg !8713
  %32 = load i32, i32* %isTiny, align 4, !dbg !8714
  %tobool58 = icmp ne i32 %32, 0, !dbg !8714
  br i1 %tobool58, label %land.lhs.true59, label %if.end62, !dbg !8716

land.lhs.true59:                                  ; preds = %lor.end
  %33 = load i64, i64* %roundBits, align 8, !dbg !8717
  %tobool60 = icmp ne i64 %33, 0, !dbg !8717
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !8718

if.then61:                                        ; preds = %land.lhs.true59
  call void @float_raise(i32 4), !dbg !8719
  br label %if.end62, !dbg !8719

if.end62:                                         ; preds = %if.then61, %land.lhs.true59, %lor.end
  %34 = load i64, i64* %roundBits, align 8, !dbg !8720
  %tobool63 = icmp ne i64 %34, 0, !dbg !8720
  br i1 %tobool63, label %if.then64, label %if.end66, !dbg !8722

if.then64:                                        ; preds = %if.end62
  %35 = load i32, i32* @float_exception_flags, align 4, !dbg !8723
  %or65 = or i32 %35, 1, !dbg !8723
  store i32 %or65, i32* @float_exception_flags, align 4, !dbg !8723
  br label %if.end66, !dbg !8724

if.end66:                                         ; preds = %if.then64, %if.end62
  %36 = load i64, i64* %roundIncrement, align 8, !dbg !8725
  %37 = load i64, i64* %zSig0.addr, align 8, !dbg !8726
  %add67 = add i64 %37, %36, !dbg !8726
  store i64 %add67, i64* %zSig0.addr, align 8, !dbg !8726
  %38 = load i64, i64* %zSig0.addr, align 8, !dbg !8727
  %cmp68 = icmp slt i64 %38, 0, !dbg !8729
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !8730

if.then70:                                        ; preds = %if.end66
  store i32 1, i32* %zExp.addr, align 4, !dbg !8731
  br label %if.end71, !dbg !8732

if.end71:                                         ; preds = %if.then70, %if.end66
  %39 = load i64, i64* %roundMask, align 8, !dbg !8733
  %add72 = add nsw i64 %39, 1, !dbg !8734
  store i64 %add72, i64* %roundIncrement, align 8, !dbg !8735
  %40 = load i32, i32* %roundNearestEven, align 4, !dbg !8736
  %tobool73 = icmp ne i32 %40, 0, !dbg !8736
  br i1 %tobool73, label %land.lhs.true74, label %if.end79, !dbg !8738

land.lhs.true74:                                  ; preds = %if.end71
  %41 = load i64, i64* %roundBits, align 8, !dbg !8739
  %shl = shl i64 %41, 1, !dbg !8740
  %42 = load i64, i64* %roundIncrement, align 8, !dbg !8741
  %cmp75 = icmp eq i64 %shl, %42, !dbg !8742
  br i1 %cmp75, label %if.then77, label %if.end79, !dbg !8743

if.then77:                                        ; preds = %land.lhs.true74
  %43 = load i64, i64* %roundIncrement, align 8, !dbg !8744
  %44 = load i64, i64* %roundMask, align 8, !dbg !8746
  %or78 = or i64 %44, %43, !dbg !8746
  store i64 %or78, i64* %roundMask, align 8, !dbg !8746
  br label %if.end79, !dbg !8747

if.end79:                                         ; preds = %if.then77, %land.lhs.true74, %if.end71
  %45 = load i64, i64* %roundMask, align 8, !dbg !8748
  %neg = xor i64 %45, -1, !dbg !8749
  %46 = load i64, i64* %zSig0.addr, align 8, !dbg !8750
  %and80 = and i64 %46, %neg, !dbg !8750
  store i64 %and80, i64* %zSig0.addr, align 8, !dbg !8750
  %47 = load i32, i32* %zSign.addr, align 4, !dbg !8751
  %48 = load i32, i32* %zExp.addr, align 4, !dbg !8752
  %49 = load i64, i64* %zSig0.addr, align 8, !dbg !8753
  %call = call { i16, i64 } @packFloatx80(i32 %47, i32 %48, i64 %49), !dbg !8754
  %50 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8754
  %51 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %50, i32 0, i32 0, !dbg !8754
  %52 = extractvalue { i16, i64 } %call, 0, !dbg !8754
  store i16 %52, i16* %51, align 8, !dbg !8754
  %53 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %50, i32 0, i32 1, !dbg !8754
  %54 = extractvalue { i16, i64 } %call, 1, !dbg !8754
  store i64 %54, i64* %53, align 8, !dbg !8754
  br label %return, !dbg !8755

if.end81:                                         ; preds = %if.end44
  br label %if.end82, !dbg !8756

if.end82:                                         ; preds = %if.end81, %if.end33
  %55 = load i64, i64* %roundBits, align 8, !dbg !8757
  %tobool83 = icmp ne i64 %55, 0, !dbg !8757
  br i1 %tobool83, label %if.then84, label %if.end86, !dbg !8759

if.then84:                                        ; preds = %if.end82
  %56 = load i32, i32* @float_exception_flags, align 4, !dbg !8760
  %or85 = or i32 %56, 1, !dbg !8760
  store i32 %or85, i32* @float_exception_flags, align 4, !dbg !8760
  br label %if.end86, !dbg !8761

if.end86:                                         ; preds = %if.then84, %if.end82
  %57 = load i64, i64* %roundIncrement, align 8, !dbg !8762
  %58 = load i64, i64* %zSig0.addr, align 8, !dbg !8763
  %add87 = add i64 %58, %57, !dbg !8763
  store i64 %add87, i64* %zSig0.addr, align 8, !dbg !8763
  %59 = load i64, i64* %zSig0.addr, align 8, !dbg !8764
  %60 = load i64, i64* %roundIncrement, align 8, !dbg !8766
  %cmp88 = icmp ult i64 %59, %60, !dbg !8767
  br i1 %cmp88, label %if.then90, label %if.end91, !dbg !8768

if.then90:                                        ; preds = %if.end86
  %61 = load i32, i32* %zExp.addr, align 4, !dbg !8769
  %inc = add nsw i32 %61, 1, !dbg !8769
  store i32 %inc, i32* %zExp.addr, align 4, !dbg !8769
  store i64 -9223372036854775808, i64* %zSig0.addr, align 8, !dbg !8771
  br label %if.end91, !dbg !8772

if.end91:                                         ; preds = %if.then90, %if.end86
  %62 = load i64, i64* %roundMask, align 8, !dbg !8773
  %add92 = add nsw i64 %62, 1, !dbg !8774
  store i64 %add92, i64* %roundIncrement, align 8, !dbg !8775
  %63 = load i32, i32* %roundNearestEven, align 4, !dbg !8776
  %tobool93 = icmp ne i32 %63, 0, !dbg !8776
  br i1 %tobool93, label %land.lhs.true94, label %if.end100, !dbg !8778

land.lhs.true94:                                  ; preds = %if.end91
  %64 = load i64, i64* %roundBits, align 8, !dbg !8779
  %shl95 = shl i64 %64, 1, !dbg !8780
  %65 = load i64, i64* %roundIncrement, align 8, !dbg !8781
  %cmp96 = icmp eq i64 %shl95, %65, !dbg !8782
  br i1 %cmp96, label %if.then98, label %if.end100, !dbg !8783

if.then98:                                        ; preds = %land.lhs.true94
  %66 = load i64, i64* %roundIncrement, align 8, !dbg !8784
  %67 = load i64, i64* %roundMask, align 8, !dbg !8786
  %or99 = or i64 %67, %66, !dbg !8786
  store i64 %or99, i64* %roundMask, align 8, !dbg !8786
  br label %if.end100, !dbg !8787

if.end100:                                        ; preds = %if.then98, %land.lhs.true94, %if.end91
  %68 = load i64, i64* %roundMask, align 8, !dbg !8788
  %neg101 = xor i64 %68, -1, !dbg !8789
  %69 = load i64, i64* %zSig0.addr, align 8, !dbg !8790
  %and102 = and i64 %69, %neg101, !dbg !8790
  store i64 %and102, i64* %zSig0.addr, align 8, !dbg !8790
  %70 = load i64, i64* %zSig0.addr, align 8, !dbg !8791
  %cmp103 = icmp eq i64 %70, 0, !dbg !8793
  br i1 %cmp103, label %if.then105, label %if.end106, !dbg !8794

if.then105:                                       ; preds = %if.end100
  store i32 0, i32* %zExp.addr, align 4, !dbg !8795
  br label %if.end106, !dbg !8796

if.end106:                                        ; preds = %if.then105, %if.end100
  %71 = load i32, i32* %zSign.addr, align 4, !dbg !8797
  %72 = load i32, i32* %zExp.addr, align 4, !dbg !8798
  %73 = load i64, i64* %zSig0.addr, align 8, !dbg !8799
  %call107 = call { i16, i64 } @packFloatx80(i32 %71, i32 %72, i64 %73), !dbg !8800
  %74 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8800
  %75 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %74, i32 0, i32 0, !dbg !8800
  %76 = extractvalue { i16, i64 } %call107, 0, !dbg !8800
  store i16 %76, i16* %75, align 8, !dbg !8800
  %77 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %74, i32 0, i32 1, !dbg !8800
  %78 = extractvalue { i16, i64 } %call107, 1, !dbg !8800
  store i64 %78, i64* %77, align 8, !dbg !8800
  br label %return, !dbg !8801

precision80:                                      ; preds = %if.else9, %if.then
  %79 = load i64, i64* %zSig1.addr, align 8, !dbg !8802
  %cmp108 = icmp slt i64 %79, 0, !dbg !8803
  %conv109 = zext i1 %cmp108 to i32, !dbg !8803
  store i32 %conv109, i32* %increment, align 4, !dbg !8804
  %80 = load i32, i32* %roundNearestEven, align 4, !dbg !8805
  %tobool110 = icmp ne i32 %80, 0, !dbg !8805
  br i1 %tobool110, label %if.end130, label %if.then111, !dbg !8807

if.then111:                                       ; preds = %precision80
  %81 = load i32, i32* %roundingMode, align 4, !dbg !8808
  %cmp112 = icmp eq i32 %81, 1, !dbg !8811
  br i1 %cmp112, label %if.then114, label %if.else115, !dbg !8812

if.then114:                                       ; preds = %if.then111
  store i32 0, i32* %increment, align 4, !dbg !8813
  br label %if.end129, !dbg !8815

if.else115:                                       ; preds = %if.then111
  %82 = load i32, i32* %zSign.addr, align 4, !dbg !8816
  %tobool116 = icmp ne i32 %82, 0, !dbg !8816
  br i1 %tobool116, label %if.then117, label %if.else121, !dbg !8819

if.then117:                                       ; preds = %if.else115
  %83 = load i32, i32* %roundingMode, align 4, !dbg !8820
  %cmp118 = icmp eq i32 %83, 3, !dbg !8822
  br i1 %cmp118, label %land.rhs, label %land.end, !dbg !8823

land.rhs:                                         ; preds = %if.then117
  %84 = load i64, i64* %zSig1.addr, align 8, !dbg !8824
  %tobool120 = icmp ne i64 %84, 0, !dbg !8823
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then117
  %85 = phi i1 [ false, %if.then117 ], [ %tobool120, %land.rhs ]
  %land.ext = zext i1 %85 to i32, !dbg !8823
  store i32 %land.ext, i32* %increment, align 4, !dbg !8825
  br label %if.end128, !dbg !8826

if.else121:                                       ; preds = %if.else115
  %86 = load i32, i32* %roundingMode, align 4, !dbg !8827
  %cmp122 = icmp eq i32 %86, 2, !dbg !8829
  br i1 %cmp122, label %land.rhs124, label %land.end126, !dbg !8830

land.rhs124:                                      ; preds = %if.else121
  %87 = load i64, i64* %zSig1.addr, align 8, !dbg !8831
  %tobool125 = icmp ne i64 %87, 0, !dbg !8830
  br label %land.end126

land.end126:                                      ; preds = %land.rhs124, %if.else121
  %88 = phi i1 [ false, %if.else121 ], [ %tobool125, %land.rhs124 ]
  %land.ext127 = zext i1 %88 to i32, !dbg !8830
  store i32 %land.ext127, i32* %increment, align 4, !dbg !8832
  br label %if.end128

if.end128:                                        ; preds = %land.end126, %land.end
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then114
  br label %if.end130, !dbg !8833

if.end130:                                        ; preds = %if.end129, %precision80
  %89 = load i32, i32* %zExp.addr, align 4, !dbg !8834
  %sub131 = sub nsw i32 %89, 1, !dbg !8836
  %cmp132 = icmp ule i32 32765, %sub131, !dbg !8837
  br i1 %cmp132, label %if.then134, label %if.end228, !dbg !8838

if.then134:                                       ; preds = %if.end130
  %90 = load i32, i32* %zExp.addr, align 4, !dbg !8839
  %cmp135 = icmp slt i32 32766, %90, !dbg !8842
  br i1 %cmp135, label %if.then145, label %lor.lhs.false137, !dbg !8843

lor.lhs.false137:                                 ; preds = %if.then134
  %91 = load i32, i32* %zExp.addr, align 4, !dbg !8844
  %cmp138 = icmp eq i32 %91, 32766, !dbg !8845
  br i1 %cmp138, label %land.lhs.true140, label %if.end163, !dbg !8846

land.lhs.true140:                                 ; preds = %lor.lhs.false137
  %92 = load i64, i64* %zSig0.addr, align 8, !dbg !8847
  %cmp141 = icmp eq i64 %92, -1, !dbg !8848
  br i1 %cmp141, label %land.lhs.true143, label %if.end163, !dbg !8849

land.lhs.true143:                                 ; preds = %land.lhs.true140
  %93 = load i32, i32* %increment, align 4, !dbg !8850
  %tobool144 = icmp ne i32 %93, 0, !dbg !8850
  br i1 %tobool144, label %if.then145, label %if.end163, !dbg !8851

if.then145:                                       ; preds = %land.lhs.true143, %if.then134
  store i64 0, i64* %roundMask, align 8, !dbg !8852
  br label %overflow, !dbg !8854

overflow:                                         ; preds = %if.then145, %if.then43
  call void @float_raise(i32 9), !dbg !8855
  %94 = load i32, i32* %roundingMode, align 4, !dbg !8856
  %cmp146 = icmp eq i32 %94, 1, !dbg !8858
  br i1 %cmp146, label %if.then158, label %lor.lhs.false148, !dbg !8859

lor.lhs.false148:                                 ; preds = %overflow
  %95 = load i32, i32* %zSign.addr, align 4, !dbg !8860
  %tobool149 = icmp ne i32 %95, 0, !dbg !8860
  br i1 %tobool149, label %land.lhs.true150, label %lor.lhs.false153, !dbg !8861

land.lhs.true150:                                 ; preds = %lor.lhs.false148
  %96 = load i32, i32* %roundingMode, align 4, !dbg !8862
  %cmp151 = icmp eq i32 %96, 2, !dbg !8863
  br i1 %cmp151, label %if.then158, label %lor.lhs.false153, !dbg !8864

lor.lhs.false153:                                 ; preds = %land.lhs.true150, %lor.lhs.false148
  %97 = load i32, i32* %zSign.addr, align 4, !dbg !8865
  %tobool154 = icmp ne i32 %97, 0, !dbg !8865
  br i1 %tobool154, label %if.end161, label %land.lhs.true155, !dbg !8866

land.lhs.true155:                                 ; preds = %lor.lhs.false153
  %98 = load i32, i32* %roundingMode, align 4, !dbg !8867
  %cmp156 = icmp eq i32 %98, 3, !dbg !8868
  br i1 %cmp156, label %if.then158, label %if.end161, !dbg !8869

if.then158:                                       ; preds = %land.lhs.true155, %land.lhs.true150, %overflow
  %99 = load i32, i32* %zSign.addr, align 4, !dbg !8870
  %100 = load i64, i64* %roundMask, align 8, !dbg !8872
  %neg159 = xor i64 %100, -1, !dbg !8873
  %call160 = call { i16, i64 } @packFloatx80(i32 %99, i32 32766, i64 %neg159), !dbg !8874
  %101 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8874
  %102 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %101, i32 0, i32 0, !dbg !8874
  %103 = extractvalue { i16, i64 } %call160, 0, !dbg !8874
  store i16 %103, i16* %102, align 8, !dbg !8874
  %104 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %101, i32 0, i32 1, !dbg !8874
  %105 = extractvalue { i16, i64 } %call160, 1, !dbg !8874
  store i64 %105, i64* %104, align 8, !dbg !8874
  br label %return, !dbg !8875

if.end161:                                        ; preds = %land.lhs.true155, %lor.lhs.false153
  %106 = load i32, i32* %zSign.addr, align 4, !dbg !8876
  %call162 = call { i16, i64 } @packFloatx80(i32 %106, i32 32767, i64 -9223372036854775808), !dbg !8877
  %107 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8877
  %108 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %107, i32 0, i32 0, !dbg !8877
  %109 = extractvalue { i16, i64 } %call162, 0, !dbg !8877
  store i16 %109, i16* %108, align 8, !dbg !8877
  %110 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %107, i32 0, i32 1, !dbg !8877
  %111 = extractvalue { i16, i64 } %call162, 1, !dbg !8877
  store i64 %111, i64* %110, align 8, !dbg !8877
  br label %return, !dbg !8878

if.end163:                                        ; preds = %land.lhs.true143, %land.lhs.true140, %lor.lhs.false137
  %112 = load i32, i32* %zExp.addr, align 4, !dbg !8879
  %cmp164 = icmp sle i32 %112, 0, !dbg !8881
  br i1 %cmp164, label %if.then166, label %if.end227, !dbg !8882

if.then166:                                       ; preds = %if.end163
  %113 = load i32, i32* @float_detect_tininess, align 4, !dbg !8883
  %cmp167 = icmp eq i32 %113, 1, !dbg !8885
  br i1 %cmp167, label %lor.end177, label %lor.lhs.false169, !dbg !8886

lor.lhs.false169:                                 ; preds = %if.then166
  %114 = load i32, i32* %zExp.addr, align 4, !dbg !8887
  %cmp170 = icmp slt i32 %114, 0, !dbg !8888
  br i1 %cmp170, label %lor.end177, label %lor.lhs.false172, !dbg !8889

lor.lhs.false172:                                 ; preds = %lor.lhs.false169
  %115 = load i32, i32* %increment, align 4, !dbg !8890
  %tobool173 = icmp ne i32 %115, 0, !dbg !8890
  br i1 %tobool173, label %lor.rhs174, label %lor.end177, !dbg !8891

lor.rhs174:                                       ; preds = %lor.lhs.false172
  %116 = load i64, i64* %zSig0.addr, align 8, !dbg !8892
  %cmp175 = icmp ult i64 %116, -1, !dbg !8893
  br label %lor.end177, !dbg !8891

lor.end177:                                       ; preds = %lor.rhs174, %lor.lhs.false172, %lor.lhs.false169, %if.then166
  %117 = phi i1 [ true, %lor.lhs.false172 ], [ true, %lor.lhs.false169 ], [ true, %if.then166 ], [ %cmp175, %lor.rhs174 ]
  %lor.ext178 = zext i1 %117 to i32, !dbg !8891
  store i32 %lor.ext178, i32* %isTiny, align 4, !dbg !8894
  %118 = load i64, i64* %zSig0.addr, align 8, !dbg !8895
  %119 = load i64, i64* %zSig1.addr, align 8, !dbg !8896
  %120 = load i32, i32* %zExp.addr, align 4, !dbg !8897
  %sub179 = sub nsw i32 1, %120, !dbg !8898
  call void @shift64ExtraRightJamming(i64 %118, i64 %119, i32 %sub179, i64* %zSig0.addr, i64* %zSig1.addr), !dbg !8899
  store i32 0, i32* %zExp.addr, align 4, !dbg !8900
  %121 = load i32, i32* %isTiny, align 4, !dbg !8901
  %tobool180 = icmp ne i32 %121, 0, !dbg !8901
  br i1 %tobool180, label %land.lhs.true181, label %if.end184, !dbg !8903

land.lhs.true181:                                 ; preds = %lor.end177
  %122 = load i64, i64* %zSig1.addr, align 8, !dbg !8904
  %tobool182 = icmp ne i64 %122, 0, !dbg !8904
  br i1 %tobool182, label %if.then183, label %if.end184, !dbg !8905

if.then183:                                       ; preds = %land.lhs.true181
  call void @float_raise(i32 4), !dbg !8906
  br label %if.end184, !dbg !8906

if.end184:                                        ; preds = %if.then183, %land.lhs.true181, %lor.end177
  %123 = load i64, i64* %zSig1.addr, align 8, !dbg !8907
  %tobool185 = icmp ne i64 %123, 0, !dbg !8907
  br i1 %tobool185, label %if.then186, label %if.end188, !dbg !8909

if.then186:                                       ; preds = %if.end184
  %124 = load i32, i32* @float_exception_flags, align 4, !dbg !8910
  %or187 = or i32 %124, 1, !dbg !8910
  store i32 %or187, i32* @float_exception_flags, align 4, !dbg !8910
  br label %if.end188, !dbg !8911

if.end188:                                        ; preds = %if.then186, %if.end184
  %125 = load i32, i32* %roundNearestEven, align 4, !dbg !8912
  %tobool189 = icmp ne i32 %125, 0, !dbg !8912
  br i1 %tobool189, label %if.then190, label %if.else193, !dbg !8914

if.then190:                                       ; preds = %if.end188
  %126 = load i64, i64* %zSig1.addr, align 8, !dbg !8915
  %cmp191 = icmp slt i64 %126, 0, !dbg !8917
  %conv192 = zext i1 %cmp191 to i32, !dbg !8917
  store i32 %conv192, i32* %increment, align 4, !dbg !8918
  br label %if.end210, !dbg !8919

if.else193:                                       ; preds = %if.end188
  %127 = load i32, i32* %zSign.addr, align 4, !dbg !8920
  %tobool194 = icmp ne i32 %127, 0, !dbg !8920
  br i1 %tobool194, label %if.then195, label %if.else202, !dbg !8923

if.then195:                                       ; preds = %if.else193
  %128 = load i32, i32* %roundingMode, align 4, !dbg !8924
  %cmp196 = icmp eq i32 %128, 3, !dbg !8926
  br i1 %cmp196, label %land.rhs198, label %land.end200, !dbg !8927

land.rhs198:                                      ; preds = %if.then195
  %129 = load i64, i64* %zSig1.addr, align 8, !dbg !8928
  %tobool199 = icmp ne i64 %129, 0, !dbg !8927
  br label %land.end200

land.end200:                                      ; preds = %land.rhs198, %if.then195
  %130 = phi i1 [ false, %if.then195 ], [ %tobool199, %land.rhs198 ]
  %land.ext201 = zext i1 %130 to i32, !dbg !8927
  store i32 %land.ext201, i32* %increment, align 4, !dbg !8929
  br label %if.end209, !dbg !8930

if.else202:                                       ; preds = %if.else193
  %131 = load i32, i32* %roundingMode, align 4, !dbg !8931
  %cmp203 = icmp eq i32 %131, 2, !dbg !8933
  br i1 %cmp203, label %land.rhs205, label %land.end207, !dbg !8934

land.rhs205:                                      ; preds = %if.else202
  %132 = load i64, i64* %zSig1.addr, align 8, !dbg !8935
  %tobool206 = icmp ne i64 %132, 0, !dbg !8934
  br label %land.end207

land.end207:                                      ; preds = %land.rhs205, %if.else202
  %133 = phi i1 [ false, %if.else202 ], [ %tobool206, %land.rhs205 ]
  %land.ext208 = zext i1 %133 to i32, !dbg !8934
  store i32 %land.ext208, i32* %increment, align 4, !dbg !8936
  br label %if.end209

if.end209:                                        ; preds = %land.end207, %land.end200
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %if.then190
  %134 = load i32, i32* %increment, align 4, !dbg !8937
  %tobool211 = icmp ne i32 %134, 0, !dbg !8937
  br i1 %tobool211, label %if.then212, label %if.end225, !dbg !8939

if.then212:                                       ; preds = %if.end210
  %135 = load i64, i64* %zSig0.addr, align 8, !dbg !8940
  %inc213 = add i64 %135, 1, !dbg !8940
  store i64 %inc213, i64* %zSig0.addr, align 8, !dbg !8940
  %136 = load i64, i64* %zSig1.addr, align 8, !dbg !8942
  %shl214 = shl i64 %136, 1, !dbg !8943
  %cmp215 = icmp eq i64 %shl214, 0, !dbg !8944
  %conv216 = zext i1 %cmp215 to i32, !dbg !8944
  %137 = load i32, i32* %roundNearestEven, align 4, !dbg !8945
  %and217 = and i32 %conv216, %137, !dbg !8946
  %neg218 = xor i32 %and217, -1, !dbg !8947
  %conv219 = sext i32 %neg218 to i64, !dbg !8947
  %138 = load i64, i64* %zSig0.addr, align 8, !dbg !8948
  %and220 = and i64 %138, %conv219, !dbg !8948
  store i64 %and220, i64* %zSig0.addr, align 8, !dbg !8948
  %139 = load i64, i64* %zSig0.addr, align 8, !dbg !8949
  %cmp221 = icmp slt i64 %139, 0, !dbg !8951
  br i1 %cmp221, label %if.then223, label %if.end224, !dbg !8952

if.then223:                                       ; preds = %if.then212
  store i32 1, i32* %zExp.addr, align 4, !dbg !8953
  br label %if.end224, !dbg !8954

if.end224:                                        ; preds = %if.then223, %if.then212
  br label %if.end225, !dbg !8955

if.end225:                                        ; preds = %if.end224, %if.end210
  %140 = load i32, i32* %zSign.addr, align 4, !dbg !8956
  %141 = load i32, i32* %zExp.addr, align 4, !dbg !8957
  %142 = load i64, i64* %zSig0.addr, align 8, !dbg !8958
  %call226 = call { i16, i64 } @packFloatx80(i32 %140, i32 %141, i64 %142), !dbg !8959
  %143 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8959
  %144 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %143, i32 0, i32 0, !dbg !8959
  %145 = extractvalue { i16, i64 } %call226, 0, !dbg !8959
  store i16 %145, i16* %144, align 8, !dbg !8959
  %146 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %143, i32 0, i32 1, !dbg !8959
  %147 = extractvalue { i16, i64 } %call226, 1, !dbg !8959
  store i64 %147, i64* %146, align 8, !dbg !8959
  br label %return, !dbg !8960

if.end227:                                        ; preds = %if.end163
  br label %if.end228, !dbg !8961

if.end228:                                        ; preds = %if.end227, %if.end130
  %148 = load i64, i64* %zSig1.addr, align 8, !dbg !8962
  %tobool229 = icmp ne i64 %148, 0, !dbg !8962
  br i1 %tobool229, label %if.then230, label %if.end232, !dbg !8964

if.then230:                                       ; preds = %if.end228
  %149 = load i32, i32* @float_exception_flags, align 4, !dbg !8965
  %or231 = or i32 %149, 1, !dbg !8965
  store i32 %or231, i32* @float_exception_flags, align 4, !dbg !8965
  br label %if.end232, !dbg !8966

if.end232:                                        ; preds = %if.then230, %if.end228
  %150 = load i32, i32* %increment, align 4, !dbg !8967
  %tobool233 = icmp ne i32 %150, 0, !dbg !8967
  br i1 %tobool233, label %if.then234, label %if.else249, !dbg !8969

if.then234:                                       ; preds = %if.end232
  %151 = load i64, i64* %zSig0.addr, align 8, !dbg !8970
  %inc235 = add i64 %151, 1, !dbg !8970
  store i64 %inc235, i64* %zSig0.addr, align 8, !dbg !8970
  %152 = load i64, i64* %zSig0.addr, align 8, !dbg !8972
  %cmp236 = icmp eq i64 %152, 0, !dbg !8974
  br i1 %cmp236, label %if.then238, label %if.else240, !dbg !8975

if.then238:                                       ; preds = %if.then234
  %153 = load i32, i32* %zExp.addr, align 4, !dbg !8976
  %inc239 = add nsw i32 %153, 1, !dbg !8976
  store i32 %inc239, i32* %zExp.addr, align 4, !dbg !8976
  store i64 -9223372036854775808, i64* %zSig0.addr, align 8, !dbg !8978
  br label %if.end248, !dbg !8979

if.else240:                                       ; preds = %if.then234
  %154 = load i64, i64* %zSig1.addr, align 8, !dbg !8980
  %shl241 = shl i64 %154, 1, !dbg !8982
  %cmp242 = icmp eq i64 %shl241, 0, !dbg !8983
  %conv243 = zext i1 %cmp242 to i32, !dbg !8983
  %155 = load i32, i32* %roundNearestEven, align 4, !dbg !8984
  %and244 = and i32 %conv243, %155, !dbg !8985
  %neg245 = xor i32 %and244, -1, !dbg !8986
  %conv246 = sext i32 %neg245 to i64, !dbg !8986
  %156 = load i64, i64* %zSig0.addr, align 8, !dbg !8987
  %and247 = and i64 %156, %conv246, !dbg !8987
  store i64 %and247, i64* %zSig0.addr, align 8, !dbg !8987
  br label %if.end248

if.end248:                                        ; preds = %if.else240, %if.then238
  br label %if.end254, !dbg !8988

if.else249:                                       ; preds = %if.end232
  %157 = load i64, i64* %zSig0.addr, align 8, !dbg !8989
  %cmp250 = icmp eq i64 %157, 0, !dbg !8992
  br i1 %cmp250, label %if.then252, label %if.end253, !dbg !8993

if.then252:                                       ; preds = %if.else249
  store i32 0, i32* %zExp.addr, align 4, !dbg !8994
  br label %if.end253, !dbg !8995

if.end253:                                        ; preds = %if.then252, %if.else249
  br label %if.end254

if.end254:                                        ; preds = %if.end253, %if.end248
  %158 = load i32, i32* %zSign.addr, align 4, !dbg !8996
  %159 = load i32, i32* %zExp.addr, align 4, !dbg !8997
  %160 = load i64, i64* %zSig0.addr, align 8, !dbg !8998
  %call255 = call { i16, i64 } @packFloatx80(i32 %158, i32 %159, i64 %160), !dbg !8999
  %161 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !8999
  %162 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %161, i32 0, i32 0, !dbg !8999
  %163 = extractvalue { i16, i64 } %call255, 0, !dbg !8999
  store i16 %163, i16* %162, align 8, !dbg !8999
  %164 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %161, i32 0, i32 1, !dbg !8999
  %165 = extractvalue { i16, i64 } %call255, 1, !dbg !8999
  store i64 %165, i64* %164, align 8, !dbg !8999
  br label %return, !dbg !9000

return:                                           ; preds = %if.end254, %if.end225, %if.end161, %if.then158, %if.end106, %if.end79
  %166 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9001
  %167 = load { i16, i64 }, { i16, i64 }* %166, align 8, !dbg !9001
  ret { i16, i64 } %167, !dbg !9001
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_div(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9002 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig = alloca i64, align 8
  %bSig = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %rem2 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %term2 = alloca i64, align 8
  %z = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9003, metadata !DIExpression()), !dbg !9004
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9005, metadata !DIExpression()), !dbg !9006
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !9007, metadata !DIExpression()), !dbg !9008
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !9009, metadata !DIExpression()), !dbg !9010
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !9011, metadata !DIExpression()), !dbg !9012
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !9013, metadata !DIExpression()), !dbg !9014
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !9015, metadata !DIExpression()), !dbg !9016
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !9017, metadata !DIExpression()), !dbg !9018
  call void @llvm.dbg.declare(metadata i64* %aSig, metadata !9019, metadata !DIExpression()), !dbg !9020
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !9021, metadata !DIExpression()), !dbg !9022
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !9023, metadata !DIExpression()), !dbg !9024
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !9025, metadata !DIExpression()), !dbg !9026
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !9027, metadata !DIExpression()), !dbg !9028
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !9029, metadata !DIExpression()), !dbg !9030
  call void @llvm.dbg.declare(metadata i64* %rem2, metadata !9031, metadata !DIExpression()), !dbg !9032
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !9033, metadata !DIExpression()), !dbg !9034
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !9035, metadata !DIExpression()), !dbg !9036
  call void @llvm.dbg.declare(metadata i64* %term2, metadata !9037, metadata !DIExpression()), !dbg !9038
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !9039, metadata !DIExpression()), !dbg !9040
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9041
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9041
  %8 = load i16, i16* %7, align 8, !dbg !9041
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9041
  %10 = load i64, i64* %9, align 8, !dbg !9041
  %call = call i64 @extractFloatx80Frac(i16 %8, i64 %10), !dbg !9041
  store i64 %call, i64* %aSig, align 8, !dbg !9042
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9043
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9043
  %13 = load i16, i16* %12, align 8, !dbg !9043
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9043
  %15 = load i64, i64* %14, align 8, !dbg !9043
  %call1 = call i32 @extractFloatx80Exp(i16 %13, i64 %15), !dbg !9043
  store i32 %call1, i32* %aExp, align 4, !dbg !9044
  %16 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9045
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9045
  %18 = load i16, i16* %17, align 8, !dbg !9045
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9045
  %20 = load i64, i64* %19, align 8, !dbg !9045
  %call2 = call i32 @extractFloatx80Sign(i16 %18, i64 %20), !dbg !9045
  store i32 %call2, i32* %aSign, align 4, !dbg !9046
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9047
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9047
  %23 = load i16, i16* %22, align 8, !dbg !9047
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9047
  %25 = load i64, i64* %24, align 8, !dbg !9047
  %call3 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !9047
  store i64 %call3, i64* %bSig, align 8, !dbg !9048
  %26 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9049
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !9049
  %28 = load i16, i16* %27, align 8, !dbg !9049
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !9049
  %30 = load i64, i64* %29, align 8, !dbg !9049
  %call4 = call i32 @extractFloatx80Exp(i16 %28, i64 %30), !dbg !9049
  store i32 %call4, i32* %bExp, align 4, !dbg !9050
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9051
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !9051
  %33 = load i16, i16* %32, align 8, !dbg !9051
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !9051
  %35 = load i64, i64* %34, align 8, !dbg !9051
  %call5 = call i32 @extractFloatx80Sign(i16 %33, i64 %35), !dbg !9051
  store i32 %call5, i32* %bSign, align 4, !dbg !9052
  %36 = load i32, i32* %aSign, align 4, !dbg !9053
  %37 = load i32, i32* %bSign, align 4, !dbg !9054
  %xor = xor i32 %36, %37, !dbg !9055
  store i32 %xor, i32* %zSign, align 4, !dbg !9056
  %38 = load i32, i32* %aExp, align 4, !dbg !9057
  %cmp = icmp eq i32 %38, 32767, !dbg !9059
  br i1 %cmp, label %if.then, label %if.end17, !dbg !9060

if.then:                                          ; preds = %entry
  %39 = load i64, i64* %aSig, align 8, !dbg !9061
  %shl = shl i64 %39, 1, !dbg !9064
  %tobool = icmp ne i64 %shl, 0, !dbg !9065
  br i1 %tobool, label %if.then6, label %if.end, !dbg !9066

if.then6:                                         ; preds = %if.then
  %40 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9067
  %41 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 0, !dbg !9067
  %42 = load i16, i16* %41, align 8, !dbg !9067
  %43 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 1, !dbg !9067
  %44 = load i64, i64* %43, align 8, !dbg !9067
  %45 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9067
  %46 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 0, !dbg !9067
  %47 = load i16, i16* %46, align 8, !dbg !9067
  %48 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 1, !dbg !9067
  %49 = load i64, i64* %48, align 8, !dbg !9067
  %call7 = call { i16, i64 } @propagateFloatx80NaN(i16 %42, i64 %44, i16 %47, i64 %49), !dbg !9067
  %50 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9067
  %51 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %50, i32 0, i32 0, !dbg !9067
  %52 = extractvalue { i16, i64 } %call7, 0, !dbg !9067
  store i16 %52, i16* %51, align 8, !dbg !9067
  %53 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %50, i32 0, i32 1, !dbg !9067
  %54 = extractvalue { i16, i64 } %call7, 1, !dbg !9067
  store i64 %54, i64* %53, align 8, !dbg !9067
  br label %return, !dbg !9068

if.end:                                           ; preds = %if.then
  %55 = load i32, i32* %bExp, align 4, !dbg !9069
  %cmp8 = icmp eq i32 %55, 32767, !dbg !9071
  br i1 %cmp8, label %if.then9, label %if.end15, !dbg !9072

if.then9:                                         ; preds = %if.end
  %56 = load i64, i64* %bSig, align 8, !dbg !9073
  %shl10 = shl i64 %56, 1, !dbg !9076
  %tobool11 = icmp ne i64 %shl10, 0, !dbg !9077
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !9078

if.then12:                                        ; preds = %if.then9
  %57 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9079
  %58 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %57, i32 0, i32 0, !dbg !9079
  %59 = load i16, i16* %58, align 8, !dbg !9079
  %60 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %57, i32 0, i32 1, !dbg !9079
  %61 = load i64, i64* %60, align 8, !dbg !9079
  %62 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9079
  %63 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %62, i32 0, i32 0, !dbg !9079
  %64 = load i16, i16* %63, align 8, !dbg !9079
  %65 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %62, i32 0, i32 1, !dbg !9079
  %66 = load i64, i64* %65, align 8, !dbg !9079
  %call13 = call { i16, i64 } @propagateFloatx80NaN(i16 %59, i64 %61, i16 %64, i64 %66), !dbg !9079
  %67 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9079
  %68 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %67, i32 0, i32 0, !dbg !9079
  %69 = extractvalue { i16, i64 } %call13, 0, !dbg !9079
  store i16 %69, i16* %68, align 8, !dbg !9079
  %70 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %67, i32 0, i32 1, !dbg !9079
  %71 = extractvalue { i16, i64 } %call13, 1, !dbg !9079
  store i64 %71, i64* %70, align 8, !dbg !9079
  br label %return, !dbg !9080

if.end14:                                         ; preds = %if.then9
  br label %invalid, !dbg !9081

if.end15:                                         ; preds = %if.end
  %72 = load i32, i32* %zSign, align 4, !dbg !9082
  %call16 = call { i16, i64 } @packFloatx80(i32 %72, i32 32767, i64 -9223372036854775808), !dbg !9083
  %73 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9083
  %74 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %73, i32 0, i32 0, !dbg !9083
  %75 = extractvalue { i16, i64 } %call16, 0, !dbg !9083
  store i16 %75, i16* %74, align 8, !dbg !9083
  %76 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %73, i32 0, i32 1, !dbg !9083
  %77 = extractvalue { i16, i64 } %call16, 1, !dbg !9083
  store i64 %77, i64* %76, align 8, !dbg !9083
  br label %return, !dbg !9084

if.end17:                                         ; preds = %entry
  %78 = load i32, i32* %bExp, align 4, !dbg !9085
  %cmp18 = icmp eq i32 %78, 32767, !dbg !9087
  br i1 %cmp18, label %if.then19, label %if.end26, !dbg !9088

if.then19:                                        ; preds = %if.end17
  %79 = load i64, i64* %bSig, align 8, !dbg !9089
  %shl20 = shl i64 %79, 1, !dbg !9092
  %tobool21 = icmp ne i64 %shl20, 0, !dbg !9093
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !9094

if.then22:                                        ; preds = %if.then19
  %80 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9095
  %81 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %80, i32 0, i32 0, !dbg !9095
  %82 = load i16, i16* %81, align 8, !dbg !9095
  %83 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %80, i32 0, i32 1, !dbg !9095
  %84 = load i64, i64* %83, align 8, !dbg !9095
  %85 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9095
  %86 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %85, i32 0, i32 0, !dbg !9095
  %87 = load i16, i16* %86, align 8, !dbg !9095
  %88 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %85, i32 0, i32 1, !dbg !9095
  %89 = load i64, i64* %88, align 8, !dbg !9095
  %call23 = call { i16, i64 } @propagateFloatx80NaN(i16 %82, i64 %84, i16 %87, i64 %89), !dbg !9095
  %90 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9095
  %91 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %90, i32 0, i32 0, !dbg !9095
  %92 = extractvalue { i16, i64 } %call23, 0, !dbg !9095
  store i16 %92, i16* %91, align 8, !dbg !9095
  %93 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %90, i32 0, i32 1, !dbg !9095
  %94 = extractvalue { i16, i64 } %call23, 1, !dbg !9095
  store i64 %94, i64* %93, align 8, !dbg !9095
  br label %return, !dbg !9096

if.end24:                                         ; preds = %if.then19
  %95 = load i32, i32* %zSign, align 4, !dbg !9097
  %call25 = call { i16, i64 } @packFloatx80(i32 %95, i32 0, i64 0), !dbg !9098
  %96 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9098
  %97 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %96, i32 0, i32 0, !dbg !9098
  %98 = extractvalue { i16, i64 } %call25, 0, !dbg !9098
  store i16 %98, i16* %97, align 8, !dbg !9098
  %99 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %96, i32 0, i32 1, !dbg !9098
  %100 = extractvalue { i16, i64 } %call25, 1, !dbg !9098
  store i64 %100, i64* %99, align 8, !dbg !9098
  br label %return, !dbg !9099

if.end26:                                         ; preds = %if.end17
  %101 = load i32, i32* %bExp, align 4, !dbg !9100
  %cmp27 = icmp eq i32 %101, 0, !dbg !9102
  br i1 %cmp27, label %if.then28, label %if.end37, !dbg !9103

if.then28:                                        ; preds = %if.end26
  %102 = load i64, i64* %bSig, align 8, !dbg !9104
  %cmp29 = icmp eq i64 %102, 0, !dbg !9107
  br i1 %cmp29, label %if.then30, label %if.end36, !dbg !9108

if.then30:                                        ; preds = %if.then28
  %103 = load i32, i32* %aExp, align 4, !dbg !9109
  %conv = sext i32 %103 to i64, !dbg !9109
  %104 = load i64, i64* %aSig, align 8, !dbg !9112
  %or = or i64 %conv, %104, !dbg !9113
  %cmp31 = icmp eq i64 %or, 0, !dbg !9114
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !9115

if.then33:                                        ; preds = %if.then30
  br label %invalid, !dbg !9116

invalid:                                          ; preds = %if.then33, %if.end14
  call void @float_raise(i32 16), !dbg !9117
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !9119
  store i64 -1, i64* %low, align 8, !dbg !9120
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !9121
  store i16 32767, i16* %high, align 8, !dbg !9122
  %105 = bitcast %struct.floatx80* %retval to i8*, !dbg !9123
  %106 = bitcast %struct.floatx80* %z to i8*, !dbg !9123
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false), !dbg !9123
  br label %return, !dbg !9124

if.end34:                                         ; preds = %if.then30
  call void @float_raise(i32 2), !dbg !9125
  %107 = load i32, i32* %zSign, align 4, !dbg !9126
  %call35 = call { i16, i64 } @packFloatx80(i32 %107, i32 32767, i64 -9223372036854775808), !dbg !9127
  %108 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9127
  %109 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %108, i32 0, i32 0, !dbg !9127
  %110 = extractvalue { i16, i64 } %call35, 0, !dbg !9127
  store i16 %110, i16* %109, align 8, !dbg !9127
  %111 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %108, i32 0, i32 1, !dbg !9127
  %112 = extractvalue { i16, i64 } %call35, 1, !dbg !9127
  store i64 %112, i64* %111, align 8, !dbg !9127
  br label %return, !dbg !9128

if.end36:                                         ; preds = %if.then28
  %113 = load i64, i64* %bSig, align 8, !dbg !9129
  call void @normalizeFloatx80Subnormal(i64 %113, i32* %bExp, i64* %bSig), !dbg !9130
  br label %if.end37, !dbg !9131

if.end37:                                         ; preds = %if.end36, %if.end26
  %114 = load i32, i32* %aExp, align 4, !dbg !9132
  %cmp38 = icmp eq i32 %114, 0, !dbg !9134
  br i1 %cmp38, label %if.then40, label %if.end46, !dbg !9135

if.then40:                                        ; preds = %if.end37
  %115 = load i64, i64* %aSig, align 8, !dbg !9136
  %cmp41 = icmp eq i64 %115, 0, !dbg !9139
  br i1 %cmp41, label %if.then43, label %if.end45, !dbg !9140

if.then43:                                        ; preds = %if.then40
  %116 = load i32, i32* %zSign, align 4, !dbg !9141
  %call44 = call { i16, i64 } @packFloatx80(i32 %116, i32 0, i64 0), !dbg !9142
  %117 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9142
  %118 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %117, i32 0, i32 0, !dbg !9142
  %119 = extractvalue { i16, i64 } %call44, 0, !dbg !9142
  store i16 %119, i16* %118, align 8, !dbg !9142
  %120 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %117, i32 0, i32 1, !dbg !9142
  %121 = extractvalue { i16, i64 } %call44, 1, !dbg !9142
  store i64 %121, i64* %120, align 8, !dbg !9142
  br label %return, !dbg !9143

if.end45:                                         ; preds = %if.then40
  %122 = load i64, i64* %aSig, align 8, !dbg !9144
  call void @normalizeFloatx80Subnormal(i64 %122, i32* %aExp, i64* %aSig), !dbg !9145
  br label %if.end46, !dbg !9146

if.end46:                                         ; preds = %if.end45, %if.end37
  %123 = load i32, i32* %aExp, align 4, !dbg !9147
  %124 = load i32, i32* %bExp, align 4, !dbg !9148
  %sub = sub nsw i32 %123, %124, !dbg !9149
  %add = add nsw i32 %sub, 16382, !dbg !9150
  store i32 %add, i32* %zExp, align 4, !dbg !9151
  store i64 0, i64* %rem1, align 8, !dbg !9152
  %125 = load i64, i64* %bSig, align 8, !dbg !9153
  %126 = load i64, i64* %aSig, align 8, !dbg !9155
  %cmp47 = icmp ule i64 %125, %126, !dbg !9156
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !9157

if.then49:                                        ; preds = %if.end46
  %127 = load i64, i64* %aSig, align 8, !dbg !9158
  call void @shift128Right(i64 %127, i64 0, i32 1, i64* %aSig, i64* %rem1), !dbg !9160
  %128 = load i32, i32* %zExp, align 4, !dbg !9161
  %inc = add nsw i32 %128, 1, !dbg !9161
  store i32 %inc, i32* %zExp, align 4, !dbg !9161
  br label %if.end50, !dbg !9162

if.end50:                                         ; preds = %if.then49, %if.end46
  %129 = load i64, i64* %aSig, align 8, !dbg !9163
  %130 = load i64, i64* %rem1, align 8, !dbg !9164
  %131 = load i64, i64* %bSig, align 8, !dbg !9165
  %call51 = call i64 @estimateDiv128To64(i64 %129, i64 %130, i64 %131), !dbg !9166
  store i64 %call51, i64* %zSig0, align 8, !dbg !9167
  %132 = load i64, i64* %bSig, align 8, !dbg !9168
  %133 = load i64, i64* %zSig0, align 8, !dbg !9169
  call void @mul64To128(i64 %132, i64 %133, i64* %term0, i64* %term1), !dbg !9170
  %134 = load i64, i64* %aSig, align 8, !dbg !9171
  %135 = load i64, i64* %rem1, align 8, !dbg !9172
  %136 = load i64, i64* %term0, align 8, !dbg !9173
  %137 = load i64, i64* %term1, align 8, !dbg !9174
  call void @sub128(i64 %134, i64 %135, i64 %136, i64 %137, i64* %rem0, i64* %rem1), !dbg !9175
  br label %while.cond, !dbg !9176

while.cond:                                       ; preds = %while.body, %if.end50
  %138 = load i64, i64* %rem0, align 8, !dbg !9177
  %cmp52 = icmp slt i64 %138, 0, !dbg !9178
  br i1 %cmp52, label %while.body, label %while.end, !dbg !9176

while.body:                                       ; preds = %while.cond
  %139 = load i64, i64* %zSig0, align 8, !dbg !9179
  %dec = add i64 %139, -1, !dbg !9179
  store i64 %dec, i64* %zSig0, align 8, !dbg !9179
  %140 = load i64, i64* %rem0, align 8, !dbg !9181
  %141 = load i64, i64* %rem1, align 8, !dbg !9182
  %142 = load i64, i64* %bSig, align 8, !dbg !9183
  call void @add128(i64 %140, i64 %141, i64 0, i64 %142, i64* %rem0, i64* %rem1), !dbg !9184
  br label %while.cond, !dbg !9176, !llvm.loop !9185

while.end:                                        ; preds = %while.cond
  %143 = load i64, i64* %rem1, align 8, !dbg !9187
  %144 = load i64, i64* %bSig, align 8, !dbg !9188
  %call54 = call i64 @estimateDiv128To64(i64 %143, i64 0, i64 %144), !dbg !9189
  store i64 %call54, i64* %zSig1, align 8, !dbg !9190
  %145 = load i64, i64* %zSig1, align 8, !dbg !9191
  %shl55 = shl i64 %145, 1, !dbg !9193
  %cmp56 = icmp ule i64 %shl55, 8, !dbg !9194
  br i1 %cmp56, label %if.then58, label %if.end70, !dbg !9195

if.then58:                                        ; preds = %while.end
  %146 = load i64, i64* %bSig, align 8, !dbg !9196
  %147 = load i64, i64* %zSig1, align 8, !dbg !9198
  call void @mul64To128(i64 %146, i64 %147, i64* %term1, i64* %term2), !dbg !9199
  %148 = load i64, i64* %rem1, align 8, !dbg !9200
  %149 = load i64, i64* %term1, align 8, !dbg !9201
  %150 = load i64, i64* %term2, align 8, !dbg !9202
  call void @sub128(i64 %148, i64 0, i64 %149, i64 %150, i64* %rem1, i64* %rem2), !dbg !9203
  br label %while.cond59, !dbg !9204

while.cond59:                                     ; preds = %while.body62, %if.then58
  %151 = load i64, i64* %rem1, align 8, !dbg !9205
  %cmp60 = icmp slt i64 %151, 0, !dbg !9206
  br i1 %cmp60, label %while.body62, label %while.end64, !dbg !9204

while.body62:                                     ; preds = %while.cond59
  %152 = load i64, i64* %zSig1, align 8, !dbg !9207
  %dec63 = add i64 %152, -1, !dbg !9207
  store i64 %dec63, i64* %zSig1, align 8, !dbg !9207
  %153 = load i64, i64* %rem1, align 8, !dbg !9209
  %154 = load i64, i64* %rem2, align 8, !dbg !9210
  %155 = load i64, i64* %bSig, align 8, !dbg !9211
  call void @add128(i64 %153, i64 %154, i64 0, i64 %155, i64* %rem1, i64* %rem2), !dbg !9212
  br label %while.cond59, !dbg !9204, !llvm.loop !9213

while.end64:                                      ; preds = %while.cond59
  %156 = load i64, i64* %rem1, align 8, !dbg !9215
  %157 = load i64, i64* %rem2, align 8, !dbg !9216
  %or65 = or i64 %156, %157, !dbg !9217
  %cmp66 = icmp ne i64 %or65, 0, !dbg !9218
  %conv67 = zext i1 %cmp66 to i32, !dbg !9218
  %conv68 = sext i32 %conv67 to i64, !dbg !9219
  %158 = load i64, i64* %zSig1, align 8, !dbg !9220
  %or69 = or i64 %158, %conv68, !dbg !9220
  store i64 %or69, i64* %zSig1, align 8, !dbg !9220
  br label %if.end70, !dbg !9221

if.end70:                                         ; preds = %while.end64, %while.end
  %159 = load i32, i32* @floatx80_rounding_precision, align 4, !dbg !9222
  %160 = load i32, i32* %zSign, align 4, !dbg !9223
  %161 = load i32, i32* %zExp, align 4, !dbg !9224
  %162 = load i64, i64* %zSig0, align 8, !dbg !9225
  %163 = load i64, i64* %zSig1, align 8, !dbg !9226
  %call71 = call { i16, i64 } @roundAndPackFloatx80(i32 %159, i32 %160, i32 %161, i64 %162, i64 %163), !dbg !9227
  %164 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9227
  %165 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %164, i32 0, i32 0, !dbg !9227
  %166 = extractvalue { i16, i64 } %call71, 0, !dbg !9227
  store i16 %166, i16* %165, align 8, !dbg !9227
  %167 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %164, i32 0, i32 1, !dbg !9227
  %168 = extractvalue { i16, i64 } %call71, 1, !dbg !9227
  store i64 %168, i64* %167, align 8, !dbg !9227
  br label %return, !dbg !9228

return:                                           ; preds = %if.end70, %if.then43, %if.end34, %invalid, %if.end24, %if.then22, %if.end15, %if.then12, %if.then6
  %169 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9229
  %170 = load { i16, i64 }, { i16, i64 }* %169, align 8, !dbg !9229
  ret { i16, i64 } %170, !dbg !9229
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_rem(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9230 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %expDiff = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %bSig = alloca i64, align 8
  %q = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %alternateASig0 = alloca i64, align 8
  %alternateASig1 = alloca i64, align 8
  %z = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9231, metadata !DIExpression()), !dbg !9232
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9233, metadata !DIExpression()), !dbg !9234
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !9235, metadata !DIExpression()), !dbg !9236
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !9237, metadata !DIExpression()), !dbg !9238
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !9239, metadata !DIExpression()), !dbg !9240
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !9241, metadata !DIExpression()), !dbg !9242
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !9243, metadata !DIExpression()), !dbg !9244
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !9245, metadata !DIExpression()), !dbg !9246
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !9247, metadata !DIExpression()), !dbg !9248
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !9249, metadata !DIExpression()), !dbg !9250
  call void @llvm.dbg.declare(metadata i64* %bSig, metadata !9251, metadata !DIExpression()), !dbg !9252
  call void @llvm.dbg.declare(metadata i64* %q, metadata !9253, metadata !DIExpression()), !dbg !9254
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !9255, metadata !DIExpression()), !dbg !9256
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !9257, metadata !DIExpression()), !dbg !9258
  call void @llvm.dbg.declare(metadata i64* %alternateASig0, metadata !9259, metadata !DIExpression()), !dbg !9260
  call void @llvm.dbg.declare(metadata i64* %alternateASig1, metadata !9261, metadata !DIExpression()), !dbg !9262
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !9263, metadata !DIExpression()), !dbg !9264
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9265
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9265
  %8 = load i16, i16* %7, align 8, !dbg !9265
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9265
  %10 = load i64, i64* %9, align 8, !dbg !9265
  %call = call i64 @extractFloatx80Frac(i16 %8, i64 %10), !dbg !9265
  store i64 %call, i64* %aSig0, align 8, !dbg !9266
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9267
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9267
  %13 = load i16, i16* %12, align 8, !dbg !9267
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9267
  %15 = load i64, i64* %14, align 8, !dbg !9267
  %call1 = call i32 @extractFloatx80Exp(i16 %13, i64 %15), !dbg !9267
  store i32 %call1, i32* %aExp, align 4, !dbg !9268
  %16 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9269
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9269
  %18 = load i16, i16* %17, align 8, !dbg !9269
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9269
  %20 = load i64, i64* %19, align 8, !dbg !9269
  %call2 = call i32 @extractFloatx80Sign(i16 %18, i64 %20), !dbg !9269
  store i32 %call2, i32* %aSign, align 4, !dbg !9270
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9271
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9271
  %23 = load i16, i16* %22, align 8, !dbg !9271
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9271
  %25 = load i64, i64* %24, align 8, !dbg !9271
  %call3 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !9271
  store i64 %call3, i64* %bSig, align 8, !dbg !9272
  %26 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9273
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !9273
  %28 = load i16, i16* %27, align 8, !dbg !9273
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !9273
  %30 = load i64, i64* %29, align 8, !dbg !9273
  %call4 = call i32 @extractFloatx80Exp(i16 %28, i64 %30), !dbg !9273
  store i32 %call4, i32* %bExp, align 4, !dbg !9274
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9275
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !9275
  %33 = load i16, i16* %32, align 8, !dbg !9275
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !9275
  %35 = load i64, i64* %34, align 8, !dbg !9275
  %call5 = call i32 @extractFloatx80Sign(i16 %33, i64 %35), !dbg !9275
  store i32 %call5, i32* %bSign, align 4, !dbg !9276
  %36 = load i32, i32* %aExp, align 4, !dbg !9277
  %cmp = icmp eq i32 %36, 32767, !dbg !9279
  br i1 %cmp, label %if.then, label %if.end11, !dbg !9280

if.then:                                          ; preds = %entry
  %37 = load i64, i64* %aSig0, align 8, !dbg !9281
  %shl = shl i64 %37, 1, !dbg !9284
  %tobool = icmp ne i64 %shl, 0, !dbg !9285
  br i1 %tobool, label %if.then9, label %lor.lhs.false, !dbg !9286

lor.lhs.false:                                    ; preds = %if.then
  %38 = load i32, i32* %bExp, align 4, !dbg !9287
  %cmp6 = icmp eq i32 %38, 32767, !dbg !9288
  br i1 %cmp6, label %land.lhs.true, label %if.end, !dbg !9289

land.lhs.true:                                    ; preds = %lor.lhs.false
  %39 = load i64, i64* %bSig, align 8, !dbg !9290
  %shl7 = shl i64 %39, 1, !dbg !9291
  %tobool8 = icmp ne i64 %shl7, 0, !dbg !9292
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !9293

if.then9:                                         ; preds = %land.lhs.true, %if.then
  %40 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9294
  %41 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 0, !dbg !9294
  %42 = load i16, i16* %41, align 8, !dbg !9294
  %43 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %40, i32 0, i32 1, !dbg !9294
  %44 = load i64, i64* %43, align 8, !dbg !9294
  %45 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9294
  %46 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 0, !dbg !9294
  %47 = load i16, i16* %46, align 8, !dbg !9294
  %48 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %45, i32 0, i32 1, !dbg !9294
  %49 = load i64, i64* %48, align 8, !dbg !9294
  %call10 = call { i16, i64 } @propagateFloatx80NaN(i16 %42, i64 %44, i16 %47, i64 %49), !dbg !9294
  %50 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9294
  %51 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %50, i32 0, i32 0, !dbg !9294
  %52 = extractvalue { i16, i64 } %call10, 0, !dbg !9294
  store i16 %52, i16* %51, align 8, !dbg !9294
  %53 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %50, i32 0, i32 1, !dbg !9294
  %54 = extractvalue { i16, i64 } %call10, 1, !dbg !9294
  store i64 %54, i64* %53, align 8, !dbg !9294
  br label %return, !dbg !9296

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %invalid, !dbg !9297

if.end11:                                         ; preds = %entry
  %55 = load i32, i32* %bExp, align 4, !dbg !9298
  %cmp12 = icmp eq i32 %55, 32767, !dbg !9300
  br i1 %cmp12, label %if.then13, label %if.end19, !dbg !9301

if.then13:                                        ; preds = %if.end11
  %56 = load i64, i64* %bSig, align 8, !dbg !9302
  %shl14 = shl i64 %56, 1, !dbg !9305
  %tobool15 = icmp ne i64 %shl14, 0, !dbg !9306
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !9307

if.then16:                                        ; preds = %if.then13
  %57 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9308
  %58 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %57, i32 0, i32 0, !dbg !9308
  %59 = load i16, i16* %58, align 8, !dbg !9308
  %60 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %57, i32 0, i32 1, !dbg !9308
  %61 = load i64, i64* %60, align 8, !dbg !9308
  %62 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9308
  %63 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %62, i32 0, i32 0, !dbg !9308
  %64 = load i16, i16* %63, align 8, !dbg !9308
  %65 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %62, i32 0, i32 1, !dbg !9308
  %66 = load i64, i64* %65, align 8, !dbg !9308
  %call17 = call { i16, i64 } @propagateFloatx80NaN(i16 %59, i64 %61, i16 %64, i64 %66), !dbg !9308
  %67 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9308
  %68 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %67, i32 0, i32 0, !dbg !9308
  %69 = extractvalue { i16, i64 } %call17, 0, !dbg !9308
  store i16 %69, i16* %68, align 8, !dbg !9308
  %70 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %67, i32 0, i32 1, !dbg !9308
  %71 = extractvalue { i16, i64 } %call17, 1, !dbg !9308
  store i64 %71, i64* %70, align 8, !dbg !9308
  br label %return, !dbg !9309

if.end18:                                         ; preds = %if.then13
  %72 = bitcast %struct.floatx80* %retval to i8*, !dbg !9310
  %73 = bitcast %struct.floatx80* %a to i8*, !dbg !9310
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 16, i32 8, i1 false), !dbg !9310
  br label %return, !dbg !9311

if.end19:                                         ; preds = %if.end11
  %74 = load i32, i32* %bExp, align 4, !dbg !9312
  %cmp20 = icmp eq i32 %74, 0, !dbg !9314
  br i1 %cmp20, label %if.then21, label %if.end25, !dbg !9315

if.then21:                                        ; preds = %if.end19
  %75 = load i64, i64* %bSig, align 8, !dbg !9316
  %cmp22 = icmp eq i64 %75, 0, !dbg !9319
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !9320

if.then23:                                        ; preds = %if.then21
  br label %invalid, !dbg !9321

invalid:                                          ; preds = %if.then23, %if.end
  call void @float_raise(i32 16), !dbg !9322
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !9324
  store i64 -1, i64* %low, align 8, !dbg !9325
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !9326
  store i16 32767, i16* %high, align 8, !dbg !9327
  %76 = bitcast %struct.floatx80* %retval to i8*, !dbg !9328
  %77 = bitcast %struct.floatx80* %z to i8*, !dbg !9328
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 16, i32 8, i1 false), !dbg !9328
  br label %return, !dbg !9329

if.end24:                                         ; preds = %if.then21
  %78 = load i64, i64* %bSig, align 8, !dbg !9330
  call void @normalizeFloatx80Subnormal(i64 %78, i32* %bExp, i64* %bSig), !dbg !9331
  br label %if.end25, !dbg !9332

if.end25:                                         ; preds = %if.end24, %if.end19
  %79 = load i32, i32* %aExp, align 4, !dbg !9333
  %cmp26 = icmp eq i32 %79, 0, !dbg !9335
  br i1 %cmp26, label %if.then27, label %if.end32, !dbg !9336

if.then27:                                        ; preds = %if.end25
  %80 = load i64, i64* %aSig0, align 8, !dbg !9337
  %shl28 = shl i64 %80, 1, !dbg !9340
  %cmp29 = icmp eq i64 %shl28, 0, !dbg !9341
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !9342

if.then30:                                        ; preds = %if.then27
  %81 = bitcast %struct.floatx80* %retval to i8*, !dbg !9343
  %82 = bitcast %struct.floatx80* %a to i8*, !dbg !9343
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false), !dbg !9343
  br label %return, !dbg !9344

if.end31:                                         ; preds = %if.then27
  %83 = load i64, i64* %aSig0, align 8, !dbg !9345
  call void @normalizeFloatx80Subnormal(i64 %83, i32* %aExp, i64* %aSig0), !dbg !9346
  br label %if.end32, !dbg !9347

if.end32:                                         ; preds = %if.end31, %if.end25
  %84 = load i64, i64* %bSig, align 8, !dbg !9348
  %or = or i64 %84, -9223372036854775808, !dbg !9348
  store i64 %or, i64* %bSig, align 8, !dbg !9348
  %85 = load i32, i32* %aSign, align 4, !dbg !9349
  store i32 %85, i32* %zSign, align 4, !dbg !9350
  %86 = load i32, i32* %aExp, align 4, !dbg !9351
  %87 = load i32, i32* %bExp, align 4, !dbg !9352
  %sub = sub nsw i32 %86, %87, !dbg !9353
  store i32 %sub, i32* %expDiff, align 4, !dbg !9354
  store i64 0, i64* %aSig1, align 8, !dbg !9355
  %88 = load i32, i32* %expDiff, align 4, !dbg !9356
  %cmp33 = icmp slt i32 %88, 0, !dbg !9358
  br i1 %cmp33, label %if.then34, label %if.end38, !dbg !9359

if.then34:                                        ; preds = %if.end32
  %89 = load i32, i32* %expDiff, align 4, !dbg !9360
  %cmp35 = icmp slt i32 %89, -1, !dbg !9363
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !9364

if.then36:                                        ; preds = %if.then34
  %90 = bitcast %struct.floatx80* %retval to i8*, !dbg !9365
  %91 = bitcast %struct.floatx80* %a to i8*, !dbg !9365
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* %91, i64 16, i32 8, i1 false), !dbg !9365
  br label %return, !dbg !9366

if.end37:                                         ; preds = %if.then34
  %92 = load i64, i64* %aSig0, align 8, !dbg !9367
  call void @shift128Right(i64 %92, i64 0, i32 1, i64* %aSig0, i64* %aSig1), !dbg !9368
  store i32 0, i32* %expDiff, align 4, !dbg !9369
  br label %if.end38, !dbg !9370

if.end38:                                         ; preds = %if.end37, %if.end32
  %93 = load i64, i64* %bSig, align 8, !dbg !9371
  %94 = load i64, i64* %aSig0, align 8, !dbg !9372
  %cmp39 = icmp ule i64 %93, %94, !dbg !9373
  %conv = zext i1 %cmp39 to i32, !dbg !9373
  %conv40 = sext i32 %conv to i64, !dbg !9374
  store i64 %conv40, i64* %q, align 8, !dbg !9375
  %95 = load i64, i64* %q, align 8, !dbg !9376
  %tobool41 = icmp ne i64 %95, 0, !dbg !9376
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !9378

if.then42:                                        ; preds = %if.end38
  %96 = load i64, i64* %bSig, align 8, !dbg !9379
  %97 = load i64, i64* %aSig0, align 8, !dbg !9380
  %sub43 = sub i64 %97, %96, !dbg !9380
  store i64 %sub43, i64* %aSig0, align 8, !dbg !9380
  br label %if.end44, !dbg !9381

if.end44:                                         ; preds = %if.then42, %if.end38
  %98 = load i32, i32* %expDiff, align 4, !dbg !9382
  %sub45 = sub nsw i32 %98, 64, !dbg !9382
  store i32 %sub45, i32* %expDiff, align 4, !dbg !9382
  br label %while.cond, !dbg !9383

while.cond:                                       ; preds = %cond.end, %if.end44
  %99 = load i32, i32* %expDiff, align 4, !dbg !9384
  %cmp46 = icmp slt i32 0, %99, !dbg !9385
  br i1 %cmp46, label %while.body, label %while.end, !dbg !9383

while.body:                                       ; preds = %while.cond
  %100 = load i64, i64* %aSig0, align 8, !dbg !9386
  %101 = load i64, i64* %aSig1, align 8, !dbg !9388
  %102 = load i64, i64* %bSig, align 8, !dbg !9389
  %call48 = call i64 @estimateDiv128To64(i64 %100, i64 %101, i64 %102), !dbg !9390
  store i64 %call48, i64* %q, align 8, !dbg !9391
  %103 = load i64, i64* %q, align 8, !dbg !9392
  %cmp49 = icmp ult i64 2, %103, !dbg !9393
  br i1 %cmp49, label %cond.true, label %cond.false, !dbg !9394

cond.true:                                        ; preds = %while.body
  %104 = load i64, i64* %q, align 8, !dbg !9395
  %sub51 = sub i64 %104, 2, !dbg !9396
  br label %cond.end, !dbg !9394

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !9394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub51, %cond.true ], [ 0, %cond.false ], !dbg !9394
  store i64 %cond, i64* %q, align 8, !dbg !9397
  %105 = load i64, i64* %bSig, align 8, !dbg !9398
  %106 = load i64, i64* %q, align 8, !dbg !9399
  call void @mul64To128(i64 %105, i64 %106, i64* %term0, i64* %term1), !dbg !9400
  %107 = load i64, i64* %aSig0, align 8, !dbg !9401
  %108 = load i64, i64* %aSig1, align 8, !dbg !9402
  %109 = load i64, i64* %term0, align 8, !dbg !9403
  %110 = load i64, i64* %term1, align 8, !dbg !9404
  call void @sub128(i64 %107, i64 %108, i64 %109, i64 %110, i64* %aSig0, i64* %aSig1), !dbg !9405
  %111 = load i64, i64* %aSig0, align 8, !dbg !9406
  %112 = load i64, i64* %aSig1, align 8, !dbg !9407
  call void @shortShift128Left(i64 %111, i64 %112, i32 62, i64* %aSig0, i64* %aSig1), !dbg !9408
  %113 = load i32, i32* %expDiff, align 4, !dbg !9409
  %sub52 = sub nsw i32 %113, 62, !dbg !9409
  store i32 %sub52, i32* %expDiff, align 4, !dbg !9409
  br label %while.cond, !dbg !9383, !llvm.loop !9410

while.end:                                        ; preds = %while.cond
  %114 = load i32, i32* %expDiff, align 4, !dbg !9412
  %add = add nsw i32 %114, 64, !dbg !9412
  store i32 %add, i32* %expDiff, align 4, !dbg !9412
  %115 = load i32, i32* %expDiff, align 4, !dbg !9413
  %cmp53 = icmp slt i32 0, %115, !dbg !9415
  br i1 %cmp53, label %if.then55, label %if.else, !dbg !9416

if.then55:                                        ; preds = %while.end
  %116 = load i64, i64* %aSig0, align 8, !dbg !9417
  %117 = load i64, i64* %aSig1, align 8, !dbg !9419
  %118 = load i64, i64* %bSig, align 8, !dbg !9420
  %call56 = call i64 @estimateDiv128To64(i64 %116, i64 %117, i64 %118), !dbg !9421
  store i64 %call56, i64* %q, align 8, !dbg !9422
  %119 = load i64, i64* %q, align 8, !dbg !9423
  %cmp57 = icmp ult i64 2, %119, !dbg !9424
  br i1 %cmp57, label %cond.true59, label %cond.false61, !dbg !9425

cond.true59:                                      ; preds = %if.then55
  %120 = load i64, i64* %q, align 8, !dbg !9426
  %sub60 = sub i64 %120, 2, !dbg !9427
  br label %cond.end62, !dbg !9425

cond.false61:                                     ; preds = %if.then55
  br label %cond.end62, !dbg !9425

cond.end62:                                       ; preds = %cond.false61, %cond.true59
  %cond63 = phi i64 [ %sub60, %cond.true59 ], [ 0, %cond.false61 ], !dbg !9425
  store i64 %cond63, i64* %q, align 8, !dbg !9428
  %121 = load i32, i32* %expDiff, align 4, !dbg !9429
  %sub64 = sub nsw i32 64, %121, !dbg !9430
  %122 = load i64, i64* %q, align 8, !dbg !9431
  %sh_prom = zext i32 %sub64 to i64, !dbg !9431
  %shr = lshr i64 %122, %sh_prom, !dbg !9431
  store i64 %shr, i64* %q, align 8, !dbg !9431
  %123 = load i64, i64* %bSig, align 8, !dbg !9432
  %124 = load i64, i64* %q, align 8, !dbg !9433
  %125 = load i32, i32* %expDiff, align 4, !dbg !9434
  %sub65 = sub nsw i32 64, %125, !dbg !9435
  %sh_prom66 = zext i32 %sub65 to i64, !dbg !9436
  %shl67 = shl i64 %124, %sh_prom66, !dbg !9436
  call void @mul64To128(i64 %123, i64 %shl67, i64* %term0, i64* %term1), !dbg !9437
  %126 = load i64, i64* %aSig0, align 8, !dbg !9438
  %127 = load i64, i64* %aSig1, align 8, !dbg !9439
  %128 = load i64, i64* %term0, align 8, !dbg !9440
  %129 = load i64, i64* %term1, align 8, !dbg !9441
  call void @sub128(i64 %126, i64 %127, i64 %128, i64 %129, i64* %aSig0, i64* %aSig1), !dbg !9442
  %130 = load i64, i64* %bSig, align 8, !dbg !9443
  %131 = load i32, i32* %expDiff, align 4, !dbg !9444
  %sub68 = sub nsw i32 64, %131, !dbg !9445
  call void @shortShift128Left(i64 0, i64 %130, i32 %sub68, i64* %term0, i64* %term1), !dbg !9446
  br label %while.cond69, !dbg !9447

while.cond69:                                     ; preds = %while.body71, %cond.end62
  %132 = load i64, i64* %term0, align 8, !dbg !9448
  %133 = load i64, i64* %term1, align 8, !dbg !9449
  %134 = load i64, i64* %aSig0, align 8, !dbg !9450
  %135 = load i64, i64* %aSig1, align 8, !dbg !9451
  %call70 = call zeroext i1 @le128(i64 %132, i64 %133, i64 %134, i64 %135), !dbg !9452
  br i1 %call70, label %while.body71, label %while.end72, !dbg !9447

while.body71:                                     ; preds = %while.cond69
  %136 = load i64, i64* %q, align 8, !dbg !9453
  %inc = add i64 %136, 1, !dbg !9453
  store i64 %inc, i64* %q, align 8, !dbg !9453
  %137 = load i64, i64* %aSig0, align 8, !dbg !9455
  %138 = load i64, i64* %aSig1, align 8, !dbg !9456
  %139 = load i64, i64* %term0, align 8, !dbg !9457
  %140 = load i64, i64* %term1, align 8, !dbg !9458
  call void @sub128(i64 %137, i64 %138, i64 %139, i64 %140, i64* %aSig0, i64* %aSig1), !dbg !9459
  br label %while.cond69, !dbg !9447, !llvm.loop !9460

while.end72:                                      ; preds = %while.cond69
  br label %if.end73, !dbg !9462

if.else:                                          ; preds = %while.end
  store i64 0, i64* %term1, align 8, !dbg !9463
  %141 = load i64, i64* %bSig, align 8, !dbg !9465
  store i64 %141, i64* %term0, align 8, !dbg !9466
  br label %if.end73

if.end73:                                         ; preds = %if.else, %while.end72
  %142 = load i64, i64* %term0, align 8, !dbg !9467
  %143 = load i64, i64* %term1, align 8, !dbg !9468
  %144 = load i64, i64* %aSig0, align 8, !dbg !9469
  %145 = load i64, i64* %aSig1, align 8, !dbg !9470
  call void @sub128(i64 %142, i64 %143, i64 %144, i64 %145, i64* %alternateASig0, i64* %alternateASig1), !dbg !9471
  %146 = load i64, i64* %alternateASig0, align 8, !dbg !9472
  %147 = load i64, i64* %alternateASig1, align 8, !dbg !9474
  %148 = load i64, i64* %aSig0, align 8, !dbg !9475
  %149 = load i64, i64* %aSig1, align 8, !dbg !9476
  %call74 = call zeroext i1 @lt128(i64 %146, i64 %147, i64 %148, i64 %149), !dbg !9477
  br i1 %call74, label %if.then81, label %lor.lhs.false76, !dbg !9478

lor.lhs.false76:                                  ; preds = %if.end73
  %150 = load i64, i64* %alternateASig0, align 8, !dbg !9479
  %151 = load i64, i64* %alternateASig1, align 8, !dbg !9480
  %152 = load i64, i64* %aSig0, align 8, !dbg !9481
  %153 = load i64, i64* %aSig1, align 8, !dbg !9482
  %call77 = call zeroext i1 @eq128(i64 %150, i64 %151, i64 %152, i64 %153), !dbg !9483
  br i1 %call77, label %land.lhs.true79, label %if.end83, !dbg !9484

land.lhs.true79:                                  ; preds = %lor.lhs.false76
  %154 = load i64, i64* %q, align 8, !dbg !9485
  %and = and i64 %154, 1, !dbg !9486
  %tobool80 = icmp ne i64 %and, 0, !dbg !9486
  br i1 %tobool80, label %if.then81, label %if.end83, !dbg !9487

if.then81:                                        ; preds = %land.lhs.true79, %if.end73
  %155 = load i64, i64* %alternateASig0, align 8, !dbg !9488
  store i64 %155, i64* %aSig0, align 8, !dbg !9490
  %156 = load i64, i64* %alternateASig1, align 8, !dbg !9491
  store i64 %156, i64* %aSig1, align 8, !dbg !9492
  %157 = load i32, i32* %zSign, align 4, !dbg !9493
  %tobool82 = icmp ne i32 %157, 0, !dbg !9494
  %lnot = xor i1 %tobool82, true, !dbg !9494
  %lnot.ext = zext i1 %lnot to i32, !dbg !9494
  store i32 %lnot.ext, i32* %zSign, align 4, !dbg !9495
  br label %if.end83, !dbg !9496

if.end83:                                         ; preds = %if.then81, %land.lhs.true79, %lor.lhs.false76
  %158 = load i32, i32* %zSign, align 4, !dbg !9497
  %159 = load i32, i32* %bExp, align 4, !dbg !9498
  %160 = load i32, i32* %expDiff, align 4, !dbg !9499
  %add84 = add nsw i32 %159, %160, !dbg !9500
  %161 = load i64, i64* %aSig0, align 8, !dbg !9501
  %162 = load i64, i64* %aSig1, align 8, !dbg !9502
  %call85 = call { i16, i64 } @normalizeRoundAndPackFloatx80(i32 80, i32 %158, i32 %add84, i64 %161, i64 %162), !dbg !9503
  %163 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9503
  %164 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %163, i32 0, i32 0, !dbg !9503
  %165 = extractvalue { i16, i64 } %call85, 0, !dbg !9503
  store i16 %165, i16* %164, align 8, !dbg !9503
  %166 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %163, i32 0, i32 1, !dbg !9503
  %167 = extractvalue { i16, i64 } %call85, 1, !dbg !9503
  store i64 %167, i64* %166, align 8, !dbg !9503
  br label %return, !dbg !9504

return:                                           ; preds = %if.end83, %if.then36, %if.then30, %invalid, %if.end18, %if.then16, %if.then9
  %168 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9505
  %169 = load { i16, i64 }, { i16, i64 }* %168, align 8, !dbg !9505
  ret { i16, i64 } %169, !dbg !9505
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i16, i64 } @normalizeRoundAndPackFloatx80(i32 %roundingPrecision, i32 %zSign, i32 %zExp, i64 %zSig0, i64 %zSig1) #0 !dbg !9506 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %roundingPrecision.addr = alloca i32, align 4
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig0.addr = alloca i64, align 8
  %zSig1.addr = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  store i32 %roundingPrecision, i32* %roundingPrecision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %roundingPrecision.addr, metadata !9507, metadata !DIExpression()), !dbg !9508
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !9509, metadata !DIExpression()), !dbg !9510
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !9511, metadata !DIExpression()), !dbg !9512
  store i64 %zSig0, i64* %zSig0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig0.addr, metadata !9513, metadata !DIExpression()), !dbg !9514
  store i64 %zSig1, i64* %zSig1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig1.addr, metadata !9515, metadata !DIExpression()), !dbg !9516
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !9517, metadata !DIExpression()), !dbg !9518
  %0 = load i64, i64* %zSig0.addr, align 8, !dbg !9519
  %cmp = icmp eq i64 %0, 0, !dbg !9521
  br i1 %cmp, label %if.then, label %if.end, !dbg !9522

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %zSig1.addr, align 8, !dbg !9523
  store i64 %1, i64* %zSig0.addr, align 8, !dbg !9525
  store i64 0, i64* %zSig1.addr, align 8, !dbg !9526
  %2 = load i32, i32* %zExp.addr, align 4, !dbg !9527
  %sub = sub nsw i32 %2, 64, !dbg !9527
  store i32 %sub, i32* %zExp.addr, align 4, !dbg !9527
  br label %if.end, !dbg !9528

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %zSig0.addr, align 8, !dbg !9529
  %call = call i32 @countLeadingZeros64(i64 %3), !dbg !9530
  store i32 %call, i32* %shiftCount, align 4, !dbg !9531
  %4 = load i64, i64* %zSig0.addr, align 8, !dbg !9532
  %5 = load i64, i64* %zSig1.addr, align 8, !dbg !9533
  %6 = load i32, i32* %shiftCount, align 4, !dbg !9534
  call void @shortShift128Left(i64 %4, i64 %5, i32 %6, i64* %zSig0.addr, i64* %zSig1.addr), !dbg !9535
  %7 = load i32, i32* %shiftCount, align 4, !dbg !9536
  %8 = load i32, i32* %zExp.addr, align 4, !dbg !9537
  %sub1 = sub nsw i32 %8, %7, !dbg !9537
  store i32 %sub1, i32* %zExp.addr, align 4, !dbg !9537
  %9 = load i32, i32* %roundingPrecision.addr, align 4, !dbg !9538
  %10 = load i32, i32* %zSign.addr, align 4, !dbg !9539
  %11 = load i32, i32* %zExp.addr, align 4, !dbg !9540
  %12 = load i64, i64* %zSig0.addr, align 8, !dbg !9541
  %13 = load i64, i64* %zSig1.addr, align 8, !dbg !9542
  %call2 = call { i16, i64 } @roundAndPackFloatx80(i32 %9, i32 %10, i32 %11, i64 %12, i64 %13), !dbg !9543
  %14 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9543
  %15 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %14, i32 0, i32 0, !dbg !9543
  %16 = extractvalue { i16, i64 } %call2, 0, !dbg !9543
  store i16 %16, i16* %15, align 8, !dbg !9543
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %14, i32 0, i32 1, !dbg !9543
  %18 = extractvalue { i16, i64 } %call2, 1, !dbg !9543
  store i64 %18, i64* %17, align 8, !dbg !9543
  %19 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9544
  %20 = load { i16, i64 }, { i16, i64 }* %19, align 8, !dbg !9544
  ret { i16, i64 } %20, !dbg !9544
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @floatx80_sqrt(i16 %a.coerce0, i64 %a.coerce1) #0 !dbg !9545 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %doubleZSig0 = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %rem2 = alloca i64, align 8
  %rem3 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %term2 = alloca i64, align 8
  %term3 = alloca i64, align 8
  %z = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9546, metadata !DIExpression()), !dbg !9547
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !9548, metadata !DIExpression()), !dbg !9549
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !9550, metadata !DIExpression()), !dbg !9551
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !9552, metadata !DIExpression()), !dbg !9553
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !9554, metadata !DIExpression()), !dbg !9555
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !9556, metadata !DIExpression()), !dbg !9557
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !9558, metadata !DIExpression()), !dbg !9559
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !9560, metadata !DIExpression()), !dbg !9561
  call void @llvm.dbg.declare(metadata i64* %doubleZSig0, metadata !9562, metadata !DIExpression()), !dbg !9563
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !9564, metadata !DIExpression()), !dbg !9565
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !9566, metadata !DIExpression()), !dbg !9567
  call void @llvm.dbg.declare(metadata i64* %rem2, metadata !9568, metadata !DIExpression()), !dbg !9569
  call void @llvm.dbg.declare(metadata i64* %rem3, metadata !9570, metadata !DIExpression()), !dbg !9571
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !9572, metadata !DIExpression()), !dbg !9573
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !9574, metadata !DIExpression()), !dbg !9575
  call void @llvm.dbg.declare(metadata i64* %term2, metadata !9576, metadata !DIExpression()), !dbg !9577
  call void @llvm.dbg.declare(metadata i64* %term3, metadata !9578, metadata !DIExpression()), !dbg !9579
  call void @llvm.dbg.declare(metadata %struct.floatx80* %z, metadata !9580, metadata !DIExpression()), !dbg !9581
  %3 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9582
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0, !dbg !9582
  %5 = load i16, i16* %4, align 8, !dbg !9582
  %6 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1, !dbg !9582
  %7 = load i64, i64* %6, align 8, !dbg !9582
  %call = call i64 @extractFloatx80Frac(i16 %5, i64 %7), !dbg !9582
  store i64 %call, i64* %aSig0, align 8, !dbg !9583
  %8 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9584
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 0, !dbg !9584
  %10 = load i16, i16* %9, align 8, !dbg !9584
  %11 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %8, i32 0, i32 1, !dbg !9584
  %12 = load i64, i64* %11, align 8, !dbg !9584
  %call1 = call i32 @extractFloatx80Exp(i16 %10, i64 %12), !dbg !9584
  store i32 %call1, i32* %aExp, align 4, !dbg !9585
  %13 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9586
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 0, !dbg !9586
  %15 = load i16, i16* %14, align 8, !dbg !9586
  %16 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %13, i32 0, i32 1, !dbg !9586
  %17 = load i64, i64* %16, align 8, !dbg !9586
  %call2 = call i32 @extractFloatx80Sign(i16 %15, i64 %17), !dbg !9586
  store i32 %call2, i32* %aSign, align 4, !dbg !9587
  %18 = load i32, i32* %aExp, align 4, !dbg !9588
  %cmp = icmp eq i32 %18, 32767, !dbg !9590
  br i1 %cmp, label %if.then, label %if.end8, !dbg !9591

if.then:                                          ; preds = %entry
  %19 = load i64, i64* %aSig0, align 8, !dbg !9592
  %shl = shl i64 %19, 1, !dbg !9595
  %tobool = icmp ne i64 %shl, 0, !dbg !9596
  br i1 %tobool, label %if.then3, label %if.end, !dbg !9597

if.then3:                                         ; preds = %if.then
  %20 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9598
  %21 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 0, !dbg !9598
  %22 = load i16, i16* %21, align 8, !dbg !9598
  %23 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %20, i32 0, i32 1, !dbg !9598
  %24 = load i64, i64* %23, align 8, !dbg !9598
  %25 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9598
  %26 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %25, i32 0, i32 0, !dbg !9598
  %27 = load i16, i16* %26, align 8, !dbg !9598
  %28 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %25, i32 0, i32 1, !dbg !9598
  %29 = load i64, i64* %28, align 8, !dbg !9598
  %call4 = call { i16, i64 } @propagateFloatx80NaN(i16 %22, i64 %24, i16 %27, i64 %29), !dbg !9598
  %30 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9598
  %31 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %30, i32 0, i32 0, !dbg !9598
  %32 = extractvalue { i16, i64 } %call4, 0, !dbg !9598
  store i16 %32, i16* %31, align 8, !dbg !9598
  %33 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %30, i32 0, i32 1, !dbg !9598
  %34 = extractvalue { i16, i64 } %call4, 1, !dbg !9598
  store i64 %34, i64* %33, align 8, !dbg !9598
  br label %return, !dbg !9599

if.end:                                           ; preds = %if.then
  %35 = load i32, i32* %aSign, align 4, !dbg !9600
  %tobool5 = icmp ne i32 %35, 0, !dbg !9600
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !9602

if.then6:                                         ; preds = %if.end
  %36 = bitcast %struct.floatx80* %retval to i8*, !dbg !9603
  %37 = bitcast %struct.floatx80* %a to i8*, !dbg !9603
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false), !dbg !9603
  br label %return, !dbg !9604

if.end7:                                          ; preds = %if.end
  br label %invalid, !dbg !9605

if.end8:                                          ; preds = %entry
  %38 = load i32, i32* %aSign, align 4, !dbg !9606
  %tobool9 = icmp ne i32 %38, 0, !dbg !9606
  br i1 %tobool9, label %if.then10, label %if.end15, !dbg !9608

if.then10:                                        ; preds = %if.end8
  %39 = load i32, i32* %aExp, align 4, !dbg !9609
  %conv = sext i32 %39 to i64, !dbg !9609
  %40 = load i64, i64* %aSig0, align 8, !dbg !9612
  %or = or i64 %conv, %40, !dbg !9613
  %cmp11 = icmp eq i64 %or, 0, !dbg !9614
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !9615

if.then13:                                        ; preds = %if.then10
  %41 = bitcast %struct.floatx80* %retval to i8*, !dbg !9616
  %42 = bitcast %struct.floatx80* %a to i8*, !dbg !9616
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false), !dbg !9616
  br label %return, !dbg !9617

if.end14:                                         ; preds = %if.then10
  br label %invalid, !dbg !9618

invalid:                                          ; preds = %if.end14, %if.end7
  call void @float_raise(i32 16), !dbg !9619
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 1, !dbg !9620
  store i64 -1, i64* %low, align 8, !dbg !9621
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %z, i32 0, i32 0, !dbg !9622
  store i16 32767, i16* %high, align 8, !dbg !9623
  %43 = bitcast %struct.floatx80* %retval to i8*, !dbg !9624
  %44 = bitcast %struct.floatx80* %z to i8*, !dbg !9624
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 16, i32 8, i1 false), !dbg !9624
  br label %return, !dbg !9625

if.end15:                                         ; preds = %if.end8
  %45 = load i32, i32* %aExp, align 4, !dbg !9626
  %cmp16 = icmp eq i32 %45, 0, !dbg !9628
  br i1 %cmp16, label %if.then18, label %if.end24, !dbg !9629

if.then18:                                        ; preds = %if.end15
  %46 = load i64, i64* %aSig0, align 8, !dbg !9630
  %cmp19 = icmp eq i64 %46, 0, !dbg !9633
  br i1 %cmp19, label %if.then21, label %if.end23, !dbg !9634

if.then21:                                        ; preds = %if.then18
  %call22 = call { i16, i64 } @packFloatx80(i32 0, i32 0, i64 0), !dbg !9635
  %47 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9635
  %48 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %47, i32 0, i32 0, !dbg !9635
  %49 = extractvalue { i16, i64 } %call22, 0, !dbg !9635
  store i16 %49, i16* %48, align 8, !dbg !9635
  %50 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %47, i32 0, i32 1, !dbg !9635
  %51 = extractvalue { i16, i64 } %call22, 1, !dbg !9635
  store i64 %51, i64* %50, align 8, !dbg !9635
  br label %return, !dbg !9636

if.end23:                                         ; preds = %if.then18
  %52 = load i64, i64* %aSig0, align 8, !dbg !9637
  call void @normalizeFloatx80Subnormal(i64 %52, i32* %aExp, i64* %aSig0), !dbg !9638
  br label %if.end24, !dbg !9639

if.end24:                                         ; preds = %if.end23, %if.end15
  %53 = load i32, i32* %aExp, align 4, !dbg !9640
  %sub = sub nsw i32 %53, 16383, !dbg !9641
  %shr = ashr i32 %sub, 1, !dbg !9642
  %add = add nsw i32 %shr, 16383, !dbg !9643
  store i32 %add, i32* %zExp, align 4, !dbg !9644
  %54 = load i32, i32* %aExp, align 4, !dbg !9645
  %55 = load i64, i64* %aSig0, align 8, !dbg !9646
  %shr25 = lshr i64 %55, 32, !dbg !9647
  %conv26 = trunc i64 %shr25 to i32, !dbg !9646
  %call27 = call i32 @estimateSqrt32(i32 %54, i32 %conv26), !dbg !9648
  %conv28 = zext i32 %call27 to i64, !dbg !9648
  store i64 %conv28, i64* %zSig0, align 8, !dbg !9649
  %56 = load i64, i64* %aSig0, align 8, !dbg !9650
  %57 = load i32, i32* %aExp, align 4, !dbg !9651
  %and = and i32 %57, 1, !dbg !9652
  %add29 = add nsw i32 2, %and, !dbg !9653
  call void @shift128Right(i64 %56, i64 0, i32 %add29, i64* %aSig0, i64* %aSig1), !dbg !9654
  %58 = load i64, i64* %aSig0, align 8, !dbg !9655
  %59 = load i64, i64* %aSig1, align 8, !dbg !9656
  %60 = load i64, i64* %zSig0, align 8, !dbg !9657
  %shl30 = shl i64 %60, 32, !dbg !9658
  %call31 = call i64 @estimateDiv128To64(i64 %58, i64 %59, i64 %shl30), !dbg !9659
  %61 = load i64, i64* %zSig0, align 8, !dbg !9660
  %shl32 = shl i64 %61, 30, !dbg !9661
  %add33 = add i64 %call31, %shl32, !dbg !9662
  store i64 %add33, i64* %zSig0, align 8, !dbg !9663
  %62 = load i64, i64* %zSig0, align 8, !dbg !9664
  %shl34 = shl i64 %62, 1, !dbg !9665
  store i64 %shl34, i64* %doubleZSig0, align 8, !dbg !9666
  %63 = load i64, i64* %zSig0, align 8, !dbg !9667
  %64 = load i64, i64* %zSig0, align 8, !dbg !9668
  call void @mul64To128(i64 %63, i64 %64, i64* %term0, i64* %term1), !dbg !9669
  %65 = load i64, i64* %aSig0, align 8, !dbg !9670
  %66 = load i64, i64* %aSig1, align 8, !dbg !9671
  %67 = load i64, i64* %term0, align 8, !dbg !9672
  %68 = load i64, i64* %term1, align 8, !dbg !9673
  call void @sub128(i64 %65, i64 %66, i64 %67, i64 %68, i64* %rem0, i64* %rem1), !dbg !9674
  br label %while.cond, !dbg !9675

while.cond:                                       ; preds = %while.body, %if.end24
  %69 = load i64, i64* %rem0, align 8, !dbg !9676
  %cmp35 = icmp slt i64 %69, 0, !dbg !9677
  br i1 %cmp35, label %while.body, label %while.end, !dbg !9675

while.body:                                       ; preds = %while.cond
  %70 = load i64, i64* %zSig0, align 8, !dbg !9678
  %dec = add i64 %70, -1, !dbg !9678
  store i64 %dec, i64* %zSig0, align 8, !dbg !9678
  %71 = load i64, i64* %doubleZSig0, align 8, !dbg !9680
  %sub37 = sub i64 %71, 2, !dbg !9680
  store i64 %sub37, i64* %doubleZSig0, align 8, !dbg !9680
  %72 = load i64, i64* %rem0, align 8, !dbg !9681
  %73 = load i64, i64* %rem1, align 8, !dbg !9682
  %74 = load i64, i64* %zSig0, align 8, !dbg !9683
  %shr38 = lshr i64 %74, 63, !dbg !9684
  %75 = load i64, i64* %doubleZSig0, align 8, !dbg !9685
  %or39 = or i64 %75, 1, !dbg !9686
  call void @add128(i64 %72, i64 %73, i64 %shr38, i64 %or39, i64* %rem0, i64* %rem1), !dbg !9687
  br label %while.cond, !dbg !9675, !llvm.loop !9688

while.end:                                        ; preds = %while.cond
  %76 = load i64, i64* %rem1, align 8, !dbg !9690
  %77 = load i64, i64* %doubleZSig0, align 8, !dbg !9691
  %call40 = call i64 @estimateDiv128To64(i64 %76, i64 0, i64 %77), !dbg !9692
  store i64 %call40, i64* %zSig1, align 8, !dbg !9693
  %78 = load i64, i64* %zSig1, align 8, !dbg !9694
  %and41 = and i64 %78, 4611686018427387903, !dbg !9696
  %cmp42 = icmp ule i64 %and41, 5, !dbg !9697
  br i1 %cmp42, label %if.then44, label %if.end63, !dbg !9698

if.then44:                                        ; preds = %while.end
  %79 = load i64, i64* %zSig1, align 8, !dbg !9699
  %cmp45 = icmp eq i64 %79, 0, !dbg !9702
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !9703

if.then47:                                        ; preds = %if.then44
  store i64 1, i64* %zSig1, align 8, !dbg !9704
  br label %if.end48, !dbg !9705

if.end48:                                         ; preds = %if.then47, %if.then44
  %80 = load i64, i64* %doubleZSig0, align 8, !dbg !9706
  %81 = load i64, i64* %zSig1, align 8, !dbg !9707
  call void @mul64To128(i64 %80, i64 %81, i64* %term1, i64* %term2), !dbg !9708
  %82 = load i64, i64* %rem1, align 8, !dbg !9709
  %83 = load i64, i64* %term1, align 8, !dbg !9710
  %84 = load i64, i64* %term2, align 8, !dbg !9711
  call void @sub128(i64 %82, i64 0, i64 %83, i64 %84, i64* %rem1, i64* %rem2), !dbg !9712
  %85 = load i64, i64* %zSig1, align 8, !dbg !9713
  %86 = load i64, i64* %zSig1, align 8, !dbg !9714
  call void @mul64To128(i64 %85, i64 %86, i64* %term2, i64* %term3), !dbg !9715
  %87 = load i64, i64* %rem1, align 8, !dbg !9716
  %88 = load i64, i64* %rem2, align 8, !dbg !9717
  %89 = load i64, i64* %term2, align 8, !dbg !9718
  %90 = load i64, i64* %term3, align 8, !dbg !9719
  call void @sub192(i64 %87, i64 %88, i64 0, i64 0, i64 %89, i64 %90, i64* %rem1, i64* %rem2, i64* %rem3), !dbg !9720
  br label %while.cond49, !dbg !9721

while.cond49:                                     ; preds = %while.body52, %if.end48
  %91 = load i64, i64* %rem1, align 8, !dbg !9722
  %cmp50 = icmp slt i64 %91, 0, !dbg !9723
  br i1 %cmp50, label %while.body52, label %while.end56, !dbg !9721

while.body52:                                     ; preds = %while.cond49
  %92 = load i64, i64* %zSig1, align 8, !dbg !9724
  %dec53 = add i64 %92, -1, !dbg !9724
  store i64 %dec53, i64* %zSig1, align 8, !dbg !9724
  %93 = load i64, i64* %zSig1, align 8, !dbg !9726
  call void @shortShift128Left(i64 0, i64 %93, i32 1, i64* %term2, i64* %term3), !dbg !9727
  %94 = load i64, i64* %term3, align 8, !dbg !9728
  %or54 = or i64 %94, 1, !dbg !9728
  store i64 %or54, i64* %term3, align 8, !dbg !9728
  %95 = load i64, i64* %doubleZSig0, align 8, !dbg !9729
  %96 = load i64, i64* %term2, align 8, !dbg !9730
  %or55 = or i64 %96, %95, !dbg !9730
  store i64 %or55, i64* %term2, align 8, !dbg !9730
  %97 = load i64, i64* %rem1, align 8, !dbg !9731
  %98 = load i64, i64* %rem2, align 8, !dbg !9732
  %99 = load i64, i64* %rem3, align 8, !dbg !9733
  %100 = load i64, i64* %term2, align 8, !dbg !9734
  %101 = load i64, i64* %term3, align 8, !dbg !9735
  call void @add192(i64 %97, i64 %98, i64 %99, i64 0, i64 %100, i64 %101, i64* %rem1, i64* %rem2, i64* %rem3), !dbg !9736
  br label %while.cond49, !dbg !9721, !llvm.loop !9737

while.end56:                                      ; preds = %while.cond49
  %102 = load i64, i64* %rem1, align 8, !dbg !9739
  %103 = load i64, i64* %rem2, align 8, !dbg !9740
  %or57 = or i64 %102, %103, !dbg !9741
  %104 = load i64, i64* %rem3, align 8, !dbg !9742
  %or58 = or i64 %or57, %104, !dbg !9743
  %cmp59 = icmp ne i64 %or58, 0, !dbg !9744
  %conv60 = zext i1 %cmp59 to i32, !dbg !9744
  %conv61 = sext i32 %conv60 to i64, !dbg !9745
  %105 = load i64, i64* %zSig1, align 8, !dbg !9746
  %or62 = or i64 %105, %conv61, !dbg !9746
  store i64 %or62, i64* %zSig1, align 8, !dbg !9746
  br label %if.end63, !dbg !9747

if.end63:                                         ; preds = %while.end56, %while.end
  %106 = load i64, i64* %zSig1, align 8, !dbg !9748
  call void @shortShift128Left(i64 0, i64 %106, i32 1, i64* %zSig0, i64* %zSig1), !dbg !9749
  %107 = load i64, i64* %doubleZSig0, align 8, !dbg !9750
  %108 = load i64, i64* %zSig0, align 8, !dbg !9751
  %or64 = or i64 %108, %107, !dbg !9751
  store i64 %or64, i64* %zSig0, align 8, !dbg !9751
  %109 = load i32, i32* @floatx80_rounding_precision, align 4, !dbg !9752
  %110 = load i32, i32* %zExp, align 4, !dbg !9753
  %111 = load i64, i64* %zSig0, align 8, !dbg !9754
  %112 = load i64, i64* %zSig1, align 8, !dbg !9755
  %call65 = call { i16, i64 } @roundAndPackFloatx80(i32 %109, i32 0, i32 %110, i64 %111, i64 %112), !dbg !9756
  %113 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9756
  %114 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %113, i32 0, i32 0, !dbg !9756
  %115 = extractvalue { i16, i64 } %call65, 0, !dbg !9756
  store i16 %115, i16* %114, align 8, !dbg !9756
  %116 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %113, i32 0, i32 1, !dbg !9756
  %117 = extractvalue { i16, i64 } %call65, 1, !dbg !9756
  store i64 %117, i64* %116, align 8, !dbg !9756
  br label %return, !dbg !9757

return:                                           ; preds = %if.end63, %if.then21, %invalid, %if.then13, %if.then6, %if.then3
  %118 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !9758
  %119 = load { i16, i64 }, { i16, i64 }* %118, align 8, !dbg !9758
  ret { i16, i64 } %119, !dbg !9758
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_eq(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9759 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9762, metadata !DIExpression()), !dbg !9763
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9764, metadata !DIExpression()), !dbg !9765
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9766
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9766
  %8 = load i16, i16* %7, align 8, !dbg !9766
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9766
  %10 = load i64, i64* %9, align 8, !dbg !9766
  %call = call i32 @extractFloatx80Exp(i16 %8, i64 %10), !dbg !9766
  %cmp = icmp eq i32 %call, 32767, !dbg !9768
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !9769

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9770
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9770
  %13 = load i16, i16* %12, align 8, !dbg !9770
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9770
  %15 = load i64, i64* %14, align 8, !dbg !9770
  %call1 = call i64 @extractFloatx80Frac(i16 %13, i64 %15), !dbg !9770
  %shl = shl i64 %call1, 1, !dbg !9771
  %tobool = icmp ne i64 %shl, 0, !dbg !9772
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !9773

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9774
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9774
  %18 = load i16, i16* %17, align 8, !dbg !9774
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9774
  %20 = load i64, i64* %19, align 8, !dbg !9774
  %call2 = call i32 @extractFloatx80Exp(i16 %18, i64 %20), !dbg !9774
  %cmp3 = icmp eq i32 %call2, 32767, !dbg !9775
  br i1 %cmp3, label %land.lhs.true4, label %if.end12, !dbg !9776

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9777
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9777
  %23 = load i16, i16* %22, align 8, !dbg !9777
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9777
  %25 = load i64, i64* %24, align 8, !dbg !9777
  %call5 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !9777
  %shl6 = shl i64 %call5, 1, !dbg !9778
  %tobool7 = icmp ne i64 %shl6, 0, !dbg !9779
  br i1 %tobool7, label %if.then, label %if.end12, !dbg !9780

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %26 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9781
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !9781
  %28 = load i16, i16* %27, align 8, !dbg !9781
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !9781
  %30 = load i64, i64* %29, align 8, !dbg !9781
  %call8 = call zeroext i1 @floatx80_is_nan(i16 %28, i64 %30), !dbg !9781
  br i1 %call8, label %if.then11, label %lor.lhs.false9, !dbg !9784

lor.lhs.false9:                                   ; preds = %if.then
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9785
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !9785
  %33 = load i16, i16* %32, align 8, !dbg !9785
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !9785
  %35 = load i64, i64* %34, align 8, !dbg !9785
  %call10 = call zeroext i1 @floatx80_is_nan(i16 %33, i64 %35), !dbg !9785
  br i1 %call10, label %if.then11, label %if.end, !dbg !9786

if.then11:                                        ; preds = %lor.lhs.false9, %if.then
  call void @float_raise(i32 16), !dbg !9787
  br label %if.end, !dbg !9789

if.end:                                           ; preds = %if.then11, %lor.lhs.false9
  store i1 false, i1* %retval, align 1, !dbg !9790
  br label %return, !dbg !9790

if.end12:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9791
  %36 = load i64, i64* %low, align 8, !dbg !9791
  %low13 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9792
  %37 = load i64, i64* %low13, align 8, !dbg !9792
  %cmp14 = icmp eq i64 %36, %37, !dbg !9793
  br i1 %cmp14, label %land.rhs, label %land.end32, !dbg !9794

land.rhs:                                         ; preds = %if.end12
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9795
  %38 = load i16, i16* %high, align 8, !dbg !9795
  %conv = zext i16 %38 to i32, !dbg !9796
  %high15 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9797
  %39 = load i16, i16* %high15, align 8, !dbg !9797
  %conv16 = zext i16 %39 to i32, !dbg !9798
  %cmp17 = icmp eq i32 %conv, %conv16, !dbg !9799
  br i1 %cmp17, label %lor.end, label %lor.rhs, !dbg !9800

lor.rhs:                                          ; preds = %land.rhs
  %low19 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9801
  %40 = load i64, i64* %low19, align 8, !dbg !9801
  %cmp20 = icmp eq i64 %40, 0, !dbg !9802
  br i1 %cmp20, label %land.rhs22, label %land.end, !dbg !9803

land.rhs22:                                       ; preds = %lor.rhs
  %high23 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9804
  %41 = load i16, i16* %high23, align 8, !dbg !9804
  %conv24 = zext i16 %41 to i32, !dbg !9805
  %high25 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9806
  %42 = load i16, i16* %high25, align 8, !dbg !9806
  %conv26 = zext i16 %42 to i32, !dbg !9807
  %or = or i32 %conv24, %conv26, !dbg !9808
  %shl27 = shl i32 %or, 1, !dbg !9809
  %conv28 = trunc i32 %shl27 to i16, !dbg !9810
  %conv29 = zext i16 %conv28 to i32, !dbg !9810
  %cmp30 = icmp eq i32 %conv29, 0, !dbg !9811
  br label %land.end

land.end:                                         ; preds = %land.rhs22, %lor.rhs
  %43 = phi i1 [ false, %lor.rhs ], [ %cmp30, %land.rhs22 ]
  br label %lor.end, !dbg !9800

lor.end:                                          ; preds = %land.end, %land.rhs
  %44 = phi i1 [ true, %land.rhs ], [ %43, %land.end ]
  br label %land.end32

land.end32:                                       ; preds = %lor.end, %if.end12
  %45 = phi i1 [ false, %if.end12 ], [ %44, %lor.end ]
  store i1 %45, i1* %retval, align 1, !dbg !9812
  br label %return, !dbg !9812

return:                                           ; preds = %land.end32, %if.end
  %46 = load i1, i1* %retval, align 1, !dbg !9813
  ret i1 %46, !dbg !9813
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_le(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9814 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9815, metadata !DIExpression()), !dbg !9816
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9817, metadata !DIExpression()), !dbg !9818
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !9819, metadata !DIExpression()), !dbg !9820
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !9821, metadata !DIExpression()), !dbg !9822
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9823
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9823
  %8 = load i16, i16* %7, align 8, !dbg !9823
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9823
  %10 = load i64, i64* %9, align 8, !dbg !9823
  %call = call i32 @extractFloatx80Exp(i16 %8, i64 %10), !dbg !9823
  %cmp = icmp eq i32 %call, 32767, !dbg !9825
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !9826

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9827
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9827
  %13 = load i16, i16* %12, align 8, !dbg !9827
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9827
  %15 = load i64, i64* %14, align 8, !dbg !9827
  %call1 = call i64 @extractFloatx80Frac(i16 %13, i64 %15), !dbg !9827
  %shl = shl i64 %call1, 1, !dbg !9828
  %tobool = icmp ne i64 %shl, 0, !dbg !9829
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !9830

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9831
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9831
  %18 = load i16, i16* %17, align 8, !dbg !9831
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9831
  %20 = load i64, i64* %19, align 8, !dbg !9831
  %call2 = call i32 @extractFloatx80Exp(i16 %18, i64 %20), !dbg !9831
  %cmp3 = icmp eq i32 %call2, 32767, !dbg !9832
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !9833

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9834
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9834
  %23 = load i16, i16* %22, align 8, !dbg !9834
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9834
  %25 = load i64, i64* %24, align 8, !dbg !9834
  %call5 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !9834
  %shl6 = shl i64 %call5, 1, !dbg !9835
  %tobool7 = icmp ne i64 %shl6, 0, !dbg !9836
  br i1 %tobool7, label %if.then, label %if.end, !dbg !9837

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !9838
  store i1 false, i1* %retval, align 1, !dbg !9840
  br label %return, !dbg !9840

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %26 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9841
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !9841
  %28 = load i16, i16* %27, align 8, !dbg !9841
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !9841
  %30 = load i64, i64* %29, align 8, !dbg !9841
  %call8 = call i32 @extractFloatx80Sign(i16 %28, i64 %30), !dbg !9841
  store i32 %call8, i32* %aSign, align 4, !dbg !9842
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9843
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !9843
  %33 = load i16, i16* %32, align 8, !dbg !9843
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !9843
  %35 = load i64, i64* %34, align 8, !dbg !9843
  %call9 = call i32 @extractFloatx80Sign(i16 %33, i64 %35), !dbg !9843
  store i32 %call9, i32* %bSign, align 4, !dbg !9844
  %36 = load i32, i32* %aSign, align 4, !dbg !9845
  %37 = load i32, i32* %bSign, align 4, !dbg !9847
  %cmp10 = icmp ne i32 %36, %37, !dbg !9848
  br i1 %cmp10, label %if.then11, label %if.end23, !dbg !9849

if.then11:                                        ; preds = %if.end
  %38 = load i32, i32* %aSign, align 4, !dbg !9850
  %tobool12 = icmp ne i32 %38, 0, !dbg !9850
  br i1 %tobool12, label %lor.end, label %lor.rhs, !dbg !9852

lor.rhs:                                          ; preds = %if.then11
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9853
  %39 = load i16, i16* %high, align 8, !dbg !9853
  %conv = zext i16 %39 to i32, !dbg !9854
  %high13 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9855
  %40 = load i16, i16* %high13, align 8, !dbg !9855
  %conv14 = zext i16 %40 to i32, !dbg !9856
  %or = or i32 %conv, %conv14, !dbg !9857
  %shl15 = shl i32 %or, 1, !dbg !9858
  %conv16 = trunc i32 %shl15 to i16, !dbg !9859
  %conv17 = zext i16 %conv16 to i64, !dbg !9860
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9861
  %41 = load i64, i64* %low, align 8, !dbg !9861
  %or18 = or i64 %conv17, %41, !dbg !9862
  %low19 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9863
  %42 = load i64, i64* %low19, align 8, !dbg !9863
  %or20 = or i64 %or18, %42, !dbg !9864
  %cmp21 = icmp eq i64 %or20, 0, !dbg !9865
  br label %lor.end, !dbg !9852

lor.end:                                          ; preds = %lor.rhs, %if.then11
  %43 = phi i1 [ true, %if.then11 ], [ %cmp21, %lor.rhs ]
  store i1 %43, i1* %retval, align 1, !dbg !9866
  br label %return, !dbg !9866

if.end23:                                         ; preds = %if.end
  %44 = load i32, i32* %aSign, align 4, !dbg !9867
  %tobool24 = icmp ne i32 %44, 0, !dbg !9867
  br i1 %tobool24, label %cond.true, label %cond.false, !dbg !9867

cond.true:                                        ; preds = %if.end23
  %high25 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9868
  %45 = load i16, i16* %high25, align 8, !dbg !9868
  %conv26 = zext i16 %45 to i64, !dbg !9869
  %low27 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9870
  %46 = load i64, i64* %low27, align 8, !dbg !9870
  %high28 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9871
  %47 = load i16, i16* %high28, align 8, !dbg !9871
  %conv29 = zext i16 %47 to i64, !dbg !9872
  %low30 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9873
  %48 = load i64, i64* %low30, align 8, !dbg !9873
  %call31 = call zeroext i1 @le128(i64 %conv26, i64 %46, i64 %conv29, i64 %48), !dbg !9874
  %conv32 = zext i1 %call31 to i32, !dbg !9874
  br label %cond.end, !dbg !9867

cond.false:                                       ; preds = %if.end23
  %high33 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9875
  %49 = load i16, i16* %high33, align 8, !dbg !9875
  %conv34 = zext i16 %49 to i64, !dbg !9876
  %low35 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9877
  %50 = load i64, i64* %low35, align 8, !dbg !9877
  %high36 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9878
  %51 = load i16, i16* %high36, align 8, !dbg !9878
  %conv37 = zext i16 %51 to i64, !dbg !9879
  %low38 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9880
  %52 = load i64, i64* %low38, align 8, !dbg !9880
  %call39 = call zeroext i1 @le128(i64 %conv34, i64 %50, i64 %conv37, i64 %52), !dbg !9881
  %conv40 = zext i1 %call39 to i32, !dbg !9881
  br label %cond.end, !dbg !9867

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv32, %cond.true ], [ %conv40, %cond.false ], !dbg !9867
  %tobool41 = icmp ne i32 %cond, 0, !dbg !9867
  store i1 %tobool41, i1* %retval, align 1, !dbg !9882
  br label %return, !dbg !9882

return:                                           ; preds = %cond.end, %lor.end, %if.then
  %53 = load i1, i1* %retval, align 1, !dbg !9883
  ret i1 %53, !dbg !9883
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_lt(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9884 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9885, metadata !DIExpression()), !dbg !9886
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9887, metadata !DIExpression()), !dbg !9888
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !9889, metadata !DIExpression()), !dbg !9890
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !9891, metadata !DIExpression()), !dbg !9892
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9893
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9893
  %8 = load i16, i16* %7, align 8, !dbg !9893
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9893
  %10 = load i64, i64* %9, align 8, !dbg !9893
  %call = call i32 @extractFloatx80Exp(i16 %8, i64 %10), !dbg !9893
  %cmp = icmp eq i32 %call, 32767, !dbg !9895
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !9896

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9897
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9897
  %13 = load i16, i16* %12, align 8, !dbg !9897
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9897
  %15 = load i64, i64* %14, align 8, !dbg !9897
  %call1 = call i64 @extractFloatx80Frac(i16 %13, i64 %15), !dbg !9897
  %shl = shl i64 %call1, 1, !dbg !9898
  %tobool = icmp ne i64 %shl, 0, !dbg !9899
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !9900

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9901
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9901
  %18 = load i16, i16* %17, align 8, !dbg !9901
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9901
  %20 = load i64, i64* %19, align 8, !dbg !9901
  %call2 = call i32 @extractFloatx80Exp(i16 %18, i64 %20), !dbg !9901
  %cmp3 = icmp eq i32 %call2, 32767, !dbg !9902
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !9903

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9904
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9904
  %23 = load i16, i16* %22, align 8, !dbg !9904
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9904
  %25 = load i64, i64* %24, align 8, !dbg !9904
  %call5 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !9904
  %shl6 = shl i64 %call5, 1, !dbg !9905
  %tobool7 = icmp ne i64 %shl6, 0, !dbg !9906
  br i1 %tobool7, label %if.then, label %if.end, !dbg !9907

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !9908
  store i1 false, i1* %retval, align 1, !dbg !9910
  br label %return, !dbg !9910

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %26 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9911
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !9911
  %28 = load i16, i16* %27, align 8, !dbg !9911
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !9911
  %30 = load i64, i64* %29, align 8, !dbg !9911
  %call8 = call i32 @extractFloatx80Sign(i16 %28, i64 %30), !dbg !9911
  store i32 %call8, i32* %aSign, align 4, !dbg !9912
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9913
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !9913
  %33 = load i16, i16* %32, align 8, !dbg !9913
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !9913
  %35 = load i64, i64* %34, align 8, !dbg !9913
  %call9 = call i32 @extractFloatx80Sign(i16 %33, i64 %35), !dbg !9913
  store i32 %call9, i32* %bSign, align 4, !dbg !9914
  %36 = load i32, i32* %aSign, align 4, !dbg !9915
  %37 = load i32, i32* %bSign, align 4, !dbg !9917
  %cmp10 = icmp ne i32 %36, %37, !dbg !9918
  br i1 %cmp10, label %if.then11, label %if.end23, !dbg !9919

if.then11:                                        ; preds = %if.end
  %38 = load i32, i32* %aSign, align 4, !dbg !9920
  %tobool12 = icmp ne i32 %38, 0, !dbg !9920
  br i1 %tobool12, label %land.rhs, label %land.end, !dbg !9922

land.rhs:                                         ; preds = %if.then11
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9923
  %39 = load i16, i16* %high, align 8, !dbg !9923
  %conv = zext i16 %39 to i32, !dbg !9924
  %high13 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9925
  %40 = load i16, i16* %high13, align 8, !dbg !9925
  %conv14 = zext i16 %40 to i32, !dbg !9926
  %or = or i32 %conv, %conv14, !dbg !9927
  %shl15 = shl i32 %or, 1, !dbg !9928
  %conv16 = trunc i32 %shl15 to i16, !dbg !9929
  %conv17 = zext i16 %conv16 to i64, !dbg !9930
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9931
  %41 = load i64, i64* %low, align 8, !dbg !9931
  %or18 = or i64 %conv17, %41, !dbg !9932
  %low19 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9933
  %42 = load i64, i64* %low19, align 8, !dbg !9933
  %or20 = or i64 %or18, %42, !dbg !9934
  %cmp21 = icmp ne i64 %or20, 0, !dbg !9935
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then11
  %43 = phi i1 [ false, %if.then11 ], [ %cmp21, %land.rhs ]
  store i1 %43, i1* %retval, align 1, !dbg !9936
  br label %return, !dbg !9936

if.end23:                                         ; preds = %if.end
  %44 = load i32, i32* %aSign, align 4, !dbg !9937
  %tobool24 = icmp ne i32 %44, 0, !dbg !9937
  br i1 %tobool24, label %cond.true, label %cond.false, !dbg !9937

cond.true:                                        ; preds = %if.end23
  %high25 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9938
  %45 = load i16, i16* %high25, align 8, !dbg !9938
  %conv26 = zext i16 %45 to i64, !dbg !9939
  %low27 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9940
  %46 = load i64, i64* %low27, align 8, !dbg !9940
  %high28 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9941
  %47 = load i16, i16* %high28, align 8, !dbg !9941
  %conv29 = zext i16 %47 to i64, !dbg !9942
  %low30 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9943
  %48 = load i64, i64* %low30, align 8, !dbg !9943
  %call31 = call zeroext i1 @lt128(i64 %conv26, i64 %46, i64 %conv29, i64 %48), !dbg !9944
  %conv32 = zext i1 %call31 to i32, !dbg !9944
  br label %cond.end, !dbg !9937

cond.false:                                       ; preds = %if.end23
  %high33 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !9945
  %49 = load i16, i16* %high33, align 8, !dbg !9945
  %conv34 = zext i16 %49 to i64, !dbg !9946
  %low35 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !9947
  %50 = load i64, i64* %low35, align 8, !dbg !9947
  %high36 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !9948
  %51 = load i16, i16* %high36, align 8, !dbg !9948
  %conv37 = zext i16 %51 to i64, !dbg !9949
  %low38 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !9950
  %52 = load i64, i64* %low38, align 8, !dbg !9950
  %call39 = call zeroext i1 @lt128(i64 %conv34, i64 %50, i64 %conv37, i64 %52), !dbg !9951
  %conv40 = zext i1 %call39 to i32, !dbg !9951
  br label %cond.end, !dbg !9937

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv32, %cond.true ], [ %conv40, %cond.false ], !dbg !9937
  %tobool41 = icmp ne i32 %cond, 0, !dbg !9937
  store i1 %tobool41, i1* %retval, align 1, !dbg !9952
  br label %return, !dbg !9952

return:                                           ; preds = %cond.end, %land.end, %if.then
  %53 = load i1, i1* %retval, align 1, !dbg !9953
  ret i1 %53, !dbg !9953
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_ge(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9954 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9955, metadata !DIExpression()), !dbg !9956
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9957, metadata !DIExpression()), !dbg !9958
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9959
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9959
  %8 = load i16, i16* %7, align 8, !dbg !9959
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9959
  %10 = load i64, i64* %9, align 8, !dbg !9959
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9959
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9959
  %13 = load i16, i16* %12, align 8, !dbg !9959
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9959
  %15 = load i64, i64* %14, align 8, !dbg !9959
  %call = call zeroext i1 @floatx80_lt(i16 %8, i64 %10, i16 %13, i64 %15), !dbg !9959
  %lnot = xor i1 %call, true, !dbg !9960
  ret i1 %lnot, !dbg !9961
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_gt(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9962 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9963, metadata !DIExpression()), !dbg !9964
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9965, metadata !DIExpression()), !dbg !9966
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9967
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9967
  %8 = load i16, i16* %7, align 8, !dbg !9967
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9967
  %10 = load i64, i64* %9, align 8, !dbg !9967
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9967
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9967
  %13 = load i16, i16* %12, align 8, !dbg !9967
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9967
  %15 = load i64, i64* %14, align 8, !dbg !9967
  %call = call zeroext i1 @floatx80_le(i16 %8, i64 %10, i16 %13, i64 %15), !dbg !9967
  %lnot = xor i1 %call, true, !dbg !9968
  ret i1 %lnot, !dbg !9969
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_ge_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9970 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9971, metadata !DIExpression()), !dbg !9972
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9973, metadata !DIExpression()), !dbg !9974
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9975
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9975
  %8 = load i16, i16* %7, align 8, !dbg !9975
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9975
  %10 = load i64, i64* %9, align 8, !dbg !9975
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9975
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9975
  %13 = load i16, i16* %12, align 8, !dbg !9975
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9975
  %15 = load i64, i64* %14, align 8, !dbg !9975
  %call = call zeroext i1 @floatx80_uno_quiet(i16 %8, i64 %10, i16 %13, i64 %15), !dbg !9975
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !9976

lor.rhs:                                          ; preds = %entry
  %16 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9977
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9977
  %18 = load i16, i16* %17, align 8, !dbg !9977
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9977
  %20 = load i64, i64* %19, align 8, !dbg !9977
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9977
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9977
  %23 = load i16, i16* %22, align 8, !dbg !9977
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9977
  %25 = load i64, i64* %24, align 8, !dbg !9977
  %call1 = call zeroext i1 @floatx80_ge(i16 %18, i64 %20, i16 %23, i64 %25), !dbg !9977
  br label %lor.end, !dbg !9976

lor.end:                                          ; preds = %lor.rhs, %entry
  %26 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %26, !dbg !9978
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_uno_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9979 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9980, metadata !DIExpression()), !dbg !9981
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9982, metadata !DIExpression()), !dbg !9983
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9984
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9984
  %8 = load i16, i16* %7, align 8, !dbg !9984
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9984
  %10 = load i64, i64* %9, align 8, !dbg !9984
  %call = call zeroext i1 @floatx80_is_nan(i16 %8, i64 %10), !dbg !9984
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !9985

lor.rhs:                                          ; preds = %entry
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9986
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9986
  %13 = load i16, i16* %12, align 8, !dbg !9986
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9986
  %15 = load i64, i64* %14, align 8, !dbg !9986
  %call1 = call zeroext i1 @floatx80_is_nan(i16 %13, i64 %15), !dbg !9986
  br label %lor.end, !dbg !9985

lor.end:                                          ; preds = %lor.rhs, %entry
  %16 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %16, !dbg !9987
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_gt_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9988 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9989, metadata !DIExpression()), !dbg !9990
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !9991, metadata !DIExpression()), !dbg !9992
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9993
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !9993
  %8 = load i16, i16* %7, align 8, !dbg !9993
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !9993
  %10 = load i64, i64* %9, align 8, !dbg !9993
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9993
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !9993
  %13 = load i16, i16* %12, align 8, !dbg !9993
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !9993
  %15 = load i64, i64* %14, align 8, !dbg !9993
  %call = call zeroext i1 @floatx80_uno_quiet(i16 %8, i64 %10, i16 %13, i64 %15), !dbg !9993
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !9994

lor.rhs:                                          ; preds = %entry
  %16 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !9995
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !9995
  %18 = load i16, i16* %17, align 8, !dbg !9995
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !9995
  %20 = load i64, i64* %19, align 8, !dbg !9995
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !9995
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !9995
  %23 = load i16, i16* %22, align 8, !dbg !9995
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !9995
  %25 = load i64, i64* %24, align 8, !dbg !9995
  %call1 = call zeroext i1 @floatx80_gt(i16 %18, i64 %20, i16 %23, i64 %25), !dbg !9995
  br label %lor.end, !dbg !9994

lor.end:                                          ; preds = %lor.rhs, %entry
  %26 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %26, !dbg !9996
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_ne(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !9997 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !9998, metadata !DIExpression()), !dbg !9999
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !10000, metadata !DIExpression()), !dbg !10001
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10002
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !10002
  %8 = load i16, i16* %7, align 8, !dbg !10002
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !10002
  %10 = load i64, i64* %9, align 8, !dbg !10002
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10002
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !10002
  %13 = load i16, i16* %12, align 8, !dbg !10002
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !10002
  %15 = load i64, i64* %14, align 8, !dbg !10002
  %call = call zeroext i1 @floatx80_eq(i16 %8, i64 %10, i16 %13, i64 %15), !dbg !10002
  %lnot = xor i1 %call, true, !dbg !10003
  ret i1 %lnot, !dbg !10004
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_one_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !10005 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !10006, metadata !DIExpression()), !dbg !10007
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !10008, metadata !DIExpression()), !dbg !10009
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10010
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !10010
  %8 = load i16, i16* %7, align 8, !dbg !10010
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !10010
  %10 = load i64, i64* %9, align 8, !dbg !10010
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10010
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !10010
  %13 = load i16, i16* %12, align 8, !dbg !10010
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !10010
  %15 = load i64, i64* %14, align 8, !dbg !10010
  %call = call zeroext i1 @floatx80_ord_quiet(i16 %8, i64 %10, i16 %13, i64 %15), !dbg !10010
  br i1 %call, label %land.rhs, label %land.end, !dbg !10011

land.rhs:                                         ; preds = %entry
  %16 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10012
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !10012
  %18 = load i16, i16* %17, align 8, !dbg !10012
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !10012
  %20 = load i64, i64* %19, align 8, !dbg !10012
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10012
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !10012
  %23 = load i16, i16* %22, align 8, !dbg !10012
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !10012
  %25 = load i64, i64* %24, align 8, !dbg !10012
  %call1 = call zeroext i1 @floatx80_ne(i16 %18, i64 %20, i16 %23, i64 %25), !dbg !10012
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %26 = phi i1 [ false, %entry ], [ %call1, %land.rhs ]
  ret i1 %26, !dbg !10013
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_ord_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !10014 {
entry:
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !10015, metadata !DIExpression()), !dbg !10016
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !10017, metadata !DIExpression()), !dbg !10018
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10019
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !10019
  %8 = load i16, i16* %7, align 8, !dbg !10019
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !10019
  %10 = load i64, i64* %9, align 8, !dbg !10019
  %call = call zeroext i1 @floatx80_is_nan(i16 %8, i64 %10), !dbg !10019
  br i1 %call, label %land.end, label %land.rhs, !dbg !10020

land.rhs:                                         ; preds = %entry
  %11 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10021
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !10021
  %13 = load i16, i16* %12, align 8, !dbg !10021
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !10021
  %15 = load i64, i64* %14, align 8, !dbg !10021
  %call1 = call zeroext i1 @floatx80_is_nan(i16 %13, i64 %15), !dbg !10021
  %lnot = xor i1 %call1, true, !dbg !10022
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %16 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %16, !dbg !10023
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_eq_signaling(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !10024 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !10025, metadata !DIExpression()), !dbg !10026
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !10027, metadata !DIExpression()), !dbg !10028
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10029
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !10029
  %8 = load i16, i16* %7, align 8, !dbg !10029
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !10029
  %10 = load i64, i64* %9, align 8, !dbg !10029
  %call = call i32 @extractFloatx80Exp(i16 %8, i64 %10), !dbg !10029
  %cmp = icmp eq i32 %call, 32767, !dbg !10031
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10032

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10033
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !10033
  %13 = load i16, i16* %12, align 8, !dbg !10033
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !10033
  %15 = load i64, i64* %14, align 8, !dbg !10033
  %call1 = call i64 @extractFloatx80Frac(i16 %13, i64 %15), !dbg !10033
  %shl = shl i64 %call1, 1, !dbg !10034
  %tobool = icmp ne i64 %shl, 0, !dbg !10035
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !10036

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10037
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !10037
  %18 = load i16, i16* %17, align 8, !dbg !10037
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !10037
  %20 = load i64, i64* %19, align 8, !dbg !10037
  %call2 = call i32 @extractFloatx80Exp(i16 %18, i64 %20), !dbg !10037
  %cmp3 = icmp eq i32 %call2, 32767, !dbg !10038
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !10039

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10040
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !10040
  %23 = load i16, i16* %22, align 8, !dbg !10040
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !10040
  %25 = load i64, i64* %24, align 8, !dbg !10040
  %call5 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !10040
  %shl6 = shl i64 %call5, 1, !dbg !10041
  %tobool7 = icmp ne i64 %shl6, 0, !dbg !10042
  br i1 %tobool7, label %if.then, label %if.end, !dbg !10043

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  call void @float_raise(i32 16), !dbg !10044
  store i1 false, i1* %retval, align 1, !dbg !10046
  br label %return, !dbg !10046

if.end:                                           ; preds = %land.lhs.true4, %lor.lhs.false
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10047
  %26 = load i64, i64* %low, align 8, !dbg !10047
  %low8 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10048
  %27 = load i64, i64* %low8, align 8, !dbg !10048
  %cmp9 = icmp eq i64 %26, %27, !dbg !10049
  br i1 %cmp9, label %land.rhs, label %land.end27, !dbg !10050

land.rhs:                                         ; preds = %if.end
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10051
  %28 = load i16, i16* %high, align 8, !dbg !10051
  %conv = zext i16 %28 to i32, !dbg !10052
  %high10 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10053
  %29 = load i16, i16* %high10, align 8, !dbg !10053
  %conv11 = zext i16 %29 to i32, !dbg !10054
  %cmp12 = icmp eq i32 %conv, %conv11, !dbg !10055
  br i1 %cmp12, label %lor.end, label %lor.rhs, !dbg !10056

lor.rhs:                                          ; preds = %land.rhs
  %low14 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10057
  %30 = load i64, i64* %low14, align 8, !dbg !10057
  %cmp15 = icmp eq i64 %30, 0, !dbg !10058
  br i1 %cmp15, label %land.rhs17, label %land.end, !dbg !10059

land.rhs17:                                       ; preds = %lor.rhs
  %high18 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10060
  %31 = load i16, i16* %high18, align 8, !dbg !10060
  %conv19 = zext i16 %31 to i32, !dbg !10061
  %high20 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10062
  %32 = load i16, i16* %high20, align 8, !dbg !10062
  %conv21 = zext i16 %32 to i32, !dbg !10063
  %or = or i32 %conv19, %conv21, !dbg !10064
  %shl22 = shl i32 %or, 1, !dbg !10065
  %conv23 = trunc i32 %shl22 to i16, !dbg !10066
  %conv24 = zext i16 %conv23 to i32, !dbg !10066
  %cmp25 = icmp eq i32 %conv24, 0, !dbg !10067
  br label %land.end

land.end:                                         ; preds = %land.rhs17, %lor.rhs
  %33 = phi i1 [ false, %lor.rhs ], [ %cmp25, %land.rhs17 ]
  br label %lor.end, !dbg !10056

lor.end:                                          ; preds = %land.end, %land.rhs
  %34 = phi i1 [ true, %land.rhs ], [ %33, %land.end ]
  br label %land.end27

land.end27:                                       ; preds = %lor.end, %if.end
  %35 = phi i1 [ false, %if.end ], [ %34, %lor.end ]
  store i1 %35, i1* %retval, align 1, !dbg !10068
  br label %return, !dbg !10068

return:                                           ; preds = %land.end27, %if.then
  %36 = load i1, i1* %retval, align 1, !dbg !10069
  ret i1 %36, !dbg !10069
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_le_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !10070 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !10071, metadata !DIExpression()), !dbg !10072
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !10073, metadata !DIExpression()), !dbg !10074
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10075, metadata !DIExpression()), !dbg !10076
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !10077, metadata !DIExpression()), !dbg !10078
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10079
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !10079
  %8 = load i16, i16* %7, align 8, !dbg !10079
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !10079
  %10 = load i64, i64* %9, align 8, !dbg !10079
  %call = call i32 @extractFloatx80Exp(i16 %8, i64 %10), !dbg !10079
  %cmp = icmp eq i32 %call, 32767, !dbg !10081
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10082

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10083
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !10083
  %13 = load i16, i16* %12, align 8, !dbg !10083
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !10083
  %15 = load i64, i64* %14, align 8, !dbg !10083
  %call1 = call i64 @extractFloatx80Frac(i16 %13, i64 %15), !dbg !10083
  %shl = shl i64 %call1, 1, !dbg !10084
  %tobool = icmp ne i64 %shl, 0, !dbg !10085
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !10086

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10087
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !10087
  %18 = load i16, i16* %17, align 8, !dbg !10087
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !10087
  %20 = load i64, i64* %19, align 8, !dbg !10087
  %call2 = call i32 @extractFloatx80Exp(i16 %18, i64 %20), !dbg !10087
  %cmp3 = icmp eq i32 %call2, 32767, !dbg !10088
  br i1 %cmp3, label %land.lhs.true4, label %if.end12, !dbg !10089

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10090
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !10090
  %23 = load i16, i16* %22, align 8, !dbg !10090
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !10090
  %25 = load i64, i64* %24, align 8, !dbg !10090
  %call5 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !10090
  %shl6 = shl i64 %call5, 1, !dbg !10091
  %tobool7 = icmp ne i64 %shl6, 0, !dbg !10092
  br i1 %tobool7, label %if.then, label %if.end12, !dbg !10093

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %26 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10094
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !10094
  %28 = load i16, i16* %27, align 8, !dbg !10094
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !10094
  %30 = load i64, i64* %29, align 8, !dbg !10094
  %call8 = call zeroext i1 @floatx80_is_nan(i16 %28, i64 %30), !dbg !10094
  br i1 %call8, label %if.then11, label %lor.lhs.false9, !dbg !10097

lor.lhs.false9:                                   ; preds = %if.then
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10098
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !10098
  %33 = load i16, i16* %32, align 8, !dbg !10098
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !10098
  %35 = load i64, i64* %34, align 8, !dbg !10098
  %call10 = call zeroext i1 @floatx80_is_nan(i16 %33, i64 %35), !dbg !10098
  br i1 %call10, label %if.then11, label %if.end, !dbg !10099

if.then11:                                        ; preds = %lor.lhs.false9, %if.then
  call void @float_raise(i32 16), !dbg !10100
  br label %if.end, !dbg !10102

if.end:                                           ; preds = %if.then11, %lor.lhs.false9
  store i1 false, i1* %retval, align 1, !dbg !10103
  br label %return, !dbg !10103

if.end12:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %36 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10104
  %37 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %36, i32 0, i32 0, !dbg !10104
  %38 = load i16, i16* %37, align 8, !dbg !10104
  %39 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %36, i32 0, i32 1, !dbg !10104
  %40 = load i64, i64* %39, align 8, !dbg !10104
  %call13 = call i32 @extractFloatx80Sign(i16 %38, i64 %40), !dbg !10104
  store i32 %call13, i32* %aSign, align 4, !dbg !10105
  %41 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10106
  %42 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %41, i32 0, i32 0, !dbg !10106
  %43 = load i16, i16* %42, align 8, !dbg !10106
  %44 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %41, i32 0, i32 1, !dbg !10106
  %45 = load i64, i64* %44, align 8, !dbg !10106
  %call14 = call i32 @extractFloatx80Sign(i16 %43, i64 %45), !dbg !10106
  store i32 %call14, i32* %bSign, align 4, !dbg !10107
  %46 = load i32, i32* %aSign, align 4, !dbg !10108
  %47 = load i32, i32* %bSign, align 4, !dbg !10110
  %cmp15 = icmp ne i32 %46, %47, !dbg !10111
  br i1 %cmp15, label %if.then16, label %if.end28, !dbg !10112

if.then16:                                        ; preds = %if.end12
  %48 = load i32, i32* %aSign, align 4, !dbg !10113
  %tobool17 = icmp ne i32 %48, 0, !dbg !10113
  br i1 %tobool17, label %lor.end, label %lor.rhs, !dbg !10115

lor.rhs:                                          ; preds = %if.then16
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10116
  %49 = load i16, i16* %high, align 8, !dbg !10116
  %conv = zext i16 %49 to i32, !dbg !10117
  %high18 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10118
  %50 = load i16, i16* %high18, align 8, !dbg !10118
  %conv19 = zext i16 %50 to i32, !dbg !10119
  %or = or i32 %conv, %conv19, !dbg !10120
  %shl20 = shl i32 %or, 1, !dbg !10121
  %conv21 = trunc i32 %shl20 to i16, !dbg !10122
  %conv22 = zext i16 %conv21 to i64, !dbg !10123
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10124
  %51 = load i64, i64* %low, align 8, !dbg !10124
  %or23 = or i64 %conv22, %51, !dbg !10125
  %low24 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10126
  %52 = load i64, i64* %low24, align 8, !dbg !10126
  %or25 = or i64 %or23, %52, !dbg !10127
  %cmp26 = icmp eq i64 %or25, 0, !dbg !10128
  br label %lor.end, !dbg !10115

lor.end:                                          ; preds = %lor.rhs, %if.then16
  %53 = phi i1 [ true, %if.then16 ], [ %cmp26, %lor.rhs ]
  store i1 %53, i1* %retval, align 1, !dbg !10129
  br label %return, !dbg !10129

if.end28:                                         ; preds = %if.end12
  %54 = load i32, i32* %aSign, align 4, !dbg !10130
  %tobool29 = icmp ne i32 %54, 0, !dbg !10130
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !10130

cond.true:                                        ; preds = %if.end28
  %high30 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10131
  %55 = load i16, i16* %high30, align 8, !dbg !10131
  %conv31 = zext i16 %55 to i64, !dbg !10132
  %low32 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10133
  %56 = load i64, i64* %low32, align 8, !dbg !10133
  %high33 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10134
  %57 = load i16, i16* %high33, align 8, !dbg !10134
  %conv34 = zext i16 %57 to i64, !dbg !10135
  %low35 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10136
  %58 = load i64, i64* %low35, align 8, !dbg !10136
  %call36 = call zeroext i1 @le128(i64 %conv31, i64 %56, i64 %conv34, i64 %58), !dbg !10137
  %conv37 = zext i1 %call36 to i32, !dbg !10137
  br label %cond.end, !dbg !10130

cond.false:                                       ; preds = %if.end28
  %high38 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10138
  %59 = load i16, i16* %high38, align 8, !dbg !10138
  %conv39 = zext i16 %59 to i64, !dbg !10139
  %low40 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10140
  %60 = load i64, i64* %low40, align 8, !dbg !10140
  %high41 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10141
  %61 = load i16, i16* %high41, align 8, !dbg !10141
  %conv42 = zext i16 %61 to i64, !dbg !10142
  %low43 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10143
  %62 = load i64, i64* %low43, align 8, !dbg !10143
  %call44 = call zeroext i1 @le128(i64 %conv39, i64 %60, i64 %conv42, i64 %62), !dbg !10144
  %conv45 = zext i1 %call44 to i32, !dbg !10144
  br label %cond.end, !dbg !10130

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv37, %cond.true ], [ %conv45, %cond.false ], !dbg !10130
  %tobool46 = icmp ne i32 %cond, 0, !dbg !10130
  store i1 %tobool46, i1* %retval, align 1, !dbg !10145
  br label %return, !dbg !10145

return:                                           ; preds = %cond.end, %lor.end, %if.end
  %63 = load i1, i1* %retval, align 1, !dbg !10146
  ret i1 %63, !dbg !10146
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @floatx80_lt_quiet(i16 %a.coerce0, i64 %a.coerce1, i16 %b.coerce0, i64 %b.coerce1) #0 !dbg !10147 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.floatx80, align 8
  %b = alloca %struct.floatx80, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.floatx80* %a to { i16, i64 }*
  %1 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 0
  store i16 %a.coerce0, i16* %1, align 8
  %2 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.floatx80* %b to { i16, i64 }*
  %4 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 0
  store i16 %b.coerce0, i16* %4, align 8
  %5 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.floatx80* %a, metadata !10148, metadata !DIExpression()), !dbg !10149
  call void @llvm.dbg.declare(metadata %struct.floatx80* %b, metadata !10150, metadata !DIExpression()), !dbg !10151
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10152, metadata !DIExpression()), !dbg !10153
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !10154, metadata !DIExpression()), !dbg !10155
  %6 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10156
  %7 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 0, !dbg !10156
  %8 = load i16, i16* %7, align 8, !dbg !10156
  %9 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %6, i32 0, i32 1, !dbg !10156
  %10 = load i64, i64* %9, align 8, !dbg !10156
  %call = call i32 @extractFloatx80Exp(i16 %8, i64 %10), !dbg !10156
  %cmp = icmp eq i32 %call, 32767, !dbg !10158
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10159

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10160
  %12 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 0, !dbg !10160
  %13 = load i16, i16* %12, align 8, !dbg !10160
  %14 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %11, i32 0, i32 1, !dbg !10160
  %15 = load i64, i64* %14, align 8, !dbg !10160
  %call1 = call i64 @extractFloatx80Frac(i16 %13, i64 %15), !dbg !10160
  %shl = shl i64 %call1, 1, !dbg !10161
  %tobool = icmp ne i64 %shl, 0, !dbg !10162
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !10163

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %16 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10164
  %17 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 0, !dbg !10164
  %18 = load i16, i16* %17, align 8, !dbg !10164
  %19 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %16, i32 0, i32 1, !dbg !10164
  %20 = load i64, i64* %19, align 8, !dbg !10164
  %call2 = call i32 @extractFloatx80Exp(i16 %18, i64 %20), !dbg !10164
  %cmp3 = icmp eq i32 %call2, 32767, !dbg !10165
  br i1 %cmp3, label %land.lhs.true4, label %if.end12, !dbg !10166

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %21 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10167
  %22 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 0, !dbg !10167
  %23 = load i16, i16* %22, align 8, !dbg !10167
  %24 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %21, i32 0, i32 1, !dbg !10167
  %25 = load i64, i64* %24, align 8, !dbg !10167
  %call5 = call i64 @extractFloatx80Frac(i16 %23, i64 %25), !dbg !10167
  %shl6 = shl i64 %call5, 1, !dbg !10168
  %tobool7 = icmp ne i64 %shl6, 0, !dbg !10169
  br i1 %tobool7, label %if.then, label %if.end12, !dbg !10170

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  %26 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10171
  %27 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 0, !dbg !10171
  %28 = load i16, i16* %27, align 8, !dbg !10171
  %29 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %26, i32 0, i32 1, !dbg !10171
  %30 = load i64, i64* %29, align 8, !dbg !10171
  %call8 = call zeroext i1 @floatx80_is_nan(i16 %28, i64 %30), !dbg !10171
  br i1 %call8, label %if.then11, label %lor.lhs.false9, !dbg !10174

lor.lhs.false9:                                   ; preds = %if.then
  %31 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10175
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !10175
  %33 = load i16, i16* %32, align 8, !dbg !10175
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !10175
  %35 = load i64, i64* %34, align 8, !dbg !10175
  %call10 = call zeroext i1 @floatx80_is_nan(i16 %33, i64 %35), !dbg !10175
  br i1 %call10, label %if.then11, label %if.end, !dbg !10176

if.then11:                                        ; preds = %lor.lhs.false9, %if.then
  call void @float_raise(i32 16), !dbg !10177
  br label %if.end, !dbg !10179

if.end:                                           ; preds = %if.then11, %lor.lhs.false9
  store i1 false, i1* %retval, align 1, !dbg !10180
  br label %return, !dbg !10180

if.end12:                                         ; preds = %land.lhs.true4, %lor.lhs.false
  %36 = bitcast %struct.floatx80* %a to { i16, i64 }*, !dbg !10181
  %37 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %36, i32 0, i32 0, !dbg !10181
  %38 = load i16, i16* %37, align 8, !dbg !10181
  %39 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %36, i32 0, i32 1, !dbg !10181
  %40 = load i64, i64* %39, align 8, !dbg !10181
  %call13 = call i32 @extractFloatx80Sign(i16 %38, i64 %40), !dbg !10181
  store i32 %call13, i32* %aSign, align 4, !dbg !10182
  %41 = bitcast %struct.floatx80* %b to { i16, i64 }*, !dbg !10183
  %42 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %41, i32 0, i32 0, !dbg !10183
  %43 = load i16, i16* %42, align 8, !dbg !10183
  %44 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %41, i32 0, i32 1, !dbg !10183
  %45 = load i64, i64* %44, align 8, !dbg !10183
  %call14 = call i32 @extractFloatx80Sign(i16 %43, i64 %45), !dbg !10183
  store i32 %call14, i32* %bSign, align 4, !dbg !10184
  %46 = load i32, i32* %aSign, align 4, !dbg !10185
  %47 = load i32, i32* %bSign, align 4, !dbg !10187
  %cmp15 = icmp ne i32 %46, %47, !dbg !10188
  br i1 %cmp15, label %if.then16, label %if.end28, !dbg !10189

if.then16:                                        ; preds = %if.end12
  %48 = load i32, i32* %aSign, align 4, !dbg !10190
  %tobool17 = icmp ne i32 %48, 0, !dbg !10190
  br i1 %tobool17, label %land.rhs, label %land.end, !dbg !10192

land.rhs:                                         ; preds = %if.then16
  %high = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10193
  %49 = load i16, i16* %high, align 8, !dbg !10193
  %conv = zext i16 %49 to i32, !dbg !10194
  %high18 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10195
  %50 = load i16, i16* %high18, align 8, !dbg !10195
  %conv19 = zext i16 %50 to i32, !dbg !10196
  %or = or i32 %conv, %conv19, !dbg !10197
  %shl20 = shl i32 %or, 1, !dbg !10198
  %conv21 = trunc i32 %shl20 to i16, !dbg !10199
  %conv22 = zext i16 %conv21 to i64, !dbg !10200
  %low = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10201
  %51 = load i64, i64* %low, align 8, !dbg !10201
  %or23 = or i64 %conv22, %51, !dbg !10202
  %low24 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10203
  %52 = load i64, i64* %low24, align 8, !dbg !10203
  %or25 = or i64 %or23, %52, !dbg !10204
  %cmp26 = icmp ne i64 %or25, 0, !dbg !10205
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then16
  %53 = phi i1 [ false, %if.then16 ], [ %cmp26, %land.rhs ]
  store i1 %53, i1* %retval, align 1, !dbg !10206
  br label %return, !dbg !10206

if.end28:                                         ; preds = %if.end12
  %54 = load i32, i32* %aSign, align 4, !dbg !10207
  %tobool29 = icmp ne i32 %54, 0, !dbg !10207
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !10207

cond.true:                                        ; preds = %if.end28
  %high30 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10208
  %55 = load i16, i16* %high30, align 8, !dbg !10208
  %conv31 = zext i16 %55 to i64, !dbg !10209
  %low32 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10210
  %56 = load i64, i64* %low32, align 8, !dbg !10210
  %high33 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10211
  %57 = load i16, i16* %high33, align 8, !dbg !10211
  %conv34 = zext i16 %57 to i64, !dbg !10212
  %low35 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10213
  %58 = load i64, i64* %low35, align 8, !dbg !10213
  %call36 = call zeroext i1 @lt128(i64 %conv31, i64 %56, i64 %conv34, i64 %58), !dbg !10214
  %conv37 = zext i1 %call36 to i32, !dbg !10214
  br label %cond.end, !dbg !10207

cond.false:                                       ; preds = %if.end28
  %high38 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 0, !dbg !10215
  %59 = load i16, i16* %high38, align 8, !dbg !10215
  %conv39 = zext i16 %59 to i64, !dbg !10216
  %low40 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %a, i32 0, i32 1, !dbg !10217
  %60 = load i64, i64* %low40, align 8, !dbg !10217
  %high41 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 0, !dbg !10218
  %61 = load i16, i16* %high41, align 8, !dbg !10218
  %conv42 = zext i16 %61 to i64, !dbg !10219
  %low43 = getelementptr inbounds %struct.floatx80, %struct.floatx80* %b, i32 0, i32 1, !dbg !10220
  %62 = load i64, i64* %low43, align 8, !dbg !10220
  %call44 = call zeroext i1 @lt128(i64 %conv39, i64 %60, i64 %conv42, i64 %62), !dbg !10221
  %conv45 = zext i1 %call44 to i32, !dbg !10221
  br label %cond.end, !dbg !10207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv37, %cond.true ], [ %conv45, %cond.false ], !dbg !10207
  %tobool46 = icmp ne i32 %cond, 0, !dbg !10207
  store i1 %tobool46, i1* %retval, align 1, !dbg !10222
  br label %return, !dbg !10222

return:                                           ; preds = %cond.end, %land.end, %if.end
  %63 = load i1, i1* %retval, align 1, !dbg !10223
  ret i1 %63, !dbg !10223
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float128_to_int32(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10224 {
entry:
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10227, metadata !DIExpression()), !dbg !10228
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10229, metadata !DIExpression()), !dbg !10230
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10231, metadata !DIExpression()), !dbg !10232
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !10233, metadata !DIExpression()), !dbg !10234
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10235, metadata !DIExpression()), !dbg !10236
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10237, metadata !DIExpression()), !dbg !10238
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10239
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10239
  %5 = load i64, i64* %4, align 8, !dbg !10239
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10239
  %7 = load i64, i64* %6, align 8, !dbg !10239
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10239
  store i64 %call, i64* %aSig1, align 8, !dbg !10240
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10241
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10241
  %10 = load i64, i64* %9, align 8, !dbg !10241
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10241
  %12 = load i64, i64* %11, align 8, !dbg !10241
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10241
  store i64 %call1, i64* %aSig0, align 8, !dbg !10242
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10243
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10243
  %15 = load i64, i64* %14, align 8, !dbg !10243
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10243
  %17 = load i64, i64* %16, align 8, !dbg !10243
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10243
  store i32 %call2, i32* %aExp, align 4, !dbg !10244
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10245
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10245
  %20 = load i64, i64* %19, align 8, !dbg !10245
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10245
  %22 = load i64, i64* %21, align 8, !dbg !10245
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10245
  store i32 %call3, i32* %aSign, align 4, !dbg !10246
  %23 = load i32, i32* %aExp, align 4, !dbg !10247
  %cmp = icmp eq i32 %23, 32767, !dbg !10249
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10250

land.lhs.true:                                    ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !10251
  %25 = load i64, i64* %aSig1, align 8, !dbg !10252
  %or = or i64 %24, %25, !dbg !10253
  %tobool = icmp ne i64 %or, 0, !dbg !10253
  br i1 %tobool, label %if.then, label %if.end, !dbg !10254

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !10255
  br label %if.end, !dbg !10256

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %26 = load i32, i32* %aExp, align 4, !dbg !10257
  %tobool4 = icmp ne i32 %26, 0, !dbg !10257
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !10259

if.then5:                                         ; preds = %if.end
  %27 = load i64, i64* %aSig0, align 8, !dbg !10260
  %or6 = or i64 %27, 281474976710656, !dbg !10260
  store i64 %or6, i64* %aSig0, align 8, !dbg !10260
  br label %if.end7, !dbg !10261

if.end7:                                          ; preds = %if.then5, %if.end
  %28 = load i64, i64* %aSig1, align 8, !dbg !10262
  %cmp8 = icmp ne i64 %28, 0, !dbg !10263
  %conv = zext i1 %cmp8 to i32, !dbg !10263
  %conv9 = sext i32 %conv to i64, !dbg !10264
  %29 = load i64, i64* %aSig0, align 8, !dbg !10265
  %or10 = or i64 %29, %conv9, !dbg !10265
  store i64 %or10, i64* %aSig0, align 8, !dbg !10265
  %30 = load i32, i32* %aExp, align 4, !dbg !10266
  %sub = sub nsw i32 16424, %30, !dbg !10267
  store i32 %sub, i32* %shiftCount, align 4, !dbg !10268
  %31 = load i32, i32* %shiftCount, align 4, !dbg !10269
  %cmp11 = icmp slt i32 0, %31, !dbg !10271
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !10272

if.then13:                                        ; preds = %if.end7
  %32 = load i64, i64* %aSig0, align 8, !dbg !10273
  %33 = load i32, i32* %shiftCount, align 4, !dbg !10274
  call void @shift64RightJamming(i64 %32, i32 %33, i64* %aSig0), !dbg !10275
  br label %if.end14, !dbg !10275

if.end14:                                         ; preds = %if.then13, %if.end7
  %34 = load i32, i32* %aSign, align 4, !dbg !10276
  %35 = load i64, i64* %aSig0, align 8, !dbg !10277
  %call15 = call i32 @roundAndPackInt32(i32 %34, i64 %35), !dbg !10278
  ret i32 %call15, !dbg !10279
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float128_to_int32_round_to_zero(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10280 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %savedASig = alloca i64, align 8
  %z = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10281, metadata !DIExpression()), !dbg !10282
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10283, metadata !DIExpression()), !dbg !10284
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10285, metadata !DIExpression()), !dbg !10286
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !10287, metadata !DIExpression()), !dbg !10288
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10289, metadata !DIExpression()), !dbg !10290
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10291, metadata !DIExpression()), !dbg !10292
  call void @llvm.dbg.declare(metadata i64* %savedASig, metadata !10293, metadata !DIExpression()), !dbg !10294
  call void @llvm.dbg.declare(metadata i32* %z, metadata !10295, metadata !DIExpression()), !dbg !10296
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10297
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10297
  %5 = load i64, i64* %4, align 8, !dbg !10297
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10297
  %7 = load i64, i64* %6, align 8, !dbg !10297
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10297
  store i64 %call, i64* %aSig1, align 8, !dbg !10298
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10299
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10299
  %10 = load i64, i64* %9, align 8, !dbg !10299
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10299
  %12 = load i64, i64* %11, align 8, !dbg !10299
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10299
  store i64 %call1, i64* %aSig0, align 8, !dbg !10300
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10301
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10301
  %15 = load i64, i64* %14, align 8, !dbg !10301
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10301
  %17 = load i64, i64* %16, align 8, !dbg !10301
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10301
  store i32 %call2, i32* %aExp, align 4, !dbg !10302
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10303
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10303
  %20 = load i64, i64* %19, align 8, !dbg !10303
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10303
  %22 = load i64, i64* %21, align 8, !dbg !10303
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10303
  store i32 %call3, i32* %aSign, align 4, !dbg !10304
  %23 = load i64, i64* %aSig1, align 8, !dbg !10305
  %cmp = icmp ne i64 %23, 0, !dbg !10306
  %conv = zext i1 %cmp to i32, !dbg !10306
  %conv4 = sext i32 %conv to i64, !dbg !10307
  %24 = load i64, i64* %aSig0, align 8, !dbg !10308
  %or = or i64 %24, %conv4, !dbg !10308
  store i64 %or, i64* %aSig0, align 8, !dbg !10308
  %25 = load i32, i32* %aExp, align 4, !dbg !10309
  %cmp5 = icmp slt i32 16414, %25, !dbg !10311
  br i1 %cmp5, label %if.then, label %if.else, !dbg !10312

if.then:                                          ; preds = %entry
  %26 = load i32, i32* %aExp, align 4, !dbg !10313
  %cmp7 = icmp eq i32 %26, 32767, !dbg !10316
  br i1 %cmp7, label %land.lhs.true, label %if.end, !dbg !10317

land.lhs.true:                                    ; preds = %if.then
  %27 = load i64, i64* %aSig0, align 8, !dbg !10318
  %tobool = icmp ne i64 %27, 0, !dbg !10318
  br i1 %tobool, label %if.then9, label %if.end, !dbg !10319

if.then9:                                         ; preds = %land.lhs.true
  store i32 0, i32* %aSign, align 4, !dbg !10320
  br label %if.end, !dbg !10321

if.end:                                           ; preds = %if.then9, %land.lhs.true, %if.then
  br label %invalid, !dbg !10322

if.else:                                          ; preds = %entry
  %28 = load i32, i32* %aExp, align 4, !dbg !10323
  %cmp10 = icmp slt i32 %28, 16383, !dbg !10325
  br i1 %cmp10, label %if.then12, label %if.end18, !dbg !10326

if.then12:                                        ; preds = %if.else
  %29 = load i32, i32* %aExp, align 4, !dbg !10327
  %tobool13 = icmp ne i32 %29, 0, !dbg !10327
  br i1 %tobool13, label %if.then15, label %lor.lhs.false, !dbg !10330

lor.lhs.false:                                    ; preds = %if.then12
  %30 = load i64, i64* %aSig0, align 8, !dbg !10331
  %tobool14 = icmp ne i64 %30, 0, !dbg !10331
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !10332

if.then15:                                        ; preds = %lor.lhs.false, %if.then12
  %31 = load i32, i32* @float_exception_flags, align 4, !dbg !10333
  %or16 = or i32 %31, 1, !dbg !10333
  store i32 %or16, i32* @float_exception_flags, align 4, !dbg !10333
  br label %if.end17, !dbg !10334

if.end17:                                         ; preds = %if.then15, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !10335
  br label %return, !dbg !10335

if.end18:                                         ; preds = %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18
  %32 = load i64, i64* %aSig0, align 8, !dbg !10336
  %or20 = or i64 %32, 281474976710656, !dbg !10336
  store i64 %or20, i64* %aSig0, align 8, !dbg !10336
  %33 = load i32, i32* %aExp, align 4, !dbg !10337
  %sub = sub nsw i32 16431, %33, !dbg !10338
  store i32 %sub, i32* %shiftCount, align 4, !dbg !10339
  %34 = load i64, i64* %aSig0, align 8, !dbg !10340
  store i64 %34, i64* %savedASig, align 8, !dbg !10341
  %35 = load i32, i32* %shiftCount, align 4, !dbg !10342
  %36 = load i64, i64* %aSig0, align 8, !dbg !10343
  %sh_prom = zext i32 %35 to i64, !dbg !10343
  %shr = lshr i64 %36, %sh_prom, !dbg !10343
  store i64 %shr, i64* %aSig0, align 8, !dbg !10343
  %37 = load i64, i64* %aSig0, align 8, !dbg !10344
  %conv21 = trunc i64 %37 to i32, !dbg !10344
  store i32 %conv21, i32* %z, align 4, !dbg !10345
  %38 = load i32, i32* %aSign, align 4, !dbg !10346
  %tobool22 = icmp ne i32 %38, 0, !dbg !10346
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !10348

if.then23:                                        ; preds = %if.end19
  %39 = load i32, i32* %z, align 4, !dbg !10349
  %sub24 = sub nsw i32 0, %39, !dbg !10350
  store i32 %sub24, i32* %z, align 4, !dbg !10351
  br label %if.end25, !dbg !10352

if.end25:                                         ; preds = %if.then23, %if.end19
  %40 = load i32, i32* %z, align 4, !dbg !10353
  %cmp26 = icmp slt i32 %40, 0, !dbg !10355
  %conv27 = zext i1 %cmp26 to i32, !dbg !10355
  %41 = load i32, i32* %aSign, align 4, !dbg !10356
  %xor = xor i32 %conv27, %41, !dbg !10357
  %tobool28 = icmp ne i32 %xor, 0, !dbg !10357
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !10358

if.then29:                                        ; preds = %if.end25
  br label %invalid, !dbg !10359

invalid:                                          ; preds = %if.then29, %if.end
  call void @float_raise(i32 16), !dbg !10360
  %42 = load i32, i32* %aSign, align 4, !dbg !10362
  %tobool30 = icmp ne i32 %42, 0, !dbg !10362
  %43 = zext i1 %tobool30 to i64, !dbg !10362
  %cond = select i1 %tobool30, i32 -2147483648, i32 2147483647, !dbg !10362
  store i32 %cond, i32* %retval, align 4, !dbg !10363
  br label %return, !dbg !10363

if.end31:                                         ; preds = %if.end25
  %44 = load i64, i64* %aSig0, align 8, !dbg !10364
  %45 = load i32, i32* %shiftCount, align 4, !dbg !10366
  %sh_prom32 = zext i32 %45 to i64, !dbg !10367
  %shl = shl i64 %44, %sh_prom32, !dbg !10367
  %46 = load i64, i64* %savedASig, align 8, !dbg !10368
  %cmp33 = icmp ne i64 %shl, %46, !dbg !10369
  br i1 %cmp33, label %if.then35, label %if.end37, !dbg !10370

if.then35:                                        ; preds = %if.end31
  %47 = load i32, i32* @float_exception_flags, align 4, !dbg !10371
  %or36 = or i32 %47, 1, !dbg !10371
  store i32 %or36, i32* @float_exception_flags, align 4, !dbg !10371
  br label %if.end37, !dbg !10373

if.end37:                                         ; preds = %if.then35, %if.end31
  %48 = load i32, i32* %z, align 4, !dbg !10374
  store i32 %48, i32* %retval, align 4, !dbg !10375
  br label %return, !dbg !10375

return:                                           ; preds = %if.end37, %invalid, %if.end17
  %49 = load i32, i32* %retval, align 4, !dbg !10376
  ret i32 %49, !dbg !10376
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float128_to_int64(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10377 {
entry:
  %retval = alloca i64, align 8
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10380, metadata !DIExpression()), !dbg !10381
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10382, metadata !DIExpression()), !dbg !10383
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10384, metadata !DIExpression()), !dbg !10385
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !10386, metadata !DIExpression()), !dbg !10387
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10388, metadata !DIExpression()), !dbg !10389
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10390, metadata !DIExpression()), !dbg !10391
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10392
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10392
  %5 = load i64, i64* %4, align 8, !dbg !10392
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10392
  %7 = load i64, i64* %6, align 8, !dbg !10392
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10392
  store i64 %call, i64* %aSig1, align 8, !dbg !10393
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10394
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10394
  %10 = load i64, i64* %9, align 8, !dbg !10394
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10394
  %12 = load i64, i64* %11, align 8, !dbg !10394
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10394
  store i64 %call1, i64* %aSig0, align 8, !dbg !10395
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10396
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10396
  %15 = load i64, i64* %14, align 8, !dbg !10396
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10396
  %17 = load i64, i64* %16, align 8, !dbg !10396
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10396
  store i32 %call2, i32* %aExp, align 4, !dbg !10397
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10398
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10398
  %20 = load i64, i64* %19, align 8, !dbg !10398
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10398
  %22 = load i64, i64* %21, align 8, !dbg !10398
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10398
  store i32 %call3, i32* %aSign, align 4, !dbg !10399
  %23 = load i32, i32* %aExp, align 4, !dbg !10400
  %tobool = icmp ne i32 %23, 0, !dbg !10400
  br i1 %tobool, label %if.then, label %if.end, !dbg !10402

if.then:                                          ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !10403
  %or = or i64 %24, 281474976710656, !dbg !10403
  store i64 %or, i64* %aSig0, align 8, !dbg !10403
  br label %if.end, !dbg !10404

if.end:                                           ; preds = %if.then, %entry
  %25 = load i32, i32* %aExp, align 4, !dbg !10405
  %sub = sub nsw i32 16431, %25, !dbg !10406
  store i32 %sub, i32* %shiftCount, align 4, !dbg !10407
  %26 = load i32, i32* %shiftCount, align 4, !dbg !10408
  %cmp = icmp sle i32 %26, 0, !dbg !10410
  br i1 %cmp, label %if.then4, label %if.else, !dbg !10411

if.then4:                                         ; preds = %if.end
  %27 = load i32, i32* %aExp, align 4, !dbg !10412
  %cmp5 = icmp slt i32 16446, %27, !dbg !10415
  br i1 %cmp5, label %if.then6, label %if.end14, !dbg !10416

if.then6:                                         ; preds = %if.then4
  call void @float_raise(i32 16), !dbg !10417
  %28 = load i32, i32* %aSign, align 4, !dbg !10419
  %tobool7 = icmp ne i32 %28, 0, !dbg !10419
  br i1 %tobool7, label %lor.lhs.false, label %if.then12, !dbg !10421

lor.lhs.false:                                    ; preds = %if.then6
  %29 = load i32, i32* %aExp, align 4, !dbg !10422
  %cmp8 = icmp eq i32 %29, 32767, !dbg !10423
  br i1 %cmp8, label %land.lhs.true, label %if.end13, !dbg !10424

land.lhs.true:                                    ; preds = %lor.lhs.false
  %30 = load i64, i64* %aSig1, align 8, !dbg !10425
  %tobool9 = icmp ne i64 %30, 0, !dbg !10425
  br i1 %tobool9, label %if.then12, label %lor.lhs.false10, !dbg !10426

lor.lhs.false10:                                  ; preds = %land.lhs.true
  %31 = load i64, i64* %aSig0, align 8, !dbg !10427
  %cmp11 = icmp ne i64 %31, 281474976710656, !dbg !10428
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !10429

if.then12:                                        ; preds = %lor.lhs.false10, %land.lhs.true, %if.then6
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !10430
  br label %return, !dbg !10430

if.end13:                                         ; preds = %lor.lhs.false10, %lor.lhs.false
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !10432
  br label %return, !dbg !10432

if.end14:                                         ; preds = %if.then4
  %32 = load i64, i64* %aSig0, align 8, !dbg !10433
  %33 = load i64, i64* %aSig1, align 8, !dbg !10434
  %34 = load i32, i32* %shiftCount, align 4, !dbg !10435
  %sub15 = sub nsw i32 0, %34, !dbg !10436
  call void @shortShift128Left(i64 %32, i64 %33, i32 %sub15, i64* %aSig0, i64* %aSig1), !dbg !10437
  br label %if.end16, !dbg !10438

if.else:                                          ; preds = %if.end
  %35 = load i64, i64* %aSig0, align 8, !dbg !10439
  %36 = load i64, i64* %aSig1, align 8, !dbg !10441
  %37 = load i32, i32* %shiftCount, align 4, !dbg !10442
  call void @shift64ExtraRightJamming(i64 %35, i64 %36, i32 %37, i64* %aSig0, i64* %aSig1), !dbg !10443
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.end14
  %38 = load i32, i32* %aSign, align 4, !dbg !10444
  %39 = load i64, i64* %aSig0, align 8, !dbg !10445
  %40 = load i64, i64* %aSig1, align 8, !dbg !10446
  %call17 = call i64 @roundAndPackInt64(i32 %38, i64 %39, i64 %40), !dbg !10447
  store i64 %call17, i64* %retval, align 8, !dbg !10448
  br label %return, !dbg !10448

return:                                           ; preds = %if.end16, %if.end13, %if.then12
  %41 = load i64, i64* %retval, align 8, !dbg !10449
  ret i64 %41, !dbg !10449
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float128_to_int64_round_to_zero(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10450 {
entry:
  %retval = alloca i64, align 8
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %shiftCount = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %z = alloca i64, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10451, metadata !DIExpression()), !dbg !10452
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10453, metadata !DIExpression()), !dbg !10454
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10455, metadata !DIExpression()), !dbg !10456
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !10457, metadata !DIExpression()), !dbg !10458
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10459, metadata !DIExpression()), !dbg !10460
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10461, metadata !DIExpression()), !dbg !10462
  call void @llvm.dbg.declare(metadata i64* %z, metadata !10463, metadata !DIExpression()), !dbg !10464
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10465
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10465
  %5 = load i64, i64* %4, align 8, !dbg !10465
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10465
  %7 = load i64, i64* %6, align 8, !dbg !10465
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10465
  store i64 %call, i64* %aSig1, align 8, !dbg !10466
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10467
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10467
  %10 = load i64, i64* %9, align 8, !dbg !10467
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10467
  %12 = load i64, i64* %11, align 8, !dbg !10467
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10467
  store i64 %call1, i64* %aSig0, align 8, !dbg !10468
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10469
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10469
  %15 = load i64, i64* %14, align 8, !dbg !10469
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10469
  %17 = load i64, i64* %16, align 8, !dbg !10469
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10469
  store i32 %call2, i32* %aExp, align 4, !dbg !10470
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10471
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10471
  %20 = load i64, i64* %19, align 8, !dbg !10471
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10471
  %22 = load i64, i64* %21, align 8, !dbg !10471
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10471
  store i32 %call3, i32* %aSign, align 4, !dbg !10472
  %23 = load i32, i32* %aExp, align 4, !dbg !10473
  %tobool = icmp ne i32 %23, 0, !dbg !10473
  br i1 %tobool, label %if.then, label %if.end, !dbg !10475

if.then:                                          ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !10476
  %or = or i64 %24, 281474976710656, !dbg !10476
  store i64 %or, i64* %aSig0, align 8, !dbg !10476
  br label %if.end, !dbg !10477

if.end:                                           ; preds = %if.then, %entry
  %25 = load i32, i32* %aExp, align 4, !dbg !10478
  %sub = sub nsw i32 %25, 16431, !dbg !10479
  store i32 %sub, i32* %shiftCount, align 4, !dbg !10480
  %26 = load i32, i32* %shiftCount, align 4, !dbg !10481
  %cmp = icmp slt i32 0, %26, !dbg !10483
  br i1 %cmp, label %if.then4, label %if.else33, !dbg !10484

if.then4:                                         ; preds = %if.end
  %27 = load i32, i32* %aExp, align 4, !dbg !10485
  %cmp5 = icmp sle i32 16446, %27, !dbg !10488
  br i1 %cmp5, label %if.then6, label %if.end22, !dbg !10489

if.then6:                                         ; preds = %if.then4
  %28 = load i64, i64* %aSig0, align 8, !dbg !10490
  %and = and i64 %28, 281474976710655, !dbg !10490
  store i64 %and, i64* %aSig0, align 8, !dbg !10490
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !10492
  %29 = load i64, i64* %high, align 8, !dbg !10492
  %cmp7 = icmp eq i64 %29, -4594234569871327232, !dbg !10494
  br i1 %cmp7, label %land.lhs.true, label %if.else, !dbg !10495

land.lhs.true:                                    ; preds = %if.then6
  %30 = load i64, i64* %aSig1, align 8, !dbg !10496
  %cmp8 = icmp ult i64 %30, 562949953421312, !dbg !10497
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !10498

if.then9:                                         ; preds = %land.lhs.true
  %31 = load i64, i64* %aSig1, align 8, !dbg !10499
  %tobool10 = icmp ne i64 %31, 0, !dbg !10499
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !10502

if.then11:                                        ; preds = %if.then9
  %32 = load i32, i32* @float_exception_flags, align 4, !dbg !10503
  %or12 = or i32 %32, 1, !dbg !10503
  store i32 %or12, i32* @float_exception_flags, align 4, !dbg !10503
  br label %if.end13, !dbg !10504

if.end13:                                         ; preds = %if.then11, %if.then9
  br label %if.end21, !dbg !10505

if.else:                                          ; preds = %land.lhs.true, %if.then6
  call void @float_raise(i32 16), !dbg !10506
  %33 = load i32, i32* %aSign, align 4, !dbg !10508
  %tobool14 = icmp ne i32 %33, 0, !dbg !10508
  br i1 %tobool14, label %lor.lhs.false, label %if.then19, !dbg !10510

lor.lhs.false:                                    ; preds = %if.else
  %34 = load i32, i32* %aExp, align 4, !dbg !10511
  %cmp15 = icmp eq i32 %34, 32767, !dbg !10512
  br i1 %cmp15, label %land.lhs.true16, label %if.end20, !dbg !10513

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %35 = load i64, i64* %aSig0, align 8, !dbg !10514
  %36 = load i64, i64* %aSig1, align 8, !dbg !10515
  %or17 = or i64 %35, %36, !dbg !10516
  %tobool18 = icmp ne i64 %or17, 0, !dbg !10516
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !10517

if.then19:                                        ; preds = %land.lhs.true16, %if.else
  store i64 9223372036854775807, i64* %retval, align 8, !dbg !10518
  br label %return, !dbg !10518

if.end20:                                         ; preds = %land.lhs.true16, %lor.lhs.false
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end13
  store i64 -9223372036854775808, i64* %retval, align 8, !dbg !10520
  br label %return, !dbg !10520

if.end22:                                         ; preds = %if.then4
  %37 = load i64, i64* %aSig0, align 8, !dbg !10521
  %38 = load i32, i32* %shiftCount, align 4, !dbg !10522
  %sh_prom = zext i32 %38 to i64, !dbg !10523
  %shl = shl i64 %37, %sh_prom, !dbg !10523
  %39 = load i64, i64* %aSig1, align 8, !dbg !10524
  %40 = load i32, i32* %shiftCount, align 4, !dbg !10525
  %sub23 = sub nsw i32 0, %40, !dbg !10526
  %and24 = and i32 %sub23, 63, !dbg !10527
  %sh_prom25 = zext i32 %and24 to i64, !dbg !10528
  %shr = lshr i64 %39, %sh_prom25, !dbg !10528
  %or26 = or i64 %shl, %shr, !dbg !10529
  store i64 %or26, i64* %z, align 8, !dbg !10530
  %41 = load i64, i64* %aSig1, align 8, !dbg !10531
  %42 = load i32, i32* %shiftCount, align 4, !dbg !10533
  %sh_prom27 = zext i32 %42 to i64, !dbg !10534
  %shl28 = shl i64 %41, %sh_prom27, !dbg !10534
  %tobool29 = icmp ne i64 %shl28, 0, !dbg !10535
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !10536

if.then30:                                        ; preds = %if.end22
  %43 = load i32, i32* @float_exception_flags, align 4, !dbg !10537
  %or31 = or i32 %43, 1, !dbg !10537
  store i32 %or31, i32* @float_exception_flags, align 4, !dbg !10537
  br label %if.end32, !dbg !10539

if.end32:                                         ; preds = %if.then30, %if.end22
  br label %if.end57, !dbg !10540

if.else33:                                        ; preds = %if.end
  %44 = load i32, i32* %aExp, align 4, !dbg !10541
  %cmp34 = icmp slt i32 %44, 16383, !dbg !10544
  br i1 %cmp34, label %if.then35, label %if.end42, !dbg !10545

if.then35:                                        ; preds = %if.else33
  %45 = load i32, i32* %aExp, align 4, !dbg !10546
  %conv = sext i32 %45 to i64, !dbg !10546
  %46 = load i64, i64* %aSig0, align 8, !dbg !10549
  %or36 = or i64 %conv, %46, !dbg !10550
  %47 = load i64, i64* %aSig1, align 8, !dbg !10551
  %or37 = or i64 %or36, %47, !dbg !10552
  %tobool38 = icmp ne i64 %or37, 0, !dbg !10552
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !10553

if.then39:                                        ; preds = %if.then35
  %48 = load i32, i32* @float_exception_flags, align 4, !dbg !10554
  %or40 = or i32 %48, 1, !dbg !10554
  store i32 %or40, i32* @float_exception_flags, align 4, !dbg !10554
  br label %if.end41, !dbg !10556

if.end41:                                         ; preds = %if.then39, %if.then35
  store i64 0, i64* %retval, align 8, !dbg !10557
  br label %return, !dbg !10557

if.end42:                                         ; preds = %if.else33
  %49 = load i64, i64* %aSig0, align 8, !dbg !10558
  %50 = load i32, i32* %shiftCount, align 4, !dbg !10559
  %sub43 = sub nsw i32 0, %50, !dbg !10560
  %sh_prom44 = zext i32 %sub43 to i64, !dbg !10561
  %shr45 = lshr i64 %49, %sh_prom44, !dbg !10561
  store i64 %shr45, i64* %z, align 8, !dbg !10562
  %51 = load i64, i64* %aSig1, align 8, !dbg !10563
  %tobool46 = icmp ne i64 %51, 0, !dbg !10563
  br i1 %tobool46, label %if.then54, label %lor.lhs.false47, !dbg !10565

lor.lhs.false47:                                  ; preds = %if.end42
  %52 = load i32, i32* %shiftCount, align 4, !dbg !10566
  %tobool48 = icmp ne i32 %52, 0, !dbg !10566
  br i1 %tobool48, label %land.lhs.true49, label %if.end56, !dbg !10567

land.lhs.true49:                                  ; preds = %lor.lhs.false47
  %53 = load i64, i64* %aSig0, align 8, !dbg !10568
  %54 = load i32, i32* %shiftCount, align 4, !dbg !10569
  %and50 = and i32 %54, 63, !dbg !10570
  %sh_prom51 = zext i32 %and50 to i64, !dbg !10571
  %shl52 = shl i64 %53, %sh_prom51, !dbg !10571
  %tobool53 = icmp ne i64 %shl52, 0, !dbg !10572
  br i1 %tobool53, label %if.then54, label %if.end56, !dbg !10573

if.then54:                                        ; preds = %land.lhs.true49, %if.end42
  %55 = load i32, i32* @float_exception_flags, align 4, !dbg !10574
  %or55 = or i32 %55, 1, !dbg !10574
  store i32 %or55, i32* @float_exception_flags, align 4, !dbg !10574
  br label %if.end56, !dbg !10576

if.end56:                                         ; preds = %if.then54, %land.lhs.true49, %lor.lhs.false47
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end32
  %56 = load i32, i32* %aSign, align 4, !dbg !10577
  %tobool58 = icmp ne i32 %56, 0, !dbg !10577
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !10579

if.then59:                                        ; preds = %if.end57
  %57 = load i64, i64* %z, align 8, !dbg !10580
  %sub60 = sub nsw i64 0, %57, !dbg !10581
  store i64 %sub60, i64* %z, align 8, !dbg !10582
  br label %if.end61, !dbg !10583

if.end61:                                         ; preds = %if.then59, %if.end57
  %58 = load i64, i64* %z, align 8, !dbg !10584
  store i64 %58, i64* %retval, align 8, !dbg !10585
  br label %return, !dbg !10585

return:                                           ; preds = %if.end61, %if.end41, %if.end21, %if.then19
  %59 = load i64, i64* %retval, align 8, !dbg !10586
  ret i64 %59, !dbg !10586
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @float128_to_float32(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10587 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %zSig = alloca i32, align 4
  %agg.tmp = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10590, metadata !DIExpression()), !dbg !10591
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10592, metadata !DIExpression()), !dbg !10593
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10594, metadata !DIExpression()), !dbg !10595
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10596, metadata !DIExpression()), !dbg !10597
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10598, metadata !DIExpression()), !dbg !10599
  call void @llvm.dbg.declare(metadata i32* %zSig, metadata !10600, metadata !DIExpression()), !dbg !10601
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10602
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10602
  %5 = load i64, i64* %4, align 8, !dbg !10602
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10602
  %7 = load i64, i64* %6, align 8, !dbg !10602
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10602
  store i64 %call, i64* %aSig1, align 8, !dbg !10603
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10604
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10604
  %10 = load i64, i64* %9, align 8, !dbg !10604
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10604
  %12 = load i64, i64* %11, align 8, !dbg !10604
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10604
  store i64 %call1, i64* %aSig0, align 8, !dbg !10605
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10606
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10606
  %15 = load i64, i64* %14, align 8, !dbg !10606
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10606
  %17 = load i64, i64* %16, align 8, !dbg !10606
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10606
  store i32 %call2, i32* %aExp, align 4, !dbg !10607
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10608
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10608
  %20 = load i64, i64* %19, align 8, !dbg !10608
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10608
  %22 = load i64, i64* %21, align 8, !dbg !10608
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10608
  store i32 %call3, i32* %aSign, align 4, !dbg !10609
  %23 = load i32, i32* %aExp, align 4, !dbg !10610
  %cmp = icmp eq i32 %23, 32767, !dbg !10612
  br i1 %cmp, label %if.then, label %if.end7, !dbg !10613

if.then:                                          ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !10614
  %25 = load i64, i64* %aSig1, align 8, !dbg !10617
  %or = or i64 %24, %25, !dbg !10618
  %tobool = icmp ne i64 %or, 0, !dbg !10618
  br i1 %tobool, label %if.then4, label %if.end, !dbg !10619

if.then4:                                         ; preds = %if.then
  %26 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10620
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !10620
  %28 = load i64, i64* %27, align 8, !dbg !10620
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !10620
  %30 = load i64, i64* %29, align 8, !dbg !10620
  call void @float128ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i64 %28, i64 %30), !dbg !10620
  %call5 = call i32 @commonNaNToFloat32(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !10622
  store i32 %call5, i32* %retval, align 4, !dbg !10623
  br label %return, !dbg !10623

if.end:                                           ; preds = %if.then
  %31 = load i32, i32* %aSign, align 4, !dbg !10624
  %call6 = call i32 @packFloat32(i32 %31, i32 255, i32 0), !dbg !10625
  store i32 %call6, i32* %retval, align 4, !dbg !10626
  br label %return, !dbg !10626

if.end7:                                          ; preds = %entry
  %32 = load i64, i64* %aSig1, align 8, !dbg !10627
  %cmp8 = icmp ne i64 %32, 0, !dbg !10628
  %conv = zext i1 %cmp8 to i32, !dbg !10628
  %conv9 = sext i32 %conv to i64, !dbg !10629
  %33 = load i64, i64* %aSig0, align 8, !dbg !10630
  %or10 = or i64 %33, %conv9, !dbg !10630
  store i64 %or10, i64* %aSig0, align 8, !dbg !10630
  %34 = load i64, i64* %aSig0, align 8, !dbg !10631
  call void @shift64RightJamming(i64 %34, i32 18, i64* %aSig0), !dbg !10632
  %35 = load i64, i64* %aSig0, align 8, !dbg !10633
  %conv11 = trunc i64 %35 to i32, !dbg !10633
  store i32 %conv11, i32* %zSig, align 4, !dbg !10634
  %36 = load i32, i32* %aExp, align 4, !dbg !10635
  %tobool12 = icmp ne i32 %36, 0, !dbg !10635
  br i1 %tobool12, label %if.then14, label %lor.lhs.false, !dbg !10637

lor.lhs.false:                                    ; preds = %if.end7
  %37 = load i32, i32* %zSig, align 4, !dbg !10638
  %tobool13 = icmp ne i32 %37, 0, !dbg !10638
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !10639

if.then14:                                        ; preds = %lor.lhs.false, %if.end7
  %38 = load i32, i32* %zSig, align 4, !dbg !10640
  %or15 = or i32 %38, 1073741824, !dbg !10640
  store i32 %or15, i32* %zSig, align 4, !dbg !10640
  %39 = load i32, i32* %aExp, align 4, !dbg !10642
  %sub = sub nsw i32 %39, 16257, !dbg !10642
  store i32 %sub, i32* %aExp, align 4, !dbg !10642
  br label %if.end16, !dbg !10643

if.end16:                                         ; preds = %if.then14, %lor.lhs.false
  %40 = load i32, i32* %aSign, align 4, !dbg !10644
  %41 = load i32, i32* %aExp, align 4, !dbg !10645
  %42 = load i32, i32* %zSig, align 4, !dbg !10646
  %call17 = call i32 @roundAndPackFloat32(i32 %40, i32 %41, i32 %42), !dbg !10647
  store i32 %call17, i32* %retval, align 4, !dbg !10648
  br label %return, !dbg !10648

return:                                           ; preds = %if.end16, %if.end, %if.then4
  %43 = load i32, i32* %retval, align 4, !dbg !10649
  ret i32 %43, !dbg !10649
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @float128ToCommonNaN(%struct.commonNaNT* noalias sret %agg.result, i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10650 {
entry:
  %a = alloca %struct.float128, align 8
  %z = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10653, metadata !DIExpression()), !dbg !10654
  call void @llvm.dbg.declare(metadata %struct.commonNaNT* %z, metadata !10655, metadata !DIExpression()), !dbg !10656
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10657
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10657
  %5 = load i64, i64* %4, align 8, !dbg !10657
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10657
  %7 = load i64, i64* %6, align 8, !dbg !10657
  %call = call zeroext i1 @float128_is_signaling_nan(i64 %5, i64 %7), !dbg !10657
  br i1 %call, label %if.then, label %if.end, !dbg !10659

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !10660
  br label %if.end, !dbg !10660

if.end:                                           ; preds = %if.then, %entry
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !10661
  %8 = load i64, i64* %high, align 8, !dbg !10661
  %shr = lshr i64 %8, 63, !dbg !10662
  %conv = trunc i64 %shr to i32, !dbg !10663
  %sign = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 0, !dbg !10664
  store i32 %conv, i32* %sign, align 8, !dbg !10665
  %high1 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !10666
  %9 = load i64, i64* %high1, align 8, !dbg !10666
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !10667
  %10 = load i64, i64* %low, align 8, !dbg !10667
  %high2 = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 1, !dbg !10668
  %low3 = getelementptr inbounds %struct.commonNaNT, %struct.commonNaNT* %z, i32 0, i32 2, !dbg !10669
  call void @shortShift128Left(i64 %9, i64 %10, i32 16, i64* %high2, i64* %low3), !dbg !10670
  %11 = bitcast %struct.commonNaNT* %agg.result to i8*, !dbg !10671
  %12 = bitcast %struct.commonNaNT* %z to i8*, !dbg !10671
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 24, i32 8, i1 false), !dbg !10671
  ret void, !dbg !10672
}

; Function Attrs: noinline nounwind optnone uwtable
define i64 @float128_to_float64(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10673 {
entry:
  %retval = alloca i64, align 8
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10676, metadata !DIExpression()), !dbg !10677
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10678, metadata !DIExpression()), !dbg !10679
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10680, metadata !DIExpression()), !dbg !10681
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10682, metadata !DIExpression()), !dbg !10683
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10684, metadata !DIExpression()), !dbg !10685
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10686
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10686
  %5 = load i64, i64* %4, align 8, !dbg !10686
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10686
  %7 = load i64, i64* %6, align 8, !dbg !10686
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10686
  store i64 %call, i64* %aSig1, align 8, !dbg !10687
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10688
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10688
  %10 = load i64, i64* %9, align 8, !dbg !10688
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10688
  %12 = load i64, i64* %11, align 8, !dbg !10688
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10688
  store i64 %call1, i64* %aSig0, align 8, !dbg !10689
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10690
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10690
  %15 = load i64, i64* %14, align 8, !dbg !10690
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10690
  %17 = load i64, i64* %16, align 8, !dbg !10690
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10690
  store i32 %call2, i32* %aExp, align 4, !dbg !10691
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10692
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10692
  %20 = load i64, i64* %19, align 8, !dbg !10692
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10692
  %22 = load i64, i64* %21, align 8, !dbg !10692
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10692
  store i32 %call3, i32* %aSign, align 4, !dbg !10693
  %23 = load i32, i32* %aExp, align 4, !dbg !10694
  %cmp = icmp eq i32 %23, 32767, !dbg !10696
  br i1 %cmp, label %if.then, label %if.end7, !dbg !10697

if.then:                                          ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !10698
  %25 = load i64, i64* %aSig1, align 8, !dbg !10701
  %or = or i64 %24, %25, !dbg !10702
  %tobool = icmp ne i64 %or, 0, !dbg !10702
  br i1 %tobool, label %if.then4, label %if.end, !dbg !10703

if.then4:                                         ; preds = %if.then
  %26 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10704
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !10704
  %28 = load i64, i64* %27, align 8, !dbg !10704
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !10704
  %30 = load i64, i64* %29, align 8, !dbg !10704
  call void @float128ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i64 %28, i64 %30), !dbg !10704
  %call5 = call i64 @commonNaNToFloat64(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !10706
  store i64 %call5, i64* %retval, align 8, !dbg !10707
  br label %return, !dbg !10707

if.end:                                           ; preds = %if.then
  %31 = load i32, i32* %aSign, align 4, !dbg !10708
  %call6 = call i64 @packFloat64(i32 %31, i32 2047, i64 0), !dbg !10709
  store i64 %call6, i64* %retval, align 8, !dbg !10710
  br label %return, !dbg !10710

if.end7:                                          ; preds = %entry
  %32 = load i64, i64* %aSig0, align 8, !dbg !10711
  %33 = load i64, i64* %aSig1, align 8, !dbg !10712
  call void @shortShift128Left(i64 %32, i64 %33, i32 14, i64* %aSig0, i64* %aSig1), !dbg !10713
  %34 = load i64, i64* %aSig1, align 8, !dbg !10714
  %cmp8 = icmp ne i64 %34, 0, !dbg !10715
  %conv = zext i1 %cmp8 to i32, !dbg !10715
  %conv9 = sext i32 %conv to i64, !dbg !10716
  %35 = load i64, i64* %aSig0, align 8, !dbg !10717
  %or10 = or i64 %35, %conv9, !dbg !10717
  store i64 %or10, i64* %aSig0, align 8, !dbg !10717
  %36 = load i32, i32* %aExp, align 4, !dbg !10718
  %tobool11 = icmp ne i32 %36, 0, !dbg !10718
  br i1 %tobool11, label %if.then13, label %lor.lhs.false, !dbg !10720

lor.lhs.false:                                    ; preds = %if.end7
  %37 = load i64, i64* %aSig0, align 8, !dbg !10721
  %tobool12 = icmp ne i64 %37, 0, !dbg !10721
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !10722

if.then13:                                        ; preds = %lor.lhs.false, %if.end7
  %38 = load i64, i64* %aSig0, align 8, !dbg !10723
  %or14 = or i64 %38, 4611686018427387904, !dbg !10723
  store i64 %or14, i64* %aSig0, align 8, !dbg !10723
  %39 = load i32, i32* %aExp, align 4, !dbg !10725
  %sub = sub nsw i32 %39, 15361, !dbg !10725
  store i32 %sub, i32* %aExp, align 4, !dbg !10725
  br label %if.end15, !dbg !10726

if.end15:                                         ; preds = %if.then13, %lor.lhs.false
  %40 = load i32, i32* %aSign, align 4, !dbg !10727
  %41 = load i32, i32* %aExp, align 4, !dbg !10728
  %42 = load i64, i64* %aSig0, align 8, !dbg !10729
  %call16 = call i64 @roundAndPackFloat64(i32 %40, i32 %41, i64 %42), !dbg !10730
  store i64 %call16, i64* %retval, align 8, !dbg !10731
  br label %return, !dbg !10731

return:                                           ; preds = %if.end15, %if.end, %if.then4
  %43 = load i64, i64* %retval, align 8, !dbg !10732
  ret i64 %43, !dbg !10732
}

; Function Attrs: noinline nounwind optnone uwtable
define { i16, i64 } @float128_to_floatx80(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10733 {
entry:
  %retval = alloca %struct.floatx80, align 8
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %agg.tmp = alloca %struct.commonNaNT, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10736, metadata !DIExpression()), !dbg !10737
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10738, metadata !DIExpression()), !dbg !10739
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10740, metadata !DIExpression()), !dbg !10741
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !10742, metadata !DIExpression()), !dbg !10743
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !10744, metadata !DIExpression()), !dbg !10745
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10746
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10746
  %5 = load i64, i64* %4, align 8, !dbg !10746
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10746
  %7 = load i64, i64* %6, align 8, !dbg !10746
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !10746
  store i64 %call, i64* %aSig1, align 8, !dbg !10747
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10748
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !10748
  %10 = load i64, i64* %9, align 8, !dbg !10748
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !10748
  %12 = load i64, i64* %11, align 8, !dbg !10748
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !10748
  store i64 %call1, i64* %aSig0, align 8, !dbg !10749
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10750
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !10750
  %15 = load i64, i64* %14, align 8, !dbg !10750
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !10750
  %17 = load i64, i64* %16, align 8, !dbg !10750
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !10750
  store i32 %call2, i32* %aExp, align 4, !dbg !10751
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10752
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !10752
  %20 = load i64, i64* %19, align 8, !dbg !10752
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !10752
  %22 = load i64, i64* %21, align 8, !dbg !10752
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !10752
  store i32 %call3, i32* %aSign, align 4, !dbg !10753
  %23 = load i32, i32* %aExp, align 4, !dbg !10754
  %cmp = icmp eq i32 %23, 32767, !dbg !10756
  br i1 %cmp, label %if.then, label %if.end7, !dbg !10757

if.then:                                          ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !10758
  %25 = load i64, i64* %aSig1, align 8, !dbg !10761
  %or = or i64 %24, %25, !dbg !10762
  %tobool = icmp ne i64 %or, 0, !dbg !10762
  br i1 %tobool, label %if.then4, label %if.end, !dbg !10763

if.then4:                                         ; preds = %if.then
  %26 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10764
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !10764
  %28 = load i64, i64* %27, align 8, !dbg !10764
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !10764
  %30 = load i64, i64* %29, align 8, !dbg !10764
  call void @float128ToCommonNaN(%struct.commonNaNT* sret %agg.tmp, i64 %28, i64 %30), !dbg !10764
  %call5 = call { i16, i64 } @commonNaNToFloatx80(%struct.commonNaNT* byval align 8 %agg.tmp), !dbg !10766
  %31 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !10766
  %32 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 0, !dbg !10766
  %33 = extractvalue { i16, i64 } %call5, 0, !dbg !10766
  store i16 %33, i16* %32, align 8, !dbg !10766
  %34 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %31, i32 0, i32 1, !dbg !10766
  %35 = extractvalue { i16, i64 } %call5, 1, !dbg !10766
  store i64 %35, i64* %34, align 8, !dbg !10766
  br label %return, !dbg !10767

if.end:                                           ; preds = %if.then
  %36 = load i32, i32* %aSign, align 4, !dbg !10768
  %call6 = call { i16, i64 } @packFloatx80(i32 %36, i32 32767, i64 -9223372036854775808), !dbg !10769
  %37 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !10769
  %38 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %37, i32 0, i32 0, !dbg !10769
  %39 = extractvalue { i16, i64 } %call6, 0, !dbg !10769
  store i16 %39, i16* %38, align 8, !dbg !10769
  %40 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %37, i32 0, i32 1, !dbg !10769
  %41 = extractvalue { i16, i64 } %call6, 1, !dbg !10769
  store i64 %41, i64* %40, align 8, !dbg !10769
  br label %return, !dbg !10770

if.end7:                                          ; preds = %entry
  %42 = load i32, i32* %aExp, align 4, !dbg !10771
  %cmp8 = icmp eq i32 %42, 0, !dbg !10773
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !10774

if.then9:                                         ; preds = %if.end7
  %43 = load i64, i64* %aSig0, align 8, !dbg !10775
  %44 = load i64, i64* %aSig1, align 8, !dbg !10778
  %or10 = or i64 %43, %44, !dbg !10779
  %cmp11 = icmp eq i64 %or10, 0, !dbg !10780
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !10781

if.then12:                                        ; preds = %if.then9
  %45 = load i32, i32* %aSign, align 4, !dbg !10782
  %call13 = call { i16, i64 } @packFloatx80(i32 %45, i32 0, i64 0), !dbg !10783
  %46 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !10783
  %47 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %46, i32 0, i32 0, !dbg !10783
  %48 = extractvalue { i16, i64 } %call13, 0, !dbg !10783
  store i16 %48, i16* %47, align 8, !dbg !10783
  %49 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %46, i32 0, i32 1, !dbg !10783
  %50 = extractvalue { i16, i64 } %call13, 1, !dbg !10783
  store i64 %50, i64* %49, align 8, !dbg !10783
  br label %return, !dbg !10784

if.end14:                                         ; preds = %if.then9
  %51 = load i64, i64* %aSig0, align 8, !dbg !10785
  %52 = load i64, i64* %aSig1, align 8, !dbg !10786
  call void @normalizeFloat128Subnormal(i64 %51, i64 %52, i32* %aExp, i64* %aSig0, i64* %aSig1), !dbg !10787
  br label %if.end16, !dbg !10788

if.else:                                          ; preds = %if.end7
  %53 = load i64, i64* %aSig0, align 8, !dbg !10789
  %or15 = or i64 %53, 281474976710656, !dbg !10789
  store i64 %or15, i64* %aSig0, align 8, !dbg !10789
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.end14
  %54 = load i64, i64* %aSig0, align 8, !dbg !10791
  %55 = load i64, i64* %aSig1, align 8, !dbg !10792
  call void @shortShift128Left(i64 %54, i64 %55, i32 15, i64* %aSig0, i64* %aSig1), !dbg !10793
  %56 = load i32, i32* %aSign, align 4, !dbg !10794
  %57 = load i32, i32* %aExp, align 4, !dbg !10795
  %58 = load i64, i64* %aSig0, align 8, !dbg !10796
  %59 = load i64, i64* %aSig1, align 8, !dbg !10797
  %call17 = call { i16, i64 } @roundAndPackFloatx80(i32 80, i32 %56, i32 %57, i64 %58, i64 %59), !dbg !10798
  %60 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !10798
  %61 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %60, i32 0, i32 0, !dbg !10798
  %62 = extractvalue { i16, i64 } %call17, 0, !dbg !10798
  store i16 %62, i16* %61, align 8, !dbg !10798
  %63 = getelementptr inbounds { i16, i64 }, { i16, i64 }* %60, i32 0, i32 1, !dbg !10798
  %64 = extractvalue { i16, i64 } %call17, 1, !dbg !10798
  store i64 %64, i64* %63, align 8, !dbg !10798
  br label %return, !dbg !10799

return:                                           ; preds = %if.end16, %if.then12, %if.end, %if.then4
  %65 = bitcast %struct.floatx80* %retval to { i16, i64 }*, !dbg !10800
  %66 = load { i16, i64 }, { i16, i64 }* %65, align 8, !dbg !10800
  ret { i16, i64 } %66, !dbg !10800
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @normalizeFloat128Subnormal(i64 %aSig0, i64 %aSig1, i32* %zExpPtr, i64* %zSig0Ptr, i64* %zSig1Ptr) #0 !dbg !10801 {
entry:
  %aSig0.addr = alloca i64, align 8
  %aSig1.addr = alloca i64, align 8
  %zExpPtr.addr = alloca i32*, align 8
  %zSig0Ptr.addr = alloca i64*, align 8
  %zSig1Ptr.addr = alloca i64*, align 8
  %shiftCount = alloca i32, align 4
  store i64 %aSig0, i64* %aSig0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %aSig0.addr, metadata !10804, metadata !DIExpression()), !dbg !10805
  store i64 %aSig1, i64* %aSig1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %aSig1.addr, metadata !10806, metadata !DIExpression()), !dbg !10807
  store i32* %zExpPtr, i32** %zExpPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %zExpPtr.addr, metadata !10808, metadata !DIExpression()), !dbg !10809
  store i64* %zSig0Ptr, i64** %zSig0Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %zSig0Ptr.addr, metadata !10810, metadata !DIExpression()), !dbg !10811
  store i64* %zSig1Ptr, i64** %zSig1Ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %zSig1Ptr.addr, metadata !10812, metadata !DIExpression()), !dbg !10813
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !10814, metadata !DIExpression()), !dbg !10815
  %0 = load i64, i64* %aSig0.addr, align 8, !dbg !10816
  %cmp = icmp eq i64 %0, 0, !dbg !10818
  br i1 %cmp, label %if.then, label %if.else9, !dbg !10819

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %aSig1.addr, align 8, !dbg !10820
  %call = call i32 @countLeadingZeros64(i64 %1), !dbg !10822
  %sub = sub nsw i32 %call, 15, !dbg !10823
  store i32 %sub, i32* %shiftCount, align 4, !dbg !10824
  %2 = load i32, i32* %shiftCount, align 4, !dbg !10825
  %cmp1 = icmp slt i32 %2, 0, !dbg !10827
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !10828

if.then2:                                         ; preds = %if.then
  %3 = load i64, i64* %aSig1.addr, align 8, !dbg !10829
  %4 = load i32, i32* %shiftCount, align 4, !dbg !10831
  %sub3 = sub nsw i32 0, %4, !dbg !10832
  %sh_prom = zext i32 %sub3 to i64, !dbg !10833
  %shr = lshr i64 %3, %sh_prom, !dbg !10833
  %5 = load i64*, i64** %zSig0Ptr.addr, align 8, !dbg !10834
  store i64 %shr, i64* %5, align 8, !dbg !10835
  %6 = load i64, i64* %aSig1.addr, align 8, !dbg !10836
  %7 = load i32, i32* %shiftCount, align 4, !dbg !10837
  %and = and i32 %7, 63, !dbg !10838
  %sh_prom4 = zext i32 %and to i64, !dbg !10839
  %shl = shl i64 %6, %sh_prom4, !dbg !10839
  %8 = load i64*, i64** %zSig1Ptr.addr, align 8, !dbg !10840
  store i64 %shl, i64* %8, align 8, !dbg !10841
  br label %if.end, !dbg !10842

if.else:                                          ; preds = %if.then
  %9 = load i64, i64* %aSig1.addr, align 8, !dbg !10843
  %10 = load i32, i32* %shiftCount, align 4, !dbg !10845
  %sh_prom5 = zext i32 %10 to i64, !dbg !10846
  %shl6 = shl i64 %9, %sh_prom5, !dbg !10846
  %11 = load i64*, i64** %zSig0Ptr.addr, align 8, !dbg !10847
  store i64 %shl6, i64* %11, align 8, !dbg !10848
  %12 = load i64*, i64** %zSig1Ptr.addr, align 8, !dbg !10849
  store i64 0, i64* %12, align 8, !dbg !10850
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  %13 = load i32, i32* %shiftCount, align 4, !dbg !10851
  %sub7 = sub nsw i32 0, %13, !dbg !10852
  %sub8 = sub nsw i32 %sub7, 63, !dbg !10853
  %14 = load i32*, i32** %zExpPtr.addr, align 8, !dbg !10854
  store i32 %sub8, i32* %14, align 4, !dbg !10855
  br label %if.end13, !dbg !10856

if.else9:                                         ; preds = %entry
  %15 = load i64, i64* %aSig0.addr, align 8, !dbg !10857
  %call10 = call i32 @countLeadingZeros64(i64 %15), !dbg !10859
  %sub11 = sub nsw i32 %call10, 15, !dbg !10860
  store i32 %sub11, i32* %shiftCount, align 4, !dbg !10861
  %16 = load i64, i64* %aSig0.addr, align 8, !dbg !10862
  %17 = load i64, i64* %aSig1.addr, align 8, !dbg !10863
  %18 = load i32, i32* %shiftCount, align 4, !dbg !10864
  %19 = load i64*, i64** %zSig0Ptr.addr, align 8, !dbg !10865
  %20 = load i64*, i64** %zSig1Ptr.addr, align 8, !dbg !10866
  call void @shortShift128Left(i64 %16, i64 %17, i32 %18, i64* %19, i64* %20), !dbg !10867
  %21 = load i32, i32* %shiftCount, align 4, !dbg !10868
  %sub12 = sub nsw i32 1, %21, !dbg !10869
  %22 = load i32*, i32** %zExpPtr.addr, align 8, !dbg !10870
  store i32 %sub12, i32* %22, align 4, !dbg !10871
  br label %if.end13

if.end13:                                         ; preds = %if.else9, %if.end
  ret void, !dbg !10872
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_round_to_int(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !10873 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %lastBitMask = alloca i64, align 8
  %roundBitsMask = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %z = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !10876, metadata !DIExpression()), !dbg !10877
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !10878, metadata !DIExpression()), !dbg !10879
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !10880, metadata !DIExpression()), !dbg !10881
  call void @llvm.dbg.declare(metadata i64* %lastBitMask, metadata !10882, metadata !DIExpression()), !dbg !10883
  call void @llvm.dbg.declare(metadata i64* %roundBitsMask, metadata !10884, metadata !DIExpression()), !dbg !10885
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !10886, metadata !DIExpression()), !dbg !10887
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !10888, metadata !DIExpression()), !dbg !10889
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10890
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !10890
  %5 = load i64, i64* %4, align 8, !dbg !10890
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !10890
  %7 = load i64, i64* %6, align 8, !dbg !10890
  %call = call i32 @extractFloat128Exp(i64 %5, i64 %7), !dbg !10890
  store i32 %call, i32* %aExp, align 4, !dbg !10891
  %8 = load i32, i32* %aExp, align 4, !dbg !10892
  %cmp = icmp sle i32 16431, %8, !dbg !10894
  br i1 %cmp, label %if.then, label %if.else53, !dbg !10895

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %aExp, align 4, !dbg !10896
  %cmp1 = icmp sle i32 16495, %9, !dbg !10899
  br i1 %cmp1, label %if.then2, label %if.end8, !dbg !10900

if.then2:                                         ; preds = %if.then
  %10 = load i32, i32* %aExp, align 4, !dbg !10901
  %cmp3 = icmp eq i32 %10, 32767, !dbg !10904
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !10905

land.lhs.true:                                    ; preds = %if.then2
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10906
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !10906
  %13 = load i64, i64* %12, align 8, !dbg !10906
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !10906
  %15 = load i64, i64* %14, align 8, !dbg !10906
  %call4 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !10906
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10907
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !10907
  %18 = load i64, i64* %17, align 8, !dbg !10907
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !10907
  %20 = load i64, i64* %19, align 8, !dbg !10907
  %call5 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !10907
  %or = or i64 %call4, %call5, !dbg !10908
  %tobool = icmp ne i64 %or, 0, !dbg !10908
  br i1 %tobool, label %if.then6, label %if.end, !dbg !10909

if.then6:                                         ; preds = %land.lhs.true
  %21 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10910
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !10910
  %23 = load i64, i64* %22, align 8, !dbg !10910
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !10910
  %25 = load i64, i64* %24, align 8, !dbg !10910
  %26 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !10910
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !10910
  %28 = load i64, i64* %27, align 8, !dbg !10910
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !10910
  %30 = load i64, i64* %29, align 8, !dbg !10910
  %call7 = call { i64, i64 } @propagateFloat128NaN(i64 %23, i64 %25, i64 %28, i64 %30), !dbg !10910
  %31 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !10910
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !10910
  %33 = extractvalue { i64, i64 } %call7, 0, !dbg !10910
  store i64 %33, i64* %32, align 8, !dbg !10910
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !10910
  %35 = extractvalue { i64, i64 } %call7, 1, !dbg !10910
  store i64 %35, i64* %34, align 8, !dbg !10910
  br label %return, !dbg !10912

if.end:                                           ; preds = %land.lhs.true, %if.then2
  %36 = bitcast %struct.float128* %retval to i8*, !dbg !10913
  %37 = bitcast %struct.float128* %a to i8*, !dbg !10913
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false), !dbg !10913
  br label %return, !dbg !10914

if.end8:                                          ; preds = %if.then
  store i64 1, i64* %lastBitMask, align 8, !dbg !10915
  %38 = load i64, i64* %lastBitMask, align 8, !dbg !10916
  %39 = load i32, i32* %aExp, align 4, !dbg !10917
  %sub = sub nsw i32 16494, %39, !dbg !10918
  %sh_prom = zext i32 %sub to i64, !dbg !10919
  %shl = shl i64 %38, %sh_prom, !dbg !10919
  %shl9 = shl i64 %shl, 1, !dbg !10920
  store i64 %shl9, i64* %lastBitMask, align 8, !dbg !10921
  %40 = load i64, i64* %lastBitMask, align 8, !dbg !10922
  %sub10 = sub i64 %40, 1, !dbg !10923
  store i64 %sub10, i64* %roundBitsMask, align 8, !dbg !10924
  %41 = bitcast %struct.float128* %z to i8*, !dbg !10925
  %42 = bitcast %struct.float128* %a to i8*, !dbg !10925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false), !dbg !10925
  %43 = load i32, i32* @float_rounding_mode, align 4, !dbg !10926
  store i32 %43, i32* %roundingMode, align 4, !dbg !10927
  %44 = load i32, i32* %roundingMode, align 4, !dbg !10928
  %cmp11 = icmp eq i32 %44, 0, !dbg !10930
  br i1 %cmp11, label %if.then12, label %if.else36, !dbg !10931

if.then12:                                        ; preds = %if.end8
  %45 = load i64, i64* %lastBitMask, align 8, !dbg !10932
  %tobool13 = icmp ne i64 %45, 0, !dbg !10932
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !10935

if.then14:                                        ; preds = %if.then12
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !10936
  %46 = load i64, i64* %high, align 8, !dbg !10936
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10938
  %47 = load i64, i64* %low, align 8, !dbg !10938
  %48 = load i64, i64* %lastBitMask, align 8, !dbg !10939
  %shr = lshr i64 %48, 1, !dbg !10940
  %high15 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !10941
  %low16 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10942
  call void @add128(i64 %46, i64 %47, i64 0, i64 %shr, i64* %high15, i64* %low16), !dbg !10943
  %low17 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10944
  %49 = load i64, i64* %low17, align 8, !dbg !10944
  %50 = load i64, i64* %roundBitsMask, align 8, !dbg !10946
  %and = and i64 %49, %50, !dbg !10947
  %cmp18 = icmp eq i64 %and, 0, !dbg !10948
  br i1 %cmp18, label %if.then19, label %if.end22, !dbg !10949

if.then19:                                        ; preds = %if.then14
  %51 = load i64, i64* %lastBitMask, align 8, !dbg !10950
  %neg = xor i64 %51, -1, !dbg !10951
  %low20 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10952
  %52 = load i64, i64* %low20, align 8, !dbg !10953
  %and21 = and i64 %52, %neg, !dbg !10953
  store i64 %and21, i64* %low20, align 8, !dbg !10953
  br label %if.end22, !dbg !10954

if.end22:                                         ; preds = %if.then19, %if.then14
  br label %if.end35, !dbg !10955

if.else:                                          ; preds = %if.then12
  %low23 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10956
  %53 = load i64, i64* %low23, align 8, !dbg !10956
  %cmp24 = icmp slt i64 %53, 0, !dbg !10959
  br i1 %cmp24, label %if.then25, label %if.end34, !dbg !10960

if.then25:                                        ; preds = %if.else
  %high26 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !10961
  %54 = load i64, i64* %high26, align 8, !dbg !10963
  %inc = add i64 %54, 1, !dbg !10963
  store i64 %inc, i64* %high26, align 8, !dbg !10963
  %low27 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10964
  %55 = load i64, i64* %low27, align 8, !dbg !10964
  %shl28 = shl i64 %55, 1, !dbg !10966
  %cmp29 = icmp eq i64 %shl28, 0, !dbg !10967
  br i1 %cmp29, label %if.then30, label %if.end33, !dbg !10968

if.then30:                                        ; preds = %if.then25
  %high31 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !10969
  %56 = load i64, i64* %high31, align 8, !dbg !10970
  %and32 = and i64 %56, -2, !dbg !10970
  store i64 %and32, i64* %high31, align 8, !dbg !10970
  br label %if.end33, !dbg !10971

if.end33:                                         ; preds = %if.then30, %if.then25
  br label %if.end34, !dbg !10972

if.end34:                                         ; preds = %if.end33, %if.else
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.end22
  br label %if.end49, !dbg !10973

if.else36:                                        ; preds = %if.end8
  %57 = load i32, i32* %roundingMode, align 4, !dbg !10974
  %cmp37 = icmp ne i32 %57, 1, !dbg !10976
  br i1 %cmp37, label %if.then38, label %if.end48, !dbg !10977

if.then38:                                        ; preds = %if.else36
  %58 = bitcast %struct.float128* %z to { i64, i64 }*, !dbg !10978
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 0, !dbg !10978
  %60 = load i64, i64* %59, align 8, !dbg !10978
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 1, !dbg !10978
  %62 = load i64, i64* %61, align 8, !dbg !10978
  %call39 = call i32 @extractFloat128Sign(i64 %60, i64 %62), !dbg !10978
  %63 = load i32, i32* %roundingMode, align 4, !dbg !10981
  %cmp40 = icmp eq i32 %63, 2, !dbg !10982
  %conv = zext i1 %cmp40 to i32, !dbg !10982
  %xor = xor i32 %call39, %conv, !dbg !10983
  %tobool41 = icmp ne i32 %xor, 0, !dbg !10983
  br i1 %tobool41, label %if.then42, label %if.end47, !dbg !10984

if.then42:                                        ; preds = %if.then38
  %high43 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !10985
  %64 = load i64, i64* %high43, align 8, !dbg !10985
  %low44 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10987
  %65 = load i64, i64* %low44, align 8, !dbg !10987
  %66 = load i64, i64* %roundBitsMask, align 8, !dbg !10988
  %high45 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !10989
  %low46 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10990
  call void @add128(i64 %64, i64 %65, i64 0, i64 %66, i64* %high45, i64* %low46), !dbg !10991
  br label %if.end47, !dbg !10992

if.end47:                                         ; preds = %if.then42, %if.then38
  br label %if.end48, !dbg !10993

if.end48:                                         ; preds = %if.end47, %if.else36
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end35
  %67 = load i64, i64* %roundBitsMask, align 8, !dbg !10994
  %neg50 = xor i64 %67, -1, !dbg !10995
  %low51 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !10996
  %68 = load i64, i64* %low51, align 8, !dbg !10997
  %and52 = and i64 %68, %neg50, !dbg !10997
  store i64 %and52, i64* %low51, align 8, !dbg !10997
  br label %if.end137, !dbg !10998

if.else53:                                        ; preds = %entry
  %69 = load i32, i32* %aExp, align 4, !dbg !10999
  %cmp54 = icmp slt i32 %69, 16383, !dbg !11002
  br i1 %cmp54, label %if.then56, label %if.end89, !dbg !11003

if.then56:                                        ; preds = %if.else53
  %high57 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !11004
  %70 = load i64, i64* %high57, align 8, !dbg !11004
  %shl58 = shl i64 %70, 1, !dbg !11007
  %low59 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !11008
  %71 = load i64, i64* %low59, align 8, !dbg !11008
  %or60 = or i64 %shl58, %71, !dbg !11009
  %cmp61 = icmp eq i64 %or60, 0, !dbg !11010
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !11011

if.then63:                                        ; preds = %if.then56
  %72 = bitcast %struct.float128* %retval to i8*, !dbg !11012
  %73 = bitcast %struct.float128* %a to i8*, !dbg !11012
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 16, i32 8, i1 false), !dbg !11012
  br label %return, !dbg !11013

if.end64:                                         ; preds = %if.then56
  %74 = load i32, i32* @float_exception_flags, align 4, !dbg !11014
  %or65 = or i32 %74, 1, !dbg !11014
  store i32 %or65, i32* @float_exception_flags, align 4, !dbg !11014
  %75 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11015
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 0, !dbg !11015
  %77 = load i64, i64* %76, align 8, !dbg !11015
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 1, !dbg !11015
  %79 = load i64, i64* %78, align 8, !dbg !11015
  %call66 = call i32 @extractFloat128Sign(i64 %77, i64 %79), !dbg !11015
  store i32 %call66, i32* %aSign, align 4, !dbg !11016
  %80 = load i32, i32* @float_rounding_mode, align 4, !dbg !11017
  switch i32 %80, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb77
    i32 2, label %sw.bb81
  ], !dbg !11018

sw.bb:                                            ; preds = %if.end64
  %81 = load i32, i32* %aExp, align 4, !dbg !11019
  %cmp67 = icmp eq i32 %81, 16382, !dbg !11022
  br i1 %cmp67, label %land.lhs.true69, label %if.end76, !dbg !11023

land.lhs.true69:                                  ; preds = %sw.bb
  %82 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11024
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %82, i32 0, i32 0, !dbg !11024
  %84 = load i64, i64* %83, align 8, !dbg !11024
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %82, i32 0, i32 1, !dbg !11024
  %86 = load i64, i64* %85, align 8, !dbg !11024
  %call70 = call i64 @extractFloat128Frac0(i64 %84, i64 %86), !dbg !11024
  %87 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11025
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %87, i32 0, i32 0, !dbg !11025
  %89 = load i64, i64* %88, align 8, !dbg !11025
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %87, i32 0, i32 1, !dbg !11025
  %91 = load i64, i64* %90, align 8, !dbg !11025
  %call71 = call i64 @extractFloat128Frac1(i64 %89, i64 %91), !dbg !11025
  %or72 = or i64 %call70, %call71, !dbg !11026
  %tobool73 = icmp ne i64 %or72, 0, !dbg !11026
  br i1 %tobool73, label %if.then74, label %if.end76, !dbg !11027

if.then74:                                        ; preds = %land.lhs.true69
  %92 = load i32, i32* %aSign, align 4, !dbg !11028
  %call75 = call { i64, i64 } @packFloat128(i32 %92, i32 16383, i64 0, i64 0), !dbg !11030
  %93 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11030
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %93, i32 0, i32 0, !dbg !11030
  %95 = extractvalue { i64, i64 } %call75, 0, !dbg !11030
  store i64 %95, i64* %94, align 8, !dbg !11030
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %93, i32 0, i32 1, !dbg !11030
  %97 = extractvalue { i64, i64 } %call75, 1, !dbg !11030
  store i64 %97, i64* %96, align 8, !dbg !11030
  br label %return, !dbg !11031

if.end76:                                         ; preds = %land.lhs.true69, %sw.bb
  br label %sw.epilog, !dbg !11032

sw.bb77:                                          ; preds = %if.end64
  %98 = load i32, i32* %aSign, align 4, !dbg !11033
  %tobool78 = icmp ne i32 %98, 0, !dbg !11033
  br i1 %tobool78, label %cond.true, label %cond.false, !dbg !11033

cond.true:                                        ; preds = %sw.bb77
  %call79 = call { i64, i64 } @packFloat128(i32 1, i32 16383, i64 0, i64 0), !dbg !11034
  %99 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11034
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %99, i32 0, i32 0, !dbg !11034
  %101 = extractvalue { i64, i64 } %call79, 0, !dbg !11034
  store i64 %101, i64* %100, align 8, !dbg !11034
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %99, i32 0, i32 1, !dbg !11034
  %103 = extractvalue { i64, i64 } %call79, 1, !dbg !11034
  store i64 %103, i64* %102, align 8, !dbg !11034
  br label %cond.end, !dbg !11033

cond.false:                                       ; preds = %sw.bb77
  %call80 = call { i64, i64 } @packFloat128(i32 0, i32 0, i64 0, i64 0), !dbg !11035
  %104 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11035
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %104, i32 0, i32 0, !dbg !11035
  %106 = extractvalue { i64, i64 } %call80, 0, !dbg !11035
  store i64 %106, i64* %105, align 8, !dbg !11035
  %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %104, i32 0, i32 1, !dbg !11035
  %108 = extractvalue { i64, i64 } %call80, 1, !dbg !11035
  store i64 %108, i64* %107, align 8, !dbg !11035
  br label %cond.end, !dbg !11033

cond.end:                                         ; preds = %cond.false, %cond.true
  br label %return, !dbg !11036

sw.bb81:                                          ; preds = %if.end64
  %109 = load i32, i32* %aSign, align 4, !dbg !11037
  %tobool82 = icmp ne i32 %109, 0, !dbg !11037
  br i1 %tobool82, label %cond.true83, label %cond.false85, !dbg !11037

cond.true83:                                      ; preds = %sw.bb81
  %call84 = call { i64, i64 } @packFloat128(i32 1, i32 0, i64 0, i64 0), !dbg !11038
  %110 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11038
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %110, i32 0, i32 0, !dbg !11038
  %112 = extractvalue { i64, i64 } %call84, 0, !dbg !11038
  store i64 %112, i64* %111, align 8, !dbg !11038
  %113 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %110, i32 0, i32 1, !dbg !11038
  %114 = extractvalue { i64, i64 } %call84, 1, !dbg !11038
  store i64 %114, i64* %113, align 8, !dbg !11038
  br label %cond.end87, !dbg !11037

cond.false85:                                     ; preds = %sw.bb81
  %call86 = call { i64, i64 } @packFloat128(i32 0, i32 16383, i64 0, i64 0), !dbg !11039
  %115 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11039
  %116 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %115, i32 0, i32 0, !dbg !11039
  %117 = extractvalue { i64, i64 } %call86, 0, !dbg !11039
  store i64 %117, i64* %116, align 8, !dbg !11039
  %118 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %115, i32 0, i32 1, !dbg !11039
  %119 = extractvalue { i64, i64 } %call86, 1, !dbg !11039
  store i64 %119, i64* %118, align 8, !dbg !11039
  br label %cond.end87, !dbg !11037

cond.end87:                                       ; preds = %cond.false85, %cond.true83
  br label %return, !dbg !11040

sw.epilog:                                        ; preds = %if.end64, %if.end76
  %120 = load i32, i32* %aSign, align 4, !dbg !11041
  %call88 = call { i64, i64 } @packFloat128(i32 %120, i32 0, i64 0, i64 0), !dbg !11042
  %121 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11042
  %122 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %121, i32 0, i32 0, !dbg !11042
  %123 = extractvalue { i64, i64 } %call88, 0, !dbg !11042
  store i64 %123, i64* %122, align 8, !dbg !11042
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %121, i32 0, i32 1, !dbg !11042
  %125 = extractvalue { i64, i64 } %call88, 1, !dbg !11042
  store i64 %125, i64* %124, align 8, !dbg !11042
  br label %return, !dbg !11043

if.end89:                                         ; preds = %if.else53
  store i64 1, i64* %lastBitMask, align 8, !dbg !11044
  %126 = load i32, i32* %aExp, align 4, !dbg !11045
  %sub90 = sub nsw i32 16431, %126, !dbg !11046
  %127 = load i64, i64* %lastBitMask, align 8, !dbg !11047
  %sh_prom91 = zext i32 %sub90 to i64, !dbg !11047
  %shl92 = shl i64 %127, %sh_prom91, !dbg !11047
  store i64 %shl92, i64* %lastBitMask, align 8, !dbg !11047
  %128 = load i64, i64* %lastBitMask, align 8, !dbg !11048
  %sub93 = sub i64 %128, 1, !dbg !11049
  store i64 %sub93, i64* %roundBitsMask, align 8, !dbg !11050
  %low94 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !11051
  store i64 0, i64* %low94, align 8, !dbg !11052
  %high95 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !11053
  %129 = load i64, i64* %high95, align 8, !dbg !11053
  %high96 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11054
  store i64 %129, i64* %high96, align 8, !dbg !11055
  %130 = load i32, i32* @float_rounding_mode, align 4, !dbg !11056
  store i32 %130, i32* %roundingMode, align 4, !dbg !11057
  %131 = load i32, i32* %roundingMode, align 4, !dbg !11058
  %cmp97 = icmp eq i32 %131, 0, !dbg !11060
  br i1 %cmp97, label %if.then99, label %if.else113, !dbg !11061

if.then99:                                        ; preds = %if.end89
  %132 = load i64, i64* %lastBitMask, align 8, !dbg !11062
  %shr100 = lshr i64 %132, 1, !dbg !11064
  %high101 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11065
  %133 = load i64, i64* %high101, align 8, !dbg !11066
  %add = add i64 %133, %shr100, !dbg !11066
  store i64 %add, i64* %high101, align 8, !dbg !11066
  %high102 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11067
  %134 = load i64, i64* %high102, align 8, !dbg !11067
  %135 = load i64, i64* %roundBitsMask, align 8, !dbg !11069
  %and103 = and i64 %134, %135, !dbg !11070
  %low104 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !11071
  %136 = load i64, i64* %low104, align 8, !dbg !11071
  %or105 = or i64 %and103, %136, !dbg !11072
  %cmp106 = icmp eq i64 %or105, 0, !dbg !11073
  br i1 %cmp106, label %if.then108, label %if.end112, !dbg !11074

if.then108:                                       ; preds = %if.then99
  %137 = load i64, i64* %lastBitMask, align 8, !dbg !11075
  %neg109 = xor i64 %137, -1, !dbg !11077
  %high110 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11078
  %138 = load i64, i64* %high110, align 8, !dbg !11079
  %and111 = and i64 %138, %neg109, !dbg !11079
  store i64 %and111, i64* %high110, align 8, !dbg !11079
  br label %if.end112, !dbg !11080

if.end112:                                        ; preds = %if.then108, %if.then99
  br label %if.end133, !dbg !11081

if.else113:                                       ; preds = %if.end89
  %139 = load i32, i32* %roundingMode, align 4, !dbg !11082
  %cmp114 = icmp ne i32 %139, 1, !dbg !11084
  br i1 %cmp114, label %if.then116, label %if.end132, !dbg !11085

if.then116:                                       ; preds = %if.else113
  %140 = bitcast %struct.float128* %z to { i64, i64 }*, !dbg !11086
  %141 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %140, i32 0, i32 0, !dbg !11086
  %142 = load i64, i64* %141, align 8, !dbg !11086
  %143 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %140, i32 0, i32 1, !dbg !11086
  %144 = load i64, i64* %143, align 8, !dbg !11086
  %call117 = call i32 @extractFloat128Sign(i64 %142, i64 %144), !dbg !11086
  %145 = load i32, i32* %roundingMode, align 4, !dbg !11089
  %cmp118 = icmp eq i32 %145, 2, !dbg !11090
  %conv119 = zext i1 %cmp118 to i32, !dbg !11090
  %xor120 = xor i32 %call117, %conv119, !dbg !11091
  %tobool121 = icmp ne i32 %xor120, 0, !dbg !11091
  br i1 %tobool121, label %if.then122, label %if.end131, !dbg !11092

if.then122:                                       ; preds = %if.then116
  %low123 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !11093
  %146 = load i64, i64* %low123, align 8, !dbg !11093
  %cmp124 = icmp ne i64 %146, 0, !dbg !11095
  %conv125 = zext i1 %cmp124 to i32, !dbg !11095
  %conv126 = sext i32 %conv125 to i64, !dbg !11096
  %high127 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11097
  %147 = load i64, i64* %high127, align 8, !dbg !11098
  %or128 = or i64 %147, %conv126, !dbg !11098
  store i64 %or128, i64* %high127, align 8, !dbg !11098
  %148 = load i64, i64* %roundBitsMask, align 8, !dbg !11099
  %high129 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11100
  %149 = load i64, i64* %high129, align 8, !dbg !11101
  %add130 = add i64 %149, %148, !dbg !11101
  store i64 %add130, i64* %high129, align 8, !dbg !11101
  br label %if.end131, !dbg !11102

if.end131:                                        ; preds = %if.then122, %if.then116
  br label %if.end132, !dbg !11103

if.end132:                                        ; preds = %if.end131, %if.else113
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.end112
  %150 = load i64, i64* %roundBitsMask, align 8, !dbg !11104
  %neg134 = xor i64 %150, -1, !dbg !11105
  %high135 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11106
  %151 = load i64, i64* %high135, align 8, !dbg !11107
  %and136 = and i64 %151, %neg134, !dbg !11107
  store i64 %and136, i64* %high135, align 8, !dbg !11107
  br label %if.end137

if.end137:                                        ; preds = %if.end133, %if.end49
  %low138 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !11108
  %152 = load i64, i64* %low138, align 8, !dbg !11108
  %low139 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !11110
  %153 = load i64, i64* %low139, align 8, !dbg !11110
  %cmp140 = icmp ne i64 %152, %153, !dbg !11111
  br i1 %cmp140, label %if.then146, label %lor.lhs.false, !dbg !11112

lor.lhs.false:                                    ; preds = %if.end137
  %high142 = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11113
  %154 = load i64, i64* %high142, align 8, !dbg !11113
  %high143 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !11114
  %155 = load i64, i64* %high143, align 8, !dbg !11114
  %cmp144 = icmp ne i64 %154, %155, !dbg !11115
  br i1 %cmp144, label %if.then146, label %if.end148, !dbg !11116

if.then146:                                       ; preds = %lor.lhs.false, %if.end137
  %156 = load i32, i32* @float_exception_flags, align 4, !dbg !11117
  %or147 = or i32 %156, 1, !dbg !11117
  store i32 %or147, i32* @float_exception_flags, align 4, !dbg !11117
  br label %if.end148, !dbg !11119

if.end148:                                        ; preds = %if.then146, %lor.lhs.false
  %157 = bitcast %struct.float128* %retval to i8*, !dbg !11120
  %158 = bitcast %struct.float128* %z to i8*, !dbg !11120
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %157, i8* %158, i64 16, i32 8, i1 false), !dbg !11120
  br label %return, !dbg !11121

return:                                           ; preds = %if.end148, %sw.epilog, %cond.end87, %cond.end, %if.then74, %if.then63, %if.end, %if.then6
  %159 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11122
  %160 = load { i64, i64 }, { i64, i64 }* %159, align 8, !dbg !11122
  ret { i64, i64 } %160, !dbg !11122
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @propagateFloat128NaN(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !11123 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aIsNaN = alloca i32, align 4
  %aIsSignalingNaN = alloca i32, align 4
  %bIsNaN = alloca i32, align 4
  %bIsSignalingNaN = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !11126, metadata !DIExpression()), !dbg !11127
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !11128, metadata !DIExpression()), !dbg !11129
  call void @llvm.dbg.declare(metadata i32* %aIsNaN, metadata !11130, metadata !DIExpression()), !dbg !11131
  call void @llvm.dbg.declare(metadata i32* %aIsSignalingNaN, metadata !11132, metadata !DIExpression()), !dbg !11133
  call void @llvm.dbg.declare(metadata i32* %bIsNaN, metadata !11134, metadata !DIExpression()), !dbg !11135
  call void @llvm.dbg.declare(metadata i32* %bIsSignalingNaN, metadata !11136, metadata !DIExpression()), !dbg !11137
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11138
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !11138
  %8 = load i64, i64* %7, align 8, !dbg !11138
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !11138
  %10 = load i64, i64* %9, align 8, !dbg !11138
  %call = call zeroext i1 @float128_is_nan(i64 %8, i64 %10), !dbg !11138
  %conv = zext i1 %call to i32, !dbg !11138
  store i32 %conv, i32* %aIsNaN, align 4, !dbg !11139
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11140
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !11140
  %13 = load i64, i64* %12, align 8, !dbg !11140
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !11140
  %15 = load i64, i64* %14, align 8, !dbg !11140
  %call1 = call zeroext i1 @float128_is_signaling_nan(i64 %13, i64 %15), !dbg !11140
  %conv2 = zext i1 %call1 to i32, !dbg !11140
  store i32 %conv2, i32* %aIsSignalingNaN, align 4, !dbg !11141
  %16 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11142
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !11142
  %18 = load i64, i64* %17, align 8, !dbg !11142
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !11142
  %20 = load i64, i64* %19, align 8, !dbg !11142
  %call3 = call zeroext i1 @float128_is_nan(i64 %18, i64 %20), !dbg !11142
  %conv4 = zext i1 %call3 to i32, !dbg !11142
  store i32 %conv4, i32* %bIsNaN, align 4, !dbg !11143
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11144
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !11144
  %23 = load i64, i64* %22, align 8, !dbg !11144
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !11144
  %25 = load i64, i64* %24, align 8, !dbg !11144
  %call5 = call zeroext i1 @float128_is_signaling_nan(i64 %23, i64 %25), !dbg !11144
  %conv6 = zext i1 %call5 to i32, !dbg !11144
  store i32 %conv6, i32* %bIsSignalingNaN, align 4, !dbg !11145
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !11146
  %26 = load i64, i64* %high, align 8, !dbg !11147
  %or = or i64 %26, 140737488355328, !dbg !11147
  store i64 %or, i64* %high, align 8, !dbg !11147
  %high7 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !11148
  %27 = load i64, i64* %high7, align 8, !dbg !11149
  %or8 = or i64 %27, 140737488355328, !dbg !11149
  store i64 %or8, i64* %high7, align 8, !dbg !11149
  %28 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !11150
  %29 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !11152
  %or9 = or i32 %28, %29, !dbg !11153
  %tobool = icmp ne i32 %or9, 0, !dbg !11153
  br i1 %tobool, label %if.then, label %if.end, !dbg !11154

if.then:                                          ; preds = %entry
  call void @float_raise(i32 16), !dbg !11155
  br label %if.end, !dbg !11155

if.end:                                           ; preds = %if.then, %entry
  %30 = load i32, i32* %bIsSignalingNaN, align 4, !dbg !11156
  %tobool10 = icmp ne i32 %30, 0, !dbg !11156
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !11156

cond.true:                                        ; preds = %if.end
  %31 = bitcast %struct.float128* %retval to i8*, !dbg !11157
  %32 = bitcast %struct.float128* %b to i8*, !dbg !11157
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false), !dbg !11157
  br label %cond.end18, !dbg !11156

cond.false:                                       ; preds = %if.end
  %33 = load i32, i32* %aIsSignalingNaN, align 4, !dbg !11158
  %tobool11 = icmp ne i32 %33, 0, !dbg !11158
  br i1 %tobool11, label %cond.true12, label %cond.false13, !dbg !11158

cond.true12:                                      ; preds = %cond.false
  %34 = bitcast %struct.float128* %retval to i8*, !dbg !11159
  %35 = bitcast %struct.float128* %a to i8*, !dbg !11159
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 16, i32 8, i1 false), !dbg !11159
  br label %cond.end17, !dbg !11158

cond.false13:                                     ; preds = %cond.false
  %36 = load i32, i32* %bIsNaN, align 4, !dbg !11160
  %tobool14 = icmp ne i32 %36, 0, !dbg !11160
  br i1 %tobool14, label %cond.true15, label %cond.false16, !dbg !11160

cond.true15:                                      ; preds = %cond.false13
  %37 = bitcast %struct.float128* %retval to i8*, !dbg !11161
  %38 = bitcast %struct.float128* %b to i8*, !dbg !11161
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false), !dbg !11161
  br label %cond.end, !dbg !11160

cond.false16:                                     ; preds = %cond.false13
  %39 = bitcast %struct.float128* %retval to i8*, !dbg !11162
  %40 = bitcast %struct.float128* %a to i8*, !dbg !11162
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false), !dbg !11162
  br label %cond.end, !dbg !11160

cond.end:                                         ; preds = %cond.false16, %cond.true15
  br label %cond.end17, !dbg !11158

cond.end17:                                       ; preds = %cond.end, %cond.true12
  br label %cond.end18, !dbg !11156

cond.end18:                                       ; preds = %cond.end17, %cond.true
  %41 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11163
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8, !dbg !11163
  ret { i64, i64 } %42, !dbg !11163
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_add(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !11164 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !11165, metadata !DIExpression()), !dbg !11166
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !11167, metadata !DIExpression()), !dbg !11168
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !11169, metadata !DIExpression()), !dbg !11170
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !11171, metadata !DIExpression()), !dbg !11172
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11173
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !11173
  %8 = load i64, i64* %7, align 8, !dbg !11173
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !11173
  %10 = load i64, i64* %9, align 8, !dbg !11173
  %call = call i32 @extractFloat128Sign(i64 %8, i64 %10), !dbg !11173
  store i32 %call, i32* %aSign, align 4, !dbg !11174
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11175
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !11175
  %13 = load i64, i64* %12, align 8, !dbg !11175
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !11175
  %15 = load i64, i64* %14, align 8, !dbg !11175
  %call1 = call i32 @extractFloat128Sign(i64 %13, i64 %15), !dbg !11175
  store i32 %call1, i32* %bSign, align 4, !dbg !11176
  %16 = load i32, i32* %aSign, align 4, !dbg !11177
  %17 = load i32, i32* %bSign, align 4, !dbg !11179
  %cmp = icmp eq i32 %16, %17, !dbg !11180
  br i1 %cmp, label %if.then, label %if.else, !dbg !11181

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %aSign, align 4, !dbg !11182
  %19 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11184
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !11184
  %21 = load i64, i64* %20, align 8, !dbg !11184
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1, !dbg !11184
  %23 = load i64, i64* %22, align 8, !dbg !11184
  %24 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11184
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !11184
  %26 = load i64, i64* %25, align 8, !dbg !11184
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !11184
  %28 = load i64, i64* %27, align 8, !dbg !11184
  %call2 = call { i64, i64 } @addFloat128Sigs(i64 %21, i64 %23, i64 %26, i64 %28, i32 %18), !dbg !11184
  %29 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11184
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 0, !dbg !11184
  %31 = extractvalue { i64, i64 } %call2, 0, !dbg !11184
  store i64 %31, i64* %30, align 8, !dbg !11184
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 1, !dbg !11184
  %33 = extractvalue { i64, i64 } %call2, 1, !dbg !11184
  store i64 %33, i64* %32, align 8, !dbg !11184
  br label %return, !dbg !11185

if.else:                                          ; preds = %entry
  %34 = load i32, i32* %aSign, align 4, !dbg !11186
  %35 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11188
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !11188
  %37 = load i64, i64* %36, align 8, !dbg !11188
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !11188
  %39 = load i64, i64* %38, align 8, !dbg !11188
  %40 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11188
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 0, !dbg !11188
  %42 = load i64, i64* %41, align 8, !dbg !11188
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 1, !dbg !11188
  %44 = load i64, i64* %43, align 8, !dbg !11188
  %call3 = call { i64, i64 } @subFloat128Sigs(i64 %37, i64 %39, i64 %42, i64 %44, i32 %34), !dbg !11188
  %45 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11188
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 0, !dbg !11188
  %47 = extractvalue { i64, i64 } %call3, 0, !dbg !11188
  store i64 %47, i64* %46, align 8, !dbg !11188
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 1, !dbg !11188
  %49 = extractvalue { i64, i64 } %call3, 1, !dbg !11188
  store i64 %49, i64* %48, align 8, !dbg !11188
  br label %return, !dbg !11189

return:                                           ; preds = %if.else, %if.then
  %50 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11190
  %51 = load { i64, i64 }, { i64, i64 }* %50, align 8, !dbg !11190
  ret { i64, i64 } %51, !dbg !11190
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @addFloat128Sigs(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1, i32 %zSign) #0 !dbg !11191 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %bSig0 = alloca i64, align 8
  %bSig1 = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %zSig2 = alloca i64, align 8
  %expDiff = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !11194, metadata !DIExpression()), !dbg !11195
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !11196, metadata !DIExpression()), !dbg !11197
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !11198, metadata !DIExpression()), !dbg !11199
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !11200, metadata !DIExpression()), !dbg !11201
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !11202, metadata !DIExpression()), !dbg !11203
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !11204, metadata !DIExpression()), !dbg !11205
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !11206, metadata !DIExpression()), !dbg !11207
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !11208, metadata !DIExpression()), !dbg !11209
  call void @llvm.dbg.declare(metadata i64* %bSig0, metadata !11210, metadata !DIExpression()), !dbg !11211
  call void @llvm.dbg.declare(metadata i64* %bSig1, metadata !11212, metadata !DIExpression()), !dbg !11213
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !11214, metadata !DIExpression()), !dbg !11215
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !11216, metadata !DIExpression()), !dbg !11217
  call void @llvm.dbg.declare(metadata i64* %zSig2, metadata !11218, metadata !DIExpression()), !dbg !11219
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !11220, metadata !DIExpression()), !dbg !11221
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11222
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !11222
  %8 = load i64, i64* %7, align 8, !dbg !11222
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !11222
  %10 = load i64, i64* %9, align 8, !dbg !11222
  %call = call i64 @extractFloat128Frac1(i64 %8, i64 %10), !dbg !11222
  store i64 %call, i64* %aSig1, align 8, !dbg !11223
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11224
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !11224
  %13 = load i64, i64* %12, align 8, !dbg !11224
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !11224
  %15 = load i64, i64* %14, align 8, !dbg !11224
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !11224
  store i64 %call1, i64* %aSig0, align 8, !dbg !11225
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11226
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !11226
  %18 = load i64, i64* %17, align 8, !dbg !11226
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !11226
  %20 = load i64, i64* %19, align 8, !dbg !11226
  %call2 = call i32 @extractFloat128Exp(i64 %18, i64 %20), !dbg !11226
  store i32 %call2, i32* %aExp, align 4, !dbg !11227
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11228
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !11228
  %23 = load i64, i64* %22, align 8, !dbg !11228
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !11228
  %25 = load i64, i64* %24, align 8, !dbg !11228
  %call3 = call i64 @extractFloat128Frac1(i64 %23, i64 %25), !dbg !11228
  store i64 %call3, i64* %bSig1, align 8, !dbg !11229
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11230
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !11230
  %28 = load i64, i64* %27, align 8, !dbg !11230
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !11230
  %30 = load i64, i64* %29, align 8, !dbg !11230
  %call4 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !11230
  store i64 %call4, i64* %bSig0, align 8, !dbg !11231
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11232
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !11232
  %33 = load i64, i64* %32, align 8, !dbg !11232
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !11232
  %35 = load i64, i64* %34, align 8, !dbg !11232
  %call5 = call i32 @extractFloat128Exp(i64 %33, i64 %35), !dbg !11232
  store i32 %call5, i32* %bExp, align 4, !dbg !11233
  %36 = load i32, i32* %aExp, align 4, !dbg !11234
  %37 = load i32, i32* %bExp, align 4, !dbg !11235
  %sub = sub nsw i32 %36, %37, !dbg !11236
  store i32 %sub, i32* %expDiff, align 4, !dbg !11237
  %38 = load i32, i32* %expDiff, align 4, !dbg !11238
  %cmp = icmp slt i32 0, %38, !dbg !11240
  br i1 %cmp, label %if.then, label %if.else15, !dbg !11241

if.then:                                          ; preds = %entry
  %39 = load i32, i32* %aExp, align 4, !dbg !11242
  %cmp6 = icmp eq i32 %39, 32767, !dbg !11245
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !11246

if.then7:                                         ; preds = %if.then
  %40 = load i64, i64* %aSig0, align 8, !dbg !11247
  %41 = load i64, i64* %aSig1, align 8, !dbg !11250
  %or = or i64 %40, %41, !dbg !11251
  %tobool = icmp ne i64 %or, 0, !dbg !11251
  br i1 %tobool, label %if.then8, label %if.end, !dbg !11252

if.then8:                                         ; preds = %if.then7
  %42 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11253
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 0, !dbg !11253
  %44 = load i64, i64* %43, align 8, !dbg !11253
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 1, !dbg !11253
  %46 = load i64, i64* %45, align 8, !dbg !11253
  %47 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11253
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 0, !dbg !11253
  %49 = load i64, i64* %48, align 8, !dbg !11253
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 1, !dbg !11253
  %51 = load i64, i64* %50, align 8, !dbg !11253
  %call9 = call { i64, i64 } @propagateFloat128NaN(i64 %44, i64 %46, i64 %49, i64 %51), !dbg !11253
  %52 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11253
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 0, !dbg !11253
  %54 = extractvalue { i64, i64 } %call9, 0, !dbg !11253
  store i64 %54, i64* %53, align 8, !dbg !11253
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 1, !dbg !11253
  %56 = extractvalue { i64, i64 } %call9, 1, !dbg !11253
  store i64 %56, i64* %55, align 8, !dbg !11253
  br label %return, !dbg !11254

if.end:                                           ; preds = %if.then7
  %57 = bitcast %struct.float128* %retval to i8*, !dbg !11255
  %58 = bitcast %struct.float128* %a to i8*, !dbg !11255
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 16, i32 8, i1 false), !dbg !11255
  br label %return, !dbg !11256

if.end10:                                         ; preds = %if.then
  %59 = load i32, i32* %bExp, align 4, !dbg !11257
  %cmp11 = icmp eq i32 %59, 0, !dbg !11259
  br i1 %cmp11, label %if.then12, label %if.else, !dbg !11260

if.then12:                                        ; preds = %if.end10
  %60 = load i32, i32* %expDiff, align 4, !dbg !11261
  %dec = add nsw i32 %60, -1, !dbg !11261
  store i32 %dec, i32* %expDiff, align 4, !dbg !11261
  br label %if.end14, !dbg !11263

if.else:                                          ; preds = %if.end10
  %61 = load i64, i64* %bSig0, align 8, !dbg !11264
  %or13 = or i64 %61, 281474976710656, !dbg !11264
  store i64 %or13, i64* %bSig0, align 8, !dbg !11264
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then12
  %62 = load i64, i64* %bSig0, align 8, !dbg !11266
  %63 = load i64, i64* %bSig1, align 8, !dbg !11267
  %64 = load i32, i32* %expDiff, align 4, !dbg !11268
  call void @shift128ExtraRightJamming(i64 %62, i64 %63, i64 0, i32 %64, i64* %bSig0, i64* %bSig1, i64* %zSig2), !dbg !11269
  %65 = load i32, i32* %aExp, align 4, !dbg !11270
  store i32 %65, i32* %zExp, align 4, !dbg !11271
  br label %if.end50, !dbg !11272

if.else15:                                        ; preds = %entry
  %66 = load i32, i32* %expDiff, align 4, !dbg !11273
  %cmp16 = icmp slt i32 %66, 0, !dbg !11275
  br i1 %cmp16, label %if.then17, label %if.else33, !dbg !11276

if.then17:                                        ; preds = %if.else15
  %67 = load i32, i32* %bExp, align 4, !dbg !11277
  %cmp18 = icmp eq i32 %67, 32767, !dbg !11280
  br i1 %cmp18, label %if.then19, label %if.end26, !dbg !11281

if.then19:                                        ; preds = %if.then17
  %68 = load i64, i64* %bSig0, align 8, !dbg !11282
  %69 = load i64, i64* %bSig1, align 8, !dbg !11285
  %or20 = or i64 %68, %69, !dbg !11286
  %tobool21 = icmp ne i64 %or20, 0, !dbg !11286
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !11287

if.then22:                                        ; preds = %if.then19
  %70 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11288
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %70, i32 0, i32 0, !dbg !11288
  %72 = load i64, i64* %71, align 8, !dbg !11288
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %70, i32 0, i32 1, !dbg !11288
  %74 = load i64, i64* %73, align 8, !dbg !11288
  %75 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11288
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 0, !dbg !11288
  %77 = load i64, i64* %76, align 8, !dbg !11288
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 1, !dbg !11288
  %79 = load i64, i64* %78, align 8, !dbg !11288
  %call23 = call { i64, i64 } @propagateFloat128NaN(i64 %72, i64 %74, i64 %77, i64 %79), !dbg !11288
  %80 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11288
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %80, i32 0, i32 0, !dbg !11288
  %82 = extractvalue { i64, i64 } %call23, 0, !dbg !11288
  store i64 %82, i64* %81, align 8, !dbg !11288
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %80, i32 0, i32 1, !dbg !11288
  %84 = extractvalue { i64, i64 } %call23, 1, !dbg !11288
  store i64 %84, i64* %83, align 8, !dbg !11288
  br label %return, !dbg !11289

if.end24:                                         ; preds = %if.then19
  %85 = load i32, i32* %zSign.addr, align 4, !dbg !11290
  %call25 = call { i64, i64 } @packFloat128(i32 %85, i32 32767, i64 0, i64 0), !dbg !11291
  %86 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11291
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %86, i32 0, i32 0, !dbg !11291
  %88 = extractvalue { i64, i64 } %call25, 0, !dbg !11291
  store i64 %88, i64* %87, align 8, !dbg !11291
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %86, i32 0, i32 1, !dbg !11291
  %90 = extractvalue { i64, i64 } %call25, 1, !dbg !11291
  store i64 %90, i64* %89, align 8, !dbg !11291
  br label %return, !dbg !11292

if.end26:                                         ; preds = %if.then17
  %91 = load i32, i32* %aExp, align 4, !dbg !11293
  %cmp27 = icmp eq i32 %91, 0, !dbg !11295
  br i1 %cmp27, label %if.then28, label %if.else29, !dbg !11296

if.then28:                                        ; preds = %if.end26
  %92 = load i32, i32* %expDiff, align 4, !dbg !11297
  %inc = add nsw i32 %92, 1, !dbg !11297
  store i32 %inc, i32* %expDiff, align 4, !dbg !11297
  br label %if.end31, !dbg !11299

if.else29:                                        ; preds = %if.end26
  %93 = load i64, i64* %aSig0, align 8, !dbg !11300
  %or30 = or i64 %93, 281474976710656, !dbg !11300
  store i64 %or30, i64* %aSig0, align 8, !dbg !11300
  br label %if.end31

if.end31:                                         ; preds = %if.else29, %if.then28
  %94 = load i64, i64* %aSig0, align 8, !dbg !11302
  %95 = load i64, i64* %aSig1, align 8, !dbg !11303
  %96 = load i32, i32* %expDiff, align 4, !dbg !11304
  %sub32 = sub nsw i32 0, %96, !dbg !11305
  call void @shift128ExtraRightJamming(i64 %94, i64 %95, i64 0, i32 %sub32, i64* %aSig0, i64* %aSig1, i64* %zSig2), !dbg !11306
  %97 = load i32, i32* %bExp, align 4, !dbg !11307
  store i32 %97, i32* %zExp, align 4, !dbg !11308
  br label %if.end49, !dbg !11309

if.else33:                                        ; preds = %if.else15
  %98 = load i32, i32* %aExp, align 4, !dbg !11310
  %cmp34 = icmp eq i32 %98, 32767, !dbg !11313
  br i1 %cmp34, label %if.then35, label %if.end43, !dbg !11314

if.then35:                                        ; preds = %if.else33
  %99 = load i64, i64* %aSig0, align 8, !dbg !11315
  %100 = load i64, i64* %aSig1, align 8, !dbg !11318
  %or36 = or i64 %99, %100, !dbg !11319
  %101 = load i64, i64* %bSig0, align 8, !dbg !11320
  %or37 = or i64 %or36, %101, !dbg !11321
  %102 = load i64, i64* %bSig1, align 8, !dbg !11322
  %or38 = or i64 %or37, %102, !dbg !11323
  %tobool39 = icmp ne i64 %or38, 0, !dbg !11323
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !11324

if.then40:                                        ; preds = %if.then35
  %103 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11325
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %103, i32 0, i32 0, !dbg !11325
  %105 = load i64, i64* %104, align 8, !dbg !11325
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %103, i32 0, i32 1, !dbg !11325
  %107 = load i64, i64* %106, align 8, !dbg !11325
  %108 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11325
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 0, !dbg !11325
  %110 = load i64, i64* %109, align 8, !dbg !11325
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 1, !dbg !11325
  %112 = load i64, i64* %111, align 8, !dbg !11325
  %call41 = call { i64, i64 } @propagateFloat128NaN(i64 %105, i64 %107, i64 %110, i64 %112), !dbg !11325
  %113 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11325
  %114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %113, i32 0, i32 0, !dbg !11325
  %115 = extractvalue { i64, i64 } %call41, 0, !dbg !11325
  store i64 %115, i64* %114, align 8, !dbg !11325
  %116 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %113, i32 0, i32 1, !dbg !11325
  %117 = extractvalue { i64, i64 } %call41, 1, !dbg !11325
  store i64 %117, i64* %116, align 8, !dbg !11325
  br label %return, !dbg !11327

if.end42:                                         ; preds = %if.then35
  %118 = bitcast %struct.float128* %retval to i8*, !dbg !11328
  %119 = bitcast %struct.float128* %a to i8*, !dbg !11328
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %118, i8* %119, i64 16, i32 8, i1 false), !dbg !11328
  br label %return, !dbg !11329

if.end43:                                         ; preds = %if.else33
  %120 = load i64, i64* %aSig0, align 8, !dbg !11330
  %121 = load i64, i64* %aSig1, align 8, !dbg !11331
  %122 = load i64, i64* %bSig0, align 8, !dbg !11332
  %123 = load i64, i64* %bSig1, align 8, !dbg !11333
  call void @add128(i64 %120, i64 %121, i64 %122, i64 %123, i64* %zSig0, i64* %zSig1), !dbg !11334
  %124 = load i32, i32* %aExp, align 4, !dbg !11335
  %cmp44 = icmp eq i32 %124, 0, !dbg !11337
  br i1 %cmp44, label %if.then45, label %if.end47, !dbg !11338

if.then45:                                        ; preds = %if.end43
  %125 = load i32, i32* %zSign.addr, align 4, !dbg !11339
  %126 = load i64, i64* %zSig0, align 8, !dbg !11340
  %127 = load i64, i64* %zSig1, align 8, !dbg !11341
  %call46 = call { i64, i64 } @packFloat128(i32 %125, i32 0, i64 %126, i64 %127), !dbg !11342
  %128 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11342
  %129 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %128, i32 0, i32 0, !dbg !11342
  %130 = extractvalue { i64, i64 } %call46, 0, !dbg !11342
  store i64 %130, i64* %129, align 8, !dbg !11342
  %131 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %128, i32 0, i32 1, !dbg !11342
  %132 = extractvalue { i64, i64 } %call46, 1, !dbg !11342
  store i64 %132, i64* %131, align 8, !dbg !11342
  br label %return, !dbg !11343

if.end47:                                         ; preds = %if.end43
  store i64 0, i64* %zSig2, align 8, !dbg !11344
  %133 = load i64, i64* %zSig0, align 8, !dbg !11345
  %or48 = or i64 %133, 562949953421312, !dbg !11345
  store i64 %or48, i64* %zSig0, align 8, !dbg !11345
  %134 = load i32, i32* %aExp, align 4, !dbg !11346
  store i32 %134, i32* %zExp, align 4, !dbg !11347
  br label %shiftRight1, !dbg !11348

if.end49:                                         ; preds = %if.end31
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end14
  %135 = load i64, i64* %aSig0, align 8, !dbg !11349
  %or51 = or i64 %135, 281474976710656, !dbg !11349
  store i64 %or51, i64* %aSig0, align 8, !dbg !11349
  %136 = load i64, i64* %aSig0, align 8, !dbg !11350
  %137 = load i64, i64* %aSig1, align 8, !dbg !11351
  %138 = load i64, i64* %bSig0, align 8, !dbg !11352
  %139 = load i64, i64* %bSig1, align 8, !dbg !11353
  call void @add128(i64 %136, i64 %137, i64 %138, i64 %139, i64* %zSig0, i64* %zSig1), !dbg !11354
  %140 = load i32, i32* %zExp, align 4, !dbg !11355
  %dec52 = add nsw i32 %140, -1, !dbg !11355
  store i32 %dec52, i32* %zExp, align 4, !dbg !11355
  %141 = load i64, i64* %zSig0, align 8, !dbg !11356
  %cmp53 = icmp ult i64 %141, 562949953421312, !dbg !11358
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !11359

if.then54:                                        ; preds = %if.end50
  br label %roundAndPack, !dbg !11360

if.end55:                                         ; preds = %if.end50
  %142 = load i32, i32* %zExp, align 4, !dbg !11361
  %inc56 = add nsw i32 %142, 1, !dbg !11361
  store i32 %inc56, i32* %zExp, align 4, !dbg !11361
  br label %shiftRight1, !dbg !11361

shiftRight1:                                      ; preds = %if.end55, %if.end47
  %143 = load i64, i64* %zSig0, align 8, !dbg !11362
  %144 = load i64, i64* %zSig1, align 8, !dbg !11363
  %145 = load i64, i64* %zSig2, align 8, !dbg !11364
  call void @shift128ExtraRightJamming(i64 %143, i64 %144, i64 %145, i32 1, i64* %zSig0, i64* %zSig1, i64* %zSig2), !dbg !11365
  br label %roundAndPack, !dbg !11365

roundAndPack:                                     ; preds = %shiftRight1, %if.then54
  %146 = load i32, i32* %zSign.addr, align 4, !dbg !11366
  %147 = load i32, i32* %zExp, align 4, !dbg !11367
  %148 = load i64, i64* %zSig0, align 8, !dbg !11368
  %149 = load i64, i64* %zSig1, align 8, !dbg !11369
  %150 = load i64, i64* %zSig2, align 8, !dbg !11370
  %call57 = call { i64, i64 } @roundAndPackFloat128(i32 %146, i32 %147, i64 %148, i64 %149, i64 %150), !dbg !11371
  %151 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11371
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %151, i32 0, i32 0, !dbg !11371
  %153 = extractvalue { i64, i64 } %call57, 0, !dbg !11371
  store i64 %153, i64* %152, align 8, !dbg !11371
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %151, i32 0, i32 1, !dbg !11371
  %155 = extractvalue { i64, i64 } %call57, 1, !dbg !11371
  store i64 %155, i64* %154, align 8, !dbg !11371
  br label %return, !dbg !11372

return:                                           ; preds = %roundAndPack, %if.then45, %if.end42, %if.then40, %if.end24, %if.then22, %if.end, %if.then8
  %156 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11373
  %157 = load { i64, i64 }, { i64, i64 }* %156, align 8, !dbg !11373
  ret { i64, i64 } %157, !dbg !11373
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @subFloat128Sigs(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1, i32 %zSign) #0 !dbg !11374 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %zSign.addr = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %bSig0 = alloca i64, align 8
  %bSig1 = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %expDiff = alloca i32, align 4
  %z = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !11375, metadata !DIExpression()), !dbg !11376
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !11377, metadata !DIExpression()), !dbg !11378
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !11379, metadata !DIExpression()), !dbg !11380
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !11381, metadata !DIExpression()), !dbg !11382
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !11383, metadata !DIExpression()), !dbg !11384
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !11385, metadata !DIExpression()), !dbg !11386
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !11387, metadata !DIExpression()), !dbg !11388
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !11389, metadata !DIExpression()), !dbg !11390
  call void @llvm.dbg.declare(metadata i64* %bSig0, metadata !11391, metadata !DIExpression()), !dbg !11392
  call void @llvm.dbg.declare(metadata i64* %bSig1, metadata !11393, metadata !DIExpression()), !dbg !11394
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !11395, metadata !DIExpression()), !dbg !11396
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !11397, metadata !DIExpression()), !dbg !11398
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !11399, metadata !DIExpression()), !dbg !11400
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !11401, metadata !DIExpression()), !dbg !11402
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11403
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !11403
  %8 = load i64, i64* %7, align 8, !dbg !11403
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !11403
  %10 = load i64, i64* %9, align 8, !dbg !11403
  %call = call i64 @extractFloat128Frac1(i64 %8, i64 %10), !dbg !11403
  store i64 %call, i64* %aSig1, align 8, !dbg !11404
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11405
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !11405
  %13 = load i64, i64* %12, align 8, !dbg !11405
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !11405
  %15 = load i64, i64* %14, align 8, !dbg !11405
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !11405
  store i64 %call1, i64* %aSig0, align 8, !dbg !11406
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11407
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !11407
  %18 = load i64, i64* %17, align 8, !dbg !11407
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !11407
  %20 = load i64, i64* %19, align 8, !dbg !11407
  %call2 = call i32 @extractFloat128Exp(i64 %18, i64 %20), !dbg !11407
  store i32 %call2, i32* %aExp, align 4, !dbg !11408
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11409
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !11409
  %23 = load i64, i64* %22, align 8, !dbg !11409
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !11409
  %25 = load i64, i64* %24, align 8, !dbg !11409
  %call3 = call i64 @extractFloat128Frac1(i64 %23, i64 %25), !dbg !11409
  store i64 %call3, i64* %bSig1, align 8, !dbg !11410
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11411
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !11411
  %28 = load i64, i64* %27, align 8, !dbg !11411
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !11411
  %30 = load i64, i64* %29, align 8, !dbg !11411
  %call4 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !11411
  store i64 %call4, i64* %bSig0, align 8, !dbg !11412
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11413
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !11413
  %33 = load i64, i64* %32, align 8, !dbg !11413
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !11413
  %35 = load i64, i64* %34, align 8, !dbg !11413
  %call5 = call i32 @extractFloat128Exp(i64 %33, i64 %35), !dbg !11413
  store i32 %call5, i32* %bExp, align 4, !dbg !11414
  %36 = load i32, i32* %aExp, align 4, !dbg !11415
  %37 = load i32, i32* %bExp, align 4, !dbg !11416
  %sub = sub nsw i32 %36, %37, !dbg !11417
  store i32 %sub, i32* %expDiff, align 4, !dbg !11418
  %38 = load i64, i64* %aSig0, align 8, !dbg !11419
  %39 = load i64, i64* %aSig1, align 8, !dbg !11420
  call void @shortShift128Left(i64 %38, i64 %39, i32 14, i64* %aSig0, i64* %aSig1), !dbg !11421
  %40 = load i64, i64* %bSig0, align 8, !dbg !11422
  %41 = load i64, i64* %bSig1, align 8, !dbg !11423
  call void @shortShift128Left(i64 %40, i64 %41, i32 14, i64* %bSig0, i64* %bSig1), !dbg !11424
  %42 = load i32, i32* %expDiff, align 4, !dbg !11425
  %cmp = icmp slt i32 0, %42, !dbg !11427
  br i1 %cmp, label %if.then, label %if.end, !dbg !11428

if.then:                                          ; preds = %entry
  br label %aExpBigger, !dbg !11429

if.end:                                           ; preds = %entry
  %43 = load i32, i32* %expDiff, align 4, !dbg !11430
  %cmp6 = icmp slt i32 %43, 0, !dbg !11432
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !11433

if.then7:                                         ; preds = %if.end
  br label %bExpBigger, !dbg !11434

if.end8:                                          ; preds = %if.end
  %44 = load i32, i32* %aExp, align 4, !dbg !11435
  %cmp9 = icmp eq i32 %44, 32767, !dbg !11437
  br i1 %cmp9, label %if.then10, label %if.end16, !dbg !11438

if.then10:                                        ; preds = %if.end8
  %45 = load i64, i64* %aSig0, align 8, !dbg !11439
  %46 = load i64, i64* %aSig1, align 8, !dbg !11442
  %or = or i64 %45, %46, !dbg !11443
  %47 = load i64, i64* %bSig0, align 8, !dbg !11444
  %or11 = or i64 %or, %47, !dbg !11445
  %48 = load i64, i64* %bSig1, align 8, !dbg !11446
  %or12 = or i64 %or11, %48, !dbg !11447
  %tobool = icmp ne i64 %or12, 0, !dbg !11447
  br i1 %tobool, label %if.then13, label %if.end15, !dbg !11448

if.then13:                                        ; preds = %if.then10
  %49 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11449
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 0, !dbg !11449
  %51 = load i64, i64* %50, align 8, !dbg !11449
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 1, !dbg !11449
  %53 = load i64, i64* %52, align 8, !dbg !11449
  %54 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11449
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 0, !dbg !11449
  %56 = load i64, i64* %55, align 8, !dbg !11449
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 1, !dbg !11449
  %58 = load i64, i64* %57, align 8, !dbg !11449
  %call14 = call { i64, i64 } @propagateFloat128NaN(i64 %51, i64 %53, i64 %56, i64 %58), !dbg !11449
  %59 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11449
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 0, !dbg !11449
  %61 = extractvalue { i64, i64 } %call14, 0, !dbg !11449
  store i64 %61, i64* %60, align 8, !dbg !11449
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 1, !dbg !11449
  %63 = extractvalue { i64, i64 } %call14, 1, !dbg !11449
  store i64 %63, i64* %62, align 8, !dbg !11449
  br label %return, !dbg !11451

if.end15:                                         ; preds = %if.then10
  call void @float_raise(i32 16), !dbg !11452
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !11453
  store i64 -1, i64* %low, align 8, !dbg !11454
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11455
  store i64 9223372036854775807, i64* %high, align 8, !dbg !11456
  %64 = bitcast %struct.float128* %retval to i8*, !dbg !11457
  %65 = bitcast %struct.float128* %z to i8*, !dbg !11457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %65, i64 16, i32 8, i1 false), !dbg !11457
  br label %return, !dbg !11458

if.end16:                                         ; preds = %if.end8
  %66 = load i32, i32* %aExp, align 4, !dbg !11459
  %cmp17 = icmp eq i32 %66, 0, !dbg !11461
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !11462

if.then18:                                        ; preds = %if.end16
  store i32 1, i32* %aExp, align 4, !dbg !11463
  store i32 1, i32* %bExp, align 4, !dbg !11465
  br label %if.end19, !dbg !11466

if.end19:                                         ; preds = %if.then18, %if.end16
  %67 = load i64, i64* %bSig0, align 8, !dbg !11467
  %68 = load i64, i64* %aSig0, align 8, !dbg !11469
  %cmp20 = icmp ult i64 %67, %68, !dbg !11470
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !11471

if.then21:                                        ; preds = %if.end19
  br label %aBigger, !dbg !11472

if.end22:                                         ; preds = %if.end19
  %69 = load i64, i64* %aSig0, align 8, !dbg !11473
  %70 = load i64, i64* %bSig0, align 8, !dbg !11475
  %cmp23 = icmp ult i64 %69, %70, !dbg !11476
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !11477

if.then24:                                        ; preds = %if.end22
  br label %bBigger, !dbg !11478

if.end25:                                         ; preds = %if.end22
  %71 = load i64, i64* %bSig1, align 8, !dbg !11479
  %72 = load i64, i64* %aSig1, align 8, !dbg !11481
  %cmp26 = icmp ult i64 %71, %72, !dbg !11482
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !11483

if.then27:                                        ; preds = %if.end25
  br label %aBigger, !dbg !11484

if.end28:                                         ; preds = %if.end25
  %73 = load i64, i64* %aSig1, align 8, !dbg !11485
  %74 = load i64, i64* %bSig1, align 8, !dbg !11487
  %cmp29 = icmp ult i64 %73, %74, !dbg !11488
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !11489

if.then30:                                        ; preds = %if.end28
  br label %bBigger, !dbg !11490

if.end31:                                         ; preds = %if.end28
  %75 = load i32, i32* @float_rounding_mode, align 4, !dbg !11491
  %cmp32 = icmp eq i32 %75, 3, !dbg !11492
  %conv = zext i1 %cmp32 to i32, !dbg !11492
  %call33 = call { i64, i64 } @packFloat128(i32 %conv, i32 0, i64 0, i64 0), !dbg !11493
  %76 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11493
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %76, i32 0, i32 0, !dbg !11493
  %78 = extractvalue { i64, i64 } %call33, 0, !dbg !11493
  store i64 %78, i64* %77, align 8, !dbg !11493
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %76, i32 0, i32 1, !dbg !11493
  %80 = extractvalue { i64, i64 } %call33, 1, !dbg !11493
  store i64 %80, i64* %79, align 8, !dbg !11493
  br label %return, !dbg !11494

bExpBigger:                                       ; preds = %if.then7
  %81 = load i32, i32* %bExp, align 4, !dbg !11495
  %cmp34 = icmp eq i32 %81, 32767, !dbg !11497
  br i1 %cmp34, label %if.then36, label %if.end43, !dbg !11498

if.then36:                                        ; preds = %bExpBigger
  %82 = load i64, i64* %bSig0, align 8, !dbg !11499
  %83 = load i64, i64* %bSig1, align 8, !dbg !11502
  %or37 = or i64 %82, %83, !dbg !11503
  %tobool38 = icmp ne i64 %or37, 0, !dbg !11503
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !11504

if.then39:                                        ; preds = %if.then36
  %84 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11505
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %84, i32 0, i32 0, !dbg !11505
  %86 = load i64, i64* %85, align 8, !dbg !11505
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %84, i32 0, i32 1, !dbg !11505
  %88 = load i64, i64* %87, align 8, !dbg !11505
  %89 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11505
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %89, i32 0, i32 0, !dbg !11505
  %91 = load i64, i64* %90, align 8, !dbg !11505
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %89, i32 0, i32 1, !dbg !11505
  %93 = load i64, i64* %92, align 8, !dbg !11505
  %call40 = call { i64, i64 } @propagateFloat128NaN(i64 %86, i64 %88, i64 %91, i64 %93), !dbg !11505
  %94 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11505
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %94, i32 0, i32 0, !dbg !11505
  %96 = extractvalue { i64, i64 } %call40, 0, !dbg !11505
  store i64 %96, i64* %95, align 8, !dbg !11505
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %94, i32 0, i32 1, !dbg !11505
  %98 = extractvalue { i64, i64 } %call40, 1, !dbg !11505
  store i64 %98, i64* %97, align 8, !dbg !11505
  br label %return, !dbg !11506

if.end41:                                         ; preds = %if.then36
  %99 = load i32, i32* %zSign.addr, align 4, !dbg !11507
  %xor = xor i32 %99, 1, !dbg !11508
  %call42 = call { i64, i64 } @packFloat128(i32 %xor, i32 32767, i64 0, i64 0), !dbg !11509
  %100 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11509
  %101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %100, i32 0, i32 0, !dbg !11509
  %102 = extractvalue { i64, i64 } %call42, 0, !dbg !11509
  store i64 %102, i64* %101, align 8, !dbg !11509
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %100, i32 0, i32 1, !dbg !11509
  %104 = extractvalue { i64, i64 } %call42, 1, !dbg !11509
  store i64 %104, i64* %103, align 8, !dbg !11509
  br label %return, !dbg !11510

if.end43:                                         ; preds = %bExpBigger
  %105 = load i32, i32* %aExp, align 4, !dbg !11511
  %cmp44 = icmp eq i32 %105, 0, !dbg !11513
  br i1 %cmp44, label %if.then46, label %if.else, !dbg !11514

if.then46:                                        ; preds = %if.end43
  %106 = load i32, i32* %expDiff, align 4, !dbg !11515
  %inc = add nsw i32 %106, 1, !dbg !11515
  store i32 %inc, i32* %expDiff, align 4, !dbg !11515
  br label %if.end48, !dbg !11517

if.else:                                          ; preds = %if.end43
  %107 = load i64, i64* %aSig0, align 8, !dbg !11518
  %or47 = or i64 %107, 4611686018427387904, !dbg !11518
  store i64 %or47, i64* %aSig0, align 8, !dbg !11518
  br label %if.end48

if.end48:                                         ; preds = %if.else, %if.then46
  %108 = load i64, i64* %aSig0, align 8, !dbg !11520
  %109 = load i64, i64* %aSig1, align 8, !dbg !11521
  %110 = load i32, i32* %expDiff, align 4, !dbg !11522
  %sub49 = sub nsw i32 0, %110, !dbg !11523
  call void @shift128RightJamming(i64 %108, i64 %109, i32 %sub49, i64* %aSig0, i64* %aSig1), !dbg !11524
  %111 = load i64, i64* %bSig0, align 8, !dbg !11525
  %or50 = or i64 %111, 4611686018427387904, !dbg !11525
  store i64 %or50, i64* %bSig0, align 8, !dbg !11525
  br label %bBigger, !dbg !11526

bBigger:                                          ; preds = %if.end48, %if.then30, %if.then24
  %112 = load i64, i64* %bSig0, align 8, !dbg !11527
  %113 = load i64, i64* %bSig1, align 8, !dbg !11528
  %114 = load i64, i64* %aSig0, align 8, !dbg !11529
  %115 = load i64, i64* %aSig1, align 8, !dbg !11530
  call void @sub128(i64 %112, i64 %113, i64 %114, i64 %115, i64* %zSig0, i64* %zSig1), !dbg !11531
  %116 = load i32, i32* %bExp, align 4, !dbg !11532
  store i32 %116, i32* %zExp, align 4, !dbg !11533
  %117 = load i32, i32* %zSign.addr, align 4, !dbg !11534
  %xor51 = xor i32 %117, 1, !dbg !11534
  store i32 %xor51, i32* %zSign.addr, align 4, !dbg !11534
  br label %normalizeRoundAndPack, !dbg !11535

aExpBigger:                                       ; preds = %if.then
  %118 = load i32, i32* %aExp, align 4, !dbg !11536
  %cmp52 = icmp eq i32 %118, 32767, !dbg !11538
  br i1 %cmp52, label %if.then54, label %if.end60, !dbg !11539

if.then54:                                        ; preds = %aExpBigger
  %119 = load i64, i64* %aSig0, align 8, !dbg !11540
  %120 = load i64, i64* %aSig1, align 8, !dbg !11543
  %or55 = or i64 %119, %120, !dbg !11544
  %tobool56 = icmp ne i64 %or55, 0, !dbg !11544
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !11545

if.then57:                                        ; preds = %if.then54
  %121 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11546
  %122 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %121, i32 0, i32 0, !dbg !11546
  %123 = load i64, i64* %122, align 8, !dbg !11546
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %121, i32 0, i32 1, !dbg !11546
  %125 = load i64, i64* %124, align 8, !dbg !11546
  %126 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11546
  %127 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %126, i32 0, i32 0, !dbg !11546
  %128 = load i64, i64* %127, align 8, !dbg !11546
  %129 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %126, i32 0, i32 1, !dbg !11546
  %130 = load i64, i64* %129, align 8, !dbg !11546
  %call58 = call { i64, i64 } @propagateFloat128NaN(i64 %123, i64 %125, i64 %128, i64 %130), !dbg !11546
  %131 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11546
  %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %131, i32 0, i32 0, !dbg !11546
  %133 = extractvalue { i64, i64 } %call58, 0, !dbg !11546
  store i64 %133, i64* %132, align 8, !dbg !11546
  %134 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %131, i32 0, i32 1, !dbg !11546
  %135 = extractvalue { i64, i64 } %call58, 1, !dbg !11546
  store i64 %135, i64* %134, align 8, !dbg !11546
  br label %return, !dbg !11547

if.end59:                                         ; preds = %if.then54
  %136 = bitcast %struct.float128* %retval to i8*, !dbg !11548
  %137 = bitcast %struct.float128* %a to i8*, !dbg !11548
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %136, i8* %137, i64 16, i32 8, i1 false), !dbg !11548
  br label %return, !dbg !11549

if.end60:                                         ; preds = %aExpBigger
  %138 = load i32, i32* %bExp, align 4, !dbg !11550
  %cmp61 = icmp eq i32 %138, 0, !dbg !11552
  br i1 %cmp61, label %if.then63, label %if.else64, !dbg !11553

if.then63:                                        ; preds = %if.end60
  %139 = load i32, i32* %expDiff, align 4, !dbg !11554
  %dec = add nsw i32 %139, -1, !dbg !11554
  store i32 %dec, i32* %expDiff, align 4, !dbg !11554
  br label %if.end66, !dbg !11556

if.else64:                                        ; preds = %if.end60
  %140 = load i64, i64* %bSig0, align 8, !dbg !11557
  %or65 = or i64 %140, 4611686018427387904, !dbg !11557
  store i64 %or65, i64* %bSig0, align 8, !dbg !11557
  br label %if.end66

if.end66:                                         ; preds = %if.else64, %if.then63
  %141 = load i64, i64* %bSig0, align 8, !dbg !11559
  %142 = load i64, i64* %bSig1, align 8, !dbg !11560
  %143 = load i32, i32* %expDiff, align 4, !dbg !11561
  call void @shift128RightJamming(i64 %141, i64 %142, i32 %143, i64* %bSig0, i64* %bSig1), !dbg !11562
  %144 = load i64, i64* %aSig0, align 8, !dbg !11563
  %or67 = or i64 %144, 4611686018427387904, !dbg !11563
  store i64 %or67, i64* %aSig0, align 8, !dbg !11563
  br label %aBigger, !dbg !11564

aBigger:                                          ; preds = %if.end66, %if.then27, %if.then21
  %145 = load i64, i64* %aSig0, align 8, !dbg !11565
  %146 = load i64, i64* %aSig1, align 8, !dbg !11566
  %147 = load i64, i64* %bSig0, align 8, !dbg !11567
  %148 = load i64, i64* %bSig1, align 8, !dbg !11568
  call void @sub128(i64 %145, i64 %146, i64 %147, i64 %148, i64* %zSig0, i64* %zSig1), !dbg !11569
  %149 = load i32, i32* %aExp, align 4, !dbg !11570
  store i32 %149, i32* %zExp, align 4, !dbg !11571
  br label %normalizeRoundAndPack, !dbg !11572

normalizeRoundAndPack:                            ; preds = %aBigger, %bBigger
  %150 = load i32, i32* %zExp, align 4, !dbg !11573
  %dec68 = add nsw i32 %150, -1, !dbg !11573
  store i32 %dec68, i32* %zExp, align 4, !dbg !11573
  %151 = load i32, i32* %zSign.addr, align 4, !dbg !11574
  %152 = load i32, i32* %zExp, align 4, !dbg !11575
  %sub69 = sub nsw i32 %152, 14, !dbg !11576
  %153 = load i64, i64* %zSig0, align 8, !dbg !11577
  %154 = load i64, i64* %zSig1, align 8, !dbg !11578
  %call70 = call { i64, i64 } @normalizeRoundAndPackFloat128(i32 %151, i32 %sub69, i64 %153, i64 %154), !dbg !11579
  %155 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11579
  %156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %155, i32 0, i32 0, !dbg !11579
  %157 = extractvalue { i64, i64 } %call70, 0, !dbg !11579
  store i64 %157, i64* %156, align 8, !dbg !11579
  %158 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %155, i32 0, i32 1, !dbg !11579
  %159 = extractvalue { i64, i64 } %call70, 1, !dbg !11579
  store i64 %159, i64* %158, align 8, !dbg !11579
  br label %return, !dbg !11580

return:                                           ; preds = %normalizeRoundAndPack, %if.end59, %if.then57, %if.end41, %if.then39, %if.end31, %if.end15, %if.then13
  %160 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11581
  %161 = load { i64, i64 }, { i64, i64 }* %160, align 8, !dbg !11581
  ret { i64, i64 } %161, !dbg !11581
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_sub(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !11582 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !11583, metadata !DIExpression()), !dbg !11584
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !11585, metadata !DIExpression()), !dbg !11586
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !11587, metadata !DIExpression()), !dbg !11588
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !11589, metadata !DIExpression()), !dbg !11590
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11591
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !11591
  %8 = load i64, i64* %7, align 8, !dbg !11591
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !11591
  %10 = load i64, i64* %9, align 8, !dbg !11591
  %call = call i32 @extractFloat128Sign(i64 %8, i64 %10), !dbg !11591
  store i32 %call, i32* %aSign, align 4, !dbg !11592
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11593
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !11593
  %13 = load i64, i64* %12, align 8, !dbg !11593
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !11593
  %15 = load i64, i64* %14, align 8, !dbg !11593
  %call1 = call i32 @extractFloat128Sign(i64 %13, i64 %15), !dbg !11593
  store i32 %call1, i32* %bSign, align 4, !dbg !11594
  %16 = load i32, i32* %aSign, align 4, !dbg !11595
  %17 = load i32, i32* %bSign, align 4, !dbg !11597
  %cmp = icmp eq i32 %16, %17, !dbg !11598
  br i1 %cmp, label %if.then, label %if.else, !dbg !11599

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %aSign, align 4, !dbg !11600
  %19 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11602
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !11602
  %21 = load i64, i64* %20, align 8, !dbg !11602
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1, !dbg !11602
  %23 = load i64, i64* %22, align 8, !dbg !11602
  %24 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11602
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !11602
  %26 = load i64, i64* %25, align 8, !dbg !11602
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !11602
  %28 = load i64, i64* %27, align 8, !dbg !11602
  %call2 = call { i64, i64 } @subFloat128Sigs(i64 %21, i64 %23, i64 %26, i64 %28, i32 %18), !dbg !11602
  %29 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11602
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 0, !dbg !11602
  %31 = extractvalue { i64, i64 } %call2, 0, !dbg !11602
  store i64 %31, i64* %30, align 8, !dbg !11602
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 1, !dbg !11602
  %33 = extractvalue { i64, i64 } %call2, 1, !dbg !11602
  store i64 %33, i64* %32, align 8, !dbg !11602
  br label %return, !dbg !11603

if.else:                                          ; preds = %entry
  %34 = load i32, i32* %aSign, align 4, !dbg !11604
  %35 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11606
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !11606
  %37 = load i64, i64* %36, align 8, !dbg !11606
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !11606
  %39 = load i64, i64* %38, align 8, !dbg !11606
  %40 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11606
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 0, !dbg !11606
  %42 = load i64, i64* %41, align 8, !dbg !11606
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 1, !dbg !11606
  %44 = load i64, i64* %43, align 8, !dbg !11606
  %call3 = call { i64, i64 } @addFloat128Sigs(i64 %37, i64 %39, i64 %42, i64 %44, i32 %34), !dbg !11606
  %45 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11606
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 0, !dbg !11606
  %47 = extractvalue { i64, i64 } %call3, 0, !dbg !11606
  store i64 %47, i64* %46, align 8, !dbg !11606
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 1, !dbg !11606
  %49 = extractvalue { i64, i64 } %call3, 1, !dbg !11606
  store i64 %49, i64* %48, align 8, !dbg !11606
  br label %return, !dbg !11607

return:                                           ; preds = %if.else, %if.then
  %50 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11608
  %51 = load { i64, i64 }, { i64, i64 }* %50, align 8, !dbg !11608
  ret { i64, i64 } %51, !dbg !11608
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_mul(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !11609 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %bSig0 = alloca i64, align 8
  %bSig1 = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %zSig2 = alloca i64, align 8
  %zSig3 = alloca i64, align 8
  %z = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !11610, metadata !DIExpression()), !dbg !11611
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !11612, metadata !DIExpression()), !dbg !11613
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !11614, metadata !DIExpression()), !dbg !11615
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !11616, metadata !DIExpression()), !dbg !11617
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !11618, metadata !DIExpression()), !dbg !11619
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !11620, metadata !DIExpression()), !dbg !11621
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !11622, metadata !DIExpression()), !dbg !11623
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !11624, metadata !DIExpression()), !dbg !11625
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !11626, metadata !DIExpression()), !dbg !11627
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !11628, metadata !DIExpression()), !dbg !11629
  call void @llvm.dbg.declare(metadata i64* %bSig0, metadata !11630, metadata !DIExpression()), !dbg !11631
  call void @llvm.dbg.declare(metadata i64* %bSig1, metadata !11632, metadata !DIExpression()), !dbg !11633
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !11634, metadata !DIExpression()), !dbg !11635
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !11636, metadata !DIExpression()), !dbg !11637
  call void @llvm.dbg.declare(metadata i64* %zSig2, metadata !11638, metadata !DIExpression()), !dbg !11639
  call void @llvm.dbg.declare(metadata i64* %zSig3, metadata !11640, metadata !DIExpression()), !dbg !11641
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !11642, metadata !DIExpression()), !dbg !11643
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11644
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !11644
  %8 = load i64, i64* %7, align 8, !dbg !11644
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !11644
  %10 = load i64, i64* %9, align 8, !dbg !11644
  %call = call i64 @extractFloat128Frac1(i64 %8, i64 %10), !dbg !11644
  store i64 %call, i64* %aSig1, align 8, !dbg !11645
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11646
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !11646
  %13 = load i64, i64* %12, align 8, !dbg !11646
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !11646
  %15 = load i64, i64* %14, align 8, !dbg !11646
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !11646
  store i64 %call1, i64* %aSig0, align 8, !dbg !11647
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11648
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !11648
  %18 = load i64, i64* %17, align 8, !dbg !11648
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !11648
  %20 = load i64, i64* %19, align 8, !dbg !11648
  %call2 = call i32 @extractFloat128Exp(i64 %18, i64 %20), !dbg !11648
  store i32 %call2, i32* %aExp, align 4, !dbg !11649
  %21 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11650
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !11650
  %23 = load i64, i64* %22, align 8, !dbg !11650
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !11650
  %25 = load i64, i64* %24, align 8, !dbg !11650
  %call3 = call i32 @extractFloat128Sign(i64 %23, i64 %25), !dbg !11650
  store i32 %call3, i32* %aSign, align 4, !dbg !11651
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11652
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !11652
  %28 = load i64, i64* %27, align 8, !dbg !11652
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !11652
  %30 = load i64, i64* %29, align 8, !dbg !11652
  %call4 = call i64 @extractFloat128Frac1(i64 %28, i64 %30), !dbg !11652
  store i64 %call4, i64* %bSig1, align 8, !dbg !11653
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11654
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !11654
  %33 = load i64, i64* %32, align 8, !dbg !11654
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !11654
  %35 = load i64, i64* %34, align 8, !dbg !11654
  %call5 = call i64 @extractFloat128Frac0(i64 %33, i64 %35), !dbg !11654
  store i64 %call5, i64* %bSig0, align 8, !dbg !11655
  %36 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11656
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !11656
  %38 = load i64, i64* %37, align 8, !dbg !11656
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !11656
  %40 = load i64, i64* %39, align 8, !dbg !11656
  %call6 = call i32 @extractFloat128Exp(i64 %38, i64 %40), !dbg !11656
  store i32 %call6, i32* %bExp, align 4, !dbg !11657
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11658
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !11658
  %43 = load i64, i64* %42, align 8, !dbg !11658
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !11658
  %45 = load i64, i64* %44, align 8, !dbg !11658
  %call7 = call i32 @extractFloat128Sign(i64 %43, i64 %45), !dbg !11658
  store i32 %call7, i32* %bSign, align 4, !dbg !11659
  %46 = load i32, i32* %aSign, align 4, !dbg !11660
  %47 = load i32, i32* %bSign, align 4, !dbg !11661
  %xor = xor i32 %46, %47, !dbg !11662
  store i32 %xor, i32* %zSign, align 4, !dbg !11663
  %48 = load i32, i32* %aExp, align 4, !dbg !11664
  %cmp = icmp eq i32 %48, 32767, !dbg !11666
  br i1 %cmp, label %if.then, label %if.end20, !dbg !11667

if.then:                                          ; preds = %entry
  %49 = load i64, i64* %aSig0, align 8, !dbg !11668
  %50 = load i64, i64* %aSig1, align 8, !dbg !11671
  %or = or i64 %49, %50, !dbg !11672
  %tobool = icmp ne i64 %or, 0, !dbg !11672
  br i1 %tobool, label %if.then11, label %lor.lhs.false, !dbg !11673

lor.lhs.false:                                    ; preds = %if.then
  %51 = load i32, i32* %bExp, align 4, !dbg !11674
  %cmp8 = icmp eq i32 %51, 32767, !dbg !11675
  br i1 %cmp8, label %land.lhs.true, label %if.end, !dbg !11676

land.lhs.true:                                    ; preds = %lor.lhs.false
  %52 = load i64, i64* %bSig0, align 8, !dbg !11677
  %53 = load i64, i64* %bSig1, align 8, !dbg !11678
  %or9 = or i64 %52, %53, !dbg !11679
  %tobool10 = icmp ne i64 %or9, 0, !dbg !11679
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !11680

if.then11:                                        ; preds = %land.lhs.true, %if.then
  %54 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11681
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 0, !dbg !11681
  %56 = load i64, i64* %55, align 8, !dbg !11681
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 1, !dbg !11681
  %58 = load i64, i64* %57, align 8, !dbg !11681
  %59 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11681
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 0, !dbg !11681
  %61 = load i64, i64* %60, align 8, !dbg !11681
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 1, !dbg !11681
  %63 = load i64, i64* %62, align 8, !dbg !11681
  %call12 = call { i64, i64 } @propagateFloat128NaN(i64 %56, i64 %58, i64 %61, i64 %63), !dbg !11681
  %64 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11681
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %64, i32 0, i32 0, !dbg !11681
  %66 = extractvalue { i64, i64 } %call12, 0, !dbg !11681
  store i64 %66, i64* %65, align 8, !dbg !11681
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %64, i32 0, i32 1, !dbg !11681
  %68 = extractvalue { i64, i64 } %call12, 1, !dbg !11681
  store i64 %68, i64* %67, align 8, !dbg !11681
  br label %return, !dbg !11683

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %69 = load i32, i32* %bExp, align 4, !dbg !11684
  %conv = sext i32 %69 to i64, !dbg !11684
  %70 = load i64, i64* %bSig0, align 8, !dbg !11686
  %or13 = or i64 %conv, %70, !dbg !11687
  %71 = load i64, i64* %bSig1, align 8, !dbg !11688
  %or14 = or i64 %or13, %71, !dbg !11689
  %cmp15 = icmp eq i64 %or14, 0, !dbg !11690
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !11691

if.then17:                                        ; preds = %if.end
  br label %invalid, !dbg !11692

if.end18:                                         ; preds = %if.end
  %72 = load i32, i32* %zSign, align 4, !dbg !11693
  %call19 = call { i64, i64 } @packFloat128(i32 %72, i32 32767, i64 0, i64 0), !dbg !11694
  %73 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11694
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %73, i32 0, i32 0, !dbg !11694
  %75 = extractvalue { i64, i64 } %call19, 0, !dbg !11694
  store i64 %75, i64* %74, align 8, !dbg !11694
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %73, i32 0, i32 1, !dbg !11694
  %77 = extractvalue { i64, i64 } %call19, 1, !dbg !11694
  store i64 %77, i64* %76, align 8, !dbg !11694
  br label %return, !dbg !11695

if.end20:                                         ; preds = %entry
  %78 = load i32, i32* %bExp, align 4, !dbg !11696
  %cmp21 = icmp eq i32 %78, 32767, !dbg !11698
  br i1 %cmp21, label %if.then23, label %if.end37, !dbg !11699

if.then23:                                        ; preds = %if.end20
  %79 = load i64, i64* %bSig0, align 8, !dbg !11700
  %80 = load i64, i64* %bSig1, align 8, !dbg !11703
  %or24 = or i64 %79, %80, !dbg !11704
  %tobool25 = icmp ne i64 %or24, 0, !dbg !11704
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !11705

if.then26:                                        ; preds = %if.then23
  %81 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !11706
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %81, i32 0, i32 0, !dbg !11706
  %83 = load i64, i64* %82, align 8, !dbg !11706
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %81, i32 0, i32 1, !dbg !11706
  %85 = load i64, i64* %84, align 8, !dbg !11706
  %86 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !11706
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %86, i32 0, i32 0, !dbg !11706
  %88 = load i64, i64* %87, align 8, !dbg !11706
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %86, i32 0, i32 1, !dbg !11706
  %90 = load i64, i64* %89, align 8, !dbg !11706
  %call27 = call { i64, i64 } @propagateFloat128NaN(i64 %83, i64 %85, i64 %88, i64 %90), !dbg !11706
  %91 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11706
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %91, i32 0, i32 0, !dbg !11706
  %93 = extractvalue { i64, i64 } %call27, 0, !dbg !11706
  store i64 %93, i64* %92, align 8, !dbg !11706
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %91, i32 0, i32 1, !dbg !11706
  %95 = extractvalue { i64, i64 } %call27, 1, !dbg !11706
  store i64 %95, i64* %94, align 8, !dbg !11706
  br label %return, !dbg !11707

if.end28:                                         ; preds = %if.then23
  %96 = load i32, i32* %aExp, align 4, !dbg !11708
  %conv29 = sext i32 %96 to i64, !dbg !11708
  %97 = load i64, i64* %aSig0, align 8, !dbg !11710
  %or30 = or i64 %conv29, %97, !dbg !11711
  %98 = load i64, i64* %aSig1, align 8, !dbg !11712
  %or31 = or i64 %or30, %98, !dbg !11713
  %cmp32 = icmp eq i64 %or31, 0, !dbg !11714
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !11715

if.then34:                                        ; preds = %if.end28
  br label %invalid, !dbg !11716

invalid:                                          ; preds = %if.then34, %if.then17
  call void @float_raise(i32 16), !dbg !11717
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !11719
  store i64 -1, i64* %low, align 8, !dbg !11720
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !11721
  store i64 9223372036854775807, i64* %high, align 8, !dbg !11722
  %99 = bitcast %struct.float128* %retval to i8*, !dbg !11723
  %100 = bitcast %struct.float128* %z to i8*, !dbg !11723
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %99, i8* %100, i64 16, i32 8, i1 false), !dbg !11723
  br label %return, !dbg !11724

if.end35:                                         ; preds = %if.end28
  %101 = load i32, i32* %zSign, align 4, !dbg !11725
  %call36 = call { i64, i64 } @packFloat128(i32 %101, i32 32767, i64 0, i64 0), !dbg !11726
  %102 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11726
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %102, i32 0, i32 0, !dbg !11726
  %104 = extractvalue { i64, i64 } %call36, 0, !dbg !11726
  store i64 %104, i64* %103, align 8, !dbg !11726
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %102, i32 0, i32 1, !dbg !11726
  %106 = extractvalue { i64, i64 } %call36, 1, !dbg !11726
  store i64 %106, i64* %105, align 8, !dbg !11726
  br label %return, !dbg !11727

if.end37:                                         ; preds = %if.end20
  %107 = load i32, i32* %aExp, align 4, !dbg !11728
  %cmp38 = icmp eq i32 %107, 0, !dbg !11730
  br i1 %cmp38, label %if.then40, label %if.end47, !dbg !11731

if.then40:                                        ; preds = %if.end37
  %108 = load i64, i64* %aSig0, align 8, !dbg !11732
  %109 = load i64, i64* %aSig1, align 8, !dbg !11735
  %or41 = or i64 %108, %109, !dbg !11736
  %cmp42 = icmp eq i64 %or41, 0, !dbg !11737
  br i1 %cmp42, label %if.then44, label %if.end46, !dbg !11738

if.then44:                                        ; preds = %if.then40
  %110 = load i32, i32* %zSign, align 4, !dbg !11739
  %call45 = call { i64, i64 } @packFloat128(i32 %110, i32 0, i64 0, i64 0), !dbg !11740
  %111 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11740
  %112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %111, i32 0, i32 0, !dbg !11740
  %113 = extractvalue { i64, i64 } %call45, 0, !dbg !11740
  store i64 %113, i64* %112, align 8, !dbg !11740
  %114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %111, i32 0, i32 1, !dbg !11740
  %115 = extractvalue { i64, i64 } %call45, 1, !dbg !11740
  store i64 %115, i64* %114, align 8, !dbg !11740
  br label %return, !dbg !11741

if.end46:                                         ; preds = %if.then40
  %116 = load i64, i64* %aSig0, align 8, !dbg !11742
  %117 = load i64, i64* %aSig1, align 8, !dbg !11743
  call void @normalizeFloat128Subnormal(i64 %116, i64 %117, i32* %aExp, i64* %aSig0, i64* %aSig1), !dbg !11744
  br label %if.end47, !dbg !11745

if.end47:                                         ; preds = %if.end46, %if.end37
  %118 = load i32, i32* %bExp, align 4, !dbg !11746
  %cmp48 = icmp eq i32 %118, 0, !dbg !11748
  br i1 %cmp48, label %if.then50, label %if.end57, !dbg !11749

if.then50:                                        ; preds = %if.end47
  %119 = load i64, i64* %bSig0, align 8, !dbg !11750
  %120 = load i64, i64* %bSig1, align 8, !dbg !11753
  %or51 = or i64 %119, %120, !dbg !11754
  %cmp52 = icmp eq i64 %or51, 0, !dbg !11755
  br i1 %cmp52, label %if.then54, label %if.end56, !dbg !11756

if.then54:                                        ; preds = %if.then50
  %121 = load i32, i32* %zSign, align 4, !dbg !11757
  %call55 = call { i64, i64 } @packFloat128(i32 %121, i32 0, i64 0, i64 0), !dbg !11758
  %122 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11758
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %122, i32 0, i32 0, !dbg !11758
  %124 = extractvalue { i64, i64 } %call55, 0, !dbg !11758
  store i64 %124, i64* %123, align 8, !dbg !11758
  %125 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %122, i32 0, i32 1, !dbg !11758
  %126 = extractvalue { i64, i64 } %call55, 1, !dbg !11758
  store i64 %126, i64* %125, align 8, !dbg !11758
  br label %return, !dbg !11759

if.end56:                                         ; preds = %if.then50
  %127 = load i64, i64* %bSig0, align 8, !dbg !11760
  %128 = load i64, i64* %bSig1, align 8, !dbg !11761
  call void @normalizeFloat128Subnormal(i64 %127, i64 %128, i32* %bExp, i64* %bSig0, i64* %bSig1), !dbg !11762
  br label %if.end57, !dbg !11763

if.end57:                                         ; preds = %if.end56, %if.end47
  %129 = load i32, i32* %aExp, align 4, !dbg !11764
  %130 = load i32, i32* %bExp, align 4, !dbg !11765
  %add = add nsw i32 %129, %130, !dbg !11766
  %sub = sub nsw i32 %add, 16384, !dbg !11767
  store i32 %sub, i32* %zExp, align 4, !dbg !11768
  %131 = load i64, i64* %aSig0, align 8, !dbg !11769
  %or58 = or i64 %131, 281474976710656, !dbg !11769
  store i64 %or58, i64* %aSig0, align 8, !dbg !11769
  %132 = load i64, i64* %bSig0, align 8, !dbg !11770
  %133 = load i64, i64* %bSig1, align 8, !dbg !11771
  call void @shortShift128Left(i64 %132, i64 %133, i32 16, i64* %bSig0, i64* %bSig1), !dbg !11772
  %134 = load i64, i64* %aSig0, align 8, !dbg !11773
  %135 = load i64, i64* %aSig1, align 8, !dbg !11774
  %136 = load i64, i64* %bSig0, align 8, !dbg !11775
  %137 = load i64, i64* %bSig1, align 8, !dbg !11776
  call void @mul128To256(i64 %134, i64 %135, i64 %136, i64 %137, i64* %zSig0, i64* %zSig1, i64* %zSig2, i64* %zSig3), !dbg !11777
  %138 = load i64, i64* %zSig0, align 8, !dbg !11778
  %139 = load i64, i64* %zSig1, align 8, !dbg !11779
  %140 = load i64, i64* %aSig0, align 8, !dbg !11780
  %141 = load i64, i64* %aSig1, align 8, !dbg !11781
  call void @add128(i64 %138, i64 %139, i64 %140, i64 %141, i64* %zSig0, i64* %zSig1), !dbg !11782
  %142 = load i64, i64* %zSig3, align 8, !dbg !11783
  %cmp59 = icmp ne i64 %142, 0, !dbg !11784
  %conv60 = zext i1 %cmp59 to i32, !dbg !11784
  %conv61 = sext i32 %conv60 to i64, !dbg !11785
  %143 = load i64, i64* %zSig2, align 8, !dbg !11786
  %or62 = or i64 %143, %conv61, !dbg !11786
  store i64 %or62, i64* %zSig2, align 8, !dbg !11786
  %144 = load i64, i64* %zSig0, align 8, !dbg !11787
  %cmp63 = icmp ule i64 562949953421312, %144, !dbg !11789
  br i1 %cmp63, label %if.then65, label %if.end66, !dbg !11790

if.then65:                                        ; preds = %if.end57
  %145 = load i64, i64* %zSig0, align 8, !dbg !11791
  %146 = load i64, i64* %zSig1, align 8, !dbg !11793
  %147 = load i64, i64* %zSig2, align 8, !dbg !11794
  call void @shift128ExtraRightJamming(i64 %145, i64 %146, i64 %147, i32 1, i64* %zSig0, i64* %zSig1, i64* %zSig2), !dbg !11795
  %148 = load i32, i32* %zExp, align 4, !dbg !11796
  %inc = add nsw i32 %148, 1, !dbg !11796
  store i32 %inc, i32* %zExp, align 4, !dbg !11796
  br label %if.end66, !dbg !11797

if.end66:                                         ; preds = %if.then65, %if.end57
  %149 = load i32, i32* %zSign, align 4, !dbg !11798
  %150 = load i32, i32* %zExp, align 4, !dbg !11799
  %151 = load i64, i64* %zSig0, align 8, !dbg !11800
  %152 = load i64, i64* %zSig1, align 8, !dbg !11801
  %153 = load i64, i64* %zSig2, align 8, !dbg !11802
  %call67 = call { i64, i64 } @roundAndPackFloat128(i32 %149, i32 %150, i64 %151, i64 %152, i64 %153), !dbg !11803
  %154 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11803
  %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 0, !dbg !11803
  %156 = extractvalue { i64, i64 } %call67, 0, !dbg !11803
  store i64 %156, i64* %155, align 8, !dbg !11803
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 1, !dbg !11803
  %158 = extractvalue { i64, i64 } %call67, 1, !dbg !11803
  store i64 %158, i64* %157, align 8, !dbg !11803
  br label %return, !dbg !11804

return:                                           ; preds = %if.end66, %if.then54, %if.then44, %if.end35, %invalid, %if.then26, %if.end18, %if.then11
  %159 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11805
  %160 = load { i64, i64 }, { i64, i64 }* %159, align 8, !dbg !11805
  ret { i64, i64 } %160, !dbg !11805
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @roundAndPackFloat128(i32 %zSign, i32 %zExp, i64 %zSig0, i64 %zSig1, i64 %zSig2) #0 !dbg !11806 {
entry:
  %retval = alloca %struct.float128, align 8
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig0.addr = alloca i64, align 8
  %zSig1.addr = alloca i64, align 8
  %zSig2.addr = alloca i64, align 8
  %roundingMode = alloca i32, align 4
  %roundNearestEven = alloca i32, align 4
  %increment = alloca i32, align 4
  %isTiny = alloca i32, align 4
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !11809, metadata !DIExpression()), !dbg !11810
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !11811, metadata !DIExpression()), !dbg !11812
  store i64 %zSig0, i64* %zSig0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig0.addr, metadata !11813, metadata !DIExpression()), !dbg !11814
  store i64 %zSig1, i64* %zSig1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig1.addr, metadata !11815, metadata !DIExpression()), !dbg !11816
  store i64 %zSig2, i64* %zSig2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig2.addr, metadata !11817, metadata !DIExpression()), !dbg !11818
  call void @llvm.dbg.declare(metadata i32* %roundingMode, metadata !11819, metadata !DIExpression()), !dbg !11820
  call void @llvm.dbg.declare(metadata i32* %roundNearestEven, metadata !11821, metadata !DIExpression()), !dbg !11822
  call void @llvm.dbg.declare(metadata i32* %increment, metadata !11823, metadata !DIExpression()), !dbg !11824
  call void @llvm.dbg.declare(metadata i32* %isTiny, metadata !11825, metadata !DIExpression()), !dbg !11826
  %0 = load i32, i32* @float_rounding_mode, align 4, !dbg !11827
  store i32 %0, i32* %roundingMode, align 4, !dbg !11828
  %1 = load i32, i32* %roundingMode, align 4, !dbg !11829
  %cmp = icmp eq i32 %1, 0, !dbg !11830
  %conv = zext i1 %cmp to i32, !dbg !11830
  store i32 %conv, i32* %roundNearestEven, align 4, !dbg !11831
  %2 = load i64, i64* %zSig2.addr, align 8, !dbg !11832
  %cmp1 = icmp slt i64 %2, 0, !dbg !11833
  %conv2 = zext i1 %cmp1 to i32, !dbg !11833
  store i32 %conv2, i32* %increment, align 4, !dbg !11834
  %3 = load i32, i32* %roundNearestEven, align 4, !dbg !11835
  %tobool = icmp ne i32 %3, 0, !dbg !11835
  br i1 %tobool, label %if.end19, label %if.then, !dbg !11837

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %roundingMode, align 4, !dbg !11838
  %cmp3 = icmp eq i32 %4, 1, !dbg !11841
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !11842

if.then5:                                         ; preds = %if.then
  store i32 0, i32* %increment, align 4, !dbg !11843
  br label %if.end18, !dbg !11845

if.else:                                          ; preds = %if.then
  %5 = load i32, i32* %zSign.addr, align 4, !dbg !11846
  %tobool6 = icmp ne i32 %5, 0, !dbg !11846
  br i1 %tobool6, label %if.then7, label %if.else11, !dbg !11849

if.then7:                                         ; preds = %if.else
  %6 = load i32, i32* %roundingMode, align 4, !dbg !11850
  %cmp8 = icmp eq i32 %6, 3, !dbg !11852
  br i1 %cmp8, label %land.rhs, label %land.end, !dbg !11853

land.rhs:                                         ; preds = %if.then7
  %7 = load i64, i64* %zSig2.addr, align 8, !dbg !11854
  %tobool10 = icmp ne i64 %7, 0, !dbg !11853
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then7
  %8 = phi i1 [ false, %if.then7 ], [ %tobool10, %land.rhs ]
  %land.ext = zext i1 %8 to i32, !dbg !11853
  store i32 %land.ext, i32* %increment, align 4, !dbg !11855
  br label %if.end, !dbg !11856

if.else11:                                        ; preds = %if.else
  %9 = load i32, i32* %roundingMode, align 4, !dbg !11857
  %cmp12 = icmp eq i32 %9, 2, !dbg !11859
  br i1 %cmp12, label %land.rhs14, label %land.end16, !dbg !11860

land.rhs14:                                       ; preds = %if.else11
  %10 = load i64, i64* %zSig2.addr, align 8, !dbg !11861
  %tobool15 = icmp ne i64 %10, 0, !dbg !11860
  br label %land.end16

land.end16:                                       ; preds = %land.rhs14, %if.else11
  %11 = phi i1 [ false, %if.else11 ], [ %tobool15, %land.rhs14 ]
  %land.ext17 = zext i1 %11 to i32, !dbg !11860
  store i32 %land.ext17, i32* %increment, align 4, !dbg !11862
  br label %if.end

if.end:                                           ; preds = %land.end16, %land.end
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then5
  br label %if.end19, !dbg !11863

if.end19:                                         ; preds = %if.end18, %entry
  %12 = load i32, i32* %zExp.addr, align 4, !dbg !11864
  %cmp20 = icmp ule i32 32765, %12, !dbg !11866
  br i1 %cmp20, label %if.then22, label %if.end88, !dbg !11867

if.then22:                                        ; preds = %if.end19
  %13 = load i32, i32* %zExp.addr, align 4, !dbg !11868
  %cmp23 = icmp slt i32 32765, %13, !dbg !11871
  br i1 %cmp23, label %if.then30, label %lor.lhs.false, !dbg !11872

lor.lhs.false:                                    ; preds = %if.then22
  %14 = load i32, i32* %zExp.addr, align 4, !dbg !11873
  %cmp25 = icmp eq i32 %14, 32765, !dbg !11874
  br i1 %cmp25, label %land.lhs.true, label %if.end47, !dbg !11875

land.lhs.true:                                    ; preds = %lor.lhs.false
  %15 = load i64, i64* %zSig0.addr, align 8, !dbg !11876
  %16 = load i64, i64* %zSig1.addr, align 8, !dbg !11877
  %call = call zeroext i1 @eq128(i64 562949953421311, i64 -1, i64 %15, i64 %16), !dbg !11878
  br i1 %call, label %land.lhs.true28, label %if.end47, !dbg !11879

land.lhs.true28:                                  ; preds = %land.lhs.true
  %17 = load i32, i32* %increment, align 4, !dbg !11880
  %tobool29 = icmp ne i32 %17, 0, !dbg !11880
  br i1 %tobool29, label %if.then30, label %if.end47, !dbg !11881

if.then30:                                        ; preds = %land.lhs.true28, %if.then22
  call void @float_raise(i32 9), !dbg !11882
  %18 = load i32, i32* %roundingMode, align 4, !dbg !11884
  %cmp31 = icmp eq i32 %18, 1, !dbg !11886
  br i1 %cmp31, label %if.then43, label %lor.lhs.false33, !dbg !11887

lor.lhs.false33:                                  ; preds = %if.then30
  %19 = load i32, i32* %zSign.addr, align 4, !dbg !11888
  %tobool34 = icmp ne i32 %19, 0, !dbg !11888
  br i1 %tobool34, label %land.lhs.true35, label %lor.lhs.false38, !dbg !11889

land.lhs.true35:                                  ; preds = %lor.lhs.false33
  %20 = load i32, i32* %roundingMode, align 4, !dbg !11890
  %cmp36 = icmp eq i32 %20, 2, !dbg !11891
  br i1 %cmp36, label %if.then43, label %lor.lhs.false38, !dbg !11892

lor.lhs.false38:                                  ; preds = %land.lhs.true35, %lor.lhs.false33
  %21 = load i32, i32* %zSign.addr, align 4, !dbg !11893
  %tobool39 = icmp ne i32 %21, 0, !dbg !11893
  br i1 %tobool39, label %if.end45, label %land.lhs.true40, !dbg !11894

land.lhs.true40:                                  ; preds = %lor.lhs.false38
  %22 = load i32, i32* %roundingMode, align 4, !dbg !11895
  %cmp41 = icmp eq i32 %22, 3, !dbg !11896
  br i1 %cmp41, label %if.then43, label %if.end45, !dbg !11897

if.then43:                                        ; preds = %land.lhs.true40, %land.lhs.true35, %if.then30
  %23 = load i32, i32* %zSign.addr, align 4, !dbg !11898
  %call44 = call { i64, i64 } @packFloat128(i32 %23, i32 32766, i64 281474976710655, i64 -1), !dbg !11900
  %24 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11900
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !11900
  %26 = extractvalue { i64, i64 } %call44, 0, !dbg !11900
  store i64 %26, i64* %25, align 8, !dbg !11900
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !11900
  %28 = extractvalue { i64, i64 } %call44, 1, !dbg !11900
  store i64 %28, i64* %27, align 8, !dbg !11900
  br label %return, !dbg !11901

if.end45:                                         ; preds = %land.lhs.true40, %lor.lhs.false38
  %29 = load i32, i32* %zSign.addr, align 4, !dbg !11902
  %call46 = call { i64, i64 } @packFloat128(i32 %29, i32 32767, i64 0, i64 0), !dbg !11903
  %30 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11903
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0, !dbg !11903
  %32 = extractvalue { i64, i64 } %call46, 0, !dbg !11903
  store i64 %32, i64* %31, align 8, !dbg !11903
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1, !dbg !11903
  %34 = extractvalue { i64, i64 } %call46, 1, !dbg !11903
  store i64 %34, i64* %33, align 8, !dbg !11903
  br label %return, !dbg !11904

if.end47:                                         ; preds = %land.lhs.true28, %land.lhs.true, %lor.lhs.false
  %35 = load i32, i32* %zExp.addr, align 4, !dbg !11905
  %cmp48 = icmp slt i32 %35, 0, !dbg !11907
  br i1 %cmp48, label %if.then50, label %if.end87, !dbg !11908

if.then50:                                        ; preds = %if.end47
  %36 = load i32, i32* @float_detect_tininess, align 4, !dbg !11909
  %cmp51 = icmp eq i32 %36, 1, !dbg !11911
  br i1 %cmp51, label %lor.end, label %lor.lhs.false53, !dbg !11912

lor.lhs.false53:                                  ; preds = %if.then50
  %37 = load i32, i32* %zExp.addr, align 4, !dbg !11913
  %cmp54 = icmp slt i32 %37, -1, !dbg !11914
  br i1 %cmp54, label %lor.end, label %lor.lhs.false56, !dbg !11915

lor.lhs.false56:                                  ; preds = %lor.lhs.false53
  %38 = load i32, i32* %increment, align 4, !dbg !11916
  %tobool57 = icmp ne i32 %38, 0, !dbg !11916
  br i1 %tobool57, label %lor.rhs, label %lor.end, !dbg !11917

lor.rhs:                                          ; preds = %lor.lhs.false56
  %39 = load i64, i64* %zSig0.addr, align 8, !dbg !11918
  %40 = load i64, i64* %zSig1.addr, align 8, !dbg !11919
  %call58 = call zeroext i1 @lt128(i64 %39, i64 %40, i64 562949953421311, i64 -1), !dbg !11920
  br label %lor.end, !dbg !11917

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false56, %lor.lhs.false53, %if.then50
  %41 = phi i1 [ true, %lor.lhs.false56 ], [ true, %lor.lhs.false53 ], [ true, %if.then50 ], [ %call58, %lor.rhs ]
  %lor.ext = zext i1 %41 to i32, !dbg !11917
  store i32 %lor.ext, i32* %isTiny, align 4, !dbg !11921
  %42 = load i64, i64* %zSig0.addr, align 8, !dbg !11922
  %43 = load i64, i64* %zSig1.addr, align 8, !dbg !11923
  %44 = load i64, i64* %zSig2.addr, align 8, !dbg !11924
  %45 = load i32, i32* %zExp.addr, align 4, !dbg !11925
  %sub = sub nsw i32 0, %45, !dbg !11926
  call void @shift128ExtraRightJamming(i64 %42, i64 %43, i64 %44, i32 %sub, i64* %zSig0.addr, i64* %zSig1.addr, i64* %zSig2.addr), !dbg !11927
  store i32 0, i32* %zExp.addr, align 4, !dbg !11928
  %46 = load i32, i32* %isTiny, align 4, !dbg !11929
  %tobool60 = icmp ne i32 %46, 0, !dbg !11929
  br i1 %tobool60, label %land.lhs.true61, label %if.end64, !dbg !11931

land.lhs.true61:                                  ; preds = %lor.end
  %47 = load i64, i64* %zSig2.addr, align 8, !dbg !11932
  %tobool62 = icmp ne i64 %47, 0, !dbg !11932
  br i1 %tobool62, label %if.then63, label %if.end64, !dbg !11933

if.then63:                                        ; preds = %land.lhs.true61
  call void @float_raise(i32 4), !dbg !11934
  br label %if.end64, !dbg !11934

if.end64:                                         ; preds = %if.then63, %land.lhs.true61, %lor.end
  %48 = load i32, i32* %roundNearestEven, align 4, !dbg !11935
  %tobool65 = icmp ne i32 %48, 0, !dbg !11935
  br i1 %tobool65, label %if.then66, label %if.else69, !dbg !11937

if.then66:                                        ; preds = %if.end64
  %49 = load i64, i64* %zSig2.addr, align 8, !dbg !11938
  %cmp67 = icmp slt i64 %49, 0, !dbg !11940
  %conv68 = zext i1 %cmp67 to i32, !dbg !11940
  store i32 %conv68, i32* %increment, align 4, !dbg !11941
  br label %if.end86, !dbg !11942

if.else69:                                        ; preds = %if.end64
  %50 = load i32, i32* %zSign.addr, align 4, !dbg !11943
  %tobool70 = icmp ne i32 %50, 0, !dbg !11943
  br i1 %tobool70, label %if.then71, label %if.else78, !dbg !11946

if.then71:                                        ; preds = %if.else69
  %51 = load i32, i32* %roundingMode, align 4, !dbg !11947
  %cmp72 = icmp eq i32 %51, 3, !dbg !11949
  br i1 %cmp72, label %land.rhs74, label %land.end76, !dbg !11950

land.rhs74:                                       ; preds = %if.then71
  %52 = load i64, i64* %zSig2.addr, align 8, !dbg !11951
  %tobool75 = icmp ne i64 %52, 0, !dbg !11950
  br label %land.end76

land.end76:                                       ; preds = %land.rhs74, %if.then71
  %53 = phi i1 [ false, %if.then71 ], [ %tobool75, %land.rhs74 ]
  %land.ext77 = zext i1 %53 to i32, !dbg !11950
  store i32 %land.ext77, i32* %increment, align 4, !dbg !11952
  br label %if.end85, !dbg !11953

if.else78:                                        ; preds = %if.else69
  %54 = load i32, i32* %roundingMode, align 4, !dbg !11954
  %cmp79 = icmp eq i32 %54, 2, !dbg !11956
  br i1 %cmp79, label %land.rhs81, label %land.end83, !dbg !11957

land.rhs81:                                       ; preds = %if.else78
  %55 = load i64, i64* %zSig2.addr, align 8, !dbg !11958
  %tobool82 = icmp ne i64 %55, 0, !dbg !11957
  br label %land.end83

land.end83:                                       ; preds = %land.rhs81, %if.else78
  %56 = phi i1 [ false, %if.else78 ], [ %tobool82, %land.rhs81 ]
  %land.ext84 = zext i1 %56 to i32, !dbg !11957
  store i32 %land.ext84, i32* %increment, align 4, !dbg !11959
  br label %if.end85

if.end85:                                         ; preds = %land.end83, %land.end76
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then66
  br label %if.end87, !dbg !11960

if.end87:                                         ; preds = %if.end86, %if.end47
  br label %if.end88, !dbg !11961

if.end88:                                         ; preds = %if.end87, %if.end19
  %57 = load i64, i64* %zSig2.addr, align 8, !dbg !11962
  %tobool89 = icmp ne i64 %57, 0, !dbg !11962
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !11964

if.then90:                                        ; preds = %if.end88
  %58 = load i32, i32* @float_exception_flags, align 4, !dbg !11965
  %or = or i32 %58, 1, !dbg !11965
  store i32 %or, i32* @float_exception_flags, align 4, !dbg !11965
  br label %if.end91, !dbg !11966

if.end91:                                         ; preds = %if.then90, %if.end88
  %59 = load i32, i32* %increment, align 4, !dbg !11967
  %tobool92 = icmp ne i32 %59, 0, !dbg !11967
  br i1 %tobool92, label %if.then93, label %if.else98, !dbg !11969

if.then93:                                        ; preds = %if.end91
  %60 = load i64, i64* %zSig0.addr, align 8, !dbg !11970
  %61 = load i64, i64* %zSig1.addr, align 8, !dbg !11972
  call void @add128(i64 %60, i64 %61, i64 0, i64 1, i64* %zSig0.addr, i64* %zSig1.addr), !dbg !11973
  %62 = load i64, i64* %zSig2.addr, align 8, !dbg !11974
  %63 = load i64, i64* %zSig2.addr, align 8, !dbg !11975
  %add = add i64 %62, %63, !dbg !11976
  %cmp94 = icmp eq i64 %add, 0, !dbg !11977
  %conv95 = zext i1 %cmp94 to i32, !dbg !11977
  %64 = load i32, i32* %roundNearestEven, align 4, !dbg !11978
  %and = and i32 %conv95, %64, !dbg !11979
  %neg = xor i32 %and, -1, !dbg !11980
  %conv96 = sext i32 %neg to i64, !dbg !11980
  %65 = load i64, i64* %zSig1.addr, align 8, !dbg !11981
  %and97 = and i64 %65, %conv96, !dbg !11981
  store i64 %and97, i64* %zSig1.addr, align 8, !dbg !11981
  br label %if.end104, !dbg !11982

if.else98:                                        ; preds = %if.end91
  %66 = load i64, i64* %zSig0.addr, align 8, !dbg !11983
  %67 = load i64, i64* %zSig1.addr, align 8, !dbg !11986
  %or99 = or i64 %66, %67, !dbg !11987
  %cmp100 = icmp eq i64 %or99, 0, !dbg !11988
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !11989

if.then102:                                       ; preds = %if.else98
  store i32 0, i32* %zExp.addr, align 4, !dbg !11990
  br label %if.end103, !dbg !11991

if.end103:                                        ; preds = %if.then102, %if.else98
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then93
  %68 = load i32, i32* %zSign.addr, align 4, !dbg !11992
  %69 = load i32, i32* %zExp.addr, align 4, !dbg !11993
  %70 = load i64, i64* %zSig0.addr, align 8, !dbg !11994
  %71 = load i64, i64* %zSig1.addr, align 8, !dbg !11995
  %call105 = call { i64, i64 } @packFloat128(i32 %68, i32 %69, i64 %70, i64 %71), !dbg !11996
  %72 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11996
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %72, i32 0, i32 0, !dbg !11996
  %74 = extractvalue { i64, i64 } %call105, 0, !dbg !11996
  store i64 %74, i64* %73, align 8, !dbg !11996
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %72, i32 0, i32 1, !dbg !11996
  %76 = extractvalue { i64, i64 } %call105, 1, !dbg !11996
  store i64 %76, i64* %75, align 8, !dbg !11996
  br label %return, !dbg !11997

return:                                           ; preds = %if.end104, %if.end45, %if.then43
  %77 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !11998
  %78 = load { i64, i64 }, { i64, i64 }* %77, align 8, !dbg !11998
  ret { i64, i64 } %78, !dbg !11998
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_div(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !11999 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %bSig0 = alloca i64, align 8
  %bSig1 = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %zSig2 = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %rem2 = alloca i64, align 8
  %rem3 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %term2 = alloca i64, align 8
  %term3 = alloca i64, align 8
  %z = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !12000, metadata !DIExpression()), !dbg !12001
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !12002, metadata !DIExpression()), !dbg !12003
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !12004, metadata !DIExpression()), !dbg !12005
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !12006, metadata !DIExpression()), !dbg !12007
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !12008, metadata !DIExpression()), !dbg !12009
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !12010, metadata !DIExpression()), !dbg !12011
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !12012, metadata !DIExpression()), !dbg !12013
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !12014, metadata !DIExpression()), !dbg !12015
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !12016, metadata !DIExpression()), !dbg !12017
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !12018, metadata !DIExpression()), !dbg !12019
  call void @llvm.dbg.declare(metadata i64* %bSig0, metadata !12020, metadata !DIExpression()), !dbg !12021
  call void @llvm.dbg.declare(metadata i64* %bSig1, metadata !12022, metadata !DIExpression()), !dbg !12023
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !12024, metadata !DIExpression()), !dbg !12025
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !12026, metadata !DIExpression()), !dbg !12027
  call void @llvm.dbg.declare(metadata i64* %zSig2, metadata !12028, metadata !DIExpression()), !dbg !12029
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !12030, metadata !DIExpression()), !dbg !12031
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !12032, metadata !DIExpression()), !dbg !12033
  call void @llvm.dbg.declare(metadata i64* %rem2, metadata !12034, metadata !DIExpression()), !dbg !12035
  call void @llvm.dbg.declare(metadata i64* %rem3, metadata !12036, metadata !DIExpression()), !dbg !12037
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !12038, metadata !DIExpression()), !dbg !12039
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !12040, metadata !DIExpression()), !dbg !12041
  call void @llvm.dbg.declare(metadata i64* %term2, metadata !12042, metadata !DIExpression()), !dbg !12043
  call void @llvm.dbg.declare(metadata i64* %term3, metadata !12044, metadata !DIExpression()), !dbg !12045
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !12046, metadata !DIExpression()), !dbg !12047
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12048
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !12048
  %8 = load i64, i64* %7, align 8, !dbg !12048
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !12048
  %10 = load i64, i64* %9, align 8, !dbg !12048
  %call = call i64 @extractFloat128Frac1(i64 %8, i64 %10), !dbg !12048
  store i64 %call, i64* %aSig1, align 8, !dbg !12049
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12050
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !12050
  %13 = load i64, i64* %12, align 8, !dbg !12050
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !12050
  %15 = load i64, i64* %14, align 8, !dbg !12050
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !12050
  store i64 %call1, i64* %aSig0, align 8, !dbg !12051
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12052
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !12052
  %18 = load i64, i64* %17, align 8, !dbg !12052
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !12052
  %20 = load i64, i64* %19, align 8, !dbg !12052
  %call2 = call i32 @extractFloat128Exp(i64 %18, i64 %20), !dbg !12052
  store i32 %call2, i32* %aExp, align 4, !dbg !12053
  %21 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12054
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !12054
  %23 = load i64, i64* %22, align 8, !dbg !12054
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !12054
  %25 = load i64, i64* %24, align 8, !dbg !12054
  %call3 = call i32 @extractFloat128Sign(i64 %23, i64 %25), !dbg !12054
  store i32 %call3, i32* %aSign, align 4, !dbg !12055
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12056
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !12056
  %28 = load i64, i64* %27, align 8, !dbg !12056
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !12056
  %30 = load i64, i64* %29, align 8, !dbg !12056
  %call4 = call i64 @extractFloat128Frac1(i64 %28, i64 %30), !dbg !12056
  store i64 %call4, i64* %bSig1, align 8, !dbg !12057
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12058
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !12058
  %33 = load i64, i64* %32, align 8, !dbg !12058
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !12058
  %35 = load i64, i64* %34, align 8, !dbg !12058
  %call5 = call i64 @extractFloat128Frac0(i64 %33, i64 %35), !dbg !12058
  store i64 %call5, i64* %bSig0, align 8, !dbg !12059
  %36 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12060
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !12060
  %38 = load i64, i64* %37, align 8, !dbg !12060
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !12060
  %40 = load i64, i64* %39, align 8, !dbg !12060
  %call6 = call i32 @extractFloat128Exp(i64 %38, i64 %40), !dbg !12060
  store i32 %call6, i32* %bExp, align 4, !dbg !12061
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12062
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !12062
  %43 = load i64, i64* %42, align 8, !dbg !12062
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !12062
  %45 = load i64, i64* %44, align 8, !dbg !12062
  %call7 = call i32 @extractFloat128Sign(i64 %43, i64 %45), !dbg !12062
  store i32 %call7, i32* %bSign, align 4, !dbg !12063
  %46 = load i32, i32* %aSign, align 4, !dbg !12064
  %47 = load i32, i32* %bSign, align 4, !dbg !12065
  %xor = xor i32 %46, %47, !dbg !12066
  store i32 %xor, i32* %zSign, align 4, !dbg !12067
  %48 = load i32, i32* %aExp, align 4, !dbg !12068
  %cmp = icmp eq i32 %48, 32767, !dbg !12070
  br i1 %cmp, label %if.then, label %if.end19, !dbg !12071

if.then:                                          ; preds = %entry
  %49 = load i64, i64* %aSig0, align 8, !dbg !12072
  %50 = load i64, i64* %aSig1, align 8, !dbg !12075
  %or = or i64 %49, %50, !dbg !12076
  %tobool = icmp ne i64 %or, 0, !dbg !12076
  br i1 %tobool, label %if.then8, label %if.end, !dbg !12077

if.then8:                                         ; preds = %if.then
  %51 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12078
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !12078
  %53 = load i64, i64* %52, align 8, !dbg !12078
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !12078
  %55 = load i64, i64* %54, align 8, !dbg !12078
  %56 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12078
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 0, !dbg !12078
  %58 = load i64, i64* %57, align 8, !dbg !12078
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 1, !dbg !12078
  %60 = load i64, i64* %59, align 8, !dbg !12078
  %call9 = call { i64, i64 } @propagateFloat128NaN(i64 %53, i64 %55, i64 %58, i64 %60), !dbg !12078
  %61 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12078
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %61, i32 0, i32 0, !dbg !12078
  %63 = extractvalue { i64, i64 } %call9, 0, !dbg !12078
  store i64 %63, i64* %62, align 8, !dbg !12078
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %61, i32 0, i32 1, !dbg !12078
  %65 = extractvalue { i64, i64 } %call9, 1, !dbg !12078
  store i64 %65, i64* %64, align 8, !dbg !12078
  br label %return, !dbg !12079

if.end:                                           ; preds = %if.then
  %66 = load i32, i32* %bExp, align 4, !dbg !12080
  %cmp10 = icmp eq i32 %66, 32767, !dbg !12082
  br i1 %cmp10, label %if.then11, label %if.end17, !dbg !12083

if.then11:                                        ; preds = %if.end
  %67 = load i64, i64* %bSig0, align 8, !dbg !12084
  %68 = load i64, i64* %bSig1, align 8, !dbg !12087
  %or12 = or i64 %67, %68, !dbg !12088
  %tobool13 = icmp ne i64 %or12, 0, !dbg !12088
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !12089

if.then14:                                        ; preds = %if.then11
  %69 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12090
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %69, i32 0, i32 0, !dbg !12090
  %71 = load i64, i64* %70, align 8, !dbg !12090
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %69, i32 0, i32 1, !dbg !12090
  %73 = load i64, i64* %72, align 8, !dbg !12090
  %74 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12090
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %74, i32 0, i32 0, !dbg !12090
  %76 = load i64, i64* %75, align 8, !dbg !12090
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %74, i32 0, i32 1, !dbg !12090
  %78 = load i64, i64* %77, align 8, !dbg !12090
  %call15 = call { i64, i64 } @propagateFloat128NaN(i64 %71, i64 %73, i64 %76, i64 %78), !dbg !12090
  %79 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12090
  %80 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %79, i32 0, i32 0, !dbg !12090
  %81 = extractvalue { i64, i64 } %call15, 0, !dbg !12090
  store i64 %81, i64* %80, align 8, !dbg !12090
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %79, i32 0, i32 1, !dbg !12090
  %83 = extractvalue { i64, i64 } %call15, 1, !dbg !12090
  store i64 %83, i64* %82, align 8, !dbg !12090
  br label %return, !dbg !12091

if.end16:                                         ; preds = %if.then11
  br label %invalid, !dbg !12092

if.end17:                                         ; preds = %if.end
  %84 = load i32, i32* %zSign, align 4, !dbg !12093
  %call18 = call { i64, i64 } @packFloat128(i32 %84, i32 32767, i64 0, i64 0), !dbg !12094
  %85 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12094
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 0, !dbg !12094
  %87 = extractvalue { i64, i64 } %call18, 0, !dbg !12094
  store i64 %87, i64* %86, align 8, !dbg !12094
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 1, !dbg !12094
  %89 = extractvalue { i64, i64 } %call18, 1, !dbg !12094
  store i64 %89, i64* %88, align 8, !dbg !12094
  br label %return, !dbg !12095

if.end19:                                         ; preds = %entry
  %90 = load i32, i32* %bExp, align 4, !dbg !12096
  %cmp20 = icmp eq i32 %90, 32767, !dbg !12098
  br i1 %cmp20, label %if.then21, label %if.end28, !dbg !12099

if.then21:                                        ; preds = %if.end19
  %91 = load i64, i64* %bSig0, align 8, !dbg !12100
  %92 = load i64, i64* %bSig1, align 8, !dbg !12103
  %or22 = or i64 %91, %92, !dbg !12104
  %tobool23 = icmp ne i64 %or22, 0, !dbg !12104
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !12105

if.then24:                                        ; preds = %if.then21
  %93 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12106
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %93, i32 0, i32 0, !dbg !12106
  %95 = load i64, i64* %94, align 8, !dbg !12106
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %93, i32 0, i32 1, !dbg !12106
  %97 = load i64, i64* %96, align 8, !dbg !12106
  %98 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12106
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %98, i32 0, i32 0, !dbg !12106
  %100 = load i64, i64* %99, align 8, !dbg !12106
  %101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %98, i32 0, i32 1, !dbg !12106
  %102 = load i64, i64* %101, align 8, !dbg !12106
  %call25 = call { i64, i64 } @propagateFloat128NaN(i64 %95, i64 %97, i64 %100, i64 %102), !dbg !12106
  %103 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12106
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %103, i32 0, i32 0, !dbg !12106
  %105 = extractvalue { i64, i64 } %call25, 0, !dbg !12106
  store i64 %105, i64* %104, align 8, !dbg !12106
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %103, i32 0, i32 1, !dbg !12106
  %107 = extractvalue { i64, i64 } %call25, 1, !dbg !12106
  store i64 %107, i64* %106, align 8, !dbg !12106
  br label %return, !dbg !12107

if.end26:                                         ; preds = %if.then21
  %108 = load i32, i32* %zSign, align 4, !dbg !12108
  %call27 = call { i64, i64 } @packFloat128(i32 %108, i32 0, i64 0, i64 0), !dbg !12109
  %109 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12109
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %109, i32 0, i32 0, !dbg !12109
  %111 = extractvalue { i64, i64 } %call27, 0, !dbg !12109
  store i64 %111, i64* %110, align 8, !dbg !12109
  %112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %109, i32 0, i32 1, !dbg !12109
  %113 = extractvalue { i64, i64 } %call27, 1, !dbg !12109
  store i64 %113, i64* %112, align 8, !dbg !12109
  br label %return, !dbg !12110

if.end28:                                         ; preds = %if.end19
  %114 = load i32, i32* %bExp, align 4, !dbg !12111
  %cmp29 = icmp eq i32 %114, 0, !dbg !12113
  br i1 %cmp29, label %if.then30, label %if.end42, !dbg !12114

if.then30:                                        ; preds = %if.end28
  %115 = load i64, i64* %bSig0, align 8, !dbg !12115
  %116 = load i64, i64* %bSig1, align 8, !dbg !12118
  %or31 = or i64 %115, %116, !dbg !12119
  %cmp32 = icmp eq i64 %or31, 0, !dbg !12120
  br i1 %cmp32, label %if.then33, label %if.end41, !dbg !12121

if.then33:                                        ; preds = %if.then30
  %117 = load i32, i32* %aExp, align 4, !dbg !12122
  %conv = sext i32 %117 to i64, !dbg !12122
  %118 = load i64, i64* %aSig0, align 8, !dbg !12125
  %or34 = or i64 %conv, %118, !dbg !12126
  %119 = load i64, i64* %aSig1, align 8, !dbg !12127
  %or35 = or i64 %or34, %119, !dbg !12128
  %cmp36 = icmp eq i64 %or35, 0, !dbg !12129
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !12130

if.then38:                                        ; preds = %if.then33
  br label %invalid, !dbg !12131

invalid:                                          ; preds = %if.then38, %if.end16
  call void @float_raise(i32 16), !dbg !12132
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !12134
  store i64 -1, i64* %low, align 8, !dbg !12135
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !12136
  store i64 9223372036854775807, i64* %high, align 8, !dbg !12137
  %120 = bitcast %struct.float128* %retval to i8*, !dbg !12138
  %121 = bitcast %struct.float128* %z to i8*, !dbg !12138
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %121, i64 16, i32 8, i1 false), !dbg !12138
  br label %return, !dbg !12139

if.end39:                                         ; preds = %if.then33
  call void @float_raise(i32 2), !dbg !12140
  %122 = load i32, i32* %zSign, align 4, !dbg !12141
  %call40 = call { i64, i64 } @packFloat128(i32 %122, i32 32767, i64 0, i64 0), !dbg !12142
  %123 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12142
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %123, i32 0, i32 0, !dbg !12142
  %125 = extractvalue { i64, i64 } %call40, 0, !dbg !12142
  store i64 %125, i64* %124, align 8, !dbg !12142
  %126 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %123, i32 0, i32 1, !dbg !12142
  %127 = extractvalue { i64, i64 } %call40, 1, !dbg !12142
  store i64 %127, i64* %126, align 8, !dbg !12142
  br label %return, !dbg !12143

if.end41:                                         ; preds = %if.then30
  %128 = load i64, i64* %bSig0, align 8, !dbg !12144
  %129 = load i64, i64* %bSig1, align 8, !dbg !12145
  call void @normalizeFloat128Subnormal(i64 %128, i64 %129, i32* %bExp, i64* %bSig0, i64* %bSig1), !dbg !12146
  br label %if.end42, !dbg !12147

if.end42:                                         ; preds = %if.end41, %if.end28
  %130 = load i32, i32* %aExp, align 4, !dbg !12148
  %cmp43 = icmp eq i32 %130, 0, !dbg !12150
  br i1 %cmp43, label %if.then45, label %if.end52, !dbg !12151

if.then45:                                        ; preds = %if.end42
  %131 = load i64, i64* %aSig0, align 8, !dbg !12152
  %132 = load i64, i64* %aSig1, align 8, !dbg !12155
  %or46 = or i64 %131, %132, !dbg !12156
  %cmp47 = icmp eq i64 %or46, 0, !dbg !12157
  br i1 %cmp47, label %if.then49, label %if.end51, !dbg !12158

if.then49:                                        ; preds = %if.then45
  %133 = load i32, i32* %zSign, align 4, !dbg !12159
  %call50 = call { i64, i64 } @packFloat128(i32 %133, i32 0, i64 0, i64 0), !dbg !12160
  %134 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12160
  %135 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %134, i32 0, i32 0, !dbg !12160
  %136 = extractvalue { i64, i64 } %call50, 0, !dbg !12160
  store i64 %136, i64* %135, align 8, !dbg !12160
  %137 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %134, i32 0, i32 1, !dbg !12160
  %138 = extractvalue { i64, i64 } %call50, 1, !dbg !12160
  store i64 %138, i64* %137, align 8, !dbg !12160
  br label %return, !dbg !12161

if.end51:                                         ; preds = %if.then45
  %139 = load i64, i64* %aSig0, align 8, !dbg !12162
  %140 = load i64, i64* %aSig1, align 8, !dbg !12163
  call void @normalizeFloat128Subnormal(i64 %139, i64 %140, i32* %aExp, i64* %aSig0, i64* %aSig1), !dbg !12164
  br label %if.end52, !dbg !12165

if.end52:                                         ; preds = %if.end51, %if.end42
  %141 = load i32, i32* %aExp, align 4, !dbg !12166
  %142 = load i32, i32* %bExp, align 4, !dbg !12167
  %sub = sub nsw i32 %141, %142, !dbg !12168
  %add = add nsw i32 %sub, 16381, !dbg !12169
  store i32 %add, i32* %zExp, align 4, !dbg !12170
  %143 = load i64, i64* %aSig0, align 8, !dbg !12171
  %or53 = or i64 %143, 281474976710656, !dbg !12172
  %144 = load i64, i64* %aSig1, align 8, !dbg !12173
  call void @shortShift128Left(i64 %or53, i64 %144, i32 15, i64* %aSig0, i64* %aSig1), !dbg !12174
  %145 = load i64, i64* %bSig0, align 8, !dbg !12175
  %or54 = or i64 %145, 281474976710656, !dbg !12176
  %146 = load i64, i64* %bSig1, align 8, !dbg !12177
  call void @shortShift128Left(i64 %or54, i64 %146, i32 15, i64* %bSig0, i64* %bSig1), !dbg !12178
  %147 = load i64, i64* %bSig0, align 8, !dbg !12179
  %148 = load i64, i64* %bSig1, align 8, !dbg !12181
  %149 = load i64, i64* %aSig0, align 8, !dbg !12182
  %150 = load i64, i64* %aSig1, align 8, !dbg !12183
  %call55 = call zeroext i1 @le128(i64 %147, i64 %148, i64 %149, i64 %150), !dbg !12184
  br i1 %call55, label %if.then56, label %if.end57, !dbg !12185

if.then56:                                        ; preds = %if.end52
  %151 = load i64, i64* %aSig0, align 8, !dbg !12186
  %152 = load i64, i64* %aSig1, align 8, !dbg !12188
  call void @shift128Right(i64 %151, i64 %152, i32 1, i64* %aSig0, i64* %aSig1), !dbg !12189
  %153 = load i32, i32* %zExp, align 4, !dbg !12190
  %inc = add nsw i32 %153, 1, !dbg !12190
  store i32 %inc, i32* %zExp, align 4, !dbg !12190
  br label %if.end57, !dbg !12191

if.end57:                                         ; preds = %if.then56, %if.end52
  %154 = load i64, i64* %aSig0, align 8, !dbg !12192
  %155 = load i64, i64* %aSig1, align 8, !dbg !12193
  %156 = load i64, i64* %bSig0, align 8, !dbg !12194
  %call58 = call i64 @estimateDiv128To64(i64 %154, i64 %155, i64 %156), !dbg !12195
  store i64 %call58, i64* %zSig0, align 8, !dbg !12196
  %157 = load i64, i64* %bSig0, align 8, !dbg !12197
  %158 = load i64, i64* %bSig1, align 8, !dbg !12198
  %159 = load i64, i64* %zSig0, align 8, !dbg !12199
  call void @mul128By64To192(i64 %157, i64 %158, i64 %159, i64* %term0, i64* %term1, i64* %term2), !dbg !12200
  %160 = load i64, i64* %aSig0, align 8, !dbg !12201
  %161 = load i64, i64* %aSig1, align 8, !dbg !12202
  %162 = load i64, i64* %term0, align 8, !dbg !12203
  %163 = load i64, i64* %term1, align 8, !dbg !12204
  %164 = load i64, i64* %term2, align 8, !dbg !12205
  call void @sub192(i64 %160, i64 %161, i64 0, i64 %162, i64 %163, i64 %164, i64* %rem0, i64* %rem1, i64* %rem2), !dbg !12206
  br label %while.cond, !dbg !12207

while.cond:                                       ; preds = %while.body, %if.end57
  %165 = load i64, i64* %rem0, align 8, !dbg !12208
  %cmp59 = icmp slt i64 %165, 0, !dbg !12209
  br i1 %cmp59, label %while.body, label %while.end, !dbg !12207

while.body:                                       ; preds = %while.cond
  %166 = load i64, i64* %zSig0, align 8, !dbg !12210
  %dec = add i64 %166, -1, !dbg !12210
  store i64 %dec, i64* %zSig0, align 8, !dbg !12210
  %167 = load i64, i64* %rem0, align 8, !dbg !12212
  %168 = load i64, i64* %rem1, align 8, !dbg !12213
  %169 = load i64, i64* %rem2, align 8, !dbg !12214
  %170 = load i64, i64* %bSig0, align 8, !dbg !12215
  %171 = load i64, i64* %bSig1, align 8, !dbg !12216
  call void @add192(i64 %167, i64 %168, i64 %169, i64 0, i64 %170, i64 %171, i64* %rem0, i64* %rem1, i64* %rem2), !dbg !12217
  br label %while.cond, !dbg !12207, !llvm.loop !12218

while.end:                                        ; preds = %while.cond
  %172 = load i64, i64* %rem1, align 8, !dbg !12220
  %173 = load i64, i64* %rem2, align 8, !dbg !12221
  %174 = load i64, i64* %bSig0, align 8, !dbg !12222
  %call61 = call i64 @estimateDiv128To64(i64 %172, i64 %173, i64 %174), !dbg !12223
  store i64 %call61, i64* %zSig1, align 8, !dbg !12224
  %175 = load i64, i64* %zSig1, align 8, !dbg !12225
  %and = and i64 %175, 16383, !dbg !12227
  %cmp62 = icmp ule i64 %and, 4, !dbg !12228
  br i1 %cmp62, label %if.then64, label %if.end77, !dbg !12229

if.then64:                                        ; preds = %while.end
  %176 = load i64, i64* %bSig0, align 8, !dbg !12230
  %177 = load i64, i64* %bSig1, align 8, !dbg !12232
  %178 = load i64, i64* %zSig1, align 8, !dbg !12233
  call void @mul128By64To192(i64 %176, i64 %177, i64 %178, i64* %term1, i64* %term2, i64* %term3), !dbg !12234
  %179 = load i64, i64* %rem1, align 8, !dbg !12235
  %180 = load i64, i64* %rem2, align 8, !dbg !12236
  %181 = load i64, i64* %term1, align 8, !dbg !12237
  %182 = load i64, i64* %term2, align 8, !dbg !12238
  %183 = load i64, i64* %term3, align 8, !dbg !12239
  call void @sub192(i64 %179, i64 %180, i64 0, i64 %181, i64 %182, i64 %183, i64* %rem1, i64* %rem2, i64* %rem3), !dbg !12240
  br label %while.cond65, !dbg !12241

while.cond65:                                     ; preds = %while.body68, %if.then64
  %184 = load i64, i64* %rem1, align 8, !dbg !12242
  %cmp66 = icmp slt i64 %184, 0, !dbg !12243
  br i1 %cmp66, label %while.body68, label %while.end70, !dbg !12241

while.body68:                                     ; preds = %while.cond65
  %185 = load i64, i64* %zSig1, align 8, !dbg !12244
  %dec69 = add i64 %185, -1, !dbg !12244
  store i64 %dec69, i64* %zSig1, align 8, !dbg !12244
  %186 = load i64, i64* %rem1, align 8, !dbg !12246
  %187 = load i64, i64* %rem2, align 8, !dbg !12247
  %188 = load i64, i64* %rem3, align 8, !dbg !12248
  %189 = load i64, i64* %bSig0, align 8, !dbg !12249
  %190 = load i64, i64* %bSig1, align 8, !dbg !12250
  call void @add192(i64 %186, i64 %187, i64 %188, i64 0, i64 %189, i64 %190, i64* %rem1, i64* %rem2, i64* %rem3), !dbg !12251
  br label %while.cond65, !dbg !12241, !llvm.loop !12252

while.end70:                                      ; preds = %while.cond65
  %191 = load i64, i64* %rem1, align 8, !dbg !12254
  %192 = load i64, i64* %rem2, align 8, !dbg !12255
  %or71 = or i64 %191, %192, !dbg !12256
  %193 = load i64, i64* %rem3, align 8, !dbg !12257
  %or72 = or i64 %or71, %193, !dbg !12258
  %cmp73 = icmp ne i64 %or72, 0, !dbg !12259
  %conv74 = zext i1 %cmp73 to i32, !dbg !12259
  %conv75 = sext i32 %conv74 to i64, !dbg !12260
  %194 = load i64, i64* %zSig1, align 8, !dbg !12261
  %or76 = or i64 %194, %conv75, !dbg !12261
  store i64 %or76, i64* %zSig1, align 8, !dbg !12261
  br label %if.end77, !dbg !12262

if.end77:                                         ; preds = %while.end70, %while.end
  %195 = load i64, i64* %zSig0, align 8, !dbg !12263
  %196 = load i64, i64* %zSig1, align 8, !dbg !12264
  call void @shift128ExtraRightJamming(i64 %195, i64 %196, i64 0, i32 15, i64* %zSig0, i64* %zSig1, i64* %zSig2), !dbg !12265
  %197 = load i32, i32* %zSign, align 4, !dbg !12266
  %198 = load i32, i32* %zExp, align 4, !dbg !12267
  %199 = load i64, i64* %zSig0, align 8, !dbg !12268
  %200 = load i64, i64* %zSig1, align 8, !dbg !12269
  %201 = load i64, i64* %zSig2, align 8, !dbg !12270
  %call78 = call { i64, i64 } @roundAndPackFloat128(i32 %197, i32 %198, i64 %199, i64 %200, i64 %201), !dbg !12271
  %202 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12271
  %203 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %202, i32 0, i32 0, !dbg !12271
  %204 = extractvalue { i64, i64 } %call78, 0, !dbg !12271
  store i64 %204, i64* %203, align 8, !dbg !12271
  %205 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %202, i32 0, i32 1, !dbg !12271
  %206 = extractvalue { i64, i64 } %call78, 1, !dbg !12271
  store i64 %206, i64* %205, align 8, !dbg !12271
  br label %return, !dbg !12272

return:                                           ; preds = %if.end77, %if.then49, %if.end39, %invalid, %if.end26, %if.then24, %if.end17, %if.then14, %if.then8
  %207 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12273
  %208 = load { i64, i64 }, { i64, i64 }* %207, align 8, !dbg !12273
  ret { i64, i64 } %208, !dbg !12273
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_rem(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !12274 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %zSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %bExp = alloca i32, align 4
  %expDiff = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %bSig0 = alloca i64, align 8
  %bSig1 = alloca i64, align 8
  %q = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %term2 = alloca i64, align 8
  %allZero = alloca i64, align 8
  %alternateASig0 = alloca i64, align 8
  %alternateASig1 = alloca i64, align 8
  %sigMean1 = alloca i64, align 8
  %sigMean0 = alloca i64, align 8
  %z = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !12275, metadata !DIExpression()), !dbg !12276
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !12277, metadata !DIExpression()), !dbg !12278
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !12279, metadata !DIExpression()), !dbg !12280
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !12281, metadata !DIExpression()), !dbg !12282
  call void @llvm.dbg.declare(metadata i32* %zSign, metadata !12283, metadata !DIExpression()), !dbg !12284
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !12285, metadata !DIExpression()), !dbg !12286
  call void @llvm.dbg.declare(metadata i32* %bExp, metadata !12287, metadata !DIExpression()), !dbg !12288
  call void @llvm.dbg.declare(metadata i32* %expDiff, metadata !12289, metadata !DIExpression()), !dbg !12290
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !12291, metadata !DIExpression()), !dbg !12292
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !12293, metadata !DIExpression()), !dbg !12294
  call void @llvm.dbg.declare(metadata i64* %bSig0, metadata !12295, metadata !DIExpression()), !dbg !12296
  call void @llvm.dbg.declare(metadata i64* %bSig1, metadata !12297, metadata !DIExpression()), !dbg !12298
  call void @llvm.dbg.declare(metadata i64* %q, metadata !12299, metadata !DIExpression()), !dbg !12300
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !12301, metadata !DIExpression()), !dbg !12302
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !12303, metadata !DIExpression()), !dbg !12304
  call void @llvm.dbg.declare(metadata i64* %term2, metadata !12305, metadata !DIExpression()), !dbg !12306
  call void @llvm.dbg.declare(metadata i64* %allZero, metadata !12307, metadata !DIExpression()), !dbg !12308
  call void @llvm.dbg.declare(metadata i64* %alternateASig0, metadata !12309, metadata !DIExpression()), !dbg !12310
  call void @llvm.dbg.declare(metadata i64* %alternateASig1, metadata !12311, metadata !DIExpression()), !dbg !12312
  call void @llvm.dbg.declare(metadata i64* %sigMean1, metadata !12313, metadata !DIExpression()), !dbg !12314
  call void @llvm.dbg.declare(metadata i64* %sigMean0, metadata !12315, metadata !DIExpression()), !dbg !12316
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !12317, metadata !DIExpression()), !dbg !12318
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12319
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !12319
  %8 = load i64, i64* %7, align 8, !dbg !12319
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !12319
  %10 = load i64, i64* %9, align 8, !dbg !12319
  %call = call i64 @extractFloat128Frac1(i64 %8, i64 %10), !dbg !12319
  store i64 %call, i64* %aSig1, align 8, !dbg !12320
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12321
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !12321
  %13 = load i64, i64* %12, align 8, !dbg !12321
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !12321
  %15 = load i64, i64* %14, align 8, !dbg !12321
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !12321
  store i64 %call1, i64* %aSig0, align 8, !dbg !12322
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12323
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !12323
  %18 = load i64, i64* %17, align 8, !dbg !12323
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !12323
  %20 = load i64, i64* %19, align 8, !dbg !12323
  %call2 = call i32 @extractFloat128Exp(i64 %18, i64 %20), !dbg !12323
  store i32 %call2, i32* %aExp, align 4, !dbg !12324
  %21 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12325
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !12325
  %23 = load i64, i64* %22, align 8, !dbg !12325
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !12325
  %25 = load i64, i64* %24, align 8, !dbg !12325
  %call3 = call i32 @extractFloat128Sign(i64 %23, i64 %25), !dbg !12325
  store i32 %call3, i32* %aSign, align 4, !dbg !12326
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12327
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !12327
  %28 = load i64, i64* %27, align 8, !dbg !12327
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !12327
  %30 = load i64, i64* %29, align 8, !dbg !12327
  %call4 = call i64 @extractFloat128Frac1(i64 %28, i64 %30), !dbg !12327
  store i64 %call4, i64* %bSig1, align 8, !dbg !12328
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12329
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !12329
  %33 = load i64, i64* %32, align 8, !dbg !12329
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !12329
  %35 = load i64, i64* %34, align 8, !dbg !12329
  %call5 = call i64 @extractFloat128Frac0(i64 %33, i64 %35), !dbg !12329
  store i64 %call5, i64* %bSig0, align 8, !dbg !12330
  %36 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12331
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !12331
  %38 = load i64, i64* %37, align 8, !dbg !12331
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !12331
  %40 = load i64, i64* %39, align 8, !dbg !12331
  %call6 = call i32 @extractFloat128Exp(i64 %38, i64 %40), !dbg !12331
  store i32 %call6, i32* %bExp, align 4, !dbg !12332
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12333
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !12333
  %43 = load i64, i64* %42, align 8, !dbg !12333
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !12333
  %45 = load i64, i64* %44, align 8, !dbg !12333
  %call7 = call i32 @extractFloat128Sign(i64 %43, i64 %45), !dbg !12333
  store i32 %call7, i32* %bSign, align 4, !dbg !12334
  %46 = load i32, i32* %aExp, align 4, !dbg !12335
  %cmp = icmp eq i32 %46, 32767, !dbg !12337
  br i1 %cmp, label %if.then, label %if.end13, !dbg !12338

if.then:                                          ; preds = %entry
  %47 = load i64, i64* %aSig0, align 8, !dbg !12339
  %48 = load i64, i64* %aSig1, align 8, !dbg !12342
  %or = or i64 %47, %48, !dbg !12343
  %tobool = icmp ne i64 %or, 0, !dbg !12343
  br i1 %tobool, label %if.then11, label %lor.lhs.false, !dbg !12344

lor.lhs.false:                                    ; preds = %if.then
  %49 = load i32, i32* %bExp, align 4, !dbg !12345
  %cmp8 = icmp eq i32 %49, 32767, !dbg !12346
  br i1 %cmp8, label %land.lhs.true, label %if.end, !dbg !12347

land.lhs.true:                                    ; preds = %lor.lhs.false
  %50 = load i64, i64* %bSig0, align 8, !dbg !12348
  %51 = load i64, i64* %bSig1, align 8, !dbg !12349
  %or9 = or i64 %50, %51, !dbg !12350
  %tobool10 = icmp ne i64 %or9, 0, !dbg !12350
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !12351

if.then11:                                        ; preds = %land.lhs.true, %if.then
  %52 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12352
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 0, !dbg !12352
  %54 = load i64, i64* %53, align 8, !dbg !12352
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 1, !dbg !12352
  %56 = load i64, i64* %55, align 8, !dbg !12352
  %57 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12352
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %57, i32 0, i32 0, !dbg !12352
  %59 = load i64, i64* %58, align 8, !dbg !12352
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %57, i32 0, i32 1, !dbg !12352
  %61 = load i64, i64* %60, align 8, !dbg !12352
  %call12 = call { i64, i64 } @propagateFloat128NaN(i64 %54, i64 %56, i64 %59, i64 %61), !dbg !12352
  %62 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12352
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 0, !dbg !12352
  %64 = extractvalue { i64, i64 } %call12, 0, !dbg !12352
  store i64 %64, i64* %63, align 8, !dbg !12352
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 1, !dbg !12352
  %66 = extractvalue { i64, i64 } %call12, 1, !dbg !12352
  store i64 %66, i64* %65, align 8, !dbg !12352
  br label %return, !dbg !12354

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %invalid, !dbg !12355

if.end13:                                         ; preds = %entry
  %67 = load i32, i32* %bExp, align 4, !dbg !12356
  %cmp14 = icmp eq i32 %67, 32767, !dbg !12358
  br i1 %cmp14, label %if.then15, label %if.end21, !dbg !12359

if.then15:                                        ; preds = %if.end13
  %68 = load i64, i64* %bSig0, align 8, !dbg !12360
  %69 = load i64, i64* %bSig1, align 8, !dbg !12363
  %or16 = or i64 %68, %69, !dbg !12364
  %tobool17 = icmp ne i64 %or16, 0, !dbg !12364
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !12365

if.then18:                                        ; preds = %if.then15
  %70 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12366
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %70, i32 0, i32 0, !dbg !12366
  %72 = load i64, i64* %71, align 8, !dbg !12366
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %70, i32 0, i32 1, !dbg !12366
  %74 = load i64, i64* %73, align 8, !dbg !12366
  %75 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12366
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 0, !dbg !12366
  %77 = load i64, i64* %76, align 8, !dbg !12366
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 1, !dbg !12366
  %79 = load i64, i64* %78, align 8, !dbg !12366
  %call19 = call { i64, i64 } @propagateFloat128NaN(i64 %72, i64 %74, i64 %77, i64 %79), !dbg !12366
  %80 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12366
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %80, i32 0, i32 0, !dbg !12366
  %82 = extractvalue { i64, i64 } %call19, 0, !dbg !12366
  store i64 %82, i64* %81, align 8, !dbg !12366
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %80, i32 0, i32 1, !dbg !12366
  %84 = extractvalue { i64, i64 } %call19, 1, !dbg !12366
  store i64 %84, i64* %83, align 8, !dbg !12366
  br label %return, !dbg !12367

if.end20:                                         ; preds = %if.then15
  %85 = bitcast %struct.float128* %retval to i8*, !dbg !12368
  %86 = bitcast %struct.float128* %a to i8*, !dbg !12368
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 16, i32 8, i1 false), !dbg !12368
  br label %return, !dbg !12369

if.end21:                                         ; preds = %if.end13
  %87 = load i32, i32* %bExp, align 4, !dbg !12370
  %cmp22 = icmp eq i32 %87, 0, !dbg !12372
  br i1 %cmp22, label %if.then23, label %if.end28, !dbg !12373

if.then23:                                        ; preds = %if.end21
  %88 = load i64, i64* %bSig0, align 8, !dbg !12374
  %89 = load i64, i64* %bSig1, align 8, !dbg !12377
  %or24 = or i64 %88, %89, !dbg !12378
  %cmp25 = icmp eq i64 %or24, 0, !dbg !12379
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !12380

if.then26:                                        ; preds = %if.then23
  br label %invalid, !dbg !12381

invalid:                                          ; preds = %if.then26, %if.end
  call void @float_raise(i32 16), !dbg !12382
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !12384
  store i64 -1, i64* %low, align 8, !dbg !12385
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !12386
  store i64 9223372036854775807, i64* %high, align 8, !dbg !12387
  %90 = bitcast %struct.float128* %retval to i8*, !dbg !12388
  %91 = bitcast %struct.float128* %z to i8*, !dbg !12388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* %91, i64 16, i32 8, i1 false), !dbg !12388
  br label %return, !dbg !12389

if.end27:                                         ; preds = %if.then23
  %92 = load i64, i64* %bSig0, align 8, !dbg !12390
  %93 = load i64, i64* %bSig1, align 8, !dbg !12391
  call void @normalizeFloat128Subnormal(i64 %92, i64 %93, i32* %bExp, i64* %bSig0, i64* %bSig1), !dbg !12392
  br label %if.end28, !dbg !12393

if.end28:                                         ; preds = %if.end27, %if.end21
  %94 = load i32, i32* %aExp, align 4, !dbg !12394
  %cmp29 = icmp eq i32 %94, 0, !dbg !12396
  br i1 %cmp29, label %if.then30, label %if.end35, !dbg !12397

if.then30:                                        ; preds = %if.end28
  %95 = load i64, i64* %aSig0, align 8, !dbg !12398
  %96 = load i64, i64* %aSig1, align 8, !dbg !12401
  %or31 = or i64 %95, %96, !dbg !12402
  %cmp32 = icmp eq i64 %or31, 0, !dbg !12403
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !12404

if.then33:                                        ; preds = %if.then30
  %97 = bitcast %struct.float128* %retval to i8*, !dbg !12405
  %98 = bitcast %struct.float128* %a to i8*, !dbg !12405
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 16, i32 8, i1 false), !dbg !12405
  br label %return, !dbg !12406

if.end34:                                         ; preds = %if.then30
  %99 = load i64, i64* %aSig0, align 8, !dbg !12407
  %100 = load i64, i64* %aSig1, align 8, !dbg !12408
  call void @normalizeFloat128Subnormal(i64 %99, i64 %100, i32* %aExp, i64* %aSig0, i64* %aSig1), !dbg !12409
  br label %if.end35, !dbg !12410

if.end35:                                         ; preds = %if.end34, %if.end28
  %101 = load i32, i32* %aExp, align 4, !dbg !12411
  %102 = load i32, i32* %bExp, align 4, !dbg !12412
  %sub = sub nsw i32 %101, %102, !dbg !12413
  store i32 %sub, i32* %expDiff, align 4, !dbg !12414
  %103 = load i32, i32* %expDiff, align 4, !dbg !12415
  %cmp36 = icmp slt i32 %103, -1, !dbg !12417
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !12418

if.then37:                                        ; preds = %if.end35
  %104 = bitcast %struct.float128* %retval to i8*, !dbg !12419
  %105 = bitcast %struct.float128* %a to i8*, !dbg !12419
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %105, i64 16, i32 8, i1 false), !dbg !12419
  br label %return, !dbg !12420

if.end38:                                         ; preds = %if.end35
  %106 = load i64, i64* %aSig0, align 8, !dbg !12421
  %or39 = or i64 %106, 281474976710656, !dbg !12422
  %107 = load i64, i64* %aSig1, align 8, !dbg !12423
  %108 = load i32, i32* %expDiff, align 4, !dbg !12424
  %cmp40 = icmp slt i32 %108, 0, !dbg !12425
  %conv = zext i1 %cmp40 to i32, !dbg !12425
  %sub41 = sub nsw i32 15, %conv, !dbg !12426
  call void @shortShift128Left(i64 %or39, i64 %107, i32 %sub41, i64* %aSig0, i64* %aSig1), !dbg !12427
  %109 = load i64, i64* %bSig0, align 8, !dbg !12428
  %or42 = or i64 %109, 281474976710656, !dbg !12429
  %110 = load i64, i64* %bSig1, align 8, !dbg !12430
  call void @shortShift128Left(i64 %or42, i64 %110, i32 15, i64* %bSig0, i64* %bSig1), !dbg !12431
  %111 = load i64, i64* %bSig0, align 8, !dbg !12432
  %112 = load i64, i64* %bSig1, align 8, !dbg !12433
  %113 = load i64, i64* %aSig0, align 8, !dbg !12434
  %114 = load i64, i64* %aSig1, align 8, !dbg !12435
  %call43 = call zeroext i1 @le128(i64 %111, i64 %112, i64 %113, i64 %114), !dbg !12436
  %conv44 = zext i1 %call43 to i64, !dbg !12436
  store i64 %conv44, i64* %q, align 8, !dbg !12437
  %115 = load i64, i64* %q, align 8, !dbg !12438
  %tobool45 = icmp ne i64 %115, 0, !dbg !12438
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !12440

if.then46:                                        ; preds = %if.end38
  %116 = load i64, i64* %aSig0, align 8, !dbg !12441
  %117 = load i64, i64* %aSig1, align 8, !dbg !12442
  %118 = load i64, i64* %bSig0, align 8, !dbg !12443
  %119 = load i64, i64* %bSig1, align 8, !dbg !12444
  call void @sub128(i64 %116, i64 %117, i64 %118, i64 %119, i64* %aSig0, i64* %aSig1), !dbg !12445
  br label %if.end47, !dbg !12445

if.end47:                                         ; preds = %if.then46, %if.end38
  %120 = load i32, i32* %expDiff, align 4, !dbg !12446
  %sub48 = sub nsw i32 %120, 64, !dbg !12446
  store i32 %sub48, i32* %expDiff, align 4, !dbg !12446
  br label %while.cond, !dbg !12447

while.cond:                                       ; preds = %cond.end, %if.end47
  %121 = load i32, i32* %expDiff, align 4, !dbg !12448
  %cmp49 = icmp slt i32 0, %121, !dbg !12449
  br i1 %cmp49, label %while.body, label %while.end, !dbg !12447

while.body:                                       ; preds = %while.cond
  %122 = load i64, i64* %aSig0, align 8, !dbg !12450
  %123 = load i64, i64* %aSig1, align 8, !dbg !12452
  %124 = load i64, i64* %bSig0, align 8, !dbg !12453
  %call51 = call i64 @estimateDiv128To64(i64 %122, i64 %123, i64 %124), !dbg !12454
  store i64 %call51, i64* %q, align 8, !dbg !12455
  %125 = load i64, i64* %q, align 8, !dbg !12456
  %cmp52 = icmp ult i64 4, %125, !dbg !12457
  br i1 %cmp52, label %cond.true, label %cond.false, !dbg !12458

cond.true:                                        ; preds = %while.body
  %126 = load i64, i64* %q, align 8, !dbg !12459
  %sub54 = sub i64 %126, 4, !dbg !12460
  br label %cond.end, !dbg !12458

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !12458

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub54, %cond.true ], [ 0, %cond.false ], !dbg !12458
  store i64 %cond, i64* %q, align 8, !dbg !12461
  %127 = load i64, i64* %bSig0, align 8, !dbg !12462
  %128 = load i64, i64* %bSig1, align 8, !dbg !12463
  %129 = load i64, i64* %q, align 8, !dbg !12464
  call void @mul128By64To192(i64 %127, i64 %128, i64 %129, i64* %term0, i64* %term1, i64* %term2), !dbg !12465
  %130 = load i64, i64* %term0, align 8, !dbg !12466
  %131 = load i64, i64* %term1, align 8, !dbg !12467
  %132 = load i64, i64* %term2, align 8, !dbg !12468
  call void @shortShift192Left(i64 %130, i64 %131, i64 %132, i32 61, i64* %term1, i64* %term2, i64* %allZero), !dbg !12469
  %133 = load i64, i64* %aSig0, align 8, !dbg !12470
  %134 = load i64, i64* %aSig1, align 8, !dbg !12471
  call void @shortShift128Left(i64 %133, i64 %134, i32 61, i64* %aSig0, i64* %allZero), !dbg !12472
  %135 = load i64, i64* %aSig0, align 8, !dbg !12473
  %136 = load i64, i64* %term1, align 8, !dbg !12474
  %137 = load i64, i64* %term2, align 8, !dbg !12475
  call void @sub128(i64 %135, i64 0, i64 %136, i64 %137, i64* %aSig0, i64* %aSig1), !dbg !12476
  %138 = load i32, i32* %expDiff, align 4, !dbg !12477
  %sub55 = sub nsw i32 %138, 61, !dbg !12477
  store i32 %sub55, i32* %expDiff, align 4, !dbg !12477
  br label %while.cond, !dbg !12447, !llvm.loop !12478

while.end:                                        ; preds = %while.cond
  %139 = load i32, i32* %expDiff, align 4, !dbg !12480
  %cmp56 = icmp slt i32 -64, %139, !dbg !12482
  br i1 %cmp56, label %if.then58, label %if.else73, !dbg !12483

if.then58:                                        ; preds = %while.end
  %140 = load i64, i64* %aSig0, align 8, !dbg !12484
  %141 = load i64, i64* %aSig1, align 8, !dbg !12486
  %142 = load i64, i64* %bSig0, align 8, !dbg !12487
  %call59 = call i64 @estimateDiv128To64(i64 %140, i64 %141, i64 %142), !dbg !12488
  store i64 %call59, i64* %q, align 8, !dbg !12489
  %143 = load i64, i64* %q, align 8, !dbg !12490
  %cmp60 = icmp ult i64 4, %143, !dbg !12491
  br i1 %cmp60, label %cond.true62, label %cond.false64, !dbg !12492

cond.true62:                                      ; preds = %if.then58
  %144 = load i64, i64* %q, align 8, !dbg !12493
  %sub63 = sub i64 %144, 4, !dbg !12494
  br label %cond.end65, !dbg !12492

cond.false64:                                     ; preds = %if.then58
  br label %cond.end65, !dbg !12492

cond.end65:                                       ; preds = %cond.false64, %cond.true62
  %cond66 = phi i64 [ %sub63, %cond.true62 ], [ 0, %cond.false64 ], !dbg !12492
  store i64 %cond66, i64* %q, align 8, !dbg !12495
  %145 = load i32, i32* %expDiff, align 4, !dbg !12496
  %sub67 = sub nsw i32 0, %145, !dbg !12497
  %146 = load i64, i64* %q, align 8, !dbg !12498
  %sh_prom = zext i32 %sub67 to i64, !dbg !12498
  %shr = lshr i64 %146, %sh_prom, !dbg !12498
  store i64 %shr, i64* %q, align 8, !dbg !12498
  %147 = load i64, i64* %bSig0, align 8, !dbg !12499
  %148 = load i64, i64* %bSig1, align 8, !dbg !12500
  call void @shift128Right(i64 %147, i64 %148, i32 12, i64* %bSig0, i64* %bSig1), !dbg !12501
  %149 = load i32, i32* %expDiff, align 4, !dbg !12502
  %add = add nsw i32 %149, 52, !dbg !12502
  store i32 %add, i32* %expDiff, align 4, !dbg !12502
  %150 = load i32, i32* %expDiff, align 4, !dbg !12503
  %cmp68 = icmp slt i32 %150, 0, !dbg !12505
  br i1 %cmp68, label %if.then70, label %if.else, !dbg !12506

if.then70:                                        ; preds = %cond.end65
  %151 = load i64, i64* %aSig0, align 8, !dbg !12507
  %152 = load i64, i64* %aSig1, align 8, !dbg !12509
  %153 = load i32, i32* %expDiff, align 4, !dbg !12510
  %sub71 = sub nsw i32 0, %153, !dbg !12511
  call void @shift128Right(i64 %151, i64 %152, i32 %sub71, i64* %aSig0, i64* %aSig1), !dbg !12512
  br label %if.end72, !dbg !12513

if.else:                                          ; preds = %cond.end65
  %154 = load i64, i64* %aSig0, align 8, !dbg !12514
  %155 = load i64, i64* %aSig1, align 8, !dbg !12516
  %156 = load i32, i32* %expDiff, align 4, !dbg !12517
  call void @shortShift128Left(i64 %154, i64 %155, i32 %156, i64* %aSig0, i64* %aSig1), !dbg !12518
  br label %if.end72

if.end72:                                         ; preds = %if.else, %if.then70
  %157 = load i64, i64* %bSig0, align 8, !dbg !12519
  %158 = load i64, i64* %bSig1, align 8, !dbg !12520
  %159 = load i64, i64* %q, align 8, !dbg !12521
  call void @mul128By64To192(i64 %157, i64 %158, i64 %159, i64* %term0, i64* %term1, i64* %term2), !dbg !12522
  %160 = load i64, i64* %aSig0, align 8, !dbg !12523
  %161 = load i64, i64* %aSig1, align 8, !dbg !12524
  %162 = load i64, i64* %term1, align 8, !dbg !12525
  %163 = load i64, i64* %term2, align 8, !dbg !12526
  call void @sub128(i64 %160, i64 %161, i64 %162, i64 %163, i64* %aSig0, i64* %aSig1), !dbg !12527
  br label %if.end74, !dbg !12528

if.else73:                                        ; preds = %while.end
  %164 = load i64, i64* %aSig0, align 8, !dbg !12529
  %165 = load i64, i64* %aSig1, align 8, !dbg !12531
  call void @shift128Right(i64 %164, i64 %165, i32 12, i64* %aSig0, i64* %aSig1), !dbg !12532
  %166 = load i64, i64* %bSig0, align 8, !dbg !12533
  %167 = load i64, i64* %bSig1, align 8, !dbg !12534
  call void @shift128Right(i64 %166, i64 %167, i32 12, i64* %bSig0, i64* %bSig1), !dbg !12535
  br label %if.end74

if.end74:                                         ; preds = %if.else73, %if.end72
  br label %do.body, !dbg !12536, !llvm.loop !12537

do.body:                                          ; preds = %do.cond, %if.end74
  %168 = load i64, i64* %aSig0, align 8, !dbg !12539
  store i64 %168, i64* %alternateASig0, align 8, !dbg !12541
  %169 = load i64, i64* %aSig1, align 8, !dbg !12542
  store i64 %169, i64* %alternateASig1, align 8, !dbg !12543
  %170 = load i64, i64* %q, align 8, !dbg !12544
  %inc = add i64 %170, 1, !dbg !12544
  store i64 %inc, i64* %q, align 8, !dbg !12544
  %171 = load i64, i64* %aSig0, align 8, !dbg !12545
  %172 = load i64, i64* %aSig1, align 8, !dbg !12546
  %173 = load i64, i64* %bSig0, align 8, !dbg !12547
  %174 = load i64, i64* %bSig1, align 8, !dbg !12548
  call void @sub128(i64 %171, i64 %172, i64 %173, i64 %174, i64* %aSig0, i64* %aSig1), !dbg !12549
  br label %do.cond, !dbg !12550

do.cond:                                          ; preds = %do.body
  %175 = load i64, i64* %aSig0, align 8, !dbg !12551
  %cmp75 = icmp sle i64 0, %175, !dbg !12552
  br i1 %cmp75, label %do.body, label %do.end, !dbg !12550, !llvm.loop !12537

do.end:                                           ; preds = %do.cond
  %176 = load i64, i64* %aSig0, align 8, !dbg !12553
  %177 = load i64, i64* %aSig1, align 8, !dbg !12554
  %178 = load i64, i64* %alternateASig0, align 8, !dbg !12555
  %179 = load i64, i64* %alternateASig1, align 8, !dbg !12556
  call void @add128(i64 %176, i64 %177, i64 %178, i64 %179, i64* %sigMean0, i64* %sigMean1), !dbg !12557
  %180 = load i64, i64* %sigMean0, align 8, !dbg !12558
  %cmp77 = icmp slt i64 %180, 0, !dbg !12560
  br i1 %cmp77, label %if.then85, label %lor.lhs.false79, !dbg !12561

lor.lhs.false79:                                  ; preds = %do.end
  %181 = load i64, i64* %sigMean0, align 8, !dbg !12562
  %182 = load i64, i64* %sigMean1, align 8, !dbg !12563
  %or80 = or i64 %181, %182, !dbg !12564
  %cmp81 = icmp eq i64 %or80, 0, !dbg !12565
  br i1 %cmp81, label %land.lhs.true83, label %if.end86, !dbg !12566

land.lhs.true83:                                  ; preds = %lor.lhs.false79
  %183 = load i64, i64* %q, align 8, !dbg !12567
  %and = and i64 %183, 1, !dbg !12568
  %tobool84 = icmp ne i64 %and, 0, !dbg !12568
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !12569

if.then85:                                        ; preds = %land.lhs.true83, %do.end
  %184 = load i64, i64* %alternateASig0, align 8, !dbg !12570
  store i64 %184, i64* %aSig0, align 8, !dbg !12572
  %185 = load i64, i64* %alternateASig1, align 8, !dbg !12573
  store i64 %185, i64* %aSig1, align 8, !dbg !12574
  br label %if.end86, !dbg !12575

if.end86:                                         ; preds = %if.then85, %land.lhs.true83, %lor.lhs.false79
  %186 = load i64, i64* %aSig0, align 8, !dbg !12576
  %cmp87 = icmp slt i64 %186, 0, !dbg !12577
  %conv88 = zext i1 %cmp87 to i32, !dbg !12577
  store i32 %conv88, i32* %zSign, align 4, !dbg !12578
  %187 = load i32, i32* %zSign, align 4, !dbg !12579
  %tobool89 = icmp ne i32 %187, 0, !dbg !12579
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !12581

if.then90:                                        ; preds = %if.end86
  %188 = load i64, i64* %aSig0, align 8, !dbg !12582
  %189 = load i64, i64* %aSig1, align 8, !dbg !12583
  call void @sub128(i64 0, i64 0, i64 %188, i64 %189, i64* %aSig0, i64* %aSig1), !dbg !12584
  br label %if.end91, !dbg !12584

if.end91:                                         ; preds = %if.then90, %if.end86
  %190 = load i32, i32* %aSign, align 4, !dbg !12585
  %191 = load i32, i32* %zSign, align 4, !dbg !12586
  %xor = xor i32 %190, %191, !dbg !12587
  %192 = load i32, i32* %bExp, align 4, !dbg !12588
  %sub92 = sub nsw i32 %192, 4, !dbg !12589
  %193 = load i64, i64* %aSig0, align 8, !dbg !12590
  %194 = load i64, i64* %aSig1, align 8, !dbg !12591
  %call93 = call { i64, i64 } @normalizeRoundAndPackFloat128(i32 %xor, i32 %sub92, i64 %193, i64 %194), !dbg !12592
  %195 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12592
  %196 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %195, i32 0, i32 0, !dbg !12592
  %197 = extractvalue { i64, i64 } %call93, 0, !dbg !12592
  store i64 %197, i64* %196, align 8, !dbg !12592
  %198 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %195, i32 0, i32 1, !dbg !12592
  %199 = extractvalue { i64, i64 } %call93, 1, !dbg !12592
  store i64 %199, i64* %198, align 8, !dbg !12592
  br label %return, !dbg !12593

return:                                           ; preds = %if.end91, %if.then37, %if.then33, %invalid, %if.end20, %if.then18, %if.then11
  %200 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12594
  %201 = load { i64, i64 }, { i64, i64 }* %200, align 8, !dbg !12594
  ret { i64, i64 } %201, !dbg !12594
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @normalizeRoundAndPackFloat128(i32 %zSign, i32 %zExp, i64 %zSig0, i64 %zSig1) #0 !dbg !12595 {
entry:
  %retval = alloca %struct.float128, align 8
  %zSign.addr = alloca i32, align 4
  %zExp.addr = alloca i32, align 4
  %zSig0.addr = alloca i64, align 8
  %zSig1.addr = alloca i64, align 8
  %shiftCount = alloca i32, align 4
  %zSig2 = alloca i64, align 8
  store i32 %zSign, i32* %zSign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zSign.addr, metadata !12596, metadata !DIExpression()), !dbg !12597
  store i32 %zExp, i32* %zExp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zExp.addr, metadata !12598, metadata !DIExpression()), !dbg !12599
  store i64 %zSig0, i64* %zSig0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig0.addr, metadata !12600, metadata !DIExpression()), !dbg !12601
  store i64 %zSig1, i64* %zSig1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %zSig1.addr, metadata !12602, metadata !DIExpression()), !dbg !12603
  call void @llvm.dbg.declare(metadata i32* %shiftCount, metadata !12604, metadata !DIExpression()), !dbg !12605
  call void @llvm.dbg.declare(metadata i64* %zSig2, metadata !12606, metadata !DIExpression()), !dbg !12607
  %0 = load i64, i64* %zSig0.addr, align 8, !dbg !12608
  %cmp = icmp eq i64 %0, 0, !dbg !12610
  br i1 %cmp, label %if.then, label %if.end, !dbg !12611

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %zSig1.addr, align 8, !dbg !12612
  store i64 %1, i64* %zSig0.addr, align 8, !dbg !12614
  store i64 0, i64* %zSig1.addr, align 8, !dbg !12615
  %2 = load i32, i32* %zExp.addr, align 4, !dbg !12616
  %sub = sub nsw i32 %2, 64, !dbg !12616
  store i32 %sub, i32* %zExp.addr, align 4, !dbg !12616
  br label %if.end, !dbg !12617

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %zSig0.addr, align 8, !dbg !12618
  %call = call i32 @countLeadingZeros64(i64 %3), !dbg !12619
  %sub1 = sub nsw i32 %call, 15, !dbg !12620
  store i32 %sub1, i32* %shiftCount, align 4, !dbg !12621
  %4 = load i32, i32* %shiftCount, align 4, !dbg !12622
  %cmp2 = icmp sle i32 0, %4, !dbg !12624
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !12625

if.then3:                                         ; preds = %if.end
  store i64 0, i64* %zSig2, align 8, !dbg !12626
  %5 = load i64, i64* %zSig0.addr, align 8, !dbg !12628
  %6 = load i64, i64* %zSig1.addr, align 8, !dbg !12629
  %7 = load i32, i32* %shiftCount, align 4, !dbg !12630
  call void @shortShift128Left(i64 %5, i64 %6, i32 %7, i64* %zSig0.addr, i64* %zSig1.addr), !dbg !12631
  br label %if.end5, !dbg !12632

if.else:                                          ; preds = %if.end
  %8 = load i64, i64* %zSig0.addr, align 8, !dbg !12633
  %9 = load i64, i64* %zSig1.addr, align 8, !dbg !12635
  %10 = load i32, i32* %shiftCount, align 4, !dbg !12636
  %sub4 = sub nsw i32 0, %10, !dbg !12637
  call void @shift128ExtraRightJamming(i64 %8, i64 %9, i64 0, i32 %sub4, i64* %zSig0.addr, i64* %zSig1.addr, i64* %zSig2), !dbg !12638
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  %11 = load i32, i32* %shiftCount, align 4, !dbg !12639
  %12 = load i32, i32* %zExp.addr, align 4, !dbg !12640
  %sub6 = sub nsw i32 %12, %11, !dbg !12640
  store i32 %sub6, i32* %zExp.addr, align 4, !dbg !12640
  %13 = load i32, i32* %zSign.addr, align 4, !dbg !12641
  %14 = load i32, i32* %zExp.addr, align 4, !dbg !12642
  %15 = load i64, i64* %zSig0.addr, align 8, !dbg !12643
  %16 = load i64, i64* %zSig1.addr, align 8, !dbg !12644
  %17 = load i64, i64* %zSig2, align 8, !dbg !12645
  %call7 = call { i64, i64 } @roundAndPackFloat128(i32 %13, i32 %14, i64 %15, i64 %16, i64 %17), !dbg !12646
  %18 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12646
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !12646
  %20 = extractvalue { i64, i64 } %call7, 0, !dbg !12646
  store i64 %20, i64* %19, align 8, !dbg !12646
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !12646
  %22 = extractvalue { i64, i64 } %call7, 1, !dbg !12646
  store i64 %22, i64* %21, align 8, !dbg !12646
  %23 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12647
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8, !dbg !12647
  ret { i64, i64 } %24, !dbg !12647
}

; Function Attrs: noinline nounwind optnone uwtable
define { i64, i64 } @float128_sqrt(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !12648 {
entry:
  %retval = alloca %struct.float128, align 8
  %a = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %aExp = alloca i32, align 4
  %zExp = alloca i32, align 4
  %aSig0 = alloca i64, align 8
  %aSig1 = alloca i64, align 8
  %zSig0 = alloca i64, align 8
  %zSig1 = alloca i64, align 8
  %zSig2 = alloca i64, align 8
  %doubleZSig0 = alloca i64, align 8
  %rem0 = alloca i64, align 8
  %rem1 = alloca i64, align 8
  %rem2 = alloca i64, align 8
  %rem3 = alloca i64, align 8
  %term0 = alloca i64, align 8
  %term1 = alloca i64, align 8
  %term2 = alloca i64, align 8
  %term3 = alloca i64, align 8
  %z = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !12649, metadata !DIExpression()), !dbg !12650
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !12651, metadata !DIExpression()), !dbg !12652
  call void @llvm.dbg.declare(metadata i32* %aExp, metadata !12653, metadata !DIExpression()), !dbg !12654
  call void @llvm.dbg.declare(metadata i32* %zExp, metadata !12655, metadata !DIExpression()), !dbg !12656
  call void @llvm.dbg.declare(metadata i64* %aSig0, metadata !12657, metadata !DIExpression()), !dbg !12658
  call void @llvm.dbg.declare(metadata i64* %aSig1, metadata !12659, metadata !DIExpression()), !dbg !12660
  call void @llvm.dbg.declare(metadata i64* %zSig0, metadata !12661, metadata !DIExpression()), !dbg !12662
  call void @llvm.dbg.declare(metadata i64* %zSig1, metadata !12663, metadata !DIExpression()), !dbg !12664
  call void @llvm.dbg.declare(metadata i64* %zSig2, metadata !12665, metadata !DIExpression()), !dbg !12666
  call void @llvm.dbg.declare(metadata i64* %doubleZSig0, metadata !12667, metadata !DIExpression()), !dbg !12668
  call void @llvm.dbg.declare(metadata i64* %rem0, metadata !12669, metadata !DIExpression()), !dbg !12670
  call void @llvm.dbg.declare(metadata i64* %rem1, metadata !12671, metadata !DIExpression()), !dbg !12672
  call void @llvm.dbg.declare(metadata i64* %rem2, metadata !12673, metadata !DIExpression()), !dbg !12674
  call void @llvm.dbg.declare(metadata i64* %rem3, metadata !12675, metadata !DIExpression()), !dbg !12676
  call void @llvm.dbg.declare(metadata i64* %term0, metadata !12677, metadata !DIExpression()), !dbg !12678
  call void @llvm.dbg.declare(metadata i64* %term1, metadata !12679, metadata !DIExpression()), !dbg !12680
  call void @llvm.dbg.declare(metadata i64* %term2, metadata !12681, metadata !DIExpression()), !dbg !12682
  call void @llvm.dbg.declare(metadata i64* %term3, metadata !12683, metadata !DIExpression()), !dbg !12684
  call void @llvm.dbg.declare(metadata %struct.float128* %z, metadata !12685, metadata !DIExpression()), !dbg !12686
  %3 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12687
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !12687
  %5 = load i64, i64* %4, align 8, !dbg !12687
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !12687
  %7 = load i64, i64* %6, align 8, !dbg !12687
  %call = call i64 @extractFloat128Frac1(i64 %5, i64 %7), !dbg !12687
  store i64 %call, i64* %aSig1, align 8, !dbg !12688
  %8 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12689
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !12689
  %10 = load i64, i64* %9, align 8, !dbg !12689
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !12689
  %12 = load i64, i64* %11, align 8, !dbg !12689
  %call1 = call i64 @extractFloat128Frac0(i64 %10, i64 %12), !dbg !12689
  store i64 %call1, i64* %aSig0, align 8, !dbg !12690
  %13 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12691
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !12691
  %15 = load i64, i64* %14, align 8, !dbg !12691
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !12691
  %17 = load i64, i64* %16, align 8, !dbg !12691
  %call2 = call i32 @extractFloat128Exp(i64 %15, i64 %17), !dbg !12691
  store i32 %call2, i32* %aExp, align 4, !dbg !12692
  %18 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12693
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !12693
  %20 = load i64, i64* %19, align 8, !dbg !12693
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !12693
  %22 = load i64, i64* %21, align 8, !dbg !12693
  %call3 = call i32 @extractFloat128Sign(i64 %20, i64 %22), !dbg !12693
  store i32 %call3, i32* %aSign, align 4, !dbg !12694
  %23 = load i32, i32* %aExp, align 4, !dbg !12695
  %cmp = icmp eq i32 %23, 32767, !dbg !12697
  br i1 %cmp, label %if.then, label %if.end9, !dbg !12698

if.then:                                          ; preds = %entry
  %24 = load i64, i64* %aSig0, align 8, !dbg !12699
  %25 = load i64, i64* %aSig1, align 8, !dbg !12702
  %or = or i64 %24, %25, !dbg !12703
  %tobool = icmp ne i64 %or, 0, !dbg !12703
  br i1 %tobool, label %if.then4, label %if.end, !dbg !12704

if.then4:                                         ; preds = %if.then
  %26 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12705
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !12705
  %28 = load i64, i64* %27, align 8, !dbg !12705
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !12705
  %30 = load i64, i64* %29, align 8, !dbg !12705
  %31 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12705
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !12705
  %33 = load i64, i64* %32, align 8, !dbg !12705
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !12705
  %35 = load i64, i64* %34, align 8, !dbg !12705
  %call5 = call { i64, i64 } @propagateFloat128NaN(i64 %28, i64 %30, i64 %33, i64 %35), !dbg !12705
  %36 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12705
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !12705
  %38 = extractvalue { i64, i64 } %call5, 0, !dbg !12705
  store i64 %38, i64* %37, align 8, !dbg !12705
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !12705
  %40 = extractvalue { i64, i64 } %call5, 1, !dbg !12705
  store i64 %40, i64* %39, align 8, !dbg !12705
  br label %return, !dbg !12706

if.end:                                           ; preds = %if.then
  %41 = load i32, i32* %aSign, align 4, !dbg !12707
  %tobool6 = icmp ne i32 %41, 0, !dbg !12707
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !12709

if.then7:                                         ; preds = %if.end
  %42 = bitcast %struct.float128* %retval to i8*, !dbg !12710
  %43 = bitcast %struct.float128* %a to i8*, !dbg !12710
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 16, i32 8, i1 false), !dbg !12710
  br label %return, !dbg !12711

if.end8:                                          ; preds = %if.end
  br label %invalid, !dbg !12712

if.end9:                                          ; preds = %entry
  %44 = load i32, i32* %aSign, align 4, !dbg !12713
  %tobool10 = icmp ne i32 %44, 0, !dbg !12713
  br i1 %tobool10, label %if.then11, label %if.end18, !dbg !12715

if.then11:                                        ; preds = %if.end9
  %45 = load i32, i32* %aExp, align 4, !dbg !12716
  %conv = sext i32 %45 to i64, !dbg !12716
  %46 = load i64, i64* %aSig0, align 8, !dbg !12719
  %or12 = or i64 %conv, %46, !dbg !12720
  %47 = load i64, i64* %aSig1, align 8, !dbg !12721
  %or13 = or i64 %or12, %47, !dbg !12722
  %cmp14 = icmp eq i64 %or13, 0, !dbg !12723
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !12724

if.then16:                                        ; preds = %if.then11
  %48 = bitcast %struct.float128* %retval to i8*, !dbg !12725
  %49 = bitcast %struct.float128* %a to i8*, !dbg !12725
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 16, i32 8, i1 false), !dbg !12725
  br label %return, !dbg !12726

if.end17:                                         ; preds = %if.then11
  br label %invalid, !dbg !12727

invalid:                                          ; preds = %if.end17, %if.end8
  call void @float_raise(i32 16), !dbg !12728
  %low = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 1, !dbg !12729
  store i64 -1, i64* %low, align 8, !dbg !12730
  %high = getelementptr inbounds %struct.float128, %struct.float128* %z, i32 0, i32 0, !dbg !12731
  store i64 9223372036854775807, i64* %high, align 8, !dbg !12732
  %50 = bitcast %struct.float128* %retval to i8*, !dbg !12733
  %51 = bitcast %struct.float128* %z to i8*, !dbg !12733
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false), !dbg !12733
  br label %return, !dbg !12734

if.end18:                                         ; preds = %if.end9
  %52 = load i32, i32* %aExp, align 4, !dbg !12735
  %cmp19 = icmp eq i32 %52, 0, !dbg !12737
  br i1 %cmp19, label %if.then21, label %if.end28, !dbg !12738

if.then21:                                        ; preds = %if.end18
  %53 = load i64, i64* %aSig0, align 8, !dbg !12739
  %54 = load i64, i64* %aSig1, align 8, !dbg !12742
  %or22 = or i64 %53, %54, !dbg !12743
  %cmp23 = icmp eq i64 %or22, 0, !dbg !12744
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !12745

if.then25:                                        ; preds = %if.then21
  %call26 = call { i64, i64 } @packFloat128(i32 0, i32 0, i64 0, i64 0), !dbg !12746
  %55 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12746
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 0, !dbg !12746
  %57 = extractvalue { i64, i64 } %call26, 0, !dbg !12746
  store i64 %57, i64* %56, align 8, !dbg !12746
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 1, !dbg !12746
  %59 = extractvalue { i64, i64 } %call26, 1, !dbg !12746
  store i64 %59, i64* %58, align 8, !dbg !12746
  br label %return, !dbg !12747

if.end27:                                         ; preds = %if.then21
  %60 = load i64, i64* %aSig0, align 8, !dbg !12748
  %61 = load i64, i64* %aSig1, align 8, !dbg !12749
  call void @normalizeFloat128Subnormal(i64 %60, i64 %61, i32* %aExp, i64* %aSig0, i64* %aSig1), !dbg !12750
  br label %if.end28, !dbg !12751

if.end28:                                         ; preds = %if.end27, %if.end18
  %62 = load i32, i32* %aExp, align 4, !dbg !12752
  %sub = sub nsw i32 %62, 16383, !dbg !12753
  %shr = ashr i32 %sub, 1, !dbg !12754
  %add = add nsw i32 %shr, 16382, !dbg !12755
  store i32 %add, i32* %zExp, align 4, !dbg !12756
  %63 = load i64, i64* %aSig0, align 8, !dbg !12757
  %or29 = or i64 %63, 281474976710656, !dbg !12757
  store i64 %or29, i64* %aSig0, align 8, !dbg !12757
  %64 = load i32, i32* %aExp, align 4, !dbg !12758
  %65 = load i64, i64* %aSig0, align 8, !dbg !12759
  %shr30 = lshr i64 %65, 17, !dbg !12760
  %conv31 = trunc i64 %shr30 to i32, !dbg !12759
  %call32 = call i32 @estimateSqrt32(i32 %64, i32 %conv31), !dbg !12761
  %conv33 = zext i32 %call32 to i64, !dbg !12761
  store i64 %conv33, i64* %zSig0, align 8, !dbg !12762
  %66 = load i64, i64* %aSig0, align 8, !dbg !12763
  %67 = load i64, i64* %aSig1, align 8, !dbg !12764
  %68 = load i32, i32* %aExp, align 4, !dbg !12765
  %and = and i32 %68, 1, !dbg !12766
  %sub34 = sub nsw i32 13, %and, !dbg !12767
  call void @shortShift128Left(i64 %66, i64 %67, i32 %sub34, i64* %aSig0, i64* %aSig1), !dbg !12768
  %69 = load i64, i64* %aSig0, align 8, !dbg !12769
  %70 = load i64, i64* %aSig1, align 8, !dbg !12770
  %71 = load i64, i64* %zSig0, align 8, !dbg !12771
  %shl = shl i64 %71, 32, !dbg !12772
  %call35 = call i64 @estimateDiv128To64(i64 %69, i64 %70, i64 %shl), !dbg !12773
  %72 = load i64, i64* %zSig0, align 8, !dbg !12774
  %shl36 = shl i64 %72, 30, !dbg !12775
  %add37 = add i64 %call35, %shl36, !dbg !12776
  store i64 %add37, i64* %zSig0, align 8, !dbg !12777
  %73 = load i64, i64* %zSig0, align 8, !dbg !12778
  %shl38 = shl i64 %73, 1, !dbg !12779
  store i64 %shl38, i64* %doubleZSig0, align 8, !dbg !12780
  %74 = load i64, i64* %zSig0, align 8, !dbg !12781
  %75 = load i64, i64* %zSig0, align 8, !dbg !12782
  call void @mul64To128(i64 %74, i64 %75, i64* %term0, i64* %term1), !dbg !12783
  %76 = load i64, i64* %aSig0, align 8, !dbg !12784
  %77 = load i64, i64* %aSig1, align 8, !dbg !12785
  %78 = load i64, i64* %term0, align 8, !dbg !12786
  %79 = load i64, i64* %term1, align 8, !dbg !12787
  call void @sub128(i64 %76, i64 %77, i64 %78, i64 %79, i64* %rem0, i64* %rem1), !dbg !12788
  br label %while.cond, !dbg !12789

while.cond:                                       ; preds = %while.body, %if.end28
  %80 = load i64, i64* %rem0, align 8, !dbg !12790
  %cmp39 = icmp slt i64 %80, 0, !dbg !12791
  br i1 %cmp39, label %while.body, label %while.end, !dbg !12789

while.body:                                       ; preds = %while.cond
  %81 = load i64, i64* %zSig0, align 8, !dbg !12792
  %dec = add i64 %81, -1, !dbg !12792
  store i64 %dec, i64* %zSig0, align 8, !dbg !12792
  %82 = load i64, i64* %doubleZSig0, align 8, !dbg !12794
  %sub41 = sub i64 %82, 2, !dbg !12794
  store i64 %sub41, i64* %doubleZSig0, align 8, !dbg !12794
  %83 = load i64, i64* %rem0, align 8, !dbg !12795
  %84 = load i64, i64* %rem1, align 8, !dbg !12796
  %85 = load i64, i64* %zSig0, align 8, !dbg !12797
  %shr42 = lshr i64 %85, 63, !dbg !12798
  %86 = load i64, i64* %doubleZSig0, align 8, !dbg !12799
  %or43 = or i64 %86, 1, !dbg !12800
  call void @add128(i64 %83, i64 %84, i64 %shr42, i64 %or43, i64* %rem0, i64* %rem1), !dbg !12801
  br label %while.cond, !dbg !12789, !llvm.loop !12802

while.end:                                        ; preds = %while.cond
  %87 = load i64, i64* %rem1, align 8, !dbg !12804
  %88 = load i64, i64* %doubleZSig0, align 8, !dbg !12805
  %call44 = call i64 @estimateDiv128To64(i64 %87, i64 0, i64 %88), !dbg !12806
  store i64 %call44, i64* %zSig1, align 8, !dbg !12807
  %89 = load i64, i64* %zSig1, align 8, !dbg !12808
  %and45 = and i64 %89, 8191, !dbg !12810
  %cmp46 = icmp ule i64 %and45, 5, !dbg !12811
  br i1 %cmp46, label %if.then48, label %if.end67, !dbg !12812

if.then48:                                        ; preds = %while.end
  %90 = load i64, i64* %zSig1, align 8, !dbg !12813
  %cmp49 = icmp eq i64 %90, 0, !dbg !12816
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !12817

if.then51:                                        ; preds = %if.then48
  store i64 1, i64* %zSig1, align 8, !dbg !12818
  br label %if.end52, !dbg !12819

if.end52:                                         ; preds = %if.then51, %if.then48
  %91 = load i64, i64* %doubleZSig0, align 8, !dbg !12820
  %92 = load i64, i64* %zSig1, align 8, !dbg !12821
  call void @mul64To128(i64 %91, i64 %92, i64* %term1, i64* %term2), !dbg !12822
  %93 = load i64, i64* %rem1, align 8, !dbg !12823
  %94 = load i64, i64* %term1, align 8, !dbg !12824
  %95 = load i64, i64* %term2, align 8, !dbg !12825
  call void @sub128(i64 %93, i64 0, i64 %94, i64 %95, i64* %rem1, i64* %rem2), !dbg !12826
  %96 = load i64, i64* %zSig1, align 8, !dbg !12827
  %97 = load i64, i64* %zSig1, align 8, !dbg !12828
  call void @mul64To128(i64 %96, i64 %97, i64* %term2, i64* %term3), !dbg !12829
  %98 = load i64, i64* %rem1, align 8, !dbg !12830
  %99 = load i64, i64* %rem2, align 8, !dbg !12831
  %100 = load i64, i64* %term2, align 8, !dbg !12832
  %101 = load i64, i64* %term3, align 8, !dbg !12833
  call void @sub192(i64 %98, i64 %99, i64 0, i64 0, i64 %100, i64 %101, i64* %rem1, i64* %rem2, i64* %rem3), !dbg !12834
  br label %while.cond53, !dbg !12835

while.cond53:                                     ; preds = %while.body56, %if.end52
  %102 = load i64, i64* %rem1, align 8, !dbg !12836
  %cmp54 = icmp slt i64 %102, 0, !dbg !12837
  br i1 %cmp54, label %while.body56, label %while.end60, !dbg !12835

while.body56:                                     ; preds = %while.cond53
  %103 = load i64, i64* %zSig1, align 8, !dbg !12838
  %dec57 = add i64 %103, -1, !dbg !12838
  store i64 %dec57, i64* %zSig1, align 8, !dbg !12838
  %104 = load i64, i64* %zSig1, align 8, !dbg !12840
  call void @shortShift128Left(i64 0, i64 %104, i32 1, i64* %term2, i64* %term3), !dbg !12841
  %105 = load i64, i64* %term3, align 8, !dbg !12842
  %or58 = or i64 %105, 1, !dbg !12842
  store i64 %or58, i64* %term3, align 8, !dbg !12842
  %106 = load i64, i64* %doubleZSig0, align 8, !dbg !12843
  %107 = load i64, i64* %term2, align 8, !dbg !12844
  %or59 = or i64 %107, %106, !dbg !12844
  store i64 %or59, i64* %term2, align 8, !dbg !12844
  %108 = load i64, i64* %rem1, align 8, !dbg !12845
  %109 = load i64, i64* %rem2, align 8, !dbg !12846
  %110 = load i64, i64* %rem3, align 8, !dbg !12847
  %111 = load i64, i64* %term2, align 8, !dbg !12848
  %112 = load i64, i64* %term3, align 8, !dbg !12849
  call void @add192(i64 %108, i64 %109, i64 %110, i64 0, i64 %111, i64 %112, i64* %rem1, i64* %rem2, i64* %rem3), !dbg !12850
  br label %while.cond53, !dbg !12835, !llvm.loop !12851

while.end60:                                      ; preds = %while.cond53
  %113 = load i64, i64* %rem1, align 8, !dbg !12853
  %114 = load i64, i64* %rem2, align 8, !dbg !12854
  %or61 = or i64 %113, %114, !dbg !12855
  %115 = load i64, i64* %rem3, align 8, !dbg !12856
  %or62 = or i64 %or61, %115, !dbg !12857
  %cmp63 = icmp ne i64 %or62, 0, !dbg !12858
  %conv64 = zext i1 %cmp63 to i32, !dbg !12858
  %conv65 = sext i32 %conv64 to i64, !dbg !12859
  %116 = load i64, i64* %zSig1, align 8, !dbg !12860
  %or66 = or i64 %116, %conv65, !dbg !12860
  store i64 %or66, i64* %zSig1, align 8, !dbg !12860
  br label %if.end67, !dbg !12861

if.end67:                                         ; preds = %while.end60, %while.end
  %117 = load i64, i64* %zSig0, align 8, !dbg !12862
  %118 = load i64, i64* %zSig1, align 8, !dbg !12863
  call void @shift128ExtraRightJamming(i64 %117, i64 %118, i64 0, i32 14, i64* %zSig0, i64* %zSig1, i64* %zSig2), !dbg !12864
  %119 = load i32, i32* %zExp, align 4, !dbg !12865
  %120 = load i64, i64* %zSig0, align 8, !dbg !12866
  %121 = load i64, i64* %zSig1, align 8, !dbg !12867
  %122 = load i64, i64* %zSig2, align 8, !dbg !12868
  %call68 = call { i64, i64 } @roundAndPackFloat128(i32 0, i32 %119, i64 %120, i64 %121, i64 %122), !dbg !12869
  %123 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12869
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %123, i32 0, i32 0, !dbg !12869
  %125 = extractvalue { i64, i64 } %call68, 0, !dbg !12869
  store i64 %125, i64* %124, align 8, !dbg !12869
  %126 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %123, i32 0, i32 1, !dbg !12869
  %127 = extractvalue { i64, i64 } %call68, 1, !dbg !12869
  store i64 %127, i64* %126, align 8, !dbg !12869
  br label %return, !dbg !12870

return:                                           ; preds = %if.end67, %if.then25, %invalid, %if.then16, %if.then7, %if.then4
  %128 = bitcast %struct.float128* %retval to { i64, i64 }*, !dbg !12871
  %129 = load { i64, i64 }, { i64, i64 }* %128, align 8, !dbg !12871
  ret { i64, i64 } %129, !dbg !12871
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_eq(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !12872 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !12875, metadata !DIExpression()), !dbg !12876
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !12877, metadata !DIExpression()), !dbg !12878
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12879
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !12879
  %8 = load i64, i64* %7, align 8, !dbg !12879
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !12879
  %10 = load i64, i64* %9, align 8, !dbg !12879
  %call = call i32 @extractFloat128Exp(i64 %8, i64 %10), !dbg !12879
  %cmp = icmp eq i32 %call, 32767, !dbg !12881
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !12882

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12883
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !12883
  %13 = load i64, i64* %12, align 8, !dbg !12883
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !12883
  %15 = load i64, i64* %14, align 8, !dbg !12883
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !12883
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12884
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !12884
  %18 = load i64, i64* %17, align 8, !dbg !12884
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !12884
  %20 = load i64, i64* %19, align 8, !dbg !12884
  %call2 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !12884
  %or = or i64 %call1, %call2, !dbg !12885
  %tobool = icmp ne i64 %or, 0, !dbg !12885
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !12886

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12887
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !12887
  %23 = load i64, i64* %22, align 8, !dbg !12887
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !12887
  %25 = load i64, i64* %24, align 8, !dbg !12887
  %call3 = call i32 @extractFloat128Exp(i64 %23, i64 %25), !dbg !12887
  %cmp4 = icmp eq i32 %call3, 32767, !dbg !12888
  br i1 %cmp4, label %land.lhs.true5, label %if.end14, !dbg !12889

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12890
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !12890
  %28 = load i64, i64* %27, align 8, !dbg !12890
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !12890
  %30 = load i64, i64* %29, align 8, !dbg !12890
  %call6 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !12890
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12891
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !12891
  %33 = load i64, i64* %32, align 8, !dbg !12891
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !12891
  %35 = load i64, i64* %34, align 8, !dbg !12891
  %call7 = call i64 @extractFloat128Frac1(i64 %33, i64 %35), !dbg !12891
  %or8 = or i64 %call6, %call7, !dbg !12892
  %tobool9 = icmp ne i64 %or8, 0, !dbg !12892
  br i1 %tobool9, label %if.then, label %if.end14, !dbg !12893

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  %36 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12894
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !12894
  %38 = load i64, i64* %37, align 8, !dbg !12894
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !12894
  %40 = load i64, i64* %39, align 8, !dbg !12894
  %call10 = call zeroext i1 @float128_is_nan(i64 %38, i64 %40), !dbg !12894
  br i1 %call10, label %if.then13, label %lor.lhs.false11, !dbg !12897

lor.lhs.false11:                                  ; preds = %if.then
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12898
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !12898
  %43 = load i64, i64* %42, align 8, !dbg !12898
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !12898
  %45 = load i64, i64* %44, align 8, !dbg !12898
  %call12 = call zeroext i1 @float128_is_nan(i64 %43, i64 %45), !dbg !12898
  br i1 %call12, label %if.then13, label %if.end, !dbg !12899

if.then13:                                        ; preds = %lor.lhs.false11, %if.then
  call void @float_raise(i32 16), !dbg !12900
  br label %if.end, !dbg !12902

if.end:                                           ; preds = %if.then13, %lor.lhs.false11
  store i1 false, i1* %retval, align 1, !dbg !12903
  br label %return, !dbg !12903

if.end14:                                         ; preds = %land.lhs.true5, %lor.lhs.false
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !12904
  %46 = load i64, i64* %low, align 8, !dbg !12904
  %low15 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !12905
  %47 = load i64, i64* %low15, align 8, !dbg !12905
  %cmp16 = icmp eq i64 %46, %47, !dbg !12906
  br i1 %cmp16, label %land.rhs, label %land.end26, !dbg !12907

land.rhs:                                         ; preds = %if.end14
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !12908
  %48 = load i64, i64* %high, align 8, !dbg !12908
  %high17 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !12909
  %49 = load i64, i64* %high17, align 8, !dbg !12909
  %cmp18 = icmp eq i64 %48, %49, !dbg !12910
  br i1 %cmp18, label %lor.end, label %lor.rhs, !dbg !12911

lor.rhs:                                          ; preds = %land.rhs
  %low19 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !12912
  %50 = load i64, i64* %low19, align 8, !dbg !12912
  %cmp20 = icmp eq i64 %50, 0, !dbg !12913
  br i1 %cmp20, label %land.rhs21, label %land.end, !dbg !12914

land.rhs21:                                       ; preds = %lor.rhs
  %high22 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !12915
  %51 = load i64, i64* %high22, align 8, !dbg !12915
  %high23 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !12916
  %52 = load i64, i64* %high23, align 8, !dbg !12916
  %or24 = or i64 %51, %52, !dbg !12917
  %shl = shl i64 %or24, 1, !dbg !12918
  %cmp25 = icmp eq i64 %shl, 0, !dbg !12919
  br label %land.end

land.end:                                         ; preds = %land.rhs21, %lor.rhs
  %53 = phi i1 [ false, %lor.rhs ], [ %cmp25, %land.rhs21 ]
  br label %lor.end, !dbg !12911

lor.end:                                          ; preds = %land.end, %land.rhs
  %54 = phi i1 [ true, %land.rhs ], [ %53, %land.end ]
  br label %land.end26

land.end26:                                       ; preds = %lor.end, %if.end14
  %55 = phi i1 [ false, %if.end14 ], [ %54, %lor.end ]
  store i1 %55, i1* %retval, align 1, !dbg !12920
  br label %return, !dbg !12920

return:                                           ; preds = %land.end26, %if.end
  %56 = load i1, i1* %retval, align 1, !dbg !12921
  ret i1 %56, !dbg !12921
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_le(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !12922 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !12923, metadata !DIExpression()), !dbg !12924
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !12925, metadata !DIExpression()), !dbg !12926
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !12927, metadata !DIExpression()), !dbg !12928
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !12929, metadata !DIExpression()), !dbg !12930
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12931
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !12931
  %8 = load i64, i64* %7, align 8, !dbg !12931
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !12931
  %10 = load i64, i64* %9, align 8, !dbg !12931
  %call = call i32 @extractFloat128Exp(i64 %8, i64 %10), !dbg !12931
  %cmp = icmp eq i32 %call, 32767, !dbg !12933
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !12934

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12935
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !12935
  %13 = load i64, i64* %12, align 8, !dbg !12935
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !12935
  %15 = load i64, i64* %14, align 8, !dbg !12935
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !12935
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12936
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !12936
  %18 = load i64, i64* %17, align 8, !dbg !12936
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !12936
  %20 = load i64, i64* %19, align 8, !dbg !12936
  %call2 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !12936
  %or = or i64 %call1, %call2, !dbg !12937
  %tobool = icmp ne i64 %or, 0, !dbg !12937
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !12938

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12939
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !12939
  %23 = load i64, i64* %22, align 8, !dbg !12939
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !12939
  %25 = load i64, i64* %24, align 8, !dbg !12939
  %call3 = call i32 @extractFloat128Exp(i64 %23, i64 %25), !dbg !12939
  %cmp4 = icmp eq i32 %call3, 32767, !dbg !12940
  br i1 %cmp4, label %land.lhs.true5, label %if.end, !dbg !12941

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12942
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !12942
  %28 = load i64, i64* %27, align 8, !dbg !12942
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !12942
  %30 = load i64, i64* %29, align 8, !dbg !12942
  %call6 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !12942
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12943
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !12943
  %33 = load i64, i64* %32, align 8, !dbg !12943
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !12943
  %35 = load i64, i64* %34, align 8, !dbg !12943
  %call7 = call i64 @extractFloat128Frac1(i64 %33, i64 %35), !dbg !12943
  %or8 = or i64 %call6, %call7, !dbg !12944
  %tobool9 = icmp ne i64 %or8, 0, !dbg !12944
  br i1 %tobool9, label %if.then, label %if.end, !dbg !12945

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  call void @float_raise(i32 16), !dbg !12946
  store i1 false, i1* %retval, align 1, !dbg !12948
  br label %return, !dbg !12948

if.end:                                           ; preds = %land.lhs.true5, %lor.lhs.false
  %36 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12949
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !12949
  %38 = load i64, i64* %37, align 8, !dbg !12949
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !12949
  %40 = load i64, i64* %39, align 8, !dbg !12949
  %call10 = call i32 @extractFloat128Sign(i64 %38, i64 %40), !dbg !12949
  store i32 %call10, i32* %aSign, align 4, !dbg !12950
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !12951
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !12951
  %43 = load i64, i64* %42, align 8, !dbg !12951
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !12951
  %45 = load i64, i64* %44, align 8, !dbg !12951
  %call11 = call i32 @extractFloat128Sign(i64 %43, i64 %45), !dbg !12951
  store i32 %call11, i32* %bSign, align 4, !dbg !12952
  %46 = load i32, i32* %aSign, align 4, !dbg !12953
  %47 = load i32, i32* %bSign, align 4, !dbg !12955
  %cmp12 = icmp ne i32 %46, %47, !dbg !12956
  br i1 %cmp12, label %if.then13, label %if.end21, !dbg !12957

if.then13:                                        ; preds = %if.end
  %48 = load i32, i32* %aSign, align 4, !dbg !12958
  %tobool14 = icmp ne i32 %48, 0, !dbg !12958
  br i1 %tobool14, label %lor.end, label %lor.rhs, !dbg !12960

lor.rhs:                                          ; preds = %if.then13
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !12961
  %49 = load i64, i64* %high, align 8, !dbg !12961
  %high15 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !12962
  %50 = load i64, i64* %high15, align 8, !dbg !12962
  %or16 = or i64 %49, %50, !dbg !12963
  %shl = shl i64 %or16, 1, !dbg !12964
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !12965
  %51 = load i64, i64* %low, align 8, !dbg !12965
  %or17 = or i64 %shl, %51, !dbg !12966
  %low18 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !12967
  %52 = load i64, i64* %low18, align 8, !dbg !12967
  %or19 = or i64 %or17, %52, !dbg !12968
  %cmp20 = icmp eq i64 %or19, 0, !dbg !12969
  br label %lor.end, !dbg !12960

lor.end:                                          ; preds = %lor.rhs, %if.then13
  %53 = phi i1 [ true, %if.then13 ], [ %cmp20, %lor.rhs ]
  store i1 %53, i1* %retval, align 1, !dbg !12970
  br label %return, !dbg !12970

if.end21:                                         ; preds = %if.end
  %54 = load i32, i32* %aSign, align 4, !dbg !12971
  %tobool22 = icmp ne i32 %54, 0, !dbg !12971
  br i1 %tobool22, label %cond.true, label %cond.false, !dbg !12971

cond.true:                                        ; preds = %if.end21
  %high23 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !12972
  %55 = load i64, i64* %high23, align 8, !dbg !12972
  %low24 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !12973
  %56 = load i64, i64* %low24, align 8, !dbg !12973
  %high25 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !12974
  %57 = load i64, i64* %high25, align 8, !dbg !12974
  %low26 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !12975
  %58 = load i64, i64* %low26, align 8, !dbg !12975
  %call27 = call zeroext i1 @le128(i64 %55, i64 %56, i64 %57, i64 %58), !dbg !12976
  %conv = zext i1 %call27 to i32, !dbg !12976
  br label %cond.end, !dbg !12971

cond.false:                                       ; preds = %if.end21
  %high28 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !12977
  %59 = load i64, i64* %high28, align 8, !dbg !12977
  %low29 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !12978
  %60 = load i64, i64* %low29, align 8, !dbg !12978
  %high30 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !12979
  %61 = load i64, i64* %high30, align 8, !dbg !12979
  %low31 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !12980
  %62 = load i64, i64* %low31, align 8, !dbg !12980
  %call32 = call zeroext i1 @le128(i64 %59, i64 %60, i64 %61, i64 %62), !dbg !12981
  %conv33 = zext i1 %call32 to i32, !dbg !12981
  br label %cond.end, !dbg !12971

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv33, %cond.false ], !dbg !12971
  %tobool34 = icmp ne i32 %cond, 0, !dbg !12971
  store i1 %tobool34, i1* %retval, align 1, !dbg !12982
  br label %return, !dbg !12982

return:                                           ; preds = %cond.end, %lor.end, %if.then
  %63 = load i1, i1* %retval, align 1, !dbg !12983
  ret i1 %63, !dbg !12983
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_lt(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !12984 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !12985, metadata !DIExpression()), !dbg !12986
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !12987, metadata !DIExpression()), !dbg !12988
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !12989, metadata !DIExpression()), !dbg !12990
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !12991, metadata !DIExpression()), !dbg !12992
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12993
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !12993
  %8 = load i64, i64* %7, align 8, !dbg !12993
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !12993
  %10 = load i64, i64* %9, align 8, !dbg !12993
  %call = call i32 @extractFloat128Exp(i64 %8, i64 %10), !dbg !12993
  %cmp = icmp eq i32 %call, 32767, !dbg !12995
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !12996

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12997
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !12997
  %13 = load i64, i64* %12, align 8, !dbg !12997
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !12997
  %15 = load i64, i64* %14, align 8, !dbg !12997
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !12997
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !12998
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !12998
  %18 = load i64, i64* %17, align 8, !dbg !12998
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !12998
  %20 = load i64, i64* %19, align 8, !dbg !12998
  %call2 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !12998
  %or = or i64 %call1, %call2, !dbg !12999
  %tobool = icmp ne i64 %or, 0, !dbg !12999
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !13000

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13001
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13001
  %23 = load i64, i64* %22, align 8, !dbg !13001
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13001
  %25 = load i64, i64* %24, align 8, !dbg !13001
  %call3 = call i32 @extractFloat128Exp(i64 %23, i64 %25), !dbg !13001
  %cmp4 = icmp eq i32 %call3, 32767, !dbg !13002
  br i1 %cmp4, label %land.lhs.true5, label %if.end, !dbg !13003

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13004
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !13004
  %28 = load i64, i64* %27, align 8, !dbg !13004
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !13004
  %30 = load i64, i64* %29, align 8, !dbg !13004
  %call6 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !13004
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13005
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !13005
  %33 = load i64, i64* %32, align 8, !dbg !13005
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !13005
  %35 = load i64, i64* %34, align 8, !dbg !13005
  %call7 = call i64 @extractFloat128Frac1(i64 %33, i64 %35), !dbg !13005
  %or8 = or i64 %call6, %call7, !dbg !13006
  %tobool9 = icmp ne i64 %or8, 0, !dbg !13006
  br i1 %tobool9, label %if.then, label %if.end, !dbg !13007

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  call void @float_raise(i32 16), !dbg !13008
  store i1 false, i1* %retval, align 1, !dbg !13010
  br label %return, !dbg !13010

if.end:                                           ; preds = %land.lhs.true5, %lor.lhs.false
  %36 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13011
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !13011
  %38 = load i64, i64* %37, align 8, !dbg !13011
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !13011
  %40 = load i64, i64* %39, align 8, !dbg !13011
  %call10 = call i32 @extractFloat128Sign(i64 %38, i64 %40), !dbg !13011
  store i32 %call10, i32* %aSign, align 4, !dbg !13012
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13013
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !13013
  %43 = load i64, i64* %42, align 8, !dbg !13013
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !13013
  %45 = load i64, i64* %44, align 8, !dbg !13013
  %call11 = call i32 @extractFloat128Sign(i64 %43, i64 %45), !dbg !13013
  store i32 %call11, i32* %bSign, align 4, !dbg !13014
  %46 = load i32, i32* %aSign, align 4, !dbg !13015
  %47 = load i32, i32* %bSign, align 4, !dbg !13017
  %cmp12 = icmp ne i32 %46, %47, !dbg !13018
  br i1 %cmp12, label %if.then13, label %if.end21, !dbg !13019

if.then13:                                        ; preds = %if.end
  %48 = load i32, i32* %aSign, align 4, !dbg !13020
  %tobool14 = icmp ne i32 %48, 0, !dbg !13020
  br i1 %tobool14, label %land.rhs, label %land.end, !dbg !13022

land.rhs:                                         ; preds = %if.then13
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13023
  %49 = load i64, i64* %high, align 8, !dbg !13023
  %high15 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13024
  %50 = load i64, i64* %high15, align 8, !dbg !13024
  %or16 = or i64 %49, %50, !dbg !13025
  %shl = shl i64 %or16, 1, !dbg !13026
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13027
  %51 = load i64, i64* %low, align 8, !dbg !13027
  %or17 = or i64 %shl, %51, !dbg !13028
  %low18 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13029
  %52 = load i64, i64* %low18, align 8, !dbg !13029
  %or19 = or i64 %or17, %52, !dbg !13030
  %cmp20 = icmp ne i64 %or19, 0, !dbg !13031
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then13
  %53 = phi i1 [ false, %if.then13 ], [ %cmp20, %land.rhs ]
  store i1 %53, i1* %retval, align 1, !dbg !13032
  br label %return, !dbg !13032

if.end21:                                         ; preds = %if.end
  %54 = load i32, i32* %aSign, align 4, !dbg !13033
  %tobool22 = icmp ne i32 %54, 0, !dbg !13033
  br i1 %tobool22, label %cond.true, label %cond.false, !dbg !13033

cond.true:                                        ; preds = %if.end21
  %high23 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13034
  %55 = load i64, i64* %high23, align 8, !dbg !13034
  %low24 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13035
  %56 = load i64, i64* %low24, align 8, !dbg !13035
  %high25 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13036
  %57 = load i64, i64* %high25, align 8, !dbg !13036
  %low26 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13037
  %58 = load i64, i64* %low26, align 8, !dbg !13037
  %call27 = call zeroext i1 @lt128(i64 %55, i64 %56, i64 %57, i64 %58), !dbg !13038
  %conv = zext i1 %call27 to i32, !dbg !13038
  br label %cond.end, !dbg !13033

cond.false:                                       ; preds = %if.end21
  %high28 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13039
  %59 = load i64, i64* %high28, align 8, !dbg !13039
  %low29 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13040
  %60 = load i64, i64* %low29, align 8, !dbg !13040
  %high30 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13041
  %61 = load i64, i64* %high30, align 8, !dbg !13041
  %low31 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13042
  %62 = load i64, i64* %low31, align 8, !dbg !13042
  %call32 = call zeroext i1 @lt128(i64 %59, i64 %60, i64 %61, i64 %62), !dbg !13043
  %conv33 = zext i1 %call32 to i32, !dbg !13043
  br label %cond.end, !dbg !13033

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv33, %cond.false ], !dbg !13033
  %tobool34 = icmp ne i32 %cond, 0, !dbg !13033
  store i1 %tobool34, i1* %retval, align 1, !dbg !13044
  br label %return, !dbg !13044

return:                                           ; preds = %cond.end, %land.end, %if.then
  %63 = load i1, i1* %retval, align 1, !dbg !13045
  ret i1 %63, !dbg !13045
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_ge(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13046 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13047, metadata !DIExpression()), !dbg !13048
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13049, metadata !DIExpression()), !dbg !13050
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13051
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13051
  %8 = load i64, i64* %7, align 8, !dbg !13051
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13051
  %10 = load i64, i64* %9, align 8, !dbg !13051
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13051
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13051
  %13 = load i64, i64* %12, align 8, !dbg !13051
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13051
  %15 = load i64, i64* %14, align 8, !dbg !13051
  %call = call zeroext i1 @float128_lt(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !13051
  %lnot = xor i1 %call, true, !dbg !13052
  ret i1 %lnot, !dbg !13053
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_gt(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13054 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13055, metadata !DIExpression()), !dbg !13056
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13057, metadata !DIExpression()), !dbg !13058
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13059
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13059
  %8 = load i64, i64* %7, align 8, !dbg !13059
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13059
  %10 = load i64, i64* %9, align 8, !dbg !13059
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13059
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13059
  %13 = load i64, i64* %12, align 8, !dbg !13059
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13059
  %15 = load i64, i64* %14, align 8, !dbg !13059
  %call = call zeroext i1 @float128_le(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !13059
  %lnot = xor i1 %call, true, !dbg !13060
  ret i1 %lnot, !dbg !13061
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_ge_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13062 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13063, metadata !DIExpression()), !dbg !13064
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13065, metadata !DIExpression()), !dbg !13066
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13067
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13067
  %8 = load i64, i64* %7, align 8, !dbg !13067
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13067
  %10 = load i64, i64* %9, align 8, !dbg !13067
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13067
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13067
  %13 = load i64, i64* %12, align 8, !dbg !13067
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13067
  %15 = load i64, i64* %14, align 8, !dbg !13067
  %call = call zeroext i1 @float128_uno_quiet(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !13067
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !13068

lor.rhs:                                          ; preds = %entry
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13069
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !13069
  %18 = load i64, i64* %17, align 8, !dbg !13069
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !13069
  %20 = load i64, i64* %19, align 8, !dbg !13069
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13069
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13069
  %23 = load i64, i64* %22, align 8, !dbg !13069
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13069
  %25 = load i64, i64* %24, align 8, !dbg !13069
  %call1 = call zeroext i1 @float128_ge(i64 %18, i64 %20, i64 %23, i64 %25), !dbg !13069
  br label %lor.end, !dbg !13068

lor.end:                                          ; preds = %lor.rhs, %entry
  %26 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %26, !dbg !13070
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_uno_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13071 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13072, metadata !DIExpression()), !dbg !13073
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13074, metadata !DIExpression()), !dbg !13075
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13076
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13076
  %8 = load i64, i64* %7, align 8, !dbg !13076
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13076
  %10 = load i64, i64* %9, align 8, !dbg !13076
  %call = call zeroext i1 @float128_is_nan(i64 %8, i64 %10), !dbg !13076
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !13077

lor.rhs:                                          ; preds = %entry
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13078
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13078
  %13 = load i64, i64* %12, align 8, !dbg !13078
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13078
  %15 = load i64, i64* %14, align 8, !dbg !13078
  %call1 = call zeroext i1 @float128_is_nan(i64 %13, i64 %15), !dbg !13078
  br label %lor.end, !dbg !13077

lor.end:                                          ; preds = %lor.rhs, %entry
  %16 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %16, !dbg !13079
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_gt_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13080 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13081, metadata !DIExpression()), !dbg !13082
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13083, metadata !DIExpression()), !dbg !13084
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13085
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13085
  %8 = load i64, i64* %7, align 8, !dbg !13085
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13085
  %10 = load i64, i64* %9, align 8, !dbg !13085
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13085
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13085
  %13 = load i64, i64* %12, align 8, !dbg !13085
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13085
  %15 = load i64, i64* %14, align 8, !dbg !13085
  %call = call zeroext i1 @float128_uno_quiet(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !13085
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !13086

lor.rhs:                                          ; preds = %entry
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13087
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !13087
  %18 = load i64, i64* %17, align 8, !dbg !13087
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !13087
  %20 = load i64, i64* %19, align 8, !dbg !13087
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13087
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13087
  %23 = load i64, i64* %22, align 8, !dbg !13087
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13087
  %25 = load i64, i64* %24, align 8, !dbg !13087
  %call1 = call zeroext i1 @float128_gt(i64 %18, i64 %20, i64 %23, i64 %25), !dbg !13087
  br label %lor.end, !dbg !13086

lor.end:                                          ; preds = %lor.rhs, %entry
  %26 = phi i1 [ true, %entry ], [ %call1, %lor.rhs ]
  ret i1 %26, !dbg !13088
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_ne(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13089 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13090, metadata !DIExpression()), !dbg !13091
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13092, metadata !DIExpression()), !dbg !13093
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13094
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13094
  %8 = load i64, i64* %7, align 8, !dbg !13094
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13094
  %10 = load i64, i64* %9, align 8, !dbg !13094
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13094
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13094
  %13 = load i64, i64* %12, align 8, !dbg !13094
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13094
  %15 = load i64, i64* %14, align 8, !dbg !13094
  %call = call zeroext i1 @float128_eq(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !13094
  %lnot = xor i1 %call, true, !dbg !13095
  ret i1 %lnot, !dbg !13096
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_one_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13097 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13098, metadata !DIExpression()), !dbg !13099
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13100, metadata !DIExpression()), !dbg !13101
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13102
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13102
  %8 = load i64, i64* %7, align 8, !dbg !13102
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13102
  %10 = load i64, i64* %9, align 8, !dbg !13102
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13102
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13102
  %13 = load i64, i64* %12, align 8, !dbg !13102
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13102
  %15 = load i64, i64* %14, align 8, !dbg !13102
  %call = call zeroext i1 @float128_ord_quiet(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !13102
  br i1 %call, label %land.rhs, label %land.end, !dbg !13103

land.rhs:                                         ; preds = %entry
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13104
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !13104
  %18 = load i64, i64* %17, align 8, !dbg !13104
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !13104
  %20 = load i64, i64* %19, align 8, !dbg !13104
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13104
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13104
  %23 = load i64, i64* %22, align 8, !dbg !13104
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13104
  %25 = load i64, i64* %24, align 8, !dbg !13104
  %call1 = call zeroext i1 @float128_ne(i64 %18, i64 %20, i64 %23, i64 %25), !dbg !13104
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %26 = phi i1 [ false, %entry ], [ %call1, %land.rhs ]
  ret i1 %26, !dbg !13105
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_ord_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13106 {
entry:
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13107, metadata !DIExpression()), !dbg !13108
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13109, metadata !DIExpression()), !dbg !13110
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13111
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13111
  %8 = load i64, i64* %7, align 8, !dbg !13111
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13111
  %10 = load i64, i64* %9, align 8, !dbg !13111
  %call = call zeroext i1 @float128_is_nan(i64 %8, i64 %10), !dbg !13111
  br i1 %call, label %land.end, label %land.rhs, !dbg !13112

land.rhs:                                         ; preds = %entry
  %11 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13113
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13113
  %13 = load i64, i64* %12, align 8, !dbg !13113
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13113
  %15 = load i64, i64* %14, align 8, !dbg !13113
  %call1 = call zeroext i1 @float128_is_nan(i64 %13, i64 %15), !dbg !13113
  %lnot = xor i1 %call1, true, !dbg !13114
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %16 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %16, !dbg !13115
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_eq_signaling(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13116 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13117, metadata !DIExpression()), !dbg !13118
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13119, metadata !DIExpression()), !dbg !13120
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13121
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13121
  %8 = load i64, i64* %7, align 8, !dbg !13121
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13121
  %10 = load i64, i64* %9, align 8, !dbg !13121
  %call = call i32 @extractFloat128Exp(i64 %8, i64 %10), !dbg !13121
  %cmp = icmp eq i32 %call, 32767, !dbg !13123
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !13124

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13125
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13125
  %13 = load i64, i64* %12, align 8, !dbg !13125
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13125
  %15 = load i64, i64* %14, align 8, !dbg !13125
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !13125
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13126
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !13126
  %18 = load i64, i64* %17, align 8, !dbg !13126
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !13126
  %20 = load i64, i64* %19, align 8, !dbg !13126
  %call2 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !13126
  %or = or i64 %call1, %call2, !dbg !13127
  %tobool = icmp ne i64 %or, 0, !dbg !13127
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !13128

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13129
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13129
  %23 = load i64, i64* %22, align 8, !dbg !13129
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13129
  %25 = load i64, i64* %24, align 8, !dbg !13129
  %call3 = call i32 @extractFloat128Exp(i64 %23, i64 %25), !dbg !13129
  %cmp4 = icmp eq i32 %call3, 32767, !dbg !13130
  br i1 %cmp4, label %land.lhs.true5, label %if.end, !dbg !13131

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13132
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !13132
  %28 = load i64, i64* %27, align 8, !dbg !13132
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !13132
  %30 = load i64, i64* %29, align 8, !dbg !13132
  %call6 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !13132
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13133
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !13133
  %33 = load i64, i64* %32, align 8, !dbg !13133
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !13133
  %35 = load i64, i64* %34, align 8, !dbg !13133
  %call7 = call i64 @extractFloat128Frac1(i64 %33, i64 %35), !dbg !13133
  %or8 = or i64 %call6, %call7, !dbg !13134
  %tobool9 = icmp ne i64 %or8, 0, !dbg !13134
  br i1 %tobool9, label %if.then, label %if.end, !dbg !13135

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  call void @float_raise(i32 16), !dbg !13136
  store i1 false, i1* %retval, align 1, !dbg !13138
  br label %return, !dbg !13138

if.end:                                           ; preds = %land.lhs.true5, %lor.lhs.false
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13139
  %36 = load i64, i64* %low, align 8, !dbg !13139
  %low10 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13140
  %37 = load i64, i64* %low10, align 8, !dbg !13140
  %cmp11 = icmp eq i64 %36, %37, !dbg !13141
  br i1 %cmp11, label %land.rhs, label %land.end21, !dbg !13142

land.rhs:                                         ; preds = %if.end
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13143
  %38 = load i64, i64* %high, align 8, !dbg !13143
  %high12 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13144
  %39 = load i64, i64* %high12, align 8, !dbg !13144
  %cmp13 = icmp eq i64 %38, %39, !dbg !13145
  br i1 %cmp13, label %lor.end, label %lor.rhs, !dbg !13146

lor.rhs:                                          ; preds = %land.rhs
  %low14 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13147
  %40 = load i64, i64* %low14, align 8, !dbg !13147
  %cmp15 = icmp eq i64 %40, 0, !dbg !13148
  br i1 %cmp15, label %land.rhs16, label %land.end, !dbg !13149

land.rhs16:                                       ; preds = %lor.rhs
  %high17 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13150
  %41 = load i64, i64* %high17, align 8, !dbg !13150
  %high18 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13151
  %42 = load i64, i64* %high18, align 8, !dbg !13151
  %or19 = or i64 %41, %42, !dbg !13152
  %shl = shl i64 %or19, 1, !dbg !13153
  %cmp20 = icmp eq i64 %shl, 0, !dbg !13154
  br label %land.end

land.end:                                         ; preds = %land.rhs16, %lor.rhs
  %43 = phi i1 [ false, %lor.rhs ], [ %cmp20, %land.rhs16 ]
  br label %lor.end, !dbg !13146

lor.end:                                          ; preds = %land.end, %land.rhs
  %44 = phi i1 [ true, %land.rhs ], [ %43, %land.end ]
  br label %land.end21

land.end21:                                       ; preds = %lor.end, %if.end
  %45 = phi i1 [ false, %if.end ], [ %44, %lor.end ]
  store i1 %45, i1* %retval, align 1, !dbg !13155
  br label %return, !dbg !13155

return:                                           ; preds = %land.end21, %if.then
  %46 = load i1, i1* %retval, align 1, !dbg !13156
  ret i1 %46, !dbg !13156
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_le_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13157 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13158, metadata !DIExpression()), !dbg !13159
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13160, metadata !DIExpression()), !dbg !13161
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !13162, metadata !DIExpression()), !dbg !13163
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !13164, metadata !DIExpression()), !dbg !13165
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13166
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13166
  %8 = load i64, i64* %7, align 8, !dbg !13166
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13166
  %10 = load i64, i64* %9, align 8, !dbg !13166
  %call = call i32 @extractFloat128Exp(i64 %8, i64 %10), !dbg !13166
  %cmp = icmp eq i32 %call, 32767, !dbg !13168
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !13169

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13170
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13170
  %13 = load i64, i64* %12, align 8, !dbg !13170
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13170
  %15 = load i64, i64* %14, align 8, !dbg !13170
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !13170
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13171
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !13171
  %18 = load i64, i64* %17, align 8, !dbg !13171
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !13171
  %20 = load i64, i64* %19, align 8, !dbg !13171
  %call2 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !13171
  %or = or i64 %call1, %call2, !dbg !13172
  %tobool = icmp ne i64 %or, 0, !dbg !13172
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !13173

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13174
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13174
  %23 = load i64, i64* %22, align 8, !dbg !13174
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13174
  %25 = load i64, i64* %24, align 8, !dbg !13174
  %call3 = call i32 @extractFloat128Exp(i64 %23, i64 %25), !dbg !13174
  %cmp4 = icmp eq i32 %call3, 32767, !dbg !13175
  br i1 %cmp4, label %land.lhs.true5, label %if.end14, !dbg !13176

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13177
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !13177
  %28 = load i64, i64* %27, align 8, !dbg !13177
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !13177
  %30 = load i64, i64* %29, align 8, !dbg !13177
  %call6 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !13177
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13178
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !13178
  %33 = load i64, i64* %32, align 8, !dbg !13178
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !13178
  %35 = load i64, i64* %34, align 8, !dbg !13178
  %call7 = call i64 @extractFloat128Frac1(i64 %33, i64 %35), !dbg !13178
  %or8 = or i64 %call6, %call7, !dbg !13179
  %tobool9 = icmp ne i64 %or8, 0, !dbg !13179
  br i1 %tobool9, label %if.then, label %if.end14, !dbg !13180

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  %36 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13181
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !13181
  %38 = load i64, i64* %37, align 8, !dbg !13181
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !13181
  %40 = load i64, i64* %39, align 8, !dbg !13181
  %call10 = call zeroext i1 @float128_is_nan(i64 %38, i64 %40), !dbg !13181
  br i1 %call10, label %if.then13, label %lor.lhs.false11, !dbg !13184

lor.lhs.false11:                                  ; preds = %if.then
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13185
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !13185
  %43 = load i64, i64* %42, align 8, !dbg !13185
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !13185
  %45 = load i64, i64* %44, align 8, !dbg !13185
  %call12 = call zeroext i1 @float128_is_nan(i64 %43, i64 %45), !dbg !13185
  br i1 %call12, label %if.then13, label %if.end, !dbg !13186

if.then13:                                        ; preds = %lor.lhs.false11, %if.then
  call void @float_raise(i32 16), !dbg !13187
  br label %if.end, !dbg !13189

if.end:                                           ; preds = %if.then13, %lor.lhs.false11
  store i1 false, i1* %retval, align 1, !dbg !13190
  br label %return, !dbg !13190

if.end14:                                         ; preds = %land.lhs.true5, %lor.lhs.false
  %46 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13191
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0, !dbg !13191
  %48 = load i64, i64* %47, align 8, !dbg !13191
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1, !dbg !13191
  %50 = load i64, i64* %49, align 8, !dbg !13191
  %call15 = call i32 @extractFloat128Sign(i64 %48, i64 %50), !dbg !13191
  store i32 %call15, i32* %aSign, align 4, !dbg !13192
  %51 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13193
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !13193
  %53 = load i64, i64* %52, align 8, !dbg !13193
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !13193
  %55 = load i64, i64* %54, align 8, !dbg !13193
  %call16 = call i32 @extractFloat128Sign(i64 %53, i64 %55), !dbg !13193
  store i32 %call16, i32* %bSign, align 4, !dbg !13194
  %56 = load i32, i32* %aSign, align 4, !dbg !13195
  %57 = load i32, i32* %bSign, align 4, !dbg !13197
  %cmp17 = icmp ne i32 %56, %57, !dbg !13198
  br i1 %cmp17, label %if.then18, label %if.end26, !dbg !13199

if.then18:                                        ; preds = %if.end14
  %58 = load i32, i32* %aSign, align 4, !dbg !13200
  %tobool19 = icmp ne i32 %58, 0, !dbg !13200
  br i1 %tobool19, label %lor.end, label %lor.rhs, !dbg !13202

lor.rhs:                                          ; preds = %if.then18
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13203
  %59 = load i64, i64* %high, align 8, !dbg !13203
  %high20 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13204
  %60 = load i64, i64* %high20, align 8, !dbg !13204
  %or21 = or i64 %59, %60, !dbg !13205
  %shl = shl i64 %or21, 1, !dbg !13206
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13207
  %61 = load i64, i64* %low, align 8, !dbg !13207
  %or22 = or i64 %shl, %61, !dbg !13208
  %low23 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13209
  %62 = load i64, i64* %low23, align 8, !dbg !13209
  %or24 = or i64 %or22, %62, !dbg !13210
  %cmp25 = icmp eq i64 %or24, 0, !dbg !13211
  br label %lor.end, !dbg !13202

lor.end:                                          ; preds = %lor.rhs, %if.then18
  %63 = phi i1 [ true, %if.then18 ], [ %cmp25, %lor.rhs ]
  store i1 %63, i1* %retval, align 1, !dbg !13212
  br label %return, !dbg !13212

if.end26:                                         ; preds = %if.end14
  %64 = load i32, i32* %aSign, align 4, !dbg !13213
  %tobool27 = icmp ne i32 %64, 0, !dbg !13213
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !13213

cond.true:                                        ; preds = %if.end26
  %high28 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13214
  %65 = load i64, i64* %high28, align 8, !dbg !13214
  %low29 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13215
  %66 = load i64, i64* %low29, align 8, !dbg !13215
  %high30 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13216
  %67 = load i64, i64* %high30, align 8, !dbg !13216
  %low31 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13217
  %68 = load i64, i64* %low31, align 8, !dbg !13217
  %call32 = call zeroext i1 @le128(i64 %65, i64 %66, i64 %67, i64 %68), !dbg !13218
  %conv = zext i1 %call32 to i32, !dbg !13218
  br label %cond.end, !dbg !13213

cond.false:                                       ; preds = %if.end26
  %high33 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13219
  %69 = load i64, i64* %high33, align 8, !dbg !13219
  %low34 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13220
  %70 = load i64, i64* %low34, align 8, !dbg !13220
  %high35 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13221
  %71 = load i64, i64* %high35, align 8, !dbg !13221
  %low36 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13222
  %72 = load i64, i64* %low36, align 8, !dbg !13222
  %call37 = call zeroext i1 @le128(i64 %69, i64 %70, i64 %71, i64 %72), !dbg !13223
  %conv38 = zext i1 %call37 to i32, !dbg !13223
  br label %cond.end, !dbg !13213

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv38, %cond.false ], !dbg !13213
  %tobool39 = icmp ne i32 %cond, 0, !dbg !13213
  store i1 %tobool39, i1* %retval, align 1, !dbg !13224
  br label %return, !dbg !13224

return:                                           ; preds = %cond.end, %lor.end, %if.end
  %73 = load i1, i1* %retval, align 1, !dbg !13225
  ret i1 %73, !dbg !13225
}

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @float128_lt_quiet(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !13226 {
entry:
  %retval = alloca i1, align 1
  %a = alloca %struct.float128, align 8
  %b = alloca %struct.float128, align 8
  %aSign = alloca i32, align 4
  %bSign = alloca i32, align 4
  %0 = bitcast %struct.float128* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.float128* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.float128* %a, metadata !13227, metadata !DIExpression()), !dbg !13228
  call void @llvm.dbg.declare(metadata %struct.float128* %b, metadata !13229, metadata !DIExpression()), !dbg !13230
  call void @llvm.dbg.declare(metadata i32* %aSign, metadata !13231, metadata !DIExpression()), !dbg !13232
  call void @llvm.dbg.declare(metadata i32* %bSign, metadata !13233, metadata !DIExpression()), !dbg !13234
  %6 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13235
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !13235
  %8 = load i64, i64* %7, align 8, !dbg !13235
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !13235
  %10 = load i64, i64* %9, align 8, !dbg !13235
  %call = call i32 @extractFloat128Exp(i64 %8, i64 %10), !dbg !13235
  %cmp = icmp eq i32 %call, 32767, !dbg !13237
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !13238

land.lhs.true:                                    ; preds = %entry
  %11 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13239
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !13239
  %13 = load i64, i64* %12, align 8, !dbg !13239
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !13239
  %15 = load i64, i64* %14, align 8, !dbg !13239
  %call1 = call i64 @extractFloat128Frac0(i64 %13, i64 %15), !dbg !13239
  %16 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13240
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !13240
  %18 = load i64, i64* %17, align 8, !dbg !13240
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !13240
  %20 = load i64, i64* %19, align 8, !dbg !13240
  %call2 = call i64 @extractFloat128Frac1(i64 %18, i64 %20), !dbg !13240
  %or = or i64 %call1, %call2, !dbg !13241
  %tobool = icmp ne i64 %or, 0, !dbg !13241
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !13242

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %21 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13243
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !13243
  %23 = load i64, i64* %22, align 8, !dbg !13243
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !13243
  %25 = load i64, i64* %24, align 8, !dbg !13243
  %call3 = call i32 @extractFloat128Exp(i64 %23, i64 %25), !dbg !13243
  %cmp4 = icmp eq i32 %call3, 32767, !dbg !13244
  br i1 %cmp4, label %land.lhs.true5, label %if.end14, !dbg !13245

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %26 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13246
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !13246
  %28 = load i64, i64* %27, align 8, !dbg !13246
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !13246
  %30 = load i64, i64* %29, align 8, !dbg !13246
  %call6 = call i64 @extractFloat128Frac0(i64 %28, i64 %30), !dbg !13246
  %31 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13247
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !13247
  %33 = load i64, i64* %32, align 8, !dbg !13247
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !13247
  %35 = load i64, i64* %34, align 8, !dbg !13247
  %call7 = call i64 @extractFloat128Frac1(i64 %33, i64 %35), !dbg !13247
  %or8 = or i64 %call6, %call7, !dbg !13248
  %tobool9 = icmp ne i64 %or8, 0, !dbg !13248
  br i1 %tobool9, label %if.then, label %if.end14, !dbg !13249

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  %36 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13250
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !13250
  %38 = load i64, i64* %37, align 8, !dbg !13250
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !13250
  %40 = load i64, i64* %39, align 8, !dbg !13250
  %call10 = call zeroext i1 @float128_is_nan(i64 %38, i64 %40), !dbg !13250
  br i1 %call10, label %if.then13, label %lor.lhs.false11, !dbg !13253

lor.lhs.false11:                                  ; preds = %if.then
  %41 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13254
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !13254
  %43 = load i64, i64* %42, align 8, !dbg !13254
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !13254
  %45 = load i64, i64* %44, align 8, !dbg !13254
  %call12 = call zeroext i1 @float128_is_nan(i64 %43, i64 %45), !dbg !13254
  br i1 %call12, label %if.then13, label %if.end, !dbg !13255

if.then13:                                        ; preds = %lor.lhs.false11, %if.then
  call void @float_raise(i32 16), !dbg !13256
  br label %if.end, !dbg !13258

if.end:                                           ; preds = %if.then13, %lor.lhs.false11
  store i1 false, i1* %retval, align 1, !dbg !13259
  br label %return, !dbg !13259

if.end14:                                         ; preds = %land.lhs.true5, %lor.lhs.false
  %46 = bitcast %struct.float128* %a to { i64, i64 }*, !dbg !13260
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0, !dbg !13260
  %48 = load i64, i64* %47, align 8, !dbg !13260
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1, !dbg !13260
  %50 = load i64, i64* %49, align 8, !dbg !13260
  %call15 = call i32 @extractFloat128Sign(i64 %48, i64 %50), !dbg !13260
  store i32 %call15, i32* %aSign, align 4, !dbg !13261
  %51 = bitcast %struct.float128* %b to { i64, i64 }*, !dbg !13262
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !13262
  %53 = load i64, i64* %52, align 8, !dbg !13262
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !13262
  %55 = load i64, i64* %54, align 8, !dbg !13262
  %call16 = call i32 @extractFloat128Sign(i64 %53, i64 %55), !dbg !13262
  store i32 %call16, i32* %bSign, align 4, !dbg !13263
  %56 = load i32, i32* %aSign, align 4, !dbg !13264
  %57 = load i32, i32* %bSign, align 4, !dbg !13266
  %cmp17 = icmp ne i32 %56, %57, !dbg !13267
  br i1 %cmp17, label %if.then18, label %if.end26, !dbg !13268

if.then18:                                        ; preds = %if.end14
  %58 = load i32, i32* %aSign, align 4, !dbg !13269
  %tobool19 = icmp ne i32 %58, 0, !dbg !13269
  br i1 %tobool19, label %land.rhs, label %land.end, !dbg !13271

land.rhs:                                         ; preds = %if.then18
  %high = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13272
  %59 = load i64, i64* %high, align 8, !dbg !13272
  %high20 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13273
  %60 = load i64, i64* %high20, align 8, !dbg !13273
  %or21 = or i64 %59, %60, !dbg !13274
  %shl = shl i64 %or21, 1, !dbg !13275
  %low = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13276
  %61 = load i64, i64* %low, align 8, !dbg !13276
  %or22 = or i64 %shl, %61, !dbg !13277
  %low23 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13278
  %62 = load i64, i64* %low23, align 8, !dbg !13278
  %or24 = or i64 %or22, %62, !dbg !13279
  %cmp25 = icmp ne i64 %or24, 0, !dbg !13280
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then18
  %63 = phi i1 [ false, %if.then18 ], [ %cmp25, %land.rhs ]
  store i1 %63, i1* %retval, align 1, !dbg !13281
  br label %return, !dbg !13281

if.end26:                                         ; preds = %if.end14
  %64 = load i32, i32* %aSign, align 4, !dbg !13282
  %tobool27 = icmp ne i32 %64, 0, !dbg !13282
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !13282

cond.true:                                        ; preds = %if.end26
  %high28 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13283
  %65 = load i64, i64* %high28, align 8, !dbg !13283
  %low29 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13284
  %66 = load i64, i64* %low29, align 8, !dbg !13284
  %high30 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13285
  %67 = load i64, i64* %high30, align 8, !dbg !13285
  %low31 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13286
  %68 = load i64, i64* %low31, align 8, !dbg !13286
  %call32 = call zeroext i1 @lt128(i64 %65, i64 %66, i64 %67, i64 %68), !dbg !13287
  %conv = zext i1 %call32 to i32, !dbg !13287
  br label %cond.end, !dbg !13282

cond.false:                                       ; preds = %if.end26
  %high33 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 0, !dbg !13288
  %69 = load i64, i64* %high33, align 8, !dbg !13288
  %low34 = getelementptr inbounds %struct.float128, %struct.float128* %a, i32 0, i32 1, !dbg !13289
  %70 = load i64, i64* %low34, align 8, !dbg !13289
  %high35 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 0, !dbg !13290
  %71 = load i64, i64* %high35, align 8, !dbg !13290
  %low36 = getelementptr inbounds %struct.float128, %struct.float128* %b, i32 0, i32 1, !dbg !13291
  %72 = load i64, i64* %low36, align 8, !dbg !13291
  %call37 = call zeroext i1 @lt128(i64 %69, i64 %70, i64 %71, i64 %72), !dbg !13292
  %conv38 = zext i1 %call37 to i32, !dbg !13292
  br label %cond.end, !dbg !13282

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv38, %cond.false ], !dbg !13282
  %tobool39 = icmp ne i32 %cond, 0, !dbg !13282
  store i1 %tobool39, i1* %retval, align 1, !dbg !13293
  br label %return, !dbg !13293

return:                                           ; preds = %cond.end, %land.end, %if.end
  %73 = load i1, i1* %retval, align 1, !dbg !13294
  ret i1 %73, !dbg !13294
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!67, !68, !69}
!llvm.ident = !{!70}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "float_rounding_mode", scope: !2, file: !3, line: 40, type: !38, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 6.0.0 (tags/RELEASE_600/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !23, globals: !35)
!3 = !DIFile(filename: "../softfloat.c", directory: "/home/aaa/softfloat/bits64/SPARC-Solaris-GCC")
!4 = !{!5, !13, !19}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 84, size: 32, elements: !7)
!6 = !DIFile(filename: "./softfloat.h", directory: "/home/aaa/softfloat/bits64/SPARC-Solaris-GCC")
!7 = !{!8, !9, !10, !11, !12}
!8 = !DIEnumerator(name: "float_flag_inexact", value: 1)
!9 = !DIEnumerator(name: "float_flag_divbyzero", value: 2)
!10 = !DIEnumerator(name: "float_flag_underflow", value: 4)
!11 = !DIEnumerator(name: "float_flag_overflow", value: 8)
!12 = !DIEnumerator(name: "float_flag_invalid", value: 16)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 73, size: 32, elements: !14)
!14 = !{!15, !16, !17, !18}
!15 = !DIEnumerator(name: "float_round_nearest_even", value: 0)
!16 = !DIEnumerator(name: "float_round_to_zero", value: 1)
!17 = !DIEnumerator(name: "float_round_up", value: 2)
!18 = !DIEnumerator(name: "float_round_down", value: 3)
!19 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 64, size: 32, elements: !20)
!20 = !{!21, !22}
!21 = !DIEnumerator(name: "float_tininess_after_rounding", value: 0)
!22 = !DIEnumerator(name: "float_tininess_before_rounding", value: 1)
!23 = !{!24, !27, !29, !31, !33}
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "bits64", file: !25, line: 46, baseType: !26)
!25 = !DIFile(filename: "./../../SPARC-GCC.h", directory: "/home/aaa/softfloat/bits64/SPARC-Solaris-GCC")
!26 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "bits32", file: !25, line: 43, baseType: !28)
!28 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!29 = !DIDerivedType(tag: DW_TAG_typedef, name: "bits16", file: !25, line: 41, baseType: !30)
!30 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbits32", file: !25, line: 44, baseType: !32)
!32 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbits64", file: !25, line: 47, baseType: !34)
!34 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!35 = !{!0, !36, !39, !41, !44, !55, !65}
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "float_exception_flags", scope: !2, file: !3, line: 41, type: !38, isLocal: false, isDefinition: true)
!38 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8", file: !25, line: 23, baseType: !32)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "floatx80_rounding_precision", scope: !2, file: !3, line: 43, type: !38, isLocal: false, isDefinition: true)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "float_detect_tininess", scope: !2, file: !43, line: 37, type: !38, isLocal: false, isDefinition: true)
!43 = !DIFile(filename: "./softfloat-specialize", directory: "/home/aaa/softfloat/bits64/SPARC-Solaris-GCC")
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "countLeadingZerosHigh", scope: !46, file: !47, line: 614, type: !51, isLocal: true, isDefinition: true)
!46 = distinct !DISubprogram(name: "countLeadingZeros32", scope: !47, file: !47, line: 612, type: !48, isLocal: true, isDefinition: true, scopeLine: 613, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!47 = !DIFile(filename: "../softfloat-macros", directory: "/home/aaa/softfloat/bits64/SPARC-Solaris-GCC")
!48 = !DISubroutineType(types: !49)
!49 = !{!38, !27}
!50 = !{}
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 8192, elements: !53)
!52 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !38)
!53 = !{!54}
!54 = !DISubrange(count: 256)
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "sqrtOddAdjustments", scope: !57, file: !47, line: 580, type: !61, isLocal: true, isDefinition: true)
!57 = distinct !DISubprogram(name: "estimateSqrt32", scope: !47, file: !47, line: 578, type: !58, isLocal: true, isDefinition: true, scopeLine: 579, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!58 = !DISubroutineType(types: !59)
!59 = !{!27, !60, !27}
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16", file: !25, line: 25, baseType: !32)
!61 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !63)
!62 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !29)
!63 = !{!64}
!64 = !DISubrange(count: 16)
!65 = !DIGlobalVariableExpression(var: !66, expr: !DIExpression())
!66 = distinct !DIGlobalVariable(name: "sqrtEvenAdjustments", scope: !57, file: !47, line: 584, type: !61, isLocal: true, isDefinition: true)
!67 = !{i32 2, !"Dwarf Version", i32 4}
!68 = !{i32 2, !"Debug Info Version", i32 3}
!69 = !{i32 1, !"wchar_size", i32 4}
!70 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
!71 = distinct !DISubprogram(name: "shift32RightJamming", scope: !47, file: !47, line: 42, type: !72, isLocal: false, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!72 = !DISubroutineType(types: !73)
!73 = !{null, !27, !60, !74}
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!75 = !DILocalVariable(name: "a", arg: 1, scope: !71, file: !47, line: 42, type: !27)
!76 = !DILocation(line: 42, column: 41, scope: !71)
!77 = !DILocalVariable(name: "count", arg: 2, scope: !71, file: !47, line: 42, type: !60)
!78 = !DILocation(line: 42, column: 50, scope: !71)
!79 = !DILocalVariable(name: "zPtr", arg: 3, scope: !71, file: !47, line: 42, type: !74)
!80 = !DILocation(line: 42, column: 65, scope: !71)
!81 = !DILocalVariable(name: "z", scope: !71, file: !47, line: 44, type: !27)
!82 = !DILocation(line: 44, column: 12, scope: !71)
!83 = !DILocation(line: 46, column: 10, scope: !84)
!84 = distinct !DILexicalBlock(scope: !71, file: !47, line: 46, column: 10)
!85 = !DILocation(line: 46, column: 16, scope: !84)
!86 = !DILocation(line: 46, column: 10, scope: !71)
!87 = !DILocation(line: 47, column: 13, scope: !88)
!88 = distinct !DILexicalBlock(scope: !84, file: !47, line: 46, column: 23)
!89 = !DILocation(line: 47, column: 11, scope: !88)
!90 = !DILocation(line: 48, column: 5, scope: !88)
!91 = !DILocation(line: 49, column: 15, scope: !92)
!92 = distinct !DILexicalBlock(scope: !84, file: !47, line: 49, column: 15)
!93 = !DILocation(line: 49, column: 21, scope: !92)
!94 = !DILocation(line: 49, column: 15, scope: !84)
!95 = !DILocation(line: 50, column: 15, scope: !96)
!96 = distinct !DILexicalBlock(scope: !92, file: !47, line: 49, column: 28)
!97 = !DILocation(line: 50, column: 18, scope: !96)
!98 = !DILocation(line: 50, column: 16, scope: !96)
!99 = !DILocation(line: 50, column: 32, scope: !96)
!100 = !DILocation(line: 50, column: 41, scope: !96)
!101 = !DILocation(line: 50, column: 39, scope: !96)
!102 = !DILocation(line: 50, column: 49, scope: !96)
!103 = !DILocation(line: 50, column: 33, scope: !96)
!104 = !DILocation(line: 50, column: 58, scope: !96)
!105 = !DILocation(line: 50, column: 26, scope: !96)
!106 = !DILocation(line: 50, column: 11, scope: !96)
!107 = !DILocation(line: 51, column: 5, scope: !96)
!108 = !DILocation(line: 53, column: 15, scope: !109)
!109 = distinct !DILexicalBlock(scope: !92, file: !47, line: 52, column: 10)
!110 = !DILocation(line: 53, column: 17, scope: !109)
!111 = !DILocation(line: 53, column: 11, scope: !109)
!112 = !DILocation(line: 55, column: 13, scope: !71)
!113 = !DILocation(line: 55, column: 6, scope: !71)
!114 = !DILocation(line: 55, column: 11, scope: !71)
!115 = !DILocation(line: 57, column: 1, scope: !71)
!116 = distinct !DISubprogram(name: "shift64RightJamming", scope: !47, file: !47, line: 68, type: !117, isLocal: false, isDefinition: true, scopeLine: 69, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!117 = !DISubroutineType(types: !118)
!118 = !{null, !24, !60, !119}
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!120 = !DILocalVariable(name: "a", arg: 1, scope: !116, file: !47, line: 68, type: !24)
!121 = !DILocation(line: 68, column: 41, scope: !116)
!122 = !DILocalVariable(name: "count", arg: 2, scope: !116, file: !47, line: 68, type: !60)
!123 = !DILocation(line: 68, column: 50, scope: !116)
!124 = !DILocalVariable(name: "zPtr", arg: 3, scope: !116, file: !47, line: 68, type: !119)
!125 = !DILocation(line: 68, column: 65, scope: !116)
!126 = !DILocalVariable(name: "z", scope: !116, file: !47, line: 70, type: !24)
!127 = !DILocation(line: 70, column: 12, scope: !116)
!128 = !DILocation(line: 72, column: 10, scope: !129)
!129 = distinct !DILexicalBlock(scope: !116, file: !47, line: 72, column: 10)
!130 = !DILocation(line: 72, column: 16, scope: !129)
!131 = !DILocation(line: 72, column: 10, scope: !116)
!132 = !DILocation(line: 73, column: 13, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !47, line: 72, column: 23)
!134 = !DILocation(line: 73, column: 11, scope: !133)
!135 = !DILocation(line: 74, column: 5, scope: !133)
!136 = !DILocation(line: 75, column: 15, scope: !137)
!137 = distinct !DILexicalBlock(scope: !129, file: !47, line: 75, column: 15)
!138 = !DILocation(line: 75, column: 21, scope: !137)
!139 = !DILocation(line: 75, column: 15, scope: !129)
!140 = !DILocation(line: 76, column: 15, scope: !141)
!141 = distinct !DILexicalBlock(scope: !137, file: !47, line: 75, column: 28)
!142 = !DILocation(line: 76, column: 18, scope: !141)
!143 = !DILocation(line: 76, column: 16, scope: !141)
!144 = !DILocation(line: 76, column: 32, scope: !141)
!145 = !DILocation(line: 76, column: 41, scope: !141)
!146 = !DILocation(line: 76, column: 39, scope: !141)
!147 = !DILocation(line: 76, column: 49, scope: !141)
!148 = !DILocation(line: 76, column: 33, scope: !141)
!149 = !DILocation(line: 76, column: 58, scope: !141)
!150 = !DILocation(line: 76, column: 28, scope: !141)
!151 = !DILocation(line: 76, column: 26, scope: !141)
!152 = !DILocation(line: 76, column: 11, scope: !141)
!153 = !DILocation(line: 77, column: 5, scope: !141)
!154 = !DILocation(line: 79, column: 15, scope: !155)
!155 = distinct !DILexicalBlock(scope: !137, file: !47, line: 78, column: 10)
!156 = !DILocation(line: 79, column: 17, scope: !155)
!157 = !DILocation(line: 79, column: 13, scope: !155)
!158 = !DILocation(line: 79, column: 11, scope: !155)
!159 = !DILocation(line: 81, column: 13, scope: !116)
!160 = !DILocation(line: 81, column: 6, scope: !116)
!161 = !DILocation(line: 81, column: 11, scope: !116)
!162 = !DILocation(line: 83, column: 1, scope: !116)
!163 = distinct !DISubprogram(name: "shift64ExtraRightJamming", scope: !47, file: !47, line: 103, type: !164, isLocal: false, isDefinition: true, scopeLine: 105, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !24, !24, !60, !119, !119}
!166 = !DILocalVariable(name: "a0", arg: 1, scope: !163, file: !47, line: 104, type: !24)
!167 = !DILocation(line: 104, column: 13, scope: !163)
!168 = !DILocalVariable(name: "a1", arg: 2, scope: !163, file: !47, line: 104, type: !24)
!169 = !DILocation(line: 104, column: 24, scope: !163)
!170 = !DILocalVariable(name: "count", arg: 3, scope: !163, file: !47, line: 104, type: !60)
!171 = !DILocation(line: 104, column: 34, scope: !163)
!172 = !DILocalVariable(name: "z0Ptr", arg: 4, scope: !163, file: !47, line: 104, type: !119)
!173 = !DILocation(line: 104, column: 49, scope: !163)
!174 = !DILocalVariable(name: "z1Ptr", arg: 5, scope: !163, file: !47, line: 104, type: !119)
!175 = !DILocation(line: 104, column: 64, scope: !163)
!176 = !DILocalVariable(name: "z0", scope: !163, file: !47, line: 106, type: !24)
!177 = !DILocation(line: 106, column: 12, scope: !163)
!178 = !DILocalVariable(name: "z1", scope: !163, file: !47, line: 106, type: !24)
!179 = !DILocation(line: 106, column: 16, scope: !163)
!180 = !DILocalVariable(name: "negCount", scope: !163, file: !47, line: 107, type: !38)
!181 = !DILocation(line: 107, column: 10, scope: !163)
!182 = !DILocation(line: 107, column: 25, scope: !163)
!183 = !DILocation(line: 107, column: 23, scope: !163)
!184 = !DILocation(line: 107, column: 33, scope: !163)
!185 = !DILocation(line: 109, column: 10, scope: !186)
!186 = distinct !DILexicalBlock(scope: !163, file: !47, line: 109, column: 10)
!187 = !DILocation(line: 109, column: 16, scope: !186)
!188 = !DILocation(line: 109, column: 10, scope: !163)
!189 = !DILocation(line: 110, column: 14, scope: !190)
!190 = distinct !DILexicalBlock(scope: !186, file: !47, line: 109, column: 23)
!191 = !DILocation(line: 110, column: 12, scope: !190)
!192 = !DILocation(line: 111, column: 14, scope: !190)
!193 = !DILocation(line: 111, column: 12, scope: !190)
!194 = !DILocation(line: 112, column: 5, scope: !190)
!195 = !DILocation(line: 113, column: 15, scope: !196)
!196 = distinct !DILexicalBlock(scope: !186, file: !47, line: 113, column: 15)
!197 = !DILocation(line: 113, column: 21, scope: !196)
!198 = !DILocation(line: 113, column: 15, scope: !186)
!199 = !DILocation(line: 114, column: 16, scope: !200)
!200 = distinct !DILexicalBlock(scope: !196, file: !47, line: 113, column: 28)
!201 = !DILocation(line: 114, column: 20, scope: !200)
!202 = !DILocation(line: 114, column: 18, scope: !200)
!203 = !DILocation(line: 114, column: 35, scope: !200)
!204 = !DILocation(line: 114, column: 38, scope: !200)
!205 = !DILocation(line: 114, column: 33, scope: !200)
!206 = !DILocation(line: 114, column: 31, scope: !200)
!207 = !DILocation(line: 114, column: 12, scope: !200)
!208 = !DILocation(line: 115, column: 14, scope: !200)
!209 = !DILocation(line: 115, column: 18, scope: !200)
!210 = !DILocation(line: 115, column: 16, scope: !200)
!211 = !DILocation(line: 115, column: 12, scope: !200)
!212 = !DILocation(line: 116, column: 5, scope: !200)
!213 = !DILocation(line: 118, column: 14, scope: !214)
!214 = distinct !DILexicalBlock(scope: !215, file: !47, line: 118, column: 14)
!215 = distinct !DILexicalBlock(scope: !196, file: !47, line: 117, column: 10)
!216 = !DILocation(line: 118, column: 20, scope: !214)
!217 = !DILocation(line: 118, column: 14, scope: !215)
!218 = !DILocation(line: 119, column: 18, scope: !219)
!219 = distinct !DILexicalBlock(scope: !214, file: !47, line: 118, column: 28)
!220 = !DILocation(line: 119, column: 25, scope: !219)
!221 = !DILocation(line: 119, column: 28, scope: !219)
!222 = !DILocation(line: 119, column: 23, scope: !219)
!223 = !DILocation(line: 119, column: 21, scope: !219)
!224 = !DILocation(line: 119, column: 16, scope: !219)
!225 = !DILocation(line: 120, column: 9, scope: !219)
!226 = !DILocation(line: 122, column: 22, scope: !227)
!227 = distinct !DILexicalBlock(scope: !214, file: !47, line: 121, column: 14)
!228 = !DILocation(line: 122, column: 27, scope: !227)
!229 = !DILocation(line: 122, column: 25, scope: !227)
!230 = !DILocation(line: 122, column: 32, scope: !227)
!231 = !DILocation(line: 122, column: 18, scope: !227)
!232 = !DILocation(line: 122, column: 16, scope: !227)
!233 = !DILocation(line: 124, column: 12, scope: !215)
!234 = !DILocation(line: 126, column: 14, scope: !163)
!235 = !DILocation(line: 126, column: 6, scope: !163)
!236 = !DILocation(line: 126, column: 12, scope: !163)
!237 = !DILocation(line: 127, column: 14, scope: !163)
!238 = !DILocation(line: 127, column: 6, scope: !163)
!239 = !DILocation(line: 127, column: 12, scope: !163)
!240 = !DILocation(line: 129, column: 1, scope: !163)
!241 = distinct !DISubprogram(name: "shift128Right", scope: !47, file: !47, line: 140, type: !164, isLocal: false, isDefinition: true, scopeLine: 142, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!242 = !DILocalVariable(name: "a0", arg: 1, scope: !241, file: !47, line: 141, type: !24)
!243 = !DILocation(line: 141, column: 13, scope: !241)
!244 = !DILocalVariable(name: "a1", arg: 2, scope: !241, file: !47, line: 141, type: !24)
!245 = !DILocation(line: 141, column: 24, scope: !241)
!246 = !DILocalVariable(name: "count", arg: 3, scope: !241, file: !47, line: 141, type: !60)
!247 = !DILocation(line: 141, column: 34, scope: !241)
!248 = !DILocalVariable(name: "z0Ptr", arg: 4, scope: !241, file: !47, line: 141, type: !119)
!249 = !DILocation(line: 141, column: 49, scope: !241)
!250 = !DILocalVariable(name: "z1Ptr", arg: 5, scope: !241, file: !47, line: 141, type: !119)
!251 = !DILocation(line: 141, column: 64, scope: !241)
!252 = !DILocalVariable(name: "z0", scope: !241, file: !47, line: 143, type: !24)
!253 = !DILocation(line: 143, column: 12, scope: !241)
!254 = !DILocalVariable(name: "z1", scope: !241, file: !47, line: 143, type: !24)
!255 = !DILocation(line: 143, column: 16, scope: !241)
!256 = !DILocalVariable(name: "negCount", scope: !241, file: !47, line: 144, type: !38)
!257 = !DILocation(line: 144, column: 10, scope: !241)
!258 = !DILocation(line: 144, column: 25, scope: !241)
!259 = !DILocation(line: 144, column: 23, scope: !241)
!260 = !DILocation(line: 144, column: 33, scope: !241)
!261 = !DILocation(line: 146, column: 10, scope: !262)
!262 = distinct !DILexicalBlock(scope: !241, file: !47, line: 146, column: 10)
!263 = !DILocation(line: 146, column: 16, scope: !262)
!264 = !DILocation(line: 146, column: 10, scope: !241)
!265 = !DILocation(line: 147, column: 14, scope: !266)
!266 = distinct !DILexicalBlock(scope: !262, file: !47, line: 146, column: 23)
!267 = !DILocation(line: 147, column: 12, scope: !266)
!268 = !DILocation(line: 148, column: 14, scope: !266)
!269 = !DILocation(line: 148, column: 12, scope: !266)
!270 = !DILocation(line: 149, column: 5, scope: !266)
!271 = !DILocation(line: 150, column: 15, scope: !272)
!272 = distinct !DILexicalBlock(scope: !262, file: !47, line: 150, column: 15)
!273 = !DILocation(line: 150, column: 21, scope: !272)
!274 = !DILocation(line: 150, column: 15, scope: !262)
!275 = !DILocation(line: 151, column: 16, scope: !276)
!276 = distinct !DILexicalBlock(scope: !272, file: !47, line: 150, column: 28)
!277 = !DILocation(line: 151, column: 20, scope: !276)
!278 = !DILocation(line: 151, column: 18, scope: !276)
!279 = !DILocation(line: 151, column: 35, scope: !276)
!280 = !DILocation(line: 151, column: 39, scope: !276)
!281 = !DILocation(line: 151, column: 37, scope: !276)
!282 = !DILocation(line: 151, column: 31, scope: !276)
!283 = !DILocation(line: 151, column: 12, scope: !276)
!284 = !DILocation(line: 152, column: 14, scope: !276)
!285 = !DILocation(line: 152, column: 18, scope: !276)
!286 = !DILocation(line: 152, column: 16, scope: !276)
!287 = !DILocation(line: 152, column: 12, scope: !276)
!288 = !DILocation(line: 153, column: 5, scope: !276)
!289 = !DILocation(line: 155, column: 16, scope: !290)
!290 = distinct !DILexicalBlock(scope: !272, file: !47, line: 154, column: 10)
!291 = !DILocation(line: 155, column: 22, scope: !290)
!292 = !DILocation(line: 155, column: 14, scope: !290)
!293 = !DILocation(line: 155, column: 33, scope: !290)
!294 = !DILocation(line: 155, column: 39, scope: !290)
!295 = !DILocation(line: 155, column: 45, scope: !290)
!296 = !DILocation(line: 155, column: 35, scope: !290)
!297 = !DILocation(line: 155, column: 12, scope: !290)
!298 = !DILocation(line: 156, column: 12, scope: !290)
!299 = !DILocation(line: 158, column: 14, scope: !241)
!300 = !DILocation(line: 158, column: 6, scope: !241)
!301 = !DILocation(line: 158, column: 12, scope: !241)
!302 = !DILocation(line: 159, column: 14, scope: !241)
!303 = !DILocation(line: 159, column: 6, scope: !241)
!304 = !DILocation(line: 159, column: 12, scope: !241)
!305 = !DILocation(line: 161, column: 1, scope: !241)
!306 = distinct !DISubprogram(name: "shift128RightJamming", scope: !47, file: !47, line: 175, type: !164, isLocal: false, isDefinition: true, scopeLine: 177, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!307 = !DILocalVariable(name: "a0", arg: 1, scope: !306, file: !47, line: 176, type: !24)
!308 = !DILocation(line: 176, column: 13, scope: !306)
!309 = !DILocalVariable(name: "a1", arg: 2, scope: !306, file: !47, line: 176, type: !24)
!310 = !DILocation(line: 176, column: 24, scope: !306)
!311 = !DILocalVariable(name: "count", arg: 3, scope: !306, file: !47, line: 176, type: !60)
!312 = !DILocation(line: 176, column: 34, scope: !306)
!313 = !DILocalVariable(name: "z0Ptr", arg: 4, scope: !306, file: !47, line: 176, type: !119)
!314 = !DILocation(line: 176, column: 49, scope: !306)
!315 = !DILocalVariable(name: "z1Ptr", arg: 5, scope: !306, file: !47, line: 176, type: !119)
!316 = !DILocation(line: 176, column: 64, scope: !306)
!317 = !DILocalVariable(name: "z0", scope: !306, file: !47, line: 178, type: !24)
!318 = !DILocation(line: 178, column: 12, scope: !306)
!319 = !DILocalVariable(name: "z1", scope: !306, file: !47, line: 178, type: !24)
!320 = !DILocation(line: 178, column: 16, scope: !306)
!321 = !DILocalVariable(name: "negCount", scope: !306, file: !47, line: 179, type: !38)
!322 = !DILocation(line: 179, column: 10, scope: !306)
!323 = !DILocation(line: 179, column: 25, scope: !306)
!324 = !DILocation(line: 179, column: 23, scope: !306)
!325 = !DILocation(line: 179, column: 33, scope: !306)
!326 = !DILocation(line: 181, column: 10, scope: !327)
!327 = distinct !DILexicalBlock(scope: !306, file: !47, line: 181, column: 10)
!328 = !DILocation(line: 181, column: 16, scope: !327)
!329 = !DILocation(line: 181, column: 10, scope: !306)
!330 = !DILocation(line: 182, column: 14, scope: !331)
!331 = distinct !DILexicalBlock(scope: !327, file: !47, line: 181, column: 23)
!332 = !DILocation(line: 182, column: 12, scope: !331)
!333 = !DILocation(line: 183, column: 14, scope: !331)
!334 = !DILocation(line: 183, column: 12, scope: !331)
!335 = !DILocation(line: 184, column: 5, scope: !331)
!336 = !DILocation(line: 185, column: 15, scope: !337)
!337 = distinct !DILexicalBlock(scope: !327, file: !47, line: 185, column: 15)
!338 = !DILocation(line: 185, column: 21, scope: !337)
!339 = !DILocation(line: 185, column: 15, scope: !327)
!340 = !DILocation(line: 186, column: 16, scope: !341)
!341 = distinct !DILexicalBlock(scope: !337, file: !47, line: 185, column: 28)
!342 = !DILocation(line: 186, column: 20, scope: !341)
!343 = !DILocation(line: 186, column: 18, scope: !341)
!344 = !DILocation(line: 186, column: 35, scope: !341)
!345 = !DILocation(line: 186, column: 39, scope: !341)
!346 = !DILocation(line: 186, column: 37, scope: !341)
!347 = !DILocation(line: 186, column: 31, scope: !341)
!348 = !DILocation(line: 186, column: 53, scope: !341)
!349 = !DILocation(line: 186, column: 57, scope: !341)
!350 = !DILocation(line: 186, column: 55, scope: !341)
!351 = !DILocation(line: 186, column: 68, scope: !341)
!352 = !DILocation(line: 186, column: 49, scope: !341)
!353 = !DILocation(line: 186, column: 47, scope: !341)
!354 = !DILocation(line: 186, column: 12, scope: !341)
!355 = !DILocation(line: 187, column: 14, scope: !341)
!356 = !DILocation(line: 187, column: 18, scope: !341)
!357 = !DILocation(line: 187, column: 16, scope: !341)
!358 = !DILocation(line: 187, column: 12, scope: !341)
!359 = !DILocation(line: 188, column: 5, scope: !341)
!360 = !DILocation(line: 190, column: 14, scope: !361)
!361 = distinct !DILexicalBlock(scope: !362, file: !47, line: 190, column: 14)
!362 = distinct !DILexicalBlock(scope: !337, file: !47, line: 189, column: 10)
!363 = !DILocation(line: 190, column: 20, scope: !361)
!364 = !DILocation(line: 190, column: 14, scope: !362)
!365 = !DILocation(line: 191, column: 18, scope: !366)
!366 = distinct !DILexicalBlock(scope: !361, file: !47, line: 190, column: 28)
!367 = !DILocation(line: 191, column: 25, scope: !366)
!368 = !DILocation(line: 191, column: 28, scope: !366)
!369 = !DILocation(line: 191, column: 23, scope: !366)
!370 = !DILocation(line: 191, column: 21, scope: !366)
!371 = !DILocation(line: 191, column: 16, scope: !366)
!372 = !DILocation(line: 192, column: 9, scope: !366)
!373 = !DILocation(line: 193, column: 19, scope: !374)
!374 = distinct !DILexicalBlock(scope: !361, file: !47, line: 193, column: 19)
!375 = !DILocation(line: 193, column: 25, scope: !374)
!376 = !DILocation(line: 193, column: 19, scope: !361)
!377 = !DILocation(line: 194, column: 20, scope: !378)
!378 = distinct !DILexicalBlock(scope: !374, file: !47, line: 193, column: 33)
!379 = !DILocation(line: 194, column: 26, scope: !378)
!380 = !DILocation(line: 194, column: 32, scope: !378)
!381 = !DILocation(line: 194, column: 22, scope: !378)
!382 = !DILocation(line: 194, column: 49, scope: !378)
!383 = !DILocation(line: 194, column: 53, scope: !378)
!384 = !DILocation(line: 194, column: 51, scope: !378)
!385 = !DILocation(line: 194, column: 66, scope: !378)
!386 = !DILocation(line: 194, column: 64, scope: !378)
!387 = !DILocation(line: 194, column: 71, scope: !378)
!388 = !DILocation(line: 194, column: 43, scope: !378)
!389 = !DILocation(line: 194, column: 41, scope: !378)
!390 = !DILocation(line: 194, column: 16, scope: !378)
!391 = !DILocation(line: 195, column: 9, scope: !378)
!392 = !DILocation(line: 197, column: 22, scope: !393)
!393 = distinct !DILexicalBlock(scope: !374, file: !47, line: 196, column: 14)
!394 = !DILocation(line: 197, column: 27, scope: !393)
!395 = !DILocation(line: 197, column: 25, scope: !393)
!396 = !DILocation(line: 197, column: 32, scope: !393)
!397 = !DILocation(line: 197, column: 18, scope: !393)
!398 = !DILocation(line: 197, column: 16, scope: !393)
!399 = !DILocation(line: 199, column: 12, scope: !362)
!400 = !DILocation(line: 201, column: 14, scope: !306)
!401 = !DILocation(line: 201, column: 6, scope: !306)
!402 = !DILocation(line: 201, column: 12, scope: !306)
!403 = !DILocation(line: 202, column: 14, scope: !306)
!404 = !DILocation(line: 202, column: 6, scope: !306)
!405 = !DILocation(line: 202, column: 12, scope: !306)
!406 = !DILocation(line: 204, column: 1, scope: !306)
!407 = distinct !DISubprogram(name: "shift128ExtraRightJamming", scope: !47, file: !47, line: 226, type: !408, isLocal: false, isDefinition: true, scopeLine: 235, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!408 = !DISubroutineType(types: !409)
!409 = !{null, !24, !24, !24, !60, !119, !119, !119}
!410 = !DILocalVariable(name: "a0", arg: 1, scope: !407, file: !47, line: 227, type: !24)
!411 = !DILocation(line: 227, column: 13, scope: !407)
!412 = !DILocalVariable(name: "a1", arg: 2, scope: !407, file: !47, line: 228, type: !24)
!413 = !DILocation(line: 228, column: 13, scope: !407)
!414 = !DILocalVariable(name: "a2", arg: 3, scope: !407, file: !47, line: 229, type: !24)
!415 = !DILocation(line: 229, column: 13, scope: !407)
!416 = !DILocalVariable(name: "count", arg: 4, scope: !407, file: !47, line: 230, type: !60)
!417 = !DILocation(line: 230, column: 12, scope: !407)
!418 = !DILocalVariable(name: "z0Ptr", arg: 5, scope: !407, file: !47, line: 231, type: !119)
!419 = !DILocation(line: 231, column: 14, scope: !407)
!420 = !DILocalVariable(name: "z1Ptr", arg: 6, scope: !407, file: !47, line: 232, type: !119)
!421 = !DILocation(line: 232, column: 14, scope: !407)
!422 = !DILocalVariable(name: "z2Ptr", arg: 7, scope: !407, file: !47, line: 233, type: !119)
!423 = !DILocation(line: 233, column: 14, scope: !407)
!424 = !DILocalVariable(name: "z0", scope: !407, file: !47, line: 236, type: !24)
!425 = !DILocation(line: 236, column: 12, scope: !407)
!426 = !DILocalVariable(name: "z1", scope: !407, file: !47, line: 236, type: !24)
!427 = !DILocation(line: 236, column: 16, scope: !407)
!428 = !DILocalVariable(name: "z2", scope: !407, file: !47, line: 236, type: !24)
!429 = !DILocation(line: 236, column: 20, scope: !407)
!430 = !DILocalVariable(name: "negCount", scope: !407, file: !47, line: 237, type: !38)
!431 = !DILocation(line: 237, column: 10, scope: !407)
!432 = !DILocation(line: 237, column: 25, scope: !407)
!433 = !DILocation(line: 237, column: 23, scope: !407)
!434 = !DILocation(line: 237, column: 33, scope: !407)
!435 = !DILocation(line: 239, column: 10, scope: !436)
!436 = distinct !DILexicalBlock(scope: !407, file: !47, line: 239, column: 10)
!437 = !DILocation(line: 239, column: 16, scope: !436)
!438 = !DILocation(line: 239, column: 10, scope: !407)
!439 = !DILocation(line: 240, column: 14, scope: !440)
!440 = distinct !DILexicalBlock(scope: !436, file: !47, line: 239, column: 23)
!441 = !DILocation(line: 240, column: 12, scope: !440)
!442 = !DILocation(line: 241, column: 14, scope: !440)
!443 = !DILocation(line: 241, column: 12, scope: !440)
!444 = !DILocation(line: 242, column: 14, scope: !440)
!445 = !DILocation(line: 242, column: 12, scope: !440)
!446 = !DILocation(line: 243, column: 5, scope: !440)
!447 = !DILocation(line: 245, column: 14, scope: !448)
!448 = distinct !DILexicalBlock(scope: !449, file: !47, line: 245, column: 14)
!449 = distinct !DILexicalBlock(scope: !436, file: !47, line: 244, column: 10)
!450 = !DILocation(line: 245, column: 20, scope: !448)
!451 = !DILocation(line: 245, column: 14, scope: !449)
!452 = !DILocation(line: 246, column: 18, scope: !453)
!453 = distinct !DILexicalBlock(scope: !448, file: !47, line: 245, column: 27)
!454 = !DILocation(line: 246, column: 22, scope: !453)
!455 = !DILocation(line: 246, column: 20, scope: !453)
!456 = !DILocation(line: 246, column: 16, scope: !453)
!457 = !DILocation(line: 247, column: 20, scope: !453)
!458 = !DILocation(line: 247, column: 24, scope: !453)
!459 = !DILocation(line: 247, column: 22, scope: !453)
!460 = !DILocation(line: 247, column: 39, scope: !453)
!461 = !DILocation(line: 247, column: 43, scope: !453)
!462 = !DILocation(line: 247, column: 41, scope: !453)
!463 = !DILocation(line: 247, column: 35, scope: !453)
!464 = !DILocation(line: 247, column: 16, scope: !453)
!465 = !DILocation(line: 248, column: 18, scope: !453)
!466 = !DILocation(line: 248, column: 22, scope: !453)
!467 = !DILocation(line: 248, column: 20, scope: !453)
!468 = !DILocation(line: 248, column: 16, scope: !453)
!469 = !DILocation(line: 249, column: 9, scope: !453)
!470 = !DILocation(line: 251, column: 18, scope: !471)
!471 = distinct !DILexicalBlock(scope: !472, file: !47, line: 251, column: 18)
!472 = distinct !DILexicalBlock(scope: !448, file: !47, line: 250, column: 14)
!473 = !DILocation(line: 251, column: 24, scope: !471)
!474 = !DILocation(line: 251, column: 18, scope: !472)
!475 = !DILocation(line: 252, column: 22, scope: !476)
!476 = distinct !DILexicalBlock(scope: !471, file: !47, line: 251, column: 32)
!477 = !DILocation(line: 252, column: 20, scope: !476)
!478 = !DILocation(line: 253, column: 22, scope: !476)
!479 = !DILocation(line: 253, column: 20, scope: !476)
!480 = !DILocation(line: 254, column: 13, scope: !476)
!481 = !DILocation(line: 256, column: 23, scope: !482)
!482 = distinct !DILexicalBlock(scope: !471, file: !47, line: 255, column: 18)
!483 = !DILocation(line: 256, column: 20, scope: !482)
!484 = !DILocation(line: 257, column: 22, scope: !485)
!485 = distinct !DILexicalBlock(scope: !482, file: !47, line: 257, column: 22)
!486 = !DILocation(line: 257, column: 28, scope: !485)
!487 = !DILocation(line: 257, column: 22, scope: !482)
!488 = !DILocation(line: 258, column: 26, scope: !489)
!489 = distinct !DILexicalBlock(scope: !485, file: !47, line: 257, column: 36)
!490 = !DILocation(line: 258, column: 30, scope: !489)
!491 = !DILocation(line: 258, column: 28, scope: !489)
!492 = !DILocation(line: 258, column: 24, scope: !489)
!493 = !DILocation(line: 259, column: 26, scope: !489)
!494 = !DILocation(line: 259, column: 32, scope: !489)
!495 = !DILocation(line: 259, column: 38, scope: !489)
!496 = !DILocation(line: 259, column: 28, scope: !489)
!497 = !DILocation(line: 259, column: 24, scope: !489)
!498 = !DILocation(line: 260, column: 17, scope: !489)
!499 = !DILocation(line: 262, column: 28, scope: !500)
!500 = distinct !DILexicalBlock(scope: !485, file: !47, line: 261, column: 22)
!501 = !DILocation(line: 262, column: 34, scope: !500)
!502 = !DILocation(line: 262, column: 26, scope: !500)
!503 = !DILocation(line: 262, column: 45, scope: !500)
!504 = !DILocation(line: 262, column: 52, scope: !500)
!505 = !DILocation(line: 262, column: 55, scope: !500)
!506 = !DILocation(line: 262, column: 50, scope: !500)
!507 = !DILocation(line: 262, column: 24, scope: !500)
!508 = !DILocation(line: 263, column: 24, scope: !500)
!509 = !DILocation(line: 266, column: 16, scope: !472)
!510 = !DILocation(line: 268, column: 17, scope: !449)
!511 = !DILocation(line: 268, column: 20, scope: !449)
!512 = !DILocation(line: 268, column: 15, scope: !449)
!513 = !DILocation(line: 268, column: 12, scope: !449)
!514 = !DILocation(line: 270, column: 14, scope: !407)
!515 = !DILocation(line: 270, column: 6, scope: !407)
!516 = !DILocation(line: 270, column: 12, scope: !407)
!517 = !DILocation(line: 271, column: 14, scope: !407)
!518 = !DILocation(line: 271, column: 6, scope: !407)
!519 = !DILocation(line: 271, column: 12, scope: !407)
!520 = !DILocation(line: 272, column: 14, scope: !407)
!521 = !DILocation(line: 272, column: 6, scope: !407)
!522 = !DILocation(line: 272, column: 12, scope: !407)
!523 = !DILocation(line: 274, column: 1, scope: !407)
!524 = distinct !DISubprogram(name: "shortShift128Left", scope: !47, file: !47, line: 284, type: !164, isLocal: false, isDefinition: true, scopeLine: 286, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!525 = !DILocalVariable(name: "a0", arg: 1, scope: !524, file: !47, line: 285, type: !24)
!526 = !DILocation(line: 285, column: 13, scope: !524)
!527 = !DILocalVariable(name: "a1", arg: 2, scope: !524, file: !47, line: 285, type: !24)
!528 = !DILocation(line: 285, column: 24, scope: !524)
!529 = !DILocalVariable(name: "count", arg: 3, scope: !524, file: !47, line: 285, type: !60)
!530 = !DILocation(line: 285, column: 34, scope: !524)
!531 = !DILocalVariable(name: "z0Ptr", arg: 4, scope: !524, file: !47, line: 285, type: !119)
!532 = !DILocation(line: 285, column: 49, scope: !524)
!533 = !DILocalVariable(name: "z1Ptr", arg: 5, scope: !524, file: !47, line: 285, type: !119)
!534 = !DILocation(line: 285, column: 64, scope: !524)
!535 = !DILocation(line: 288, column: 14, scope: !524)
!536 = !DILocation(line: 288, column: 18, scope: !524)
!537 = !DILocation(line: 288, column: 16, scope: !524)
!538 = !DILocation(line: 288, column: 6, scope: !524)
!539 = !DILocation(line: 288, column: 12, scope: !524)
!540 = !DILocation(line: 290, column: 11, scope: !524)
!541 = !DILocation(line: 290, column: 17, scope: !524)
!542 = !DILocation(line: 290, column: 9, scope: !524)
!543 = !DILocation(line: 290, column: 26, scope: !524)
!544 = !DILocation(line: 290, column: 33, scope: !524)
!545 = !DILocation(line: 290, column: 37, scope: !524)
!546 = !DILocation(line: 290, column: 35, scope: !524)
!547 = !DILocation(line: 290, column: 49, scope: !524)
!548 = !DILocation(line: 290, column: 59, scope: !524)
!549 = !DILocation(line: 290, column: 57, scope: !524)
!550 = !DILocation(line: 290, column: 67, scope: !524)
!551 = !DILocation(line: 290, column: 51, scope: !524)
!552 = !DILocation(line: 290, column: 45, scope: !524)
!553 = !DILocation(line: 289, column: 6, scope: !524)
!554 = !DILocation(line: 289, column: 12, scope: !524)
!555 = !DILocation(line: 292, column: 1, scope: !524)
!556 = distinct !DISubprogram(name: "shortShift192Left", scope: !47, file: !47, line: 303, type: !408, isLocal: false, isDefinition: true, scopeLine: 312, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!557 = !DILocalVariable(name: "a0", arg: 1, scope: !556, file: !47, line: 304, type: !24)
!558 = !DILocation(line: 304, column: 13, scope: !556)
!559 = !DILocalVariable(name: "a1", arg: 2, scope: !556, file: !47, line: 305, type: !24)
!560 = !DILocation(line: 305, column: 13, scope: !556)
!561 = !DILocalVariable(name: "a2", arg: 3, scope: !556, file: !47, line: 306, type: !24)
!562 = !DILocation(line: 306, column: 13, scope: !556)
!563 = !DILocalVariable(name: "count", arg: 4, scope: !556, file: !47, line: 307, type: !60)
!564 = !DILocation(line: 307, column: 12, scope: !556)
!565 = !DILocalVariable(name: "z0Ptr", arg: 5, scope: !556, file: !47, line: 308, type: !119)
!566 = !DILocation(line: 308, column: 14, scope: !556)
!567 = !DILocalVariable(name: "z1Ptr", arg: 6, scope: !556, file: !47, line: 309, type: !119)
!568 = !DILocation(line: 309, column: 14, scope: !556)
!569 = !DILocalVariable(name: "z2Ptr", arg: 7, scope: !556, file: !47, line: 310, type: !119)
!570 = !DILocation(line: 310, column: 14, scope: !556)
!571 = !DILocalVariable(name: "z0", scope: !556, file: !47, line: 313, type: !24)
!572 = !DILocation(line: 313, column: 12, scope: !556)
!573 = !DILocalVariable(name: "z1", scope: !556, file: !47, line: 313, type: !24)
!574 = !DILocation(line: 313, column: 16, scope: !556)
!575 = !DILocalVariable(name: "z2", scope: !556, file: !47, line: 313, type: !24)
!576 = !DILocation(line: 313, column: 20, scope: !556)
!577 = !DILocalVariable(name: "negCount", scope: !556, file: !47, line: 314, type: !38)
!578 = !DILocation(line: 314, column: 10, scope: !556)
!579 = !DILocation(line: 316, column: 10, scope: !556)
!580 = !DILocation(line: 316, column: 14, scope: !556)
!581 = !DILocation(line: 316, column: 12, scope: !556)
!582 = !DILocation(line: 316, column: 8, scope: !556)
!583 = !DILocation(line: 317, column: 10, scope: !556)
!584 = !DILocation(line: 317, column: 14, scope: !556)
!585 = !DILocation(line: 317, column: 12, scope: !556)
!586 = !DILocation(line: 317, column: 8, scope: !556)
!587 = !DILocation(line: 318, column: 10, scope: !556)
!588 = !DILocation(line: 318, column: 14, scope: !556)
!589 = !DILocation(line: 318, column: 12, scope: !556)
!590 = !DILocation(line: 318, column: 8, scope: !556)
!591 = !DILocation(line: 319, column: 14, scope: !592)
!592 = distinct !DILexicalBlock(scope: !556, file: !47, line: 319, column: 10)
!593 = !DILocation(line: 319, column: 12, scope: !592)
!594 = !DILocation(line: 319, column: 10, scope: !556)
!595 = !DILocation(line: 320, column: 26, scope: !596)
!596 = distinct !DILexicalBlock(scope: !592, file: !47, line: 319, column: 22)
!597 = !DILocation(line: 320, column: 24, scope: !596)
!598 = !DILocation(line: 320, column: 34, scope: !596)
!599 = !DILocation(line: 320, column: 18, scope: !596)
!600 = !DILocation(line: 321, column: 15, scope: !596)
!601 = !DILocation(line: 321, column: 19, scope: !596)
!602 = !DILocation(line: 321, column: 17, scope: !596)
!603 = !DILocation(line: 321, column: 12, scope: !596)
!604 = !DILocation(line: 322, column: 15, scope: !596)
!605 = !DILocation(line: 322, column: 19, scope: !596)
!606 = !DILocation(line: 322, column: 17, scope: !596)
!607 = !DILocation(line: 322, column: 12, scope: !596)
!608 = !DILocation(line: 323, column: 5, scope: !596)
!609 = !DILocation(line: 324, column: 14, scope: !556)
!610 = !DILocation(line: 324, column: 6, scope: !556)
!611 = !DILocation(line: 324, column: 12, scope: !556)
!612 = !DILocation(line: 325, column: 14, scope: !556)
!613 = !DILocation(line: 325, column: 6, scope: !556)
!614 = !DILocation(line: 325, column: 12, scope: !556)
!615 = !DILocation(line: 326, column: 14, scope: !556)
!616 = !DILocation(line: 326, column: 6, scope: !556)
!617 = !DILocation(line: 326, column: 12, scope: !556)
!618 = !DILocation(line: 328, column: 1, scope: !556)
!619 = distinct !DISubprogram(name: "add128", scope: !47, file: !47, line: 338, type: !620, isLocal: false, isDefinition: true, scopeLine: 340, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!620 = !DISubroutineType(types: !621)
!621 = !{null, !24, !24, !24, !24, !119, !119}
!622 = !DILocalVariable(name: "a0", arg: 1, scope: !619, file: !47, line: 339, type: !24)
!623 = !DILocation(line: 339, column: 13, scope: !619)
!624 = !DILocalVariable(name: "a1", arg: 2, scope: !619, file: !47, line: 339, type: !24)
!625 = !DILocation(line: 339, column: 24, scope: !619)
!626 = !DILocalVariable(name: "b0", arg: 3, scope: !619, file: !47, line: 339, type: !24)
!627 = !DILocation(line: 339, column: 35, scope: !619)
!628 = !DILocalVariable(name: "b1", arg: 4, scope: !619, file: !47, line: 339, type: !24)
!629 = !DILocation(line: 339, column: 46, scope: !619)
!630 = !DILocalVariable(name: "z0Ptr", arg: 5, scope: !619, file: !47, line: 339, type: !119)
!631 = !DILocation(line: 339, column: 58, scope: !619)
!632 = !DILocalVariable(name: "z1Ptr", arg: 6, scope: !619, file: !47, line: 339, type: !119)
!633 = !DILocation(line: 339, column: 73, scope: !619)
!634 = !DILocalVariable(name: "z1", scope: !619, file: !47, line: 341, type: !24)
!635 = !DILocation(line: 341, column: 12, scope: !619)
!636 = !DILocation(line: 343, column: 10, scope: !619)
!637 = !DILocation(line: 343, column: 15, scope: !619)
!638 = !DILocation(line: 343, column: 13, scope: !619)
!639 = !DILocation(line: 343, column: 8, scope: !619)
!640 = !DILocation(line: 344, column: 14, scope: !619)
!641 = !DILocation(line: 344, column: 6, scope: !619)
!642 = !DILocation(line: 344, column: 12, scope: !619)
!643 = !DILocation(line: 345, column: 14, scope: !619)
!644 = !DILocation(line: 345, column: 19, scope: !619)
!645 = !DILocation(line: 345, column: 17, scope: !619)
!646 = !DILocation(line: 345, column: 26, scope: !619)
!647 = !DILocation(line: 345, column: 31, scope: !619)
!648 = !DILocation(line: 345, column: 29, scope: !619)
!649 = !DILocation(line: 345, column: 24, scope: !619)
!650 = !DILocation(line: 345, column: 22, scope: !619)
!651 = !DILocation(line: 345, column: 6, scope: !619)
!652 = !DILocation(line: 345, column: 12, scope: !619)
!653 = !DILocation(line: 347, column: 1, scope: !619)
!654 = distinct !DISubprogram(name: "add192", scope: !47, file: !47, line: 358, type: !655, isLocal: false, isDefinition: true, scopeLine: 369, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!655 = !DISubroutineType(types: !656)
!656 = !{null, !24, !24, !24, !24, !24, !24, !119, !119, !119}
!657 = !DILocalVariable(name: "a0", arg: 1, scope: !654, file: !47, line: 359, type: !24)
!658 = !DILocation(line: 359, column: 13, scope: !654)
!659 = !DILocalVariable(name: "a1", arg: 2, scope: !654, file: !47, line: 360, type: !24)
!660 = !DILocation(line: 360, column: 13, scope: !654)
!661 = !DILocalVariable(name: "a2", arg: 3, scope: !654, file: !47, line: 361, type: !24)
!662 = !DILocation(line: 361, column: 13, scope: !654)
!663 = !DILocalVariable(name: "b0", arg: 4, scope: !654, file: !47, line: 362, type: !24)
!664 = !DILocation(line: 362, column: 13, scope: !654)
!665 = !DILocalVariable(name: "b1", arg: 5, scope: !654, file: !47, line: 363, type: !24)
!666 = !DILocation(line: 363, column: 13, scope: !654)
!667 = !DILocalVariable(name: "b2", arg: 6, scope: !654, file: !47, line: 364, type: !24)
!668 = !DILocation(line: 364, column: 13, scope: !654)
!669 = !DILocalVariable(name: "z0Ptr", arg: 7, scope: !654, file: !47, line: 365, type: !119)
!670 = !DILocation(line: 365, column: 14, scope: !654)
!671 = !DILocalVariable(name: "z1Ptr", arg: 8, scope: !654, file: !47, line: 366, type: !119)
!672 = !DILocation(line: 366, column: 14, scope: !654)
!673 = !DILocalVariable(name: "z2Ptr", arg: 9, scope: !654, file: !47, line: 367, type: !119)
!674 = !DILocation(line: 367, column: 14, scope: !654)
!675 = !DILocalVariable(name: "z0", scope: !654, file: !47, line: 370, type: !24)
!676 = !DILocation(line: 370, column: 12, scope: !654)
!677 = !DILocalVariable(name: "z1", scope: !654, file: !47, line: 370, type: !24)
!678 = !DILocation(line: 370, column: 16, scope: !654)
!679 = !DILocalVariable(name: "z2", scope: !654, file: !47, line: 370, type: !24)
!680 = !DILocation(line: 370, column: 20, scope: !654)
!681 = !DILocalVariable(name: "carry0", scope: !654, file: !47, line: 371, type: !38)
!682 = !DILocation(line: 371, column: 10, scope: !654)
!683 = !DILocalVariable(name: "carry1", scope: !654, file: !47, line: 371, type: !38)
!684 = !DILocation(line: 371, column: 18, scope: !654)
!685 = !DILocation(line: 373, column: 10, scope: !654)
!686 = !DILocation(line: 373, column: 15, scope: !654)
!687 = !DILocation(line: 373, column: 13, scope: !654)
!688 = !DILocation(line: 373, column: 8, scope: !654)
!689 = !DILocation(line: 374, column: 16, scope: !654)
!690 = !DILocation(line: 374, column: 21, scope: !654)
!691 = !DILocation(line: 374, column: 19, scope: !654)
!692 = !DILocation(line: 374, column: 12, scope: !654)
!693 = !DILocation(line: 375, column: 10, scope: !654)
!694 = !DILocation(line: 375, column: 15, scope: !654)
!695 = !DILocation(line: 375, column: 13, scope: !654)
!696 = !DILocation(line: 375, column: 8, scope: !654)
!697 = !DILocation(line: 376, column: 16, scope: !654)
!698 = !DILocation(line: 376, column: 21, scope: !654)
!699 = !DILocation(line: 376, column: 19, scope: !654)
!700 = !DILocation(line: 376, column: 12, scope: !654)
!701 = !DILocation(line: 377, column: 10, scope: !654)
!702 = !DILocation(line: 377, column: 15, scope: !654)
!703 = !DILocation(line: 377, column: 13, scope: !654)
!704 = !DILocation(line: 377, column: 8, scope: !654)
!705 = !DILocation(line: 378, column: 11, scope: !654)
!706 = !DILocation(line: 378, column: 8, scope: !654)
!707 = !DILocation(line: 379, column: 13, scope: !654)
!708 = !DILocation(line: 379, column: 18, scope: !654)
!709 = !DILocation(line: 379, column: 16, scope: !654)
!710 = !DILocation(line: 379, column: 11, scope: !654)
!711 = !DILocation(line: 379, column: 8, scope: !654)
!712 = !DILocation(line: 380, column: 11, scope: !654)
!713 = !DILocation(line: 380, column: 8, scope: !654)
!714 = !DILocation(line: 381, column: 14, scope: !654)
!715 = !DILocation(line: 381, column: 6, scope: !654)
!716 = !DILocation(line: 381, column: 12, scope: !654)
!717 = !DILocation(line: 382, column: 14, scope: !654)
!718 = !DILocation(line: 382, column: 6, scope: !654)
!719 = !DILocation(line: 382, column: 12, scope: !654)
!720 = !DILocation(line: 383, column: 14, scope: !654)
!721 = !DILocation(line: 383, column: 6, scope: !654)
!722 = !DILocation(line: 383, column: 12, scope: !654)
!723 = !DILocation(line: 385, column: 1, scope: !654)
!724 = distinct !DISubprogram(name: "sub128", scope: !47, file: !47, line: 396, type: !620, isLocal: false, isDefinition: true, scopeLine: 398, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!725 = !DILocalVariable(name: "a0", arg: 1, scope: !724, file: !47, line: 397, type: !24)
!726 = !DILocation(line: 397, column: 13, scope: !724)
!727 = !DILocalVariable(name: "a1", arg: 2, scope: !724, file: !47, line: 397, type: !24)
!728 = !DILocation(line: 397, column: 24, scope: !724)
!729 = !DILocalVariable(name: "b0", arg: 3, scope: !724, file: !47, line: 397, type: !24)
!730 = !DILocation(line: 397, column: 35, scope: !724)
!731 = !DILocalVariable(name: "b1", arg: 4, scope: !724, file: !47, line: 397, type: !24)
!732 = !DILocation(line: 397, column: 46, scope: !724)
!733 = !DILocalVariable(name: "z0Ptr", arg: 5, scope: !724, file: !47, line: 397, type: !119)
!734 = !DILocation(line: 397, column: 58, scope: !724)
!735 = !DILocalVariable(name: "z1Ptr", arg: 6, scope: !724, file: !47, line: 397, type: !119)
!736 = !DILocation(line: 397, column: 73, scope: !724)
!737 = !DILocation(line: 400, column: 14, scope: !724)
!738 = !DILocation(line: 400, column: 19, scope: !724)
!739 = !DILocation(line: 400, column: 17, scope: !724)
!740 = !DILocation(line: 400, column: 6, scope: !724)
!741 = !DILocation(line: 400, column: 12, scope: !724)
!742 = !DILocation(line: 401, column: 14, scope: !724)
!743 = !DILocation(line: 401, column: 19, scope: !724)
!744 = !DILocation(line: 401, column: 17, scope: !724)
!745 = !DILocation(line: 401, column: 26, scope: !724)
!746 = !DILocation(line: 401, column: 31, scope: !724)
!747 = !DILocation(line: 401, column: 29, scope: !724)
!748 = !DILocation(line: 401, column: 24, scope: !724)
!749 = !DILocation(line: 401, column: 22, scope: !724)
!750 = !DILocation(line: 401, column: 6, scope: !724)
!751 = !DILocation(line: 401, column: 12, scope: !724)
!752 = !DILocation(line: 403, column: 1, scope: !724)
!753 = distinct !DISubprogram(name: "sub192", scope: !47, file: !47, line: 414, type: !655, isLocal: false, isDefinition: true, scopeLine: 425, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!754 = !DILocalVariable(name: "a0", arg: 1, scope: !753, file: !47, line: 415, type: !24)
!755 = !DILocation(line: 415, column: 13, scope: !753)
!756 = !DILocalVariable(name: "a1", arg: 2, scope: !753, file: !47, line: 416, type: !24)
!757 = !DILocation(line: 416, column: 13, scope: !753)
!758 = !DILocalVariable(name: "a2", arg: 3, scope: !753, file: !47, line: 417, type: !24)
!759 = !DILocation(line: 417, column: 13, scope: !753)
!760 = !DILocalVariable(name: "b0", arg: 4, scope: !753, file: !47, line: 418, type: !24)
!761 = !DILocation(line: 418, column: 13, scope: !753)
!762 = !DILocalVariable(name: "b1", arg: 5, scope: !753, file: !47, line: 419, type: !24)
!763 = !DILocation(line: 419, column: 13, scope: !753)
!764 = !DILocalVariable(name: "b2", arg: 6, scope: !753, file: !47, line: 420, type: !24)
!765 = !DILocation(line: 420, column: 13, scope: !753)
!766 = !DILocalVariable(name: "z0Ptr", arg: 7, scope: !753, file: !47, line: 421, type: !119)
!767 = !DILocation(line: 421, column: 14, scope: !753)
!768 = !DILocalVariable(name: "z1Ptr", arg: 8, scope: !753, file: !47, line: 422, type: !119)
!769 = !DILocation(line: 422, column: 14, scope: !753)
!770 = !DILocalVariable(name: "z2Ptr", arg: 9, scope: !753, file: !47, line: 423, type: !119)
!771 = !DILocation(line: 423, column: 14, scope: !753)
!772 = !DILocalVariable(name: "z0", scope: !753, file: !47, line: 426, type: !24)
!773 = !DILocation(line: 426, column: 12, scope: !753)
!774 = !DILocalVariable(name: "z1", scope: !753, file: !47, line: 426, type: !24)
!775 = !DILocation(line: 426, column: 16, scope: !753)
!776 = !DILocalVariable(name: "z2", scope: !753, file: !47, line: 426, type: !24)
!777 = !DILocation(line: 426, column: 20, scope: !753)
!778 = !DILocalVariable(name: "borrow0", scope: !753, file: !47, line: 427, type: !38)
!779 = !DILocation(line: 427, column: 10, scope: !753)
!780 = !DILocalVariable(name: "borrow1", scope: !753, file: !47, line: 427, type: !38)
!781 = !DILocation(line: 427, column: 19, scope: !753)
!782 = !DILocation(line: 429, column: 10, scope: !753)
!783 = !DILocation(line: 429, column: 15, scope: !753)
!784 = !DILocation(line: 429, column: 13, scope: !753)
!785 = !DILocation(line: 429, column: 8, scope: !753)
!786 = !DILocation(line: 430, column: 17, scope: !753)
!787 = !DILocation(line: 430, column: 22, scope: !753)
!788 = !DILocation(line: 430, column: 20, scope: !753)
!789 = !DILocation(line: 430, column: 13, scope: !753)
!790 = !DILocation(line: 431, column: 10, scope: !753)
!791 = !DILocation(line: 431, column: 15, scope: !753)
!792 = !DILocation(line: 431, column: 13, scope: !753)
!793 = !DILocation(line: 431, column: 8, scope: !753)
!794 = !DILocation(line: 432, column: 17, scope: !753)
!795 = !DILocation(line: 432, column: 22, scope: !753)
!796 = !DILocation(line: 432, column: 20, scope: !753)
!797 = !DILocation(line: 432, column: 13, scope: !753)
!798 = !DILocation(line: 433, column: 10, scope: !753)
!799 = !DILocation(line: 433, column: 15, scope: !753)
!800 = !DILocation(line: 433, column: 13, scope: !753)
!801 = !DILocation(line: 433, column: 8, scope: !753)
!802 = !DILocation(line: 434, column: 13, scope: !753)
!803 = !DILocation(line: 434, column: 18, scope: !753)
!804 = !DILocation(line: 434, column: 16, scope: !753)
!805 = !DILocation(line: 434, column: 11, scope: !753)
!806 = !DILocation(line: 434, column: 8, scope: !753)
!807 = !DILocation(line: 435, column: 11, scope: !753)
!808 = !DILocation(line: 435, column: 8, scope: !753)
!809 = !DILocation(line: 436, column: 11, scope: !753)
!810 = !DILocation(line: 436, column: 8, scope: !753)
!811 = !DILocation(line: 437, column: 14, scope: !753)
!812 = !DILocation(line: 437, column: 6, scope: !753)
!813 = !DILocation(line: 437, column: 12, scope: !753)
!814 = !DILocation(line: 438, column: 14, scope: !753)
!815 = !DILocation(line: 438, column: 6, scope: !753)
!816 = !DILocation(line: 438, column: 12, scope: !753)
!817 = !DILocation(line: 439, column: 14, scope: !753)
!818 = !DILocation(line: 439, column: 6, scope: !753)
!819 = !DILocation(line: 439, column: 12, scope: !753)
!820 = !DILocation(line: 441, column: 1, scope: !753)
!821 = distinct !DISubprogram(name: "mul64To128", scope: !47, file: !47, line: 449, type: !822, isLocal: false, isDefinition: true, scopeLine: 450, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!822 = !DISubroutineType(types: !823)
!823 = !{null, !24, !24, !119, !119}
!824 = !DILocalVariable(name: "a", arg: 1, scope: !821, file: !47, line: 449, type: !24)
!825 = !DILocation(line: 449, column: 32, scope: !821)
!826 = !DILocalVariable(name: "b", arg: 2, scope: !821, file: !47, line: 449, type: !24)
!827 = !DILocation(line: 449, column: 42, scope: !821)
!828 = !DILocalVariable(name: "z0Ptr", arg: 3, scope: !821, file: !47, line: 449, type: !119)
!829 = !DILocation(line: 449, column: 53, scope: !821)
!830 = !DILocalVariable(name: "z1Ptr", arg: 4, scope: !821, file: !47, line: 449, type: !119)
!831 = !DILocation(line: 449, column: 68, scope: !821)
!832 = !DILocalVariable(name: "aHigh", scope: !821, file: !47, line: 451, type: !27)
!833 = !DILocation(line: 451, column: 12, scope: !821)
!834 = !DILocalVariable(name: "aLow", scope: !821, file: !47, line: 451, type: !27)
!835 = !DILocation(line: 451, column: 19, scope: !821)
!836 = !DILocalVariable(name: "bHigh", scope: !821, file: !47, line: 451, type: !27)
!837 = !DILocation(line: 451, column: 25, scope: !821)
!838 = !DILocalVariable(name: "bLow", scope: !821, file: !47, line: 451, type: !27)
!839 = !DILocation(line: 451, column: 32, scope: !821)
!840 = !DILocalVariable(name: "z0", scope: !821, file: !47, line: 452, type: !24)
!841 = !DILocation(line: 452, column: 12, scope: !821)
!842 = !DILocalVariable(name: "zMiddleA", scope: !821, file: !47, line: 452, type: !24)
!843 = !DILocation(line: 452, column: 16, scope: !821)
!844 = !DILocalVariable(name: "zMiddleB", scope: !821, file: !47, line: 452, type: !24)
!845 = !DILocation(line: 452, column: 26, scope: !821)
!846 = !DILocalVariable(name: "z1", scope: !821, file: !47, line: 452, type: !24)
!847 = !DILocation(line: 452, column: 36, scope: !821)
!848 = !DILocation(line: 454, column: 12, scope: !821)
!849 = !DILocation(line: 454, column: 10, scope: !821)
!850 = !DILocation(line: 455, column: 13, scope: !821)
!851 = !DILocation(line: 455, column: 14, scope: !821)
!852 = !DILocation(line: 455, column: 11, scope: !821)
!853 = !DILocation(line: 456, column: 12, scope: !821)
!854 = !DILocation(line: 456, column: 10, scope: !821)
!855 = !DILocation(line: 457, column: 13, scope: !821)
!856 = !DILocation(line: 457, column: 14, scope: !821)
!857 = !DILocation(line: 457, column: 11, scope: !821)
!858 = !DILocation(line: 458, column: 21, scope: !821)
!859 = !DILocation(line: 458, column: 12, scope: !821)
!860 = !DILocation(line: 458, column: 30, scope: !821)
!861 = !DILocation(line: 458, column: 28, scope: !821)
!862 = !DILocation(line: 458, column: 8, scope: !821)
!863 = !DILocation(line: 459, column: 27, scope: !821)
!864 = !DILocation(line: 459, column: 18, scope: !821)
!865 = !DILocation(line: 459, column: 36, scope: !821)
!866 = !DILocation(line: 459, column: 34, scope: !821)
!867 = !DILocation(line: 459, column: 14, scope: !821)
!868 = !DILocation(line: 460, column: 27, scope: !821)
!869 = !DILocation(line: 460, column: 18, scope: !821)
!870 = !DILocation(line: 460, column: 37, scope: !821)
!871 = !DILocation(line: 460, column: 35, scope: !821)
!872 = !DILocation(line: 460, column: 14, scope: !821)
!873 = !DILocation(line: 461, column: 21, scope: !821)
!874 = !DILocation(line: 461, column: 12, scope: !821)
!875 = !DILocation(line: 461, column: 31, scope: !821)
!876 = !DILocation(line: 461, column: 29, scope: !821)
!877 = !DILocation(line: 461, column: 8, scope: !821)
!878 = !DILocation(line: 462, column: 17, scope: !821)
!879 = !DILocation(line: 462, column: 14, scope: !821)
!880 = !DILocation(line: 463, column: 26, scope: !821)
!881 = !DILocation(line: 463, column: 37, scope: !821)
!882 = !DILocation(line: 463, column: 35, scope: !821)
!883 = !DILocation(line: 463, column: 15, scope: !821)
!884 = !DILocation(line: 463, column: 49, scope: !821)
!885 = !DILocation(line: 463, column: 60, scope: !821)
!886 = !DILocation(line: 463, column: 68, scope: !821)
!887 = !DILocation(line: 463, column: 56, scope: !821)
!888 = !DILocation(line: 463, column: 8, scope: !821)
!889 = !DILocation(line: 464, column: 14, scope: !821)
!890 = !DILocation(line: 465, column: 11, scope: !821)
!891 = !DILocation(line: 465, column: 8, scope: !821)
!892 = !DILocation(line: 466, column: 13, scope: !821)
!893 = !DILocation(line: 466, column: 18, scope: !821)
!894 = !DILocation(line: 466, column: 16, scope: !821)
!895 = !DILocation(line: 466, column: 11, scope: !821)
!896 = !DILocation(line: 466, column: 8, scope: !821)
!897 = !DILocation(line: 467, column: 14, scope: !821)
!898 = !DILocation(line: 467, column: 6, scope: !821)
!899 = !DILocation(line: 467, column: 12, scope: !821)
!900 = !DILocation(line: 468, column: 14, scope: !821)
!901 = !DILocation(line: 468, column: 6, scope: !821)
!902 = !DILocation(line: 468, column: 12, scope: !821)
!903 = !DILocation(line: 470, column: 1, scope: !821)
!904 = distinct !DISubprogram(name: "mul128By64To192", scope: !47, file: !47, line: 480, type: !905, isLocal: false, isDefinition: true, scopeLine: 488, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!905 = !DISubroutineType(types: !906)
!906 = !{null, !24, !24, !24, !119, !119, !119}
!907 = !DILocalVariable(name: "a0", arg: 1, scope: !904, file: !47, line: 481, type: !24)
!908 = !DILocation(line: 481, column: 13, scope: !904)
!909 = !DILocalVariable(name: "a1", arg: 2, scope: !904, file: !47, line: 482, type: !24)
!910 = !DILocation(line: 482, column: 13, scope: !904)
!911 = !DILocalVariable(name: "b", arg: 3, scope: !904, file: !47, line: 483, type: !24)
!912 = !DILocation(line: 483, column: 13, scope: !904)
!913 = !DILocalVariable(name: "z0Ptr", arg: 4, scope: !904, file: !47, line: 484, type: !119)
!914 = !DILocation(line: 484, column: 14, scope: !904)
!915 = !DILocalVariable(name: "z1Ptr", arg: 5, scope: !904, file: !47, line: 485, type: !119)
!916 = !DILocation(line: 485, column: 14, scope: !904)
!917 = !DILocalVariable(name: "z2Ptr", arg: 6, scope: !904, file: !47, line: 486, type: !119)
!918 = !DILocation(line: 486, column: 14, scope: !904)
!919 = !DILocalVariable(name: "z0", scope: !904, file: !47, line: 489, type: !24)
!920 = !DILocation(line: 489, column: 12, scope: !904)
!921 = !DILocalVariable(name: "z1", scope: !904, file: !47, line: 489, type: !24)
!922 = !DILocation(line: 489, column: 16, scope: !904)
!923 = !DILocalVariable(name: "z2", scope: !904, file: !47, line: 489, type: !24)
!924 = !DILocation(line: 489, column: 20, scope: !904)
!925 = !DILocalVariable(name: "more1", scope: !904, file: !47, line: 489, type: !24)
!926 = !DILocation(line: 489, column: 24, scope: !904)
!927 = !DILocation(line: 491, column: 17, scope: !904)
!928 = !DILocation(line: 491, column: 21, scope: !904)
!929 = !DILocation(line: 491, column: 5, scope: !904)
!930 = !DILocation(line: 492, column: 17, scope: !904)
!931 = !DILocation(line: 492, column: 21, scope: !904)
!932 = !DILocation(line: 492, column: 5, scope: !904)
!933 = !DILocation(line: 493, column: 13, scope: !904)
!934 = !DILocation(line: 493, column: 17, scope: !904)
!935 = !DILocation(line: 493, column: 27, scope: !904)
!936 = !DILocation(line: 493, column: 5, scope: !904)
!937 = !DILocation(line: 494, column: 14, scope: !904)
!938 = !DILocation(line: 494, column: 6, scope: !904)
!939 = !DILocation(line: 494, column: 12, scope: !904)
!940 = !DILocation(line: 495, column: 14, scope: !904)
!941 = !DILocation(line: 495, column: 6, scope: !904)
!942 = !DILocation(line: 495, column: 12, scope: !904)
!943 = !DILocation(line: 496, column: 14, scope: !904)
!944 = !DILocation(line: 496, column: 6, scope: !904)
!945 = !DILocation(line: 496, column: 12, scope: !904)
!946 = !DILocation(line: 498, column: 1, scope: !904)
!947 = distinct !DISubprogram(name: "mul128To256", scope: !47, file: !47, line: 508, type: !948, isLocal: false, isDefinition: true, scopeLine: 518, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!948 = !DISubroutineType(types: !949)
!949 = !{null, !24, !24, !24, !24, !119, !119, !119, !119}
!950 = !DILocalVariable(name: "a0", arg: 1, scope: !947, file: !47, line: 509, type: !24)
!951 = !DILocation(line: 509, column: 13, scope: !947)
!952 = !DILocalVariable(name: "a1", arg: 2, scope: !947, file: !47, line: 510, type: !24)
!953 = !DILocation(line: 510, column: 13, scope: !947)
!954 = !DILocalVariable(name: "b0", arg: 3, scope: !947, file: !47, line: 511, type: !24)
!955 = !DILocation(line: 511, column: 13, scope: !947)
!956 = !DILocalVariable(name: "b1", arg: 4, scope: !947, file: !47, line: 512, type: !24)
!957 = !DILocation(line: 512, column: 13, scope: !947)
!958 = !DILocalVariable(name: "z0Ptr", arg: 5, scope: !947, file: !47, line: 513, type: !119)
!959 = !DILocation(line: 513, column: 14, scope: !947)
!960 = !DILocalVariable(name: "z1Ptr", arg: 6, scope: !947, file: !47, line: 514, type: !119)
!961 = !DILocation(line: 514, column: 14, scope: !947)
!962 = !DILocalVariable(name: "z2Ptr", arg: 7, scope: !947, file: !47, line: 515, type: !119)
!963 = !DILocation(line: 515, column: 14, scope: !947)
!964 = !DILocalVariable(name: "z3Ptr", arg: 8, scope: !947, file: !47, line: 516, type: !119)
!965 = !DILocation(line: 516, column: 14, scope: !947)
!966 = !DILocalVariable(name: "z0", scope: !947, file: !47, line: 519, type: !24)
!967 = !DILocation(line: 519, column: 12, scope: !947)
!968 = !DILocalVariable(name: "z1", scope: !947, file: !47, line: 519, type: !24)
!969 = !DILocation(line: 519, column: 16, scope: !947)
!970 = !DILocalVariable(name: "z2", scope: !947, file: !47, line: 519, type: !24)
!971 = !DILocation(line: 519, column: 20, scope: !947)
!972 = !DILocalVariable(name: "z3", scope: !947, file: !47, line: 519, type: !24)
!973 = !DILocation(line: 519, column: 24, scope: !947)
!974 = !DILocalVariable(name: "more1", scope: !947, file: !47, line: 520, type: !24)
!975 = !DILocation(line: 520, column: 12, scope: !947)
!976 = !DILocalVariable(name: "more2", scope: !947, file: !47, line: 520, type: !24)
!977 = !DILocation(line: 520, column: 19, scope: !947)
!978 = !DILocation(line: 522, column: 17, scope: !947)
!979 = !DILocation(line: 522, column: 21, scope: !947)
!980 = !DILocation(line: 522, column: 5, scope: !947)
!981 = !DILocation(line: 523, column: 17, scope: !947)
!982 = !DILocation(line: 523, column: 21, scope: !947)
!983 = !DILocation(line: 523, column: 5, scope: !947)
!984 = !DILocation(line: 524, column: 13, scope: !947)
!985 = !DILocation(line: 524, column: 17, scope: !947)
!986 = !DILocation(line: 524, column: 27, scope: !947)
!987 = !DILocation(line: 524, column: 5, scope: !947)
!988 = !DILocation(line: 525, column: 17, scope: !947)
!989 = !DILocation(line: 525, column: 21, scope: !947)
!990 = !DILocation(line: 525, column: 5, scope: !947)
!991 = !DILocation(line: 526, column: 13, scope: !947)
!992 = !DILocation(line: 526, column: 17, scope: !947)
!993 = !DILocation(line: 526, column: 27, scope: !947)
!994 = !DILocation(line: 526, column: 5, scope: !947)
!995 = !DILocation(line: 527, column: 17, scope: !947)
!996 = !DILocation(line: 527, column: 21, scope: !947)
!997 = !DILocation(line: 527, column: 5, scope: !947)
!998 = !DILocation(line: 528, column: 13, scope: !947)
!999 = !DILocation(line: 528, column: 20, scope: !947)
!1000 = !DILocation(line: 528, column: 30, scope: !947)
!1001 = !DILocation(line: 528, column: 5, scope: !947)
!1002 = !DILocation(line: 529, column: 13, scope: !947)
!1003 = !DILocation(line: 529, column: 17, scope: !947)
!1004 = !DILocation(line: 529, column: 24, scope: !947)
!1005 = !DILocation(line: 529, column: 5, scope: !947)
!1006 = !DILocation(line: 530, column: 14, scope: !947)
!1007 = !DILocation(line: 530, column: 6, scope: !947)
!1008 = !DILocation(line: 530, column: 12, scope: !947)
!1009 = !DILocation(line: 531, column: 14, scope: !947)
!1010 = !DILocation(line: 531, column: 6, scope: !947)
!1011 = !DILocation(line: 531, column: 12, scope: !947)
!1012 = !DILocation(line: 532, column: 14, scope: !947)
!1013 = !DILocation(line: 532, column: 6, scope: !947)
!1014 = !DILocation(line: 532, column: 12, scope: !947)
!1015 = !DILocation(line: 533, column: 14, scope: !947)
!1016 = !DILocation(line: 533, column: 6, scope: !947)
!1017 = !DILocation(line: 533, column: 12, scope: !947)
!1018 = !DILocation(line: 535, column: 1, scope: !947)
!1019 = distinct !DISubprogram(name: "eq128", scope: !47, file: !47, line: 675, type: !1020, isLocal: false, isDefinition: true, scopeLine: 676, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1020 = !DISubroutineType(types: !1021)
!1021 = !{!1022, !24, !24, !24, !24}
!1022 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!1023 = !DILocalVariable(name: "a0", arg: 1, scope: !1019, file: !47, line: 675, type: !24)
!1024 = !DILocation(line: 675, column: 27, scope: !1019)
!1025 = !DILocalVariable(name: "a1", arg: 2, scope: !1019, file: !47, line: 675, type: !24)
!1026 = !DILocation(line: 675, column: 38, scope: !1019)
!1027 = !DILocalVariable(name: "b0", arg: 3, scope: !1019, file: !47, line: 675, type: !24)
!1028 = !DILocation(line: 675, column: 49, scope: !1019)
!1029 = !DILocalVariable(name: "b1", arg: 4, scope: !1019, file: !47, line: 675, type: !24)
!1030 = !DILocation(line: 675, column: 60, scope: !1019)
!1031 = !DILocation(line: 678, column: 14, scope: !1019)
!1032 = !DILocation(line: 678, column: 20, scope: !1019)
!1033 = !DILocation(line: 678, column: 17, scope: !1019)
!1034 = !DILocation(line: 678, column: 25, scope: !1019)
!1035 = !DILocation(line: 678, column: 30, scope: !1019)
!1036 = !DILocation(line: 678, column: 36, scope: !1019)
!1037 = !DILocation(line: 678, column: 33, scope: !1019)
!1038 = !DILocation(line: 678, column: 5, scope: !1019)
!1039 = distinct !DISubprogram(name: "le128", scope: !47, file: !47, line: 688, type: !1020, isLocal: false, isDefinition: true, scopeLine: 689, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1040 = !DILocalVariable(name: "a0", arg: 1, scope: !1039, file: !47, line: 688, type: !24)
!1041 = !DILocation(line: 688, column: 27, scope: !1039)
!1042 = !DILocalVariable(name: "a1", arg: 2, scope: !1039, file: !47, line: 688, type: !24)
!1043 = !DILocation(line: 688, column: 38, scope: !1039)
!1044 = !DILocalVariable(name: "b0", arg: 3, scope: !1039, file: !47, line: 688, type: !24)
!1045 = !DILocation(line: 688, column: 49, scope: !1039)
!1046 = !DILocalVariable(name: "b1", arg: 4, scope: !1039, file: !47, line: 688, type: !24)
!1047 = !DILocation(line: 688, column: 60, scope: !1039)
!1048 = !DILocation(line: 691, column: 14, scope: !1039)
!1049 = !DILocation(line: 691, column: 19, scope: !1039)
!1050 = !DILocation(line: 691, column: 17, scope: !1039)
!1051 = !DILocation(line: 691, column: 24, scope: !1039)
!1052 = !DILocation(line: 691, column: 31, scope: !1039)
!1053 = !DILocation(line: 691, column: 37, scope: !1039)
!1054 = !DILocation(line: 691, column: 34, scope: !1039)
!1055 = !DILocation(line: 691, column: 42, scope: !1039)
!1056 = !DILocation(line: 691, column: 47, scope: !1039)
!1057 = !DILocation(line: 691, column: 53, scope: !1039)
!1058 = !DILocation(line: 691, column: 50, scope: !1039)
!1059 = !DILocation(line: 691, column: 5, scope: !1039)
!1060 = distinct !DISubprogram(name: "lt128", scope: !47, file: !47, line: 701, type: !1020, isLocal: false, isDefinition: true, scopeLine: 702, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1061 = !DILocalVariable(name: "a0", arg: 1, scope: !1060, file: !47, line: 701, type: !24)
!1062 = !DILocation(line: 701, column: 27, scope: !1060)
!1063 = !DILocalVariable(name: "a1", arg: 2, scope: !1060, file: !47, line: 701, type: !24)
!1064 = !DILocation(line: 701, column: 38, scope: !1060)
!1065 = !DILocalVariable(name: "b0", arg: 3, scope: !1060, file: !47, line: 701, type: !24)
!1066 = !DILocation(line: 701, column: 49, scope: !1060)
!1067 = !DILocalVariable(name: "b1", arg: 4, scope: !1060, file: !47, line: 701, type: !24)
!1068 = !DILocation(line: 701, column: 60, scope: !1060)
!1069 = !DILocation(line: 704, column: 14, scope: !1060)
!1070 = !DILocation(line: 704, column: 19, scope: !1060)
!1071 = !DILocation(line: 704, column: 17, scope: !1060)
!1072 = !DILocation(line: 704, column: 24, scope: !1060)
!1073 = !DILocation(line: 704, column: 31, scope: !1060)
!1074 = !DILocation(line: 704, column: 37, scope: !1060)
!1075 = !DILocation(line: 704, column: 34, scope: !1060)
!1076 = !DILocation(line: 704, column: 42, scope: !1060)
!1077 = !DILocation(line: 704, column: 47, scope: !1060)
!1078 = !DILocation(line: 704, column: 52, scope: !1060)
!1079 = !DILocation(line: 704, column: 50, scope: !1060)
!1080 = !DILocation(line: 704, column: 5, scope: !1060)
!1081 = distinct !DISubprogram(name: "ne128", scope: !47, file: !47, line: 714, type: !1020, isLocal: false, isDefinition: true, scopeLine: 715, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1082 = !DILocalVariable(name: "a0", arg: 1, scope: !1081, file: !47, line: 714, type: !24)
!1083 = !DILocation(line: 714, column: 27, scope: !1081)
!1084 = !DILocalVariable(name: "a1", arg: 2, scope: !1081, file: !47, line: 714, type: !24)
!1085 = !DILocation(line: 714, column: 38, scope: !1081)
!1086 = !DILocalVariable(name: "b0", arg: 3, scope: !1081, file: !47, line: 714, type: !24)
!1087 = !DILocation(line: 714, column: 49, scope: !1081)
!1088 = !DILocalVariable(name: "b1", arg: 4, scope: !1081, file: !47, line: 714, type: !24)
!1089 = !DILocation(line: 714, column: 60, scope: !1081)
!1090 = !DILocation(line: 717, column: 14, scope: !1081)
!1091 = !DILocation(line: 717, column: 20, scope: !1081)
!1092 = !DILocation(line: 717, column: 17, scope: !1081)
!1093 = !DILocation(line: 717, column: 25, scope: !1081)
!1094 = !DILocation(line: 717, column: 30, scope: !1081)
!1095 = !DILocation(line: 717, column: 36, scope: !1081)
!1096 = !DILocation(line: 717, column: 33, scope: !1081)
!1097 = !DILocation(line: 717, column: 5, scope: !1081)
!1098 = distinct !DISubprogram(name: "float_raise", scope: !43, file: !43, line: 46, type: !1099, isLocal: false, isDefinition: true, scopeLine: 47, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{null, !38}
!1101 = !DILocalVariable(name: "flags", arg: 1, scope: !1098, file: !43, line: 46, type: !38)
!1102 = !DILocation(line: 46, column: 24, scope: !1098)
!1103 = !DILocation(line: 49, column: 30, scope: !1098)
!1104 = !DILocation(line: 49, column: 27, scope: !1098)
!1105 = !DILocation(line: 51, column: 1, scope: !1098)
!1106 = distinct !DISubprogram(name: "float32_is_nan", scope: !43, file: !43, line: 71, type: !1107, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!1022, !1109}
!1109 = !DIDerivedType(tag: DW_TAG_typedef, name: "float32", file: !6, line: 46, baseType: !28)
!1110 = !DILocalVariable(name: "a", arg: 1, scope: !1106, file: !43, line: 71, type: !1109)
!1111 = !DILocation(line: 71, column: 30, scope: !1106)
!1112 = !DILocation(line: 74, column: 38, scope: !1106)
!1113 = !DILocation(line: 74, column: 39, scope: !1106)
!1114 = !DILocation(line: 74, column: 25, scope: !1106)
!1115 = !DILocation(line: 74, column: 5, scope: !1106)
!1116 = distinct !DISubprogram(name: "float32_is_signaling_nan", scope: !43, file: !43, line: 83, type: !1107, isLocal: false, isDefinition: true, scopeLine: 84, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1117 = !DILocalVariable(name: "a", arg: 1, scope: !1116, file: !43, line: 83, type: !1109)
!1118 = !DILocation(line: 83, column: 40, scope: !1116)
!1119 = !DILocation(line: 86, column: 18, scope: !1116)
!1120 = !DILocation(line: 86, column: 19, scope: !1116)
!1121 = !DILocation(line: 86, column: 26, scope: !1116)
!1122 = !DILocation(line: 86, column: 36, scope: !1116)
!1123 = !DILocation(line: 86, column: 47, scope: !1116)
!1124 = !DILocation(line: 86, column: 52, scope: !1116)
!1125 = !DILocation(line: 86, column: 54, scope: !1116)
!1126 = !DILocation(line: 86, column: 5, scope: !1116)
!1127 = distinct !DISubprogram(name: "float64_is_nan", scope: !43, file: !43, line: 151, type: !1128, isLocal: false, isDefinition: true, scopeLine: 152, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1128 = !DISubroutineType(types: !1129)
!1129 = !{!1022, !1130}
!1130 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64", file: !6, line: 47, baseType: !26)
!1131 = !DILocalVariable(name: "a", arg: 1, scope: !1127, file: !43, line: 151, type: !1130)
!1132 = !DILocation(line: 151, column: 30, scope: !1127)
!1133 = !DILocation(line: 154, column: 55, scope: !1127)
!1134 = !DILocation(line: 154, column: 56, scope: !1127)
!1135 = !DILocation(line: 154, column: 42, scope: !1127)
!1136 = !DILocation(line: 154, column: 5, scope: !1127)
!1137 = distinct !DISubprogram(name: "float64_is_signaling_nan", scope: !43, file: !43, line: 163, type: !1128, isLocal: false, isDefinition: true, scopeLine: 164, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1138 = !DILocalVariable(name: "a", arg: 1, scope: !1137, file: !43, line: 163, type: !1130)
!1139 = !DILocation(line: 163, column: 40, scope: !1137)
!1140 = !DILocation(line: 167, column: 18, scope: !1137)
!1141 = !DILocation(line: 167, column: 19, scope: !1137)
!1142 = !DILocation(line: 167, column: 26, scope: !1137)
!1143 = !DILocation(line: 167, column: 36, scope: !1137)
!1144 = !DILocation(line: 168, column: 9, scope: !1137)
!1145 = !DILocation(line: 168, column: 14, scope: !1137)
!1146 = !DILocation(line: 168, column: 16, scope: !1137)
!1147 = !DILocation(line: 166, column: 5, scope: !1137)
!1148 = distinct !DISubprogram(name: "floatx80_is_nan", scope: !43, file: !43, line: 241, type: !1149, isLocal: false, isDefinition: true, scopeLine: 242, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1149 = !DISubroutineType(types: !1150)
!1150 = !{!1022, !1151}
!1151 = !DIDerivedType(tag: DW_TAG_typedef, name: "floatx80", file: !6, line: 52, baseType: !1152)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 49, size: 128, elements: !1153)
!1153 = !{!1154, !1155}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1152, file: !6, line: 50, baseType: !30, size: 16)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1152, file: !6, line: 51, baseType: !26, size: 64, offset: 64)
!1156 = !DILocalVariable(name: "a", arg: 1, scope: !1148, file: !43, line: 241, type: !1151)
!1157 = !DILocation(line: 241, column: 32, scope: !1148)
!1158 = !DILocation(line: 244, column: 18, scope: !1148)
!1159 = !DILocation(line: 244, column: 16, scope: !1148)
!1160 = !DILocation(line: 244, column: 23, scope: !1148)
!1161 = !DILocation(line: 244, column: 34, scope: !1148)
!1162 = !DILocation(line: 244, column: 46, scope: !1148)
!1163 = !DILocation(line: 244, column: 62, scope: !1148)
!1164 = !DILocation(line: 244, column: 65, scope: !1148)
!1165 = !DILocation(line: 244, column: 5, scope: !1148)
!1166 = distinct !DISubprogram(name: "floatx80_is_signaling_nan", scope: !43, file: !43, line: 253, type: !1149, isLocal: false, isDefinition: true, scopeLine: 254, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1167 = !DILocalVariable(name: "a", arg: 1, scope: !1166, file: !43, line: 253, type: !1151)
!1168 = !DILocation(line: 253, column: 42, scope: !1166)
!1169 = !DILocalVariable(name: "aLow", scope: !1166, file: !43, line: 255, type: !24)
!1170 = !DILocation(line: 255, column: 12, scope: !1166)
!1171 = !DILocation(line: 257, column: 14, scope: !1166)
!1172 = !DILocation(line: 257, column: 18, scope: !1166)
!1173 = !DILocation(line: 257, column: 10, scope: !1166)
!1174 = !DILocation(line: 259, column: 18, scope: !1166)
!1175 = !DILocation(line: 259, column: 16, scope: !1166)
!1176 = !DILocation(line: 259, column: 23, scope: !1166)
!1177 = !DILocation(line: 259, column: 34, scope: !1166)
!1178 = !DILocation(line: 260, column: 9, scope: !1166)
!1179 = !DILocation(line: 260, column: 23, scope: !1166)
!1180 = !DILocation(line: 260, column: 27, scope: !1166)
!1181 = !DILocation(line: 260, column: 12, scope: !1166)
!1182 = !DILocation(line: 261, column: 9, scope: !1166)
!1183 = !DILocation(line: 261, column: 16, scope: !1166)
!1184 = !DILocation(line: 261, column: 23, scope: !1166)
!1185 = !DILocation(line: 261, column: 20, scope: !1166)
!1186 = !DILocation(line: 258, column: 5, scope: !1166)
!1187 = distinct !DISubprogram(name: "float128_is_nan", scope: !43, file: !43, line: 335, type: !1188, isLocal: false, isDefinition: true, scopeLine: 336, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1188 = !DISubroutineType(types: !1189)
!1189 = !{!1022, !1190}
!1190 = !DIDerivedType(tag: DW_TAG_typedef, name: "float128", file: !6, line: 57, baseType: !1191)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 55, size: 128, elements: !1192)
!1192 = !{!1193, !1194}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1191, file: !6, line: 56, baseType: !26, size: 64)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1191, file: !6, line: 56, baseType: !26, size: 64, offset: 64)
!1195 = !DILocalVariable(name: "a", arg: 1, scope: !1187, file: !43, line: 335, type: !1190)
!1196 = !DILocation(line: 335, column: 32, scope: !1187)
!1197 = !DILocation(line: 339, column: 58, scope: !1187)
!1198 = !DILocation(line: 339, column: 62, scope: !1187)
!1199 = !DILocation(line: 339, column: 42, scope: !1187)
!1200 = !DILocation(line: 340, column: 9, scope: !1187)
!1201 = !DILocation(line: 340, column: 16, scope: !1187)
!1202 = !DILocation(line: 340, column: 14, scope: !1187)
!1203 = !DILocation(line: 340, column: 20, scope: !1187)
!1204 = !DILocation(line: 340, column: 27, scope: !1187)
!1205 = !DILocation(line: 340, column: 32, scope: !1187)
!1206 = !DILocation(line: 338, column: 5, scope: !1187)
!1207 = distinct !DISubprogram(name: "float128_is_signaling_nan", scope: !43, file: !43, line: 349, type: !1188, isLocal: false, isDefinition: true, scopeLine: 350, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1208 = !DILocalVariable(name: "a", arg: 1, scope: !1207, file: !43, line: 349, type: !1190)
!1209 = !DILocation(line: 349, column: 42, scope: !1207)
!1210 = !DILocation(line: 353, column: 20, scope: !1207)
!1211 = !DILocation(line: 353, column: 24, scope: !1207)
!1212 = !DILocation(line: 353, column: 31, scope: !1207)
!1213 = !DILocation(line: 353, column: 42, scope: !1207)
!1214 = !DILocation(line: 354, column: 9, scope: !1207)
!1215 = !DILocation(line: 354, column: 16, scope: !1207)
!1216 = !DILocation(line: 354, column: 14, scope: !1207)
!1217 = !DILocation(line: 354, column: 20, scope: !1207)
!1218 = !DILocation(line: 354, column: 27, scope: !1207)
!1219 = !DILocation(line: 354, column: 32, scope: !1207)
!1220 = !DILocation(line: 352, column: 5, scope: !1207)
!1221 = distinct !DISubprogram(name: "extractFloat32Frac", scope: !3, file: !3, line: 169, type: !1222, isLocal: false, isDefinition: true, scopeLine: 170, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1222 = !DISubroutineType(types: !1223)
!1223 = !{!27, !1109}
!1224 = !DILocalVariable(name: "a", arg: 1, scope: !1221, file: !3, line: 169, type: !1109)
!1225 = !DILocation(line: 169, column: 43, scope: !1221)
!1226 = !DILocation(line: 172, column: 8, scope: !1221)
!1227 = !DILocation(line: 172, column: 10, scope: !1221)
!1228 = !DILocation(line: 172, column: 1, scope: !1221)
!1229 = distinct !DISubprogram(name: "extractFloat32Exp", scope: !3, file: !3, line: 180, type: !1230, isLocal: false, isDefinition: true, scopeLine: 181, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{!60, !1109}
!1232 = !DILocalVariable(name: "a", arg: 1, scope: !1229, file: !3, line: 180, type: !1109)
!1233 = !DILocation(line: 180, column: 41, scope: !1229)
!1234 = !DILocation(line: 183, column: 10, scope: !1229)
!1235 = !DILocation(line: 183, column: 11, scope: !1229)
!1236 = !DILocation(line: 183, column: 18, scope: !1229)
!1237 = !DILocation(line: 183, column: 1, scope: !1229)
!1238 = distinct !DISubprogram(name: "extractFloat32Sign", scope: !3, file: !3, line: 191, type: !1239, isLocal: false, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1239 = !DISubroutineType(types: !1240)
!1240 = !{!1241, !1109}
!1241 = !DIDerivedType(tag: DW_TAG_typedef, name: "flag", file: !25, line: 21, baseType: !32)
!1242 = !DILocalVariable(name: "a", arg: 1, scope: !1238, file: !3, line: 191, type: !1109)
!1243 = !DILocation(line: 191, column: 41, scope: !1238)
!1244 = !DILocation(line: 194, column: 8, scope: !1238)
!1245 = !DILocation(line: 194, column: 9, scope: !1238)
!1246 = !DILocation(line: 194, column: 1, scope: !1238)
!1247 = distinct !DISubprogram(name: "packFloat32", scope: !3, file: !3, line: 227, type: !1248, isLocal: false, isDefinition: true, scopeLine: 228, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1248 = !DISubroutineType(types: !1249)
!1249 = !{!1109, !1241, !60, !27}
!1250 = !DILocalVariable(name: "zSign", arg: 1, scope: !1247, file: !3, line: 227, type: !1241)
!1251 = !DILocation(line: 227, column: 34, scope: !1247)
!1252 = !DILocalVariable(name: "zExp", arg: 2, scope: !1247, file: !3, line: 227, type: !60)
!1253 = !DILocation(line: 227, column: 47, scope: !1247)
!1254 = !DILocalVariable(name: "zSig", arg: 3, scope: !1247, file: !3, line: 227, type: !27)
!1255 = !DILocation(line: 227, column: 60, scope: !1247)
!1256 = !DILocation(line: 230, column: 21, scope: !1247)
!1257 = !DILocation(line: 230, column: 28, scope: !1247)
!1258 = !DILocation(line: 230, column: 50, scope: !1247)
!1259 = !DILocation(line: 230, column: 56, scope: !1247)
!1260 = !DILocation(line: 230, column: 35, scope: !1247)
!1261 = !DILocation(line: 230, column: 65, scope: !1247)
!1262 = !DILocation(line: 230, column: 63, scope: !1247)
!1263 = !DILocation(line: 230, column: 1, scope: !1247)
!1264 = distinct !DISubprogram(name: "extractFloat64Frac", scope: !3, file: !3, line: 331, type: !1265, isLocal: false, isDefinition: true, scopeLine: 332, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1265 = !DISubroutineType(types: !1266)
!1266 = !{!24, !1130}
!1267 = !DILocalVariable(name: "a", arg: 1, scope: !1264, file: !3, line: 331, type: !1130)
!1268 = !DILocation(line: 331, column: 43, scope: !1264)
!1269 = !DILocation(line: 334, column: 8, scope: !1264)
!1270 = !DILocation(line: 334, column: 10, scope: !1264)
!1271 = !DILocation(line: 334, column: 1, scope: !1264)
!1272 = distinct !DISubprogram(name: "extractFloat64Exp", scope: !3, file: !3, line: 342, type: !1273, isLocal: false, isDefinition: true, scopeLine: 343, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1273 = !DISubroutineType(types: !1274)
!1274 = !{!60, !1130}
!1275 = !DILocalVariable(name: "a", arg: 1, scope: !1272, file: !3, line: 342, type: !1130)
!1276 = !DILocation(line: 342, column: 41, scope: !1272)
!1277 = !DILocation(line: 345, column: 10, scope: !1272)
!1278 = !DILocation(line: 345, column: 11, scope: !1272)
!1279 = !DILocation(line: 345, column: 18, scope: !1272)
!1280 = !DILocation(line: 345, column: 8, scope: !1272)
!1281 = !DILocation(line: 345, column: 1, scope: !1272)
!1282 = distinct !DISubprogram(name: "extractFloat64Sign", scope: !3, file: !3, line: 353, type: !1283, isLocal: false, isDefinition: true, scopeLine: 354, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1283 = !DISubroutineType(types: !1284)
!1284 = !{!1241, !1130}
!1285 = !DILocalVariable(name: "a", arg: 1, scope: !1282, file: !3, line: 353, type: !1130)
!1286 = !DILocation(line: 353, column: 41, scope: !1282)
!1287 = !DILocation(line: 356, column: 8, scope: !1282)
!1288 = !DILocation(line: 356, column: 9, scope: !1282)
!1289 = !DILocation(line: 356, column: 1, scope: !1282)
!1290 = distinct !DISubprogram(name: "packFloat64", scope: !3, file: !3, line: 389, type: !1291, isLocal: false, isDefinition: true, scopeLine: 390, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1291 = !DISubroutineType(types: !1292)
!1292 = !{!1130, !1241, !60, !24}
!1293 = !DILocalVariable(name: "zSign", arg: 1, scope: !1290, file: !3, line: 389, type: !1241)
!1294 = !DILocation(line: 389, column: 34, scope: !1290)
!1295 = !DILocalVariable(name: "zExp", arg: 2, scope: !1290, file: !3, line: 389, type: !60)
!1296 = !DILocation(line: 389, column: 47, scope: !1290)
!1297 = !DILocalVariable(name: "zSig", arg: 3, scope: !1290, file: !3, line: 389, type: !24)
!1298 = !DILocation(line: 389, column: 60, scope: !1290)
!1299 = !DILocation(line: 392, column: 21, scope: !1290)
!1300 = !DILocation(line: 392, column: 12, scope: !1290)
!1301 = !DILocation(line: 392, column: 28, scope: !1290)
!1302 = !DILocation(line: 392, column: 50, scope: !1290)
!1303 = !DILocation(line: 392, column: 41, scope: !1290)
!1304 = !DILocation(line: 392, column: 56, scope: !1290)
!1305 = !DILocation(line: 392, column: 35, scope: !1290)
!1306 = !DILocation(line: 392, column: 65, scope: !1290)
!1307 = !DILocation(line: 392, column: 63, scope: !1290)
!1308 = !DILocation(line: 392, column: 1, scope: !1290)
!1309 = distinct !DISubprogram(name: "extractFloatx80Frac", scope: !3, file: !3, line: 496, type: !1310, isLocal: false, isDefinition: true, scopeLine: 497, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1310 = !DISubroutineType(types: !1311)
!1311 = !{!24, !1151}
!1312 = !DILocalVariable(name: "a", arg: 1, scope: !1309, file: !3, line: 496, type: !1151)
!1313 = !DILocation(line: 496, column: 45, scope: !1309)
!1314 = !DILocation(line: 499, column: 14, scope: !1309)
!1315 = !DILocation(line: 499, column: 5, scope: !1309)
!1316 = distinct !DISubprogram(name: "extractFloatx80Exp", scope: !3, file: !3, line: 508, type: !1317, isLocal: false, isDefinition: true, scopeLine: 509, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1317 = !DISubroutineType(types: !1318)
!1318 = !{!1319, !1151}
!1319 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32", file: !25, line: 27, baseType: !32)
!1320 = !DILocalVariable(name: "a", arg: 1, scope: !1316, file: !3, line: 508, type: !1151)
!1321 = !DILocation(line: 508, column: 43, scope: !1316)
!1322 = !DILocation(line: 511, column: 14, scope: !1316)
!1323 = !DILocation(line: 511, column: 12, scope: !1316)
!1324 = !DILocation(line: 511, column: 19, scope: !1316)
!1325 = !DILocation(line: 511, column: 5, scope: !1316)
!1326 = distinct !DISubprogram(name: "extractFloatx80Sign", scope: !3, file: !3, line: 520, type: !1327, isLocal: false, isDefinition: true, scopeLine: 521, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1327 = !DISubroutineType(types: !1328)
!1328 = !{!1241, !1151}
!1329 = !DILocalVariable(name: "a", arg: 1, scope: !1326, file: !3, line: 520, type: !1151)
!1330 = !DILocation(line: 520, column: 43, scope: !1326)
!1331 = !DILocation(line: 523, column: 14, scope: !1326)
!1332 = !DILocation(line: 523, column: 12, scope: !1326)
!1333 = !DILocation(line: 523, column: 18, scope: !1326)
!1334 = !DILocation(line: 523, column: 5, scope: !1326)
!1335 = distinct !DISubprogram(name: "packFloatx80", scope: !3, file: !3, line: 550, type: !1336, isLocal: false, isDefinition: true, scopeLine: 551, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1336 = !DISubroutineType(types: !1337)
!1337 = !{!1151, !1241, !1319, !24}
!1338 = !DILocalVariable(name: "zSign", arg: 1, scope: !1335, file: !3, line: 550, type: !1241)
!1339 = !DILocation(line: 550, column: 36, scope: !1335)
!1340 = !DILocalVariable(name: "zExp", arg: 2, scope: !1335, file: !3, line: 550, type: !1319)
!1341 = !DILocation(line: 550, column: 49, scope: !1335)
!1342 = !DILocalVariable(name: "zSig", arg: 3, scope: !1335, file: !3, line: 550, type: !24)
!1343 = !DILocation(line: 550, column: 62, scope: !1335)
!1344 = !DILocalVariable(name: "z", scope: !1335, file: !3, line: 552, type: !1151)
!1345 = !DILocation(line: 552, column: 14, scope: !1335)
!1346 = !DILocation(line: 554, column: 13, scope: !1335)
!1347 = !DILocation(line: 554, column: 7, scope: !1335)
!1348 = !DILocation(line: 554, column: 11, scope: !1335)
!1349 = !DILocation(line: 555, column: 27, scope: !1335)
!1350 = !DILocation(line: 555, column: 18, scope: !1335)
!1351 = !DILocation(line: 555, column: 16, scope: !1335)
!1352 = !DILocation(line: 555, column: 34, scope: !1335)
!1353 = !DILocation(line: 555, column: 43, scope: !1335)
!1354 = !DILocation(line: 555, column: 41, scope: !1335)
!1355 = !DILocation(line: 555, column: 14, scope: !1335)
!1356 = !DILocation(line: 555, column: 7, scope: !1335)
!1357 = !DILocation(line: 555, column: 12, scope: !1335)
!1358 = !DILocation(line: 556, column: 12, scope: !1335)
!1359 = !DILocation(line: 556, column: 5, scope: !1335)
!1360 = distinct !DISubprogram(name: "extractFloat128Frac1", scope: !3, file: !3, line: 781, type: !1361, isLocal: false, isDefinition: true, scopeLine: 782, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1361 = !DISubroutineType(types: !1362)
!1362 = !{!24, !1190}
!1363 = !DILocalVariable(name: "a", arg: 1, scope: !1360, file: !3, line: 781, type: !1190)
!1364 = !DILocation(line: 781, column: 46, scope: !1360)
!1365 = !DILocation(line: 784, column: 14, scope: !1360)
!1366 = !DILocation(line: 784, column: 5, scope: !1360)
!1367 = distinct !DISubprogram(name: "extractFloat128Frac0", scope: !3, file: !3, line: 793, type: !1361, isLocal: false, isDefinition: true, scopeLine: 794, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1368 = !DILocalVariable(name: "a", arg: 1, scope: !1367, file: !3, line: 793, type: !1190)
!1369 = !DILocation(line: 793, column: 46, scope: !1367)
!1370 = !DILocation(line: 796, column: 14, scope: !1367)
!1371 = !DILocation(line: 796, column: 19, scope: !1367)
!1372 = !DILocation(line: 796, column: 5, scope: !1367)
!1373 = distinct !DISubprogram(name: "extractFloat128Exp", scope: !3, file: !3, line: 805, type: !1374, isLocal: false, isDefinition: true, scopeLine: 806, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1374 = !DISubroutineType(types: !1375)
!1375 = !{!1319, !1190}
!1376 = !DILocalVariable(name: "a", arg: 1, scope: !1373, file: !3, line: 805, type: !1190)
!1377 = !DILocation(line: 805, column: 43, scope: !1373)
!1378 = !DILocation(line: 808, column: 16, scope: !1373)
!1379 = !DILocation(line: 808, column: 20, scope: !1373)
!1380 = !DILocation(line: 808, column: 27, scope: !1373)
!1381 = !DILocation(line: 808, column: 12, scope: !1373)
!1382 = !DILocation(line: 808, column: 5, scope: !1373)
!1383 = distinct !DISubprogram(name: "extractFloat128Sign", scope: !3, file: !3, line: 816, type: !1384, isLocal: false, isDefinition: true, scopeLine: 817, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1384 = !DISubroutineType(types: !1385)
!1385 = !{!1241, !1190}
!1386 = !DILocalVariable(name: "a", arg: 1, scope: !1383, file: !3, line: 816, type: !1190)
!1387 = !DILocation(line: 816, column: 43, scope: !1383)
!1388 = !DILocation(line: 819, column: 14, scope: !1383)
!1389 = !DILocation(line: 819, column: 18, scope: !1383)
!1390 = !DILocation(line: 819, column: 12, scope: !1383)
!1391 = !DILocation(line: 819, column: 5, scope: !1383)
!1392 = distinct !DISubprogram(name: "packFloat128", scope: !3, file: !3, line: 878, type: !1393, isLocal: false, isDefinition: true, scopeLine: 879, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1393 = !DISubroutineType(types: !1394)
!1394 = !{!1190, !1241, !1319, !24, !24}
!1395 = !DILocalVariable(name: "zSign", arg: 1, scope: !1392, file: !3, line: 878, type: !1241)
!1396 = !DILocation(line: 878, column: 21, scope: !1392)
!1397 = !DILocalVariable(name: "zExp", arg: 2, scope: !1392, file: !3, line: 878, type: !1319)
!1398 = !DILocation(line: 878, column: 34, scope: !1392)
!1399 = !DILocalVariable(name: "zSig0", arg: 3, scope: !1392, file: !3, line: 878, type: !24)
!1400 = !DILocation(line: 878, column: 47, scope: !1392)
!1401 = !DILocalVariable(name: "zSig1", arg: 4, scope: !1392, file: !3, line: 878, type: !24)
!1402 = !DILocation(line: 878, column: 61, scope: !1392)
!1403 = !DILocalVariable(name: "z", scope: !1392, file: !3, line: 880, type: !1190)
!1404 = !DILocation(line: 880, column: 14, scope: !1392)
!1405 = !DILocation(line: 882, column: 13, scope: !1392)
!1406 = !DILocation(line: 882, column: 7, scope: !1392)
!1407 = !DILocation(line: 882, column: 11, scope: !1392)
!1408 = !DILocation(line: 883, column: 27, scope: !1392)
!1409 = !DILocation(line: 883, column: 18, scope: !1392)
!1410 = !DILocation(line: 883, column: 34, scope: !1392)
!1411 = !DILocation(line: 883, column: 56, scope: !1392)
!1412 = !DILocation(line: 883, column: 47, scope: !1392)
!1413 = !DILocation(line: 883, column: 62, scope: !1392)
!1414 = !DILocation(line: 883, column: 41, scope: !1392)
!1415 = !DILocation(line: 883, column: 71, scope: !1392)
!1416 = !DILocation(line: 883, column: 69, scope: !1392)
!1417 = !DILocation(line: 883, column: 7, scope: !1392)
!1418 = !DILocation(line: 883, column: 12, scope: !1392)
!1419 = !DILocation(line: 884, column: 12, scope: !1392)
!1420 = !DILocation(line: 884, column: 5, scope: !1392)
!1421 = distinct !DISubprogram(name: "int32_to_float32", scope: !3, file: !3, line: 1043, type: !1422, isLocal: false, isDefinition: true, scopeLine: 1044, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1422 = !DISubroutineType(types: !1423)
!1423 = !{!1109, !1319}
!1424 = !DILocalVariable(name: "a", arg: 1, scope: !1421, file: !3, line: 1043, type: !1319)
!1425 = !DILocation(line: 1043, column: 33, scope: !1421)
!1426 = !DILocalVariable(name: "zSign", scope: !1421, file: !3, line: 1045, type: !1241)
!1427 = !DILocation(line: 1045, column: 10, scope: !1421)
!1428 = !DILocation(line: 1047, column: 10, scope: !1429)
!1429 = distinct !DILexicalBlock(scope: !1421, file: !3, line: 1047, column: 10)
!1430 = !DILocation(line: 1047, column: 12, scope: !1429)
!1431 = !DILocation(line: 1047, column: 10, scope: !1421)
!1432 = !DILocation(line: 1047, column: 19, scope: !1429)
!1433 = !DILocation(line: 1048, column: 10, scope: !1434)
!1434 = distinct !DILexicalBlock(scope: !1421, file: !3, line: 1048, column: 10)
!1435 = !DILocation(line: 1048, column: 12, scope: !1434)
!1436 = !DILocation(line: 1048, column: 10, scope: !1421)
!1437 = !DILocation(line: 1048, column: 45, scope: !1434)
!1438 = !DILocation(line: 1048, column: 38, scope: !1434)
!1439 = !DILocation(line: 1049, column: 15, scope: !1421)
!1440 = !DILocation(line: 1049, column: 17, scope: !1421)
!1441 = !DILocation(line: 1049, column: 11, scope: !1421)
!1442 = !DILocation(line: 1050, column: 42, scope: !1421)
!1443 = !DILocation(line: 1050, column: 55, scope: !1421)
!1444 = !DILocation(line: 1050, column: 65, scope: !1421)
!1445 = !DILocation(line: 1050, column: 63, scope: !1421)
!1446 = !DILocation(line: 1050, column: 69, scope: !1421)
!1447 = !DILocation(line: 1050, column: 12, scope: !1421)
!1448 = !DILocation(line: 1050, column: 5, scope: !1421)
!1449 = !DILocation(line: 1052, column: 1, scope: !1421)
!1450 = distinct !DISubprogram(name: "normalizeRoundAndPackFloat32", scope: !3, file: !3, line: 318, type: !1248, isLocal: true, isDefinition: true, scopeLine: 319, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1451 = !DILocalVariable(name: "zSign", arg: 1, scope: !1450, file: !3, line: 318, type: !1241)
!1452 = !DILocation(line: 318, column: 44, scope: !1450)
!1453 = !DILocalVariable(name: "zExp", arg: 2, scope: !1450, file: !3, line: 318, type: !60)
!1454 = !DILocation(line: 318, column: 57, scope: !1450)
!1455 = !DILocalVariable(name: "zSig", arg: 3, scope: !1450, file: !3, line: 318, type: !27)
!1456 = !DILocation(line: 318, column: 70, scope: !1450)
!1457 = !DILocalVariable(name: "shiftCount", scope: !1450, file: !3, line: 320, type: !38)
!1458 = !DILocation(line: 320, column: 6, scope: !1450)
!1459 = !DILocation(line: 322, column: 35, scope: !1450)
!1460 = !DILocation(line: 322, column: 14, scope: !1450)
!1461 = !DILocation(line: 322, column: 42, scope: !1450)
!1462 = !DILocation(line: 322, column: 12, scope: !1450)
!1463 = !DILocation(line: 323, column: 29, scope: !1450)
!1464 = !DILocation(line: 323, column: 36, scope: !1450)
!1465 = !DILocation(line: 323, column: 43, scope: !1450)
!1466 = !DILocation(line: 323, column: 41, scope: !1450)
!1467 = !DILocation(line: 323, column: 55, scope: !1450)
!1468 = !DILocation(line: 323, column: 61, scope: !1450)
!1469 = !DILocation(line: 323, column: 59, scope: !1450)
!1470 = !DILocation(line: 323, column: 8, scope: !1450)
!1471 = !DILocation(line: 323, column: 1, scope: !1450)
!1472 = distinct !DISubprogram(name: "int32_to_float64", scope: !3, file: !3, line: 1060, type: !1473, isLocal: false, isDefinition: true, scopeLine: 1061, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1473 = !DISubroutineType(types: !1474)
!1474 = !{!1130, !1319}
!1475 = !DILocalVariable(name: "a", arg: 1, scope: !1472, file: !3, line: 1060, type: !1319)
!1476 = !DILocation(line: 1060, column: 33, scope: !1472)
!1477 = !DILocalVariable(name: "zSign", scope: !1472, file: !3, line: 1062, type: !1241)
!1478 = !DILocation(line: 1062, column: 10, scope: !1472)
!1479 = !DILocalVariable(name: "absA", scope: !1472, file: !3, line: 1063, type: !1480)
!1480 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32", file: !25, line: 26, baseType: !28)
!1481 = !DILocation(line: 1063, column: 12, scope: !1472)
!1482 = !DILocalVariable(name: "shiftCount", scope: !1472, file: !3, line: 1064, type: !38)
!1483 = !DILocation(line: 1064, column: 10, scope: !1472)
!1484 = !DILocalVariable(name: "zSig", scope: !1472, file: !3, line: 1065, type: !24)
!1485 = !DILocation(line: 1065, column: 12, scope: !1472)
!1486 = !DILocation(line: 1067, column: 10, scope: !1487)
!1487 = distinct !DILexicalBlock(scope: !1472, file: !3, line: 1067, column: 10)
!1488 = !DILocation(line: 1067, column: 12, scope: !1487)
!1489 = !DILocation(line: 1067, column: 10, scope: !1472)
!1490 = !DILocation(line: 1067, column: 19, scope: !1487)
!1491 = !DILocation(line: 1068, column: 15, scope: !1472)
!1492 = !DILocation(line: 1068, column: 17, scope: !1472)
!1493 = !DILocation(line: 1068, column: 11, scope: !1472)
!1494 = !DILocation(line: 1069, column: 12, scope: !1472)
!1495 = !DILocation(line: 1069, column: 22, scope: !1472)
!1496 = !DILocation(line: 1069, column: 20, scope: !1472)
!1497 = !DILocation(line: 1069, column: 26, scope: !1472)
!1498 = !DILocation(line: 1069, column: 10, scope: !1472)
!1499 = !DILocation(line: 1070, column: 39, scope: !1472)
!1500 = !DILocation(line: 1070, column: 18, scope: !1472)
!1501 = !DILocation(line: 1070, column: 46, scope: !1472)
!1502 = !DILocation(line: 1070, column: 16, scope: !1472)
!1503 = !DILocation(line: 1071, column: 12, scope: !1472)
!1504 = !DILocation(line: 1071, column: 10, scope: !1472)
!1505 = !DILocation(line: 1072, column: 25, scope: !1472)
!1506 = !DILocation(line: 1072, column: 40, scope: !1472)
!1507 = !DILocation(line: 1072, column: 38, scope: !1472)
!1508 = !DILocation(line: 1072, column: 52, scope: !1472)
!1509 = !DILocation(line: 1072, column: 58, scope: !1472)
!1510 = !DILocation(line: 1072, column: 56, scope: !1472)
!1511 = !DILocation(line: 1072, column: 12, scope: !1472)
!1512 = !DILocation(line: 1072, column: 5, scope: !1472)
!1513 = !DILocation(line: 1074, column: 1, scope: !1472)
!1514 = !DILocalVariable(name: "a", arg: 1, scope: !46, file: !47, line: 612, type: !27)
!1515 = !DILocation(line: 612, column: 41, scope: !46)
!1516 = !DILocalVariable(name: "shiftCount", scope: !46, file: !47, line: 632, type: !38)
!1517 = !DILocation(line: 632, column: 10, scope: !46)
!1518 = !DILocation(line: 634, column: 16, scope: !46)
!1519 = !DILocation(line: 635, column: 10, scope: !1520)
!1520 = distinct !DILexicalBlock(scope: !46, file: !47, line: 635, column: 10)
!1521 = !DILocation(line: 635, column: 12, scope: !1520)
!1522 = !DILocation(line: 635, column: 10, scope: !46)
!1523 = !DILocation(line: 636, column: 20, scope: !1524)
!1524 = distinct !DILexicalBlock(scope: !1520, file: !47, line: 635, column: 24)
!1525 = !DILocation(line: 637, column: 11, scope: !1524)
!1526 = !DILocation(line: 638, column: 5, scope: !1524)
!1527 = !DILocation(line: 639, column: 10, scope: !1528)
!1528 = distinct !DILexicalBlock(scope: !46, file: !47, line: 639, column: 10)
!1529 = !DILocation(line: 639, column: 12, scope: !1528)
!1530 = !DILocation(line: 639, column: 10, scope: !46)
!1531 = !DILocation(line: 640, column: 20, scope: !1532)
!1532 = distinct !DILexicalBlock(scope: !1528, file: !47, line: 639, column: 26)
!1533 = !DILocation(line: 641, column: 11, scope: !1532)
!1534 = !DILocation(line: 642, column: 5, scope: !1532)
!1535 = !DILocation(line: 643, column: 42, scope: !46)
!1536 = !DILocation(line: 643, column: 43, scope: !46)
!1537 = !DILocation(line: 643, column: 19, scope: !46)
!1538 = !DILocation(line: 643, column: 16, scope: !46)
!1539 = !DILocation(line: 644, column: 12, scope: !46)
!1540 = !DILocation(line: 644, column: 5, scope: !46)
!1541 = distinct !DISubprogram(name: "int32_to_floatx80", scope: !3, file: !3, line: 1085, type: !1542, isLocal: false, isDefinition: true, scopeLine: 1086, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1542 = !DISubroutineType(types: !1543)
!1543 = !{!1151, !1319}
!1544 = !DILocalVariable(name: "a", arg: 1, scope: !1541, file: !3, line: 1085, type: !1319)
!1545 = !DILocation(line: 1085, column: 35, scope: !1541)
!1546 = !DILocalVariable(name: "zSign", scope: !1541, file: !3, line: 1087, type: !1241)
!1547 = !DILocation(line: 1087, column: 10, scope: !1541)
!1548 = !DILocalVariable(name: "absA", scope: !1541, file: !3, line: 1088, type: !1480)
!1549 = !DILocation(line: 1088, column: 12, scope: !1541)
!1550 = !DILocalVariable(name: "shiftCount", scope: !1541, file: !3, line: 1089, type: !38)
!1551 = !DILocation(line: 1089, column: 10, scope: !1541)
!1552 = !DILocalVariable(name: "zSig", scope: !1541, file: !3, line: 1090, type: !24)
!1553 = !DILocation(line: 1090, column: 12, scope: !1541)
!1554 = !DILocation(line: 1092, column: 10, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1541, file: !3, line: 1092, column: 10)
!1556 = !DILocation(line: 1092, column: 12, scope: !1555)
!1557 = !DILocation(line: 1092, column: 10, scope: !1541)
!1558 = !DILocation(line: 1092, column: 26, scope: !1555)
!1559 = !DILocation(line: 1092, column: 19, scope: !1555)
!1560 = !DILocation(line: 1093, column: 15, scope: !1541)
!1561 = !DILocation(line: 1093, column: 17, scope: !1541)
!1562 = !DILocation(line: 1093, column: 11, scope: !1541)
!1563 = !DILocation(line: 1094, column: 12, scope: !1541)
!1564 = !DILocation(line: 1094, column: 22, scope: !1541)
!1565 = !DILocation(line: 1094, column: 20, scope: !1541)
!1566 = !DILocation(line: 1094, column: 26, scope: !1541)
!1567 = !DILocation(line: 1094, column: 10, scope: !1541)
!1568 = !DILocation(line: 1095, column: 39, scope: !1541)
!1569 = !DILocation(line: 1095, column: 18, scope: !1541)
!1570 = !DILocation(line: 1095, column: 46, scope: !1541)
!1571 = !DILocation(line: 1095, column: 16, scope: !1541)
!1572 = !DILocation(line: 1096, column: 12, scope: !1541)
!1573 = !DILocation(line: 1096, column: 10, scope: !1541)
!1574 = !DILocation(line: 1097, column: 26, scope: !1541)
!1575 = !DILocation(line: 1097, column: 42, scope: !1541)
!1576 = !DILocation(line: 1097, column: 40, scope: !1541)
!1577 = !DILocation(line: 1097, column: 54, scope: !1541)
!1578 = !DILocation(line: 1097, column: 60, scope: !1541)
!1579 = !DILocation(line: 1097, column: 58, scope: !1541)
!1580 = !DILocation(line: 1097, column: 12, scope: !1541)
!1581 = !DILocation(line: 1097, column: 5, scope: !1541)
!1582 = !DILocation(line: 1099, column: 1, scope: !1541)
!1583 = distinct !DISubprogram(name: "int32_to_float128", scope: !3, file: !3, line: 1111, type: !1584, isLocal: false, isDefinition: true, scopeLine: 1112, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1584 = !DISubroutineType(types: !1585)
!1585 = !{!1190, !1319}
!1586 = !DILocalVariable(name: "a", arg: 1, scope: !1583, file: !3, line: 1111, type: !1319)
!1587 = !DILocation(line: 1111, column: 35, scope: !1583)
!1588 = !DILocalVariable(name: "zSign", scope: !1583, file: !3, line: 1113, type: !1241)
!1589 = !DILocation(line: 1113, column: 10, scope: !1583)
!1590 = !DILocalVariable(name: "absA", scope: !1583, file: !3, line: 1114, type: !1480)
!1591 = !DILocation(line: 1114, column: 12, scope: !1583)
!1592 = !DILocalVariable(name: "shiftCount", scope: !1583, file: !3, line: 1115, type: !38)
!1593 = !DILocation(line: 1115, column: 10, scope: !1583)
!1594 = !DILocalVariable(name: "zSig0", scope: !1583, file: !3, line: 1116, type: !24)
!1595 = !DILocation(line: 1116, column: 12, scope: !1583)
!1596 = !DILocation(line: 1118, column: 10, scope: !1597)
!1597 = distinct !DILexicalBlock(scope: !1583, file: !3, line: 1118, column: 10)
!1598 = !DILocation(line: 1118, column: 12, scope: !1597)
!1599 = !DILocation(line: 1118, column: 10, scope: !1583)
!1600 = !DILocation(line: 1118, column: 26, scope: !1597)
!1601 = !DILocation(line: 1118, column: 19, scope: !1597)
!1602 = !DILocation(line: 1119, column: 15, scope: !1583)
!1603 = !DILocation(line: 1119, column: 17, scope: !1583)
!1604 = !DILocation(line: 1119, column: 11, scope: !1583)
!1605 = !DILocation(line: 1120, column: 12, scope: !1583)
!1606 = !DILocation(line: 1120, column: 22, scope: !1583)
!1607 = !DILocation(line: 1120, column: 20, scope: !1583)
!1608 = !DILocation(line: 1120, column: 26, scope: !1583)
!1609 = !DILocation(line: 1120, column: 10, scope: !1583)
!1610 = !DILocation(line: 1121, column: 39, scope: !1583)
!1611 = !DILocation(line: 1121, column: 18, scope: !1583)
!1612 = !DILocation(line: 1121, column: 46, scope: !1583)
!1613 = !DILocation(line: 1121, column: 16, scope: !1583)
!1614 = !DILocation(line: 1122, column: 13, scope: !1583)
!1615 = !DILocation(line: 1122, column: 11, scope: !1583)
!1616 = !DILocation(line: 1123, column: 26, scope: !1583)
!1617 = !DILocation(line: 1123, column: 42, scope: !1583)
!1618 = !DILocation(line: 1123, column: 40, scope: !1583)
!1619 = !DILocation(line: 1123, column: 54, scope: !1583)
!1620 = !DILocation(line: 1123, column: 61, scope: !1583)
!1621 = !DILocation(line: 1123, column: 59, scope: !1583)
!1622 = !DILocation(line: 1123, column: 12, scope: !1583)
!1623 = !DILocation(line: 1123, column: 5, scope: !1583)
!1624 = !DILocation(line: 1125, column: 1, scope: !1583)
!1625 = distinct !DISubprogram(name: "int64_to_float32", scope: !3, file: !3, line: 1135, type: !1626, isLocal: false, isDefinition: true, scopeLine: 1136, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1626 = !DISubroutineType(types: !1627)
!1627 = !{!1109, !1628}
!1628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64", file: !25, line: 30, baseType: !34)
!1629 = !DILocalVariable(name: "a", arg: 1, scope: !1625, file: !3, line: 1135, type: !1628)
!1630 = !DILocation(line: 1135, column: 33, scope: !1625)
!1631 = !DILocalVariable(name: "zSign", scope: !1625, file: !3, line: 1137, type: !1241)
!1632 = !DILocation(line: 1137, column: 10, scope: !1625)
!1633 = !DILocalVariable(name: "absA", scope: !1625, file: !3, line: 1138, type: !1634)
!1634 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64", file: !25, line: 29, baseType: !26)
!1635 = !DILocation(line: 1138, column: 12, scope: !1625)
!1636 = !DILocalVariable(name: "shiftCount", scope: !1625, file: !3, line: 1139, type: !38)
!1637 = !DILocation(line: 1139, column: 10, scope: !1625)
!1638 = !DILocalVariable(name: "zSig", scope: !1625, file: !3, line: 1140, type: !27)
!1639 = !DILocation(line: 1140, column: 12, scope: !1625)
!1640 = !DILocation(line: 1142, column: 10, scope: !1641)
!1641 = distinct !DILexicalBlock(scope: !1625, file: !3, line: 1142, column: 10)
!1642 = !DILocation(line: 1142, column: 12, scope: !1641)
!1643 = !DILocation(line: 1142, column: 10, scope: !1625)
!1644 = !DILocation(line: 1142, column: 19, scope: !1641)
!1645 = !DILocation(line: 1143, column: 15, scope: !1625)
!1646 = !DILocation(line: 1143, column: 17, scope: !1625)
!1647 = !DILocation(line: 1143, column: 11, scope: !1625)
!1648 = !DILocation(line: 1144, column: 12, scope: !1625)
!1649 = !DILocation(line: 1144, column: 22, scope: !1625)
!1650 = !DILocation(line: 1144, column: 20, scope: !1625)
!1651 = !DILocation(line: 1144, column: 26, scope: !1625)
!1652 = !DILocation(line: 1144, column: 10, scope: !1625)
!1653 = !DILocation(line: 1145, column: 39, scope: !1625)
!1654 = !DILocation(line: 1145, column: 18, scope: !1625)
!1655 = !DILocation(line: 1145, column: 46, scope: !1625)
!1656 = !DILocation(line: 1145, column: 16, scope: !1625)
!1657 = !DILocation(line: 1146, column: 15, scope: !1658)
!1658 = distinct !DILexicalBlock(scope: !1625, file: !3, line: 1146, column: 10)
!1659 = !DILocation(line: 1146, column: 12, scope: !1658)
!1660 = !DILocation(line: 1146, column: 10, scope: !1625)
!1661 = !DILocation(line: 1147, column: 29, scope: !1662)
!1662 = distinct !DILexicalBlock(scope: !1658, file: !3, line: 1146, column: 28)
!1663 = !DILocation(line: 1147, column: 43, scope: !1662)
!1664 = !DILocation(line: 1147, column: 41, scope: !1662)
!1665 = !DILocation(line: 1147, column: 55, scope: !1662)
!1666 = !DILocation(line: 1147, column: 61, scope: !1662)
!1667 = !DILocation(line: 1147, column: 59, scope: !1662)
!1668 = !DILocation(line: 1147, column: 16, scope: !1662)
!1669 = !DILocation(line: 1147, column: 9, scope: !1662)
!1670 = !DILocation(line: 1150, column: 20, scope: !1671)
!1671 = distinct !DILexicalBlock(scope: !1658, file: !3, line: 1149, column: 10)
!1672 = !DILocation(line: 1151, column: 14, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1671, file: !3, line: 1151, column: 14)
!1674 = !DILocation(line: 1151, column: 25, scope: !1673)
!1675 = !DILocation(line: 1151, column: 14, scope: !1671)
!1676 = !DILocation(line: 1152, column: 34, scope: !1677)
!1677 = distinct !DILexicalBlock(scope: !1673, file: !3, line: 1151, column: 31)
!1678 = !DILocation(line: 1152, column: 42, scope: !1677)
!1679 = !DILocation(line: 1152, column: 40, scope: !1677)
!1680 = !DILocation(line: 1152, column: 13, scope: !1677)
!1681 = !DILocation(line: 1153, column: 9, scope: !1677)
!1682 = !DILocation(line: 1155, column: 22, scope: !1683)
!1683 = distinct !DILexicalBlock(scope: !1673, file: !3, line: 1154, column: 14)
!1684 = !DILocation(line: 1155, column: 18, scope: !1683)
!1685 = !DILocation(line: 1157, column: 37, scope: !1671)
!1686 = !DILocation(line: 1157, column: 51, scope: !1671)
!1687 = !DILocation(line: 1157, column: 49, scope: !1671)
!1688 = !DILocation(line: 1157, column: 63, scope: !1671)
!1689 = !DILocation(line: 1157, column: 16, scope: !1671)
!1690 = !DILocation(line: 1157, column: 9, scope: !1671)
!1691 = !DILocation(line: 1160, column: 1, scope: !1625)
!1692 = distinct !DISubprogram(name: "countLeadingZeros64", scope: !47, file: !47, line: 653, type: !1693, isLocal: true, isDefinition: true, scopeLine: 654, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1693 = !DISubroutineType(types: !1694)
!1694 = !{!38, !24}
!1695 = !DILocalVariable(name: "a", arg: 1, scope: !1692, file: !47, line: 653, type: !24)
!1696 = !DILocation(line: 653, column: 41, scope: !1692)
!1697 = !DILocalVariable(name: "shiftCount", scope: !1692, file: !47, line: 655, type: !38)
!1698 = !DILocation(line: 655, column: 10, scope: !1692)
!1699 = !DILocation(line: 657, column: 16, scope: !1692)
!1700 = !DILocation(line: 658, column: 10, scope: !1701)
!1701 = distinct !DILexicalBlock(scope: !1692, file: !47, line: 658, column: 10)
!1702 = !DILocation(line: 658, column: 12, scope: !1701)
!1703 = !DILocation(line: 658, column: 10, scope: !1692)
!1704 = !DILocation(line: 659, column: 20, scope: !1705)
!1705 = distinct !DILexicalBlock(scope: !1701, file: !47, line: 658, column: 35)
!1706 = !DILocation(line: 660, column: 5, scope: !1705)
!1707 = !DILocation(line: 662, column: 11, scope: !1708)
!1708 = distinct !DILexicalBlock(scope: !1701, file: !47, line: 661, column: 10)
!1709 = !DILocation(line: 664, column: 40, scope: !1692)
!1710 = !DILocation(line: 664, column: 19, scope: !1692)
!1711 = !DILocation(line: 664, column: 16, scope: !1692)
!1712 = !DILocation(line: 665, column: 12, scope: !1692)
!1713 = !DILocation(line: 665, column: 5, scope: !1692)
!1714 = distinct !DISubprogram(name: "roundAndPackFloat32", scope: !3, file: !3, line: 256, type: !1248, isLocal: true, isDefinition: true, scopeLine: 257, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1715 = !DILocalVariable(name: "zSign", arg: 1, scope: !1714, file: !3, line: 256, type: !1241)
!1716 = !DILocation(line: 256, column: 42, scope: !1714)
!1717 = !DILocalVariable(name: "zExp", arg: 2, scope: !1714, file: !3, line: 256, type: !60)
!1718 = !DILocation(line: 256, column: 55, scope: !1714)
!1719 = !DILocalVariable(name: "zSig", arg: 3, scope: !1714, file: !3, line: 256, type: !27)
!1720 = !DILocation(line: 256, column: 68, scope: !1714)
!1721 = !DILocalVariable(name: "roundingMode", scope: !1714, file: !3, line: 258, type: !38)
!1722 = !DILocation(line: 258, column: 6, scope: !1714)
!1723 = !DILocalVariable(name: "roundNearestEven", scope: !1714, file: !3, line: 259, type: !1241)
!1724 = !DILocation(line: 259, column: 6, scope: !1714)
!1725 = !DILocalVariable(name: "roundIncrement", scope: !1714, file: !3, line: 260, type: !38)
!1726 = !DILocation(line: 260, column: 6, scope: !1714)
!1727 = !DILocalVariable(name: "roundBits", scope: !1714, file: !3, line: 260, type: !38)
!1728 = !DILocation(line: 260, column: 22, scope: !1714)
!1729 = !DILocalVariable(name: "isTiny", scope: !1714, file: !3, line: 261, type: !1241)
!1730 = !DILocation(line: 261, column: 6, scope: !1714)
!1731 = !DILocation(line: 263, column: 16, scope: !1714)
!1732 = !DILocation(line: 263, column: 14, scope: !1714)
!1733 = !DILocation(line: 264, column: 22, scope: !1714)
!1734 = !DILocation(line: 264, column: 35, scope: !1714)
!1735 = !DILocation(line: 264, column: 18, scope: !1714)
!1736 = !DILocation(line: 265, column: 16, scope: !1714)
!1737 = !DILocation(line: 266, column: 8, scope: !1738)
!1738 = distinct !DILexicalBlock(scope: !1714, file: !3, line: 266, column: 6)
!1739 = !DILocation(line: 266, column: 6, scope: !1714)
!1740 = !DILocation(line: 267, column: 6, scope: !1741)
!1741 = distinct !DILexicalBlock(scope: !1742, file: !3, line: 267, column: 6)
!1742 = distinct !DILexicalBlock(scope: !1738, file: !3, line: 266, column: 27)
!1743 = !DILocation(line: 267, column: 19, scope: !1741)
!1744 = !DILocation(line: 267, column: 6, scope: !1742)
!1745 = !DILocation(line: 268, column: 16, scope: !1746)
!1746 = distinct !DILexicalBlock(scope: !1741, file: !3, line: 267, column: 44)
!1747 = !DILocation(line: 269, column: 1, scope: !1746)
!1748 = !DILocation(line: 271, column: 16, scope: !1749)
!1749 = distinct !DILexicalBlock(scope: !1741, file: !3, line: 270, column: 6)
!1750 = !DILocation(line: 272, column: 6, scope: !1751)
!1751 = distinct !DILexicalBlock(scope: !1749, file: !3, line: 272, column: 6)
!1752 = !DILocation(line: 272, column: 6, scope: !1749)
!1753 = !DILocation(line: 273, column: 6, scope: !1754)
!1754 = distinct !DILexicalBlock(scope: !1755, file: !3, line: 273, column: 6)
!1755 = distinct !DILexicalBlock(scope: !1751, file: !3, line: 272, column: 14)
!1756 = !DILocation(line: 273, column: 19, scope: !1754)
!1757 = !DILocation(line: 273, column: 6, scope: !1755)
!1758 = !DILocation(line: 273, column: 54, scope: !1754)
!1759 = !DILocation(line: 273, column: 39, scope: !1754)
!1760 = !DILocation(line: 274, column: 1, scope: !1755)
!1761 = !DILocation(line: 276, column: 6, scope: !1762)
!1762 = distinct !DILexicalBlock(scope: !1763, file: !3, line: 276, column: 6)
!1763 = distinct !DILexicalBlock(scope: !1751, file: !3, line: 275, column: 6)
!1764 = !DILocation(line: 276, column: 19, scope: !1762)
!1765 = !DILocation(line: 276, column: 6, scope: !1763)
!1766 = !DILocation(line: 276, column: 56, scope: !1762)
!1767 = !DILocation(line: 276, column: 41, scope: !1762)
!1768 = !DILocation(line: 279, column: 1, scope: !1742)
!1769 = !DILocation(line: 280, column: 13, scope: !1714)
!1770 = !DILocation(line: 280, column: 18, scope: !1714)
!1771 = !DILocation(line: 280, column: 11, scope: !1714)
!1772 = !DILocation(line: 281, column: 23, scope: !1773)
!1773 = distinct !DILexicalBlock(scope: !1714, file: !3, line: 281, column: 6)
!1774 = !DILocation(line: 281, column: 14, scope: !1773)
!1775 = !DILocation(line: 281, column: 11, scope: !1773)
!1776 = !DILocation(line: 281, column: 6, scope: !1714)
!1777 = !DILocation(line: 282, column: 18, scope: !1778)
!1778 = distinct !DILexicalBlock(scope: !1779, file: !3, line: 282, column: 9)
!1779 = distinct !DILexicalBlock(scope: !1773, file: !3, line: 281, column: 30)
!1780 = !DILocation(line: 282, column: 16, scope: !1778)
!1781 = !DILocation(line: 283, column: 1, scope: !1778)
!1782 = !DILocation(line: 283, column: 11, scope: !1778)
!1783 = !DILocation(line: 283, column: 16, scope: !1778)
!1784 = !DILocation(line: 284, column: 1, scope: !1778)
!1785 = !DILocation(line: 284, column: 18, scope: !1778)
!1786 = !DILocation(line: 284, column: 25, scope: !1778)
!1787 = !DILocation(line: 284, column: 23, scope: !1778)
!1788 = !DILocation(line: 284, column: 42, scope: !1778)
!1789 = !DILocation(line: 282, column: 9, scope: !1779)
!1790 = !DILocation(line: 286, column: 1, scope: !1791)
!1791 = distinct !DILexicalBlock(scope: !1778, file: !3, line: 285, column: 3)
!1792 = !DILocation(line: 287, column: 21, scope: !1791)
!1793 = !DILocation(line: 287, column: 8, scope: !1791)
!1794 = !DILocation(line: 287, column: 42, scope: !1791)
!1795 = !DILocation(line: 287, column: 57, scope: !1791)
!1796 = !DILocation(line: 287, column: 38, scope: !1791)
!1797 = !DILocation(line: 287, column: 1, scope: !1791)
!1798 = !DILocation(line: 289, column: 6, scope: !1799)
!1799 = distinct !DILexicalBlock(scope: !1779, file: !3, line: 289, column: 6)
!1800 = !DILocation(line: 289, column: 11, scope: !1799)
!1801 = !DILocation(line: 289, column: 6, scope: !1779)
!1802 = !DILocation(line: 291, column: 3, scope: !1803)
!1803 = distinct !DILexicalBlock(scope: !1799, file: !3, line: 289, column: 17)
!1804 = !DILocation(line: 291, column: 25, scope: !1803)
!1805 = !DILocation(line: 292, column: 1, scope: !1803)
!1806 = !DILocation(line: 292, column: 6, scope: !1803)
!1807 = !DILocation(line: 292, column: 11, scope: !1803)
!1808 = !DILocation(line: 293, column: 1, scope: !1803)
!1809 = !DILocation(line: 293, column: 6, scope: !1803)
!1810 = !DILocation(line: 293, column: 13, scope: !1803)
!1811 = !DILocation(line: 293, column: 11, scope: !1803)
!1812 = !DILocation(line: 293, column: 28, scope: !1803)
!1813 = !DILocation(line: 290, column: 8, scope: !1803)
!1814 = !DILocation(line: 294, column: 22, scope: !1803)
!1815 = !DILocation(line: 294, column: 30, scope: !1803)
!1816 = !DILocation(line: 294, column: 28, scope: !1803)
!1817 = !DILocation(line: 294, column: 1, scope: !1803)
!1818 = !DILocation(line: 295, column: 6, scope: !1803)
!1819 = !DILocation(line: 296, column: 13, scope: !1803)
!1820 = !DILocation(line: 296, column: 18, scope: !1803)
!1821 = !DILocation(line: 296, column: 11, scope: !1803)
!1822 = !DILocation(line: 297, column: 6, scope: !1823)
!1823 = distinct !DILexicalBlock(scope: !1803, file: !3, line: 297, column: 6)
!1824 = !DILocation(line: 297, column: 13, scope: !1823)
!1825 = !DILocation(line: 297, column: 16, scope: !1823)
!1826 = !DILocation(line: 297, column: 6, scope: !1803)
!1827 = !DILocation(line: 297, column: 28, scope: !1823)
!1828 = !DILocation(line: 298, column: 1, scope: !1803)
!1829 = !DILocation(line: 299, column: 1, scope: !1779)
!1830 = !DILocation(line: 300, column: 6, scope: !1831)
!1831 = distinct !DILexicalBlock(scope: !1714, file: !3, line: 300, column: 6)
!1832 = !DILocation(line: 300, column: 6, scope: !1714)
!1833 = !DILocation(line: 300, column: 40, scope: !1831)
!1834 = !DILocation(line: 300, column: 18, scope: !1831)
!1835 = !DILocation(line: 301, column: 10, scope: !1714)
!1836 = !DILocation(line: 301, column: 17, scope: !1714)
!1837 = !DILocation(line: 301, column: 15, scope: !1714)
!1838 = !DILocation(line: 301, column: 33, scope: !1714)
!1839 = !DILocation(line: 301, column: 6, scope: !1714)
!1840 = !DILocation(line: 302, column: 17, scope: !1714)
!1841 = !DILocation(line: 302, column: 27, scope: !1714)
!1842 = !DILocation(line: 302, column: 36, scope: !1714)
!1843 = !DILocation(line: 302, column: 45, scope: !1714)
!1844 = !DILocation(line: 302, column: 43, scope: !1714)
!1845 = !DILocation(line: 302, column: 9, scope: !1714)
!1846 = !DILocation(line: 302, column: 6, scope: !1714)
!1847 = !DILocation(line: 303, column: 6, scope: !1848)
!1848 = distinct !DILexicalBlock(scope: !1714, file: !3, line: 303, column: 6)
!1849 = !DILocation(line: 303, column: 11, scope: !1848)
!1850 = !DILocation(line: 303, column: 6, scope: !1714)
!1851 = !DILocation(line: 303, column: 23, scope: !1848)
!1852 = !DILocation(line: 303, column: 18, scope: !1848)
!1853 = !DILocation(line: 304, column: 21, scope: !1714)
!1854 = !DILocation(line: 304, column: 28, scope: !1714)
!1855 = !DILocation(line: 304, column: 34, scope: !1714)
!1856 = !DILocation(line: 304, column: 8, scope: !1714)
!1857 = !DILocation(line: 304, column: 1, scope: !1714)
!1858 = !DILocation(line: 306, column: 1, scope: !1714)
!1859 = distinct !DISubprogram(name: "int64_to_float64", scope: !3, file: !3, line: 1168, type: !1860, isLocal: false, isDefinition: true, scopeLine: 1169, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1860 = !DISubroutineType(types: !1861)
!1861 = !{!1130, !1628}
!1862 = !DILocalVariable(name: "a", arg: 1, scope: !1859, file: !3, line: 1168, type: !1628)
!1863 = !DILocation(line: 1168, column: 33, scope: !1859)
!1864 = !DILocalVariable(name: "zSign", scope: !1859, file: !3, line: 1170, type: !1241)
!1865 = !DILocation(line: 1170, column: 10, scope: !1859)
!1866 = !DILocation(line: 1172, column: 10, scope: !1867)
!1867 = distinct !DILexicalBlock(scope: !1859, file: !3, line: 1172, column: 10)
!1868 = !DILocation(line: 1172, column: 12, scope: !1867)
!1869 = !DILocation(line: 1172, column: 10, scope: !1859)
!1870 = !DILocation(line: 1172, column: 19, scope: !1867)
!1871 = !DILocation(line: 1173, column: 10, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1859, file: !3, line: 1173, column: 10)
!1873 = !DILocation(line: 1173, column: 12, scope: !1872)
!1874 = !DILocation(line: 1173, column: 10, scope: !1859)
!1875 = !DILocation(line: 1174, column: 16, scope: !1876)
!1876 = distinct !DILexicalBlock(scope: !1872, file: !3, line: 1173, column: 55)
!1877 = !DILocation(line: 1174, column: 9, scope: !1876)
!1878 = !DILocation(line: 1176, column: 15, scope: !1859)
!1879 = !DILocation(line: 1176, column: 17, scope: !1859)
!1880 = !DILocation(line: 1176, column: 11, scope: !1859)
!1881 = !DILocation(line: 1177, column: 42, scope: !1859)
!1882 = !DILocation(line: 1177, column: 56, scope: !1859)
!1883 = !DILocation(line: 1177, column: 66, scope: !1859)
!1884 = !DILocation(line: 1177, column: 64, scope: !1859)
!1885 = !DILocation(line: 1177, column: 70, scope: !1859)
!1886 = !DILocation(line: 1177, column: 12, scope: !1859)
!1887 = !DILocation(line: 1177, column: 5, scope: !1859)
!1888 = !DILocation(line: 1179, column: 1, scope: !1859)
!1889 = distinct !DISubprogram(name: "normalizeRoundAndPackFloat64", scope: !3, file: !3, line: 480, type: !1291, isLocal: true, isDefinition: true, scopeLine: 481, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1890 = !DILocalVariable(name: "zSign", arg: 1, scope: !1889, file: !3, line: 480, type: !1241)
!1891 = !DILocation(line: 480, column: 44, scope: !1889)
!1892 = !DILocalVariable(name: "zExp", arg: 2, scope: !1889, file: !3, line: 480, type: !60)
!1893 = !DILocation(line: 480, column: 57, scope: !1889)
!1894 = !DILocalVariable(name: "zSig", arg: 3, scope: !1889, file: !3, line: 480, type: !24)
!1895 = !DILocation(line: 480, column: 70, scope: !1889)
!1896 = !DILocalVariable(name: "shiftCount", scope: !1889, file: !3, line: 482, type: !38)
!1897 = !DILocation(line: 482, column: 6, scope: !1889)
!1898 = !DILocation(line: 484, column: 35, scope: !1889)
!1899 = !DILocation(line: 484, column: 14, scope: !1889)
!1900 = !DILocation(line: 484, column: 42, scope: !1889)
!1901 = !DILocation(line: 484, column: 12, scope: !1889)
!1902 = !DILocation(line: 485, column: 29, scope: !1889)
!1903 = !DILocation(line: 485, column: 36, scope: !1889)
!1904 = !DILocation(line: 485, column: 43, scope: !1889)
!1905 = !DILocation(line: 485, column: 41, scope: !1889)
!1906 = !DILocation(line: 485, column: 55, scope: !1889)
!1907 = !DILocation(line: 485, column: 61, scope: !1889)
!1908 = !DILocation(line: 485, column: 59, scope: !1889)
!1909 = !DILocation(line: 485, column: 8, scope: !1889)
!1910 = !DILocation(line: 485, column: 1, scope: !1889)
!1911 = distinct !DISubprogram(name: "int64_to_floatx80", scope: !3, file: !3, line: 1190, type: !1912, isLocal: false, isDefinition: true, scopeLine: 1191, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1912 = !DISubroutineType(types: !1913)
!1913 = !{!1151, !1628}
!1914 = !DILocalVariable(name: "a", arg: 1, scope: !1911, file: !3, line: 1190, type: !1628)
!1915 = !DILocation(line: 1190, column: 35, scope: !1911)
!1916 = !DILocalVariable(name: "zSign", scope: !1911, file: !3, line: 1192, type: !1241)
!1917 = !DILocation(line: 1192, column: 10, scope: !1911)
!1918 = !DILocalVariable(name: "absA", scope: !1911, file: !3, line: 1193, type: !1634)
!1919 = !DILocation(line: 1193, column: 12, scope: !1911)
!1920 = !DILocalVariable(name: "shiftCount", scope: !1911, file: !3, line: 1194, type: !38)
!1921 = !DILocation(line: 1194, column: 10, scope: !1911)
!1922 = !DILocation(line: 1196, column: 10, scope: !1923)
!1923 = distinct !DILexicalBlock(scope: !1911, file: !3, line: 1196, column: 10)
!1924 = !DILocation(line: 1196, column: 12, scope: !1923)
!1925 = !DILocation(line: 1196, column: 10, scope: !1911)
!1926 = !DILocation(line: 1196, column: 26, scope: !1923)
!1927 = !DILocation(line: 1196, column: 19, scope: !1923)
!1928 = !DILocation(line: 1197, column: 15, scope: !1911)
!1929 = !DILocation(line: 1197, column: 17, scope: !1911)
!1930 = !DILocation(line: 1197, column: 11, scope: !1911)
!1931 = !DILocation(line: 1198, column: 12, scope: !1911)
!1932 = !DILocation(line: 1198, column: 22, scope: !1911)
!1933 = !DILocation(line: 1198, column: 20, scope: !1911)
!1934 = !DILocation(line: 1198, column: 26, scope: !1911)
!1935 = !DILocation(line: 1198, column: 10, scope: !1911)
!1936 = !DILocation(line: 1199, column: 39, scope: !1911)
!1937 = !DILocation(line: 1199, column: 18, scope: !1911)
!1938 = !DILocation(line: 1199, column: 16, scope: !1911)
!1939 = !DILocation(line: 1200, column: 26, scope: !1911)
!1940 = !DILocation(line: 1200, column: 42, scope: !1911)
!1941 = !DILocation(line: 1200, column: 40, scope: !1911)
!1942 = !DILocation(line: 1200, column: 54, scope: !1911)
!1943 = !DILocation(line: 1200, column: 60, scope: !1911)
!1944 = !DILocation(line: 1200, column: 58, scope: !1911)
!1945 = !DILocation(line: 1200, column: 12, scope: !1911)
!1946 = !DILocation(line: 1200, column: 5, scope: !1911)
!1947 = !DILocation(line: 1202, column: 1, scope: !1911)
!1948 = distinct !DISubprogram(name: "int64_to_float128", scope: !3, file: !3, line: 1214, type: !1949, isLocal: false, isDefinition: true, scopeLine: 1215, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!1949 = !DISubroutineType(types: !1950)
!1950 = !{!1190, !1628}
!1951 = !DILocalVariable(name: "a", arg: 1, scope: !1948, file: !3, line: 1214, type: !1628)
!1952 = !DILocation(line: 1214, column: 35, scope: !1948)
!1953 = !DILocalVariable(name: "zSign", scope: !1948, file: !3, line: 1216, type: !1241)
!1954 = !DILocation(line: 1216, column: 10, scope: !1948)
!1955 = !DILocalVariable(name: "absA", scope: !1948, file: !3, line: 1217, type: !1634)
!1956 = !DILocation(line: 1217, column: 12, scope: !1948)
!1957 = !DILocalVariable(name: "shiftCount", scope: !1948, file: !3, line: 1218, type: !38)
!1958 = !DILocation(line: 1218, column: 10, scope: !1948)
!1959 = !DILocalVariable(name: "zExp", scope: !1948, file: !3, line: 1219, type: !1319)
!1960 = !DILocation(line: 1219, column: 11, scope: !1948)
!1961 = !DILocalVariable(name: "zSig0", scope: !1948, file: !3, line: 1220, type: !24)
!1962 = !DILocation(line: 1220, column: 12, scope: !1948)
!1963 = !DILocalVariable(name: "zSig1", scope: !1948, file: !3, line: 1220, type: !24)
!1964 = !DILocation(line: 1220, column: 19, scope: !1948)
!1965 = !DILocation(line: 1222, column: 10, scope: !1966)
!1966 = distinct !DILexicalBlock(scope: !1948, file: !3, line: 1222, column: 10)
!1967 = !DILocation(line: 1222, column: 12, scope: !1966)
!1968 = !DILocation(line: 1222, column: 10, scope: !1948)
!1969 = !DILocation(line: 1222, column: 26, scope: !1966)
!1970 = !DILocation(line: 1222, column: 19, scope: !1966)
!1971 = !DILocation(line: 1223, column: 15, scope: !1948)
!1972 = !DILocation(line: 1223, column: 17, scope: !1948)
!1973 = !DILocation(line: 1223, column: 11, scope: !1948)
!1974 = !DILocation(line: 1224, column: 12, scope: !1948)
!1975 = !DILocation(line: 1224, column: 22, scope: !1948)
!1976 = !DILocation(line: 1224, column: 20, scope: !1948)
!1977 = !DILocation(line: 1224, column: 26, scope: !1948)
!1978 = !DILocation(line: 1224, column: 10, scope: !1948)
!1979 = !DILocation(line: 1225, column: 39, scope: !1948)
!1980 = !DILocation(line: 1225, column: 18, scope: !1948)
!1981 = !DILocation(line: 1225, column: 46, scope: !1948)
!1982 = !DILocation(line: 1225, column: 16, scope: !1948)
!1983 = !DILocation(line: 1226, column: 21, scope: !1948)
!1984 = !DILocation(line: 1226, column: 19, scope: !1948)
!1985 = !DILocation(line: 1226, column: 10, scope: !1948)
!1986 = !DILocation(line: 1227, column: 16, scope: !1987)
!1987 = distinct !DILexicalBlock(scope: !1948, file: !3, line: 1227, column: 10)
!1988 = !DILocation(line: 1227, column: 13, scope: !1987)
!1989 = !DILocation(line: 1227, column: 10, scope: !1948)
!1990 = !DILocation(line: 1228, column: 15, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1987, file: !3, line: 1227, column: 29)
!1992 = !DILocation(line: 1229, column: 17, scope: !1991)
!1993 = !DILocation(line: 1229, column: 15, scope: !1991)
!1994 = !DILocation(line: 1230, column: 20, scope: !1991)
!1995 = !DILocation(line: 1231, column: 5, scope: !1991)
!1996 = !DILocation(line: 1233, column: 17, scope: !1997)
!1997 = distinct !DILexicalBlock(scope: !1987, file: !3, line: 1232, column: 10)
!1998 = !DILocation(line: 1233, column: 15, scope: !1997)
!1999 = !DILocation(line: 1234, column: 15, scope: !1997)
!2000 = !DILocation(line: 1236, column: 24, scope: !1948)
!2001 = !DILocation(line: 1236, column: 31, scope: !1948)
!2002 = !DILocation(line: 1236, column: 38, scope: !1948)
!2003 = !DILocation(line: 1236, column: 5, scope: !1948)
!2004 = !DILocation(line: 1237, column: 26, scope: !1948)
!2005 = !DILocation(line: 1237, column: 33, scope: !1948)
!2006 = !DILocation(line: 1237, column: 39, scope: !1948)
!2007 = !DILocation(line: 1237, column: 46, scope: !1948)
!2008 = !DILocation(line: 1237, column: 12, scope: !1948)
!2009 = !DILocation(line: 1237, column: 5, scope: !1948)
!2010 = !DILocation(line: 1239, column: 1, scope: !1948)
!2011 = distinct !DISubprogram(name: "float32_to_int32", scope: !3, file: !3, line: 1253, type: !2012, isLocal: false, isDefinition: true, scopeLine: 1254, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2012 = !DISubroutineType(types: !2013)
!2013 = !{!32, !1109}
!2014 = !DILocalVariable(name: "a", arg: 1, scope: !2011, file: !3, line: 1253, type: !1109)
!2015 = !DILocation(line: 1253, column: 33, scope: !2011)
!2016 = !DILocalVariable(name: "aSign", scope: !2011, file: !3, line: 1255, type: !1241)
!2017 = !DILocation(line: 1255, column: 6, scope: !2011)
!2018 = !DILocalVariable(name: "aExp", scope: !2011, file: !3, line: 1256, type: !60)
!2019 = !DILocation(line: 1256, column: 7, scope: !2011)
!2020 = !DILocalVariable(name: "shiftCount", scope: !2011, file: !3, line: 1256, type: !60)
!2021 = !DILocation(line: 1256, column: 13, scope: !2011)
!2022 = !DILocalVariable(name: "aSig", scope: !2011, file: !3, line: 1257, type: !27)
!2023 = !DILocation(line: 1257, column: 8, scope: !2011)
!2024 = !DILocalVariable(name: "aSig64", scope: !2011, file: !3, line: 1258, type: !24)
!2025 = !DILocation(line: 1258, column: 8, scope: !2011)
!2026 = !DILocation(line: 1260, column: 28, scope: !2011)
!2027 = !DILocation(line: 1260, column: 8, scope: !2011)
!2028 = !DILocation(line: 1260, column: 6, scope: !2011)
!2029 = !DILocation(line: 1261, column: 27, scope: !2011)
!2030 = !DILocation(line: 1261, column: 8, scope: !2011)
!2031 = !DILocation(line: 1261, column: 6, scope: !2011)
!2032 = !DILocation(line: 1262, column: 29, scope: !2011)
!2033 = !DILocation(line: 1262, column: 9, scope: !2011)
!2034 = !DILocation(line: 1262, column: 7, scope: !2011)
!2035 = !DILocation(line: 1263, column: 8, scope: !2036)
!2036 = distinct !DILexicalBlock(scope: !2011, file: !3, line: 1263, column: 6)
!2037 = !DILocation(line: 1263, column: 13, scope: !2036)
!2038 = !DILocation(line: 1263, column: 23, scope: !2036)
!2039 = !DILocation(line: 1263, column: 26, scope: !2036)
!2040 = !DILocation(line: 1263, column: 6, scope: !2011)
!2041 = !DILocation(line: 1263, column: 39, scope: !2036)
!2042 = !DILocation(line: 1263, column: 33, scope: !2036)
!2043 = !DILocation(line: 1264, column: 6, scope: !2044)
!2044 = distinct !DILexicalBlock(scope: !2011, file: !3, line: 1264, column: 6)
!2045 = !DILocation(line: 1264, column: 6, scope: !2011)
!2046 = !DILocation(line: 1264, column: 18, scope: !2044)
!2047 = !DILocation(line: 1264, column: 13, scope: !2044)
!2048 = !DILocation(line: 1265, column: 21, scope: !2011)
!2049 = !DILocation(line: 1265, column: 19, scope: !2011)
!2050 = !DILocation(line: 1265, column: 12, scope: !2011)
!2051 = !DILocation(line: 1266, column: 10, scope: !2011)
!2052 = !DILocation(line: 1266, column: 8, scope: !2011)
!2053 = !DILocation(line: 1267, column: 8, scope: !2011)
!2054 = !DILocation(line: 1268, column: 10, scope: !2055)
!2055 = distinct !DILexicalBlock(scope: !2011, file: !3, line: 1268, column: 6)
!2056 = !DILocation(line: 1268, column: 8, scope: !2055)
!2057 = !DILocation(line: 1268, column: 6, scope: !2011)
!2058 = !DILocation(line: 1268, column: 44, scope: !2055)
!2059 = !DILocation(line: 1268, column: 52, scope: !2055)
!2060 = !DILocation(line: 1268, column: 23, scope: !2055)
!2061 = !DILocation(line: 1269, column: 27, scope: !2011)
!2062 = !DILocation(line: 1269, column: 34, scope: !2011)
!2063 = !DILocation(line: 1269, column: 8, scope: !2011)
!2064 = !DILocation(line: 1269, column: 1, scope: !2011)
!2065 = distinct !DISubprogram(name: "roundAndPackInt32", scope: !3, file: !3, line: 74, type: !2066, isLocal: true, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2066 = !DISubroutineType(types: !2067)
!2067 = !{!1319, !1241, !24}
!2068 = !DILocalVariable(name: "zSign", arg: 1, scope: !2065, file: !3, line: 74, type: !1241)
!2069 = !DILocation(line: 74, column: 38, scope: !2065)
!2070 = !DILocalVariable(name: "absZ", arg: 2, scope: !2065, file: !3, line: 74, type: !24)
!2071 = !DILocation(line: 74, column: 52, scope: !2065)
!2072 = !DILocalVariable(name: "roundingMode", scope: !2065, file: !3, line: 76, type: !38)
!2073 = !DILocation(line: 76, column: 10, scope: !2065)
!2074 = !DILocalVariable(name: "roundNearestEven", scope: !2065, file: !3, line: 77, type: !1241)
!2075 = !DILocation(line: 77, column: 10, scope: !2065)
!2076 = !DILocalVariable(name: "roundIncrement", scope: !2065, file: !3, line: 78, type: !38)
!2077 = !DILocation(line: 78, column: 10, scope: !2065)
!2078 = !DILocalVariable(name: "roundBits", scope: !2065, file: !3, line: 78, type: !38)
!2079 = !DILocation(line: 78, column: 26, scope: !2065)
!2080 = !DILocalVariable(name: "z", scope: !2065, file: !3, line: 79, type: !1319)
!2081 = !DILocation(line: 79, column: 11, scope: !2065)
!2082 = !DILocation(line: 81, column: 20, scope: !2065)
!2083 = !DILocation(line: 81, column: 18, scope: !2065)
!2084 = !DILocation(line: 82, column: 26, scope: !2065)
!2085 = !DILocation(line: 82, column: 39, scope: !2065)
!2086 = !DILocation(line: 82, column: 22, scope: !2065)
!2087 = !DILocation(line: 83, column: 20, scope: !2065)
!2088 = !DILocation(line: 84, column: 12, scope: !2089)
!2089 = distinct !DILexicalBlock(scope: !2065, file: !3, line: 84, column: 10)
!2090 = !DILocation(line: 84, column: 10, scope: !2065)
!2091 = !DILocation(line: 85, column: 14, scope: !2092)
!2092 = distinct !DILexicalBlock(scope: !2093, file: !3, line: 85, column: 14)
!2093 = distinct !DILexicalBlock(scope: !2089, file: !3, line: 84, column: 31)
!2094 = !DILocation(line: 85, column: 27, scope: !2092)
!2095 = !DILocation(line: 85, column: 14, scope: !2093)
!2096 = !DILocation(line: 86, column: 28, scope: !2097)
!2097 = distinct !DILexicalBlock(scope: !2092, file: !3, line: 85, column: 52)
!2098 = !DILocation(line: 87, column: 9, scope: !2097)
!2099 = !DILocation(line: 89, column: 28, scope: !2100)
!2100 = distinct !DILexicalBlock(scope: !2092, file: !3, line: 88, column: 14)
!2101 = !DILocation(line: 90, column: 18, scope: !2102)
!2102 = distinct !DILexicalBlock(scope: !2100, file: !3, line: 90, column: 18)
!2103 = !DILocation(line: 90, column: 18, scope: !2100)
!2104 = !DILocation(line: 91, column: 22, scope: !2105)
!2105 = distinct !DILexicalBlock(scope: !2106, file: !3, line: 91, column: 22)
!2106 = distinct !DILexicalBlock(scope: !2102, file: !3, line: 90, column: 26)
!2107 = !DILocation(line: 91, column: 35, scope: !2105)
!2108 = !DILocation(line: 91, column: 22, scope: !2106)
!2109 = !DILocation(line: 91, column: 70, scope: !2105)
!2110 = !DILocation(line: 91, column: 55, scope: !2105)
!2111 = !DILocation(line: 92, column: 13, scope: !2106)
!2112 = !DILocation(line: 94, column: 22, scope: !2113)
!2113 = distinct !DILexicalBlock(scope: !2114, file: !3, line: 94, column: 22)
!2114 = distinct !DILexicalBlock(scope: !2102, file: !3, line: 93, column: 18)
!2115 = !DILocation(line: 94, column: 35, scope: !2113)
!2116 = !DILocation(line: 94, column: 22, scope: !2114)
!2117 = !DILocation(line: 94, column: 72, scope: !2113)
!2118 = !DILocation(line: 94, column: 57, scope: !2113)
!2119 = !DILocation(line: 97, column: 5, scope: !2093)
!2120 = !DILocation(line: 98, column: 17, scope: !2065)
!2121 = !DILocation(line: 98, column: 22, scope: !2065)
!2122 = !DILocation(line: 98, column: 15, scope: !2065)
!2123 = !DILocation(line: 99, column: 14, scope: !2065)
!2124 = !DILocation(line: 99, column: 21, scope: !2065)
!2125 = !DILocation(line: 99, column: 19, scope: !2065)
!2126 = !DILocation(line: 99, column: 37, scope: !2065)
!2127 = !DILocation(line: 99, column: 10, scope: !2065)
!2128 = !DILocation(line: 100, column: 21, scope: !2065)
!2129 = !DILocation(line: 100, column: 31, scope: !2065)
!2130 = !DILocation(line: 100, column: 40, scope: !2065)
!2131 = !DILocation(line: 100, column: 49, scope: !2065)
!2132 = !DILocation(line: 100, column: 47, scope: !2065)
!2133 = !DILocation(line: 100, column: 13, scope: !2065)
!2134 = !DILocation(line: 100, column: 10, scope: !2065)
!2135 = !DILocation(line: 101, column: 9, scope: !2065)
!2136 = !DILocation(line: 101, column: 7, scope: !2065)
!2137 = !DILocation(line: 102, column: 10, scope: !2138)
!2138 = distinct !DILexicalBlock(scope: !2065, file: !3, line: 102, column: 10)
!2139 = !DILocation(line: 102, column: 10, scope: !2065)
!2140 = !DILocation(line: 102, column: 24, scope: !2138)
!2141 = !DILocation(line: 102, column: 22, scope: !2138)
!2142 = !DILocation(line: 102, column: 20, scope: !2138)
!2143 = !DILocation(line: 102, column: 18, scope: !2138)
!2144 = !DILocation(line: 103, column: 12, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !2065, file: !3, line: 103, column: 10)
!2146 = !DILocation(line: 103, column: 16, scope: !2145)
!2147 = !DILocation(line: 103, column: 23, scope: !2145)
!2148 = !DILocation(line: 103, column: 28, scope: !2145)
!2149 = !DILocation(line: 103, column: 30, scope: !2145)
!2150 = !DILocation(line: 103, column: 37, scope: !2145)
!2151 = !DILocation(line: 103, column: 39, scope: !2145)
!2152 = !DILocation(line: 103, column: 47, scope: !2145)
!2153 = !DILocation(line: 103, column: 45, scope: !2145)
!2154 = !DILocation(line: 103, column: 10, scope: !2065)
!2155 = !DILocation(line: 104, column: 9, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !2145, file: !3, line: 103, column: 59)
!2157 = !DILocation(line: 105, column: 16, scope: !2156)
!2158 = !DILocation(line: 105, column: 9, scope: !2156)
!2159 = !DILocation(line: 107, column: 10, scope: !2160)
!2160 = distinct !DILexicalBlock(scope: !2065, file: !3, line: 107, column: 10)
!2161 = !DILocation(line: 107, column: 10, scope: !2065)
!2162 = !DILocation(line: 107, column: 44, scope: !2160)
!2163 = !DILocation(line: 107, column: 22, scope: !2160)
!2164 = !DILocation(line: 108, column: 12, scope: !2065)
!2165 = !DILocation(line: 108, column: 5, scope: !2065)
!2166 = !DILocation(line: 110, column: 1, scope: !2065)
!2167 = distinct !DISubprogram(name: "float32_to_int32_round_to_zero", scope: !3, file: !3, line: 1282, type: !2012, isLocal: false, isDefinition: true, scopeLine: 1283, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2168 = !DILocalVariable(name: "a", arg: 1, scope: !2167, file: !3, line: 1282, type: !1109)
!2169 = !DILocation(line: 1282, column: 47, scope: !2167)
!2170 = !DILocalVariable(name: "aSign", scope: !2167, file: !3, line: 1284, type: !1241)
!2171 = !DILocation(line: 1284, column: 6, scope: !2167)
!2172 = !DILocalVariable(name: "aExp", scope: !2167, file: !3, line: 1285, type: !60)
!2173 = !DILocation(line: 1285, column: 7, scope: !2167)
!2174 = !DILocalVariable(name: "shiftCount", scope: !2167, file: !3, line: 1285, type: !60)
!2175 = !DILocation(line: 1285, column: 13, scope: !2167)
!2176 = !DILocalVariable(name: "aSig", scope: !2167, file: !3, line: 1286, type: !27)
!2177 = !DILocation(line: 1286, column: 8, scope: !2167)
!2178 = !DILocalVariable(name: "z", scope: !2167, file: !3, line: 1287, type: !1319)
!2179 = !DILocation(line: 1287, column: 7, scope: !2167)
!2180 = !DILocation(line: 1289, column: 28, scope: !2167)
!2181 = !DILocation(line: 1289, column: 8, scope: !2167)
!2182 = !DILocation(line: 1289, column: 6, scope: !2167)
!2183 = !DILocation(line: 1290, column: 27, scope: !2167)
!2184 = !DILocation(line: 1290, column: 8, scope: !2167)
!2185 = !DILocation(line: 1290, column: 6, scope: !2167)
!2186 = !DILocation(line: 1291, column: 29, scope: !2167)
!2187 = !DILocation(line: 1291, column: 9, scope: !2167)
!2188 = !DILocation(line: 1291, column: 7, scope: !2167)
!2189 = !DILocation(line: 1292, column: 14, scope: !2167)
!2190 = !DILocation(line: 1292, column: 19, scope: !2167)
!2191 = !DILocation(line: 1292, column: 12, scope: !2167)
!2192 = !DILocation(line: 1293, column: 11, scope: !2193)
!2193 = distinct !DILexicalBlock(scope: !2167, file: !3, line: 1293, column: 6)
!2194 = !DILocation(line: 1293, column: 8, scope: !2193)
!2195 = !DILocation(line: 1293, column: 6, scope: !2167)
!2196 = !DILocation(line: 1294, column: 6, scope: !2197)
!2197 = distinct !DILexicalBlock(scope: !2198, file: !3, line: 1294, column: 6)
!2198 = distinct !DILexicalBlock(scope: !2193, file: !3, line: 1293, column: 24)
!2199 = !DILocation(line: 1294, column: 8, scope: !2197)
!2200 = !DILocation(line: 1294, column: 6, scope: !2198)
!2201 = !DILocation(line: 1295, column: 1, scope: !2202)
!2202 = distinct !DILexicalBlock(scope: !2197, file: !3, line: 1294, column: 24)
!2203 = !DILocation(line: 1296, column: 8, scope: !2204)
!2204 = distinct !DILexicalBlock(scope: !2202, file: !3, line: 1296, column: 6)
!2205 = !DILocation(line: 1296, column: 14, scope: !2204)
!2206 = !DILocation(line: 1296, column: 21, scope: !2204)
!2207 = !DILocation(line: 1296, column: 26, scope: !2204)
!2208 = !DILocation(line: 1296, column: 36, scope: !2204)
!2209 = !DILocation(line: 1296, column: 39, scope: !2204)
!2210 = !DILocation(line: 1296, column: 6, scope: !2202)
!2211 = !DILocation(line: 1296, column: 48, scope: !2204)
!2212 = !DILocation(line: 1297, column: 1, scope: !2202)
!2213 = !DILocation(line: 1298, column: 1, scope: !2198)
!2214 = !DILocation(line: 1300, column: 11, scope: !2215)
!2215 = distinct !DILexicalBlock(scope: !2193, file: !3, line: 1300, column: 11)
!2216 = !DILocation(line: 1300, column: 16, scope: !2215)
!2217 = !DILocation(line: 1300, column: 11, scope: !2193)
!2218 = !DILocation(line: 1301, column: 6, scope: !2219)
!2219 = distinct !DILexicalBlock(scope: !2220, file: !3, line: 1301, column: 6)
!2220 = distinct !DILexicalBlock(scope: !2215, file: !3, line: 1300, column: 26)
!2221 = !DILocation(line: 1301, column: 13, scope: !2219)
!2222 = !DILocation(line: 1301, column: 11, scope: !2219)
!2223 = !DILocation(line: 1301, column: 6, scope: !2220)
!2224 = !DILocation(line: 1301, column: 42, scope: !2219)
!2225 = !DILocation(line: 1301, column: 20, scope: !2219)
!2226 = !DILocation(line: 1302, column: 1, scope: !2220)
!2227 = !DILocation(line: 1304, column: 10, scope: !2167)
!2228 = !DILocation(line: 1304, column: 15, scope: !2167)
!2229 = !DILocation(line: 1304, column: 29, scope: !2167)
!2230 = !DILocation(line: 1304, column: 6, scope: !2167)
!2231 = !DILocation(line: 1305, column: 5, scope: !2167)
!2232 = !DILocation(line: 1305, column: 15, scope: !2167)
!2233 = !DILocation(line: 1305, column: 13, scope: !2167)
!2234 = !DILocation(line: 1305, column: 9, scope: !2167)
!2235 = !DILocation(line: 1305, column: 3, scope: !2167)
!2236 = !DILocation(line: 1306, column: 17, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2167, file: !3, line: 1306, column: 6)
!2238 = !DILocation(line: 1306, column: 25, scope: !2237)
!2239 = !DILocation(line: 1306, column: 36, scope: !2237)
!2240 = !DILocation(line: 1306, column: 21, scope: !2237)
!2241 = !DILocation(line: 1306, column: 6, scope: !2237)
!2242 = !DILocation(line: 1306, column: 6, scope: !2167)
!2243 = !DILocation(line: 1307, column: 23, scope: !2244)
!2244 = distinct !DILexicalBlock(scope: !2237, file: !3, line: 1306, column: 47)
!2245 = !DILocation(line: 1308, column: 1, scope: !2244)
!2246 = !DILocation(line: 1309, column: 6, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2167, file: !3, line: 1309, column: 6)
!2248 = !DILocation(line: 1309, column: 6, scope: !2167)
!2249 = !DILocation(line: 1309, column: 20, scope: !2247)
!2250 = !DILocation(line: 1309, column: 18, scope: !2247)
!2251 = !DILocation(line: 1309, column: 16, scope: !2247)
!2252 = !DILocation(line: 1309, column: 14, scope: !2247)
!2253 = !DILocation(line: 1310, column: 8, scope: !2167)
!2254 = !DILocation(line: 1310, column: 1, scope: !2167)
!2255 = !DILocation(line: 1312, column: 1, scope: !2167)
!2256 = distinct !DISubprogram(name: "float32_to_int64", scope: !3, file: !3, line: 1324, type: !2257, isLocal: false, isDefinition: true, scopeLine: 1325, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2257 = !DISubroutineType(types: !2258)
!2258 = !{!34, !1109}
!2259 = !DILocalVariable(name: "a", arg: 1, scope: !2256, file: !3, line: 1324, type: !1109)
!2260 = !DILocation(line: 1324, column: 33, scope: !2256)
!2261 = !DILocalVariable(name: "aSign", scope: !2256, file: !3, line: 1326, type: !1241)
!2262 = !DILocation(line: 1326, column: 6, scope: !2256)
!2263 = !DILocalVariable(name: "aExp", scope: !2256, file: !3, line: 1327, type: !60)
!2264 = !DILocation(line: 1327, column: 7, scope: !2256)
!2265 = !DILocalVariable(name: "shiftCount", scope: !2256, file: !3, line: 1327, type: !60)
!2266 = !DILocation(line: 1327, column: 13, scope: !2256)
!2267 = !DILocalVariable(name: "aSig", scope: !2256, file: !3, line: 1328, type: !27)
!2268 = !DILocation(line: 1328, column: 8, scope: !2256)
!2269 = !DILocalVariable(name: "aSig64", scope: !2256, file: !3, line: 1329, type: !24)
!2270 = !DILocation(line: 1329, column: 8, scope: !2256)
!2271 = !DILocalVariable(name: "aSigExtra", scope: !2256, file: !3, line: 1329, type: !24)
!2272 = !DILocation(line: 1329, column: 16, scope: !2256)
!2273 = !DILocation(line: 1331, column: 28, scope: !2256)
!2274 = !DILocation(line: 1331, column: 8, scope: !2256)
!2275 = !DILocation(line: 1331, column: 6, scope: !2256)
!2276 = !DILocation(line: 1332, column: 27, scope: !2256)
!2277 = !DILocation(line: 1332, column: 8, scope: !2256)
!2278 = !DILocation(line: 1332, column: 6, scope: !2256)
!2279 = !DILocation(line: 1333, column: 29, scope: !2256)
!2280 = !DILocation(line: 1333, column: 9, scope: !2256)
!2281 = !DILocation(line: 1333, column: 7, scope: !2256)
!2282 = !DILocation(line: 1334, column: 21, scope: !2256)
!2283 = !DILocation(line: 1334, column: 19, scope: !2256)
!2284 = !DILocation(line: 1334, column: 12, scope: !2256)
!2285 = !DILocation(line: 1335, column: 6, scope: !2286)
!2286 = distinct !DILexicalBlock(scope: !2256, file: !3, line: 1335, column: 6)
!2287 = !DILocation(line: 1335, column: 17, scope: !2286)
!2288 = !DILocation(line: 1335, column: 6, scope: !2256)
!2289 = !DILocation(line: 1336, column: 1, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2286, file: !3, line: 1335, column: 23)
!2291 = !DILocation(line: 1337, column: 8, scope: !2292)
!2292 = distinct !DILexicalBlock(scope: !2290, file: !3, line: 1337, column: 6)
!2293 = !DILocation(line: 1337, column: 14, scope: !2292)
!2294 = !DILocation(line: 1337, column: 21, scope: !2292)
!2295 = !DILocation(line: 1337, column: 26, scope: !2292)
!2296 = !DILocation(line: 1337, column: 36, scope: !2292)
!2297 = !DILocation(line: 1337, column: 39, scope: !2292)
!2298 = !DILocation(line: 1337, column: 6, scope: !2290)
!2299 = !DILocation(line: 1338, column: 1, scope: !2300)
!2300 = distinct !DILexicalBlock(scope: !2292, file: !3, line: 1337, column: 48)
!2301 = !DILocation(line: 1340, column: 1, scope: !2290)
!2302 = !DILocation(line: 1342, column: 6, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2256, file: !3, line: 1342, column: 6)
!2304 = !DILocation(line: 1342, column: 6, scope: !2256)
!2305 = !DILocation(line: 1342, column: 18, scope: !2303)
!2306 = !DILocation(line: 1342, column: 13, scope: !2303)
!2307 = !DILocation(line: 1343, column: 10, scope: !2256)
!2308 = !DILocation(line: 1343, column: 8, scope: !2256)
!2309 = !DILocation(line: 1344, column: 8, scope: !2256)
!2310 = !DILocation(line: 1345, column: 27, scope: !2256)
!2311 = !DILocation(line: 1345, column: 38, scope: !2256)
!2312 = !DILocation(line: 1345, column: 1, scope: !2256)
!2313 = !DILocation(line: 1346, column: 27, scope: !2256)
!2314 = !DILocation(line: 1346, column: 34, scope: !2256)
!2315 = !DILocation(line: 1346, column: 42, scope: !2256)
!2316 = !DILocation(line: 1346, column: 8, scope: !2256)
!2317 = !DILocation(line: 1346, column: 1, scope: !2256)
!2318 = !DILocation(line: 1348, column: 1, scope: !2256)
!2319 = distinct !DISubprogram(name: "roundAndPackInt64", scope: !3, file: !3, line: 124, type: !2320, isLocal: true, isDefinition: true, scopeLine: 125, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2320 = !DISubroutineType(types: !2321)
!2321 = !{!1628, !1241, !24, !24}
!2322 = !DILocalVariable(name: "zSign", arg: 1, scope: !2319, file: !3, line: 124, type: !1241)
!2323 = !DILocation(line: 124, column: 38, scope: !2319)
!2324 = !DILocalVariable(name: "absZ0", arg: 2, scope: !2319, file: !3, line: 124, type: !24)
!2325 = !DILocation(line: 124, column: 52, scope: !2319)
!2326 = !DILocalVariable(name: "absZ1", arg: 3, scope: !2319, file: !3, line: 124, type: !24)
!2327 = !DILocation(line: 124, column: 66, scope: !2319)
!2328 = !DILocalVariable(name: "roundingMode", scope: !2319, file: !3, line: 126, type: !38)
!2329 = !DILocation(line: 126, column: 10, scope: !2319)
!2330 = !DILocalVariable(name: "roundNearestEven", scope: !2319, file: !3, line: 127, type: !1241)
!2331 = !DILocation(line: 127, column: 10, scope: !2319)
!2332 = !DILocalVariable(name: "increment", scope: !2319, file: !3, line: 127, type: !1241)
!2333 = !DILocation(line: 127, column: 28, scope: !2319)
!2334 = !DILocalVariable(name: "z", scope: !2319, file: !3, line: 128, type: !1628)
!2335 = !DILocation(line: 128, column: 11, scope: !2319)
!2336 = !DILocation(line: 130, column: 20, scope: !2319)
!2337 = !DILocation(line: 130, column: 18, scope: !2319)
!2338 = !DILocation(line: 131, column: 26, scope: !2319)
!2339 = !DILocation(line: 131, column: 39, scope: !2319)
!2340 = !DILocation(line: 131, column: 22, scope: !2319)
!2341 = !DILocation(line: 132, column: 29, scope: !2319)
!2342 = !DILocation(line: 132, column: 35, scope: !2319)
!2343 = !DILocation(line: 132, column: 15, scope: !2319)
!2344 = !DILocation(line: 133, column: 12, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 133, column: 10)
!2346 = !DILocation(line: 133, column: 10, scope: !2319)
!2347 = !DILocation(line: 134, column: 14, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2349, file: !3, line: 134, column: 14)
!2349 = distinct !DILexicalBlock(scope: !2345, file: !3, line: 133, column: 31)
!2350 = !DILocation(line: 134, column: 27, scope: !2348)
!2351 = !DILocation(line: 134, column: 14, scope: !2349)
!2352 = !DILocation(line: 135, column: 23, scope: !2353)
!2353 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 134, column: 52)
!2354 = !DILocation(line: 136, column: 9, scope: !2353)
!2355 = !DILocation(line: 138, column: 18, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2357, file: !3, line: 138, column: 18)
!2357 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 137, column: 14)
!2358 = !DILocation(line: 138, column: 18, scope: !2357)
!2359 = !DILocation(line: 139, column: 31, scope: !2360)
!2360 = distinct !DILexicalBlock(scope: !2356, file: !3, line: 138, column: 26)
!2361 = !DILocation(line: 139, column: 44, scope: !2360)
!2362 = !DILocation(line: 139, column: 66, scope: !2360)
!2363 = !DILocation(line: 139, column: 69, scope: !2360)
!2364 = !DILocation(line: 139, column: 27, scope: !2360)
!2365 = !DILocation(line: 140, column: 13, scope: !2360)
!2366 = !DILocation(line: 142, column: 31, scope: !2367)
!2367 = distinct !DILexicalBlock(scope: !2356, file: !3, line: 141, column: 18)
!2368 = !DILocation(line: 142, column: 44, scope: !2367)
!2369 = !DILocation(line: 142, column: 64, scope: !2367)
!2370 = !DILocation(line: 142, column: 67, scope: !2367)
!2371 = !DILocation(line: 142, column: 27, scope: !2367)
!2372 = !DILocation(line: 145, column: 5, scope: !2349)
!2373 = !DILocation(line: 146, column: 10, scope: !2374)
!2374 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 146, column: 10)
!2375 = !DILocation(line: 146, column: 10, scope: !2319)
!2376 = !DILocation(line: 147, column: 9, scope: !2377)
!2377 = distinct !DILexicalBlock(scope: !2374, file: !3, line: 146, column: 22)
!2378 = !DILocation(line: 148, column: 14, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2377, file: !3, line: 148, column: 14)
!2380 = !DILocation(line: 148, column: 20, scope: !2379)
!2381 = !DILocation(line: 148, column: 14, scope: !2377)
!2382 = !DILocation(line: 148, column: 27, scope: !2379)
!2383 = !DILocation(line: 149, column: 35, scope: !2377)
!2384 = !DILocation(line: 149, column: 40, scope: !2377)
!2385 = !DILocation(line: 149, column: 46, scope: !2377)
!2386 = !DILocation(line: 149, column: 55, scope: !2377)
!2387 = !DILocation(line: 149, column: 53, scope: !2377)
!2388 = !DILocation(line: 149, column: 18, scope: !2377)
!2389 = !DILocation(line: 149, column: 15, scope: !2377)
!2390 = !DILocation(line: 150, column: 5, scope: !2377)
!2391 = !DILocation(line: 151, column: 9, scope: !2319)
!2392 = !DILocation(line: 151, column: 7, scope: !2319)
!2393 = !DILocation(line: 152, column: 10, scope: !2394)
!2394 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 152, column: 10)
!2395 = !DILocation(line: 152, column: 10, scope: !2319)
!2396 = !DILocation(line: 152, column: 24, scope: !2394)
!2397 = !DILocation(line: 152, column: 22, scope: !2394)
!2398 = !DILocation(line: 152, column: 20, scope: !2394)
!2399 = !DILocation(line: 152, column: 18, scope: !2394)
!2400 = !DILocation(line: 153, column: 10, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 153, column: 10)
!2402 = !DILocation(line: 153, column: 12, scope: !2401)
!2403 = !DILocation(line: 153, column: 19, scope: !2401)
!2404 = !DILocation(line: 153, column: 21, scope: !2401)
!2405 = !DILocation(line: 153, column: 29, scope: !2401)
!2406 = !DILocation(line: 153, column: 27, scope: !2401)
!2407 = !DILocation(line: 153, column: 10, scope: !2319)
!2408 = !DILocation(line: 153, column: 39, scope: !2401)
!2409 = !DILocation(line: 155, column: 9, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !2401, file: !3, line: 153, column: 39)
!2411 = !DILocation(line: 157, column: 17, scope: !2410)
!2412 = !DILocation(line: 156, column: 9, scope: !2410)
!2413 = !DILocation(line: 160, column: 10, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 160, column: 10)
!2415 = !DILocation(line: 160, column: 10, scope: !2319)
!2416 = !DILocation(line: 160, column: 40, scope: !2414)
!2417 = !DILocation(line: 160, column: 18, scope: !2414)
!2418 = !DILocation(line: 161, column: 12, scope: !2319)
!2419 = !DILocation(line: 161, column: 5, scope: !2319)
!2420 = !DILocation(line: 163, column: 1, scope: !2319)
!2421 = distinct !DISubprogram(name: "float32_to_int64_round_to_zero", scope: !3, file: !3, line: 1360, type: !2257, isLocal: false, isDefinition: true, scopeLine: 1361, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2422 = !DILocalVariable(name: "a", arg: 1, scope: !2421, file: !3, line: 1360, type: !1109)
!2423 = !DILocation(line: 1360, column: 47, scope: !2421)
!2424 = !DILocalVariable(name: "aSign", scope: !2421, file: !3, line: 1362, type: !1241)
!2425 = !DILocation(line: 1362, column: 6, scope: !2421)
!2426 = !DILocalVariable(name: "aExp", scope: !2421, file: !3, line: 1363, type: !60)
!2427 = !DILocation(line: 1363, column: 7, scope: !2421)
!2428 = !DILocalVariable(name: "shiftCount", scope: !2421, file: !3, line: 1363, type: !60)
!2429 = !DILocation(line: 1363, column: 13, scope: !2421)
!2430 = !DILocalVariable(name: "aSig", scope: !2421, file: !3, line: 1364, type: !27)
!2431 = !DILocation(line: 1364, column: 8, scope: !2421)
!2432 = !DILocalVariable(name: "aSig64", scope: !2421, file: !3, line: 1365, type: !24)
!2433 = !DILocation(line: 1365, column: 8, scope: !2421)
!2434 = !DILocalVariable(name: "z", scope: !2421, file: !3, line: 1366, type: !1628)
!2435 = !DILocation(line: 1366, column: 7, scope: !2421)
!2436 = !DILocation(line: 1368, column: 28, scope: !2421)
!2437 = !DILocation(line: 1368, column: 8, scope: !2421)
!2438 = !DILocation(line: 1368, column: 6, scope: !2421)
!2439 = !DILocation(line: 1369, column: 27, scope: !2421)
!2440 = !DILocation(line: 1369, column: 8, scope: !2421)
!2441 = !DILocation(line: 1369, column: 6, scope: !2421)
!2442 = !DILocation(line: 1370, column: 29, scope: !2421)
!2443 = !DILocation(line: 1370, column: 9, scope: !2421)
!2444 = !DILocation(line: 1370, column: 7, scope: !2421)
!2445 = !DILocation(line: 1371, column: 14, scope: !2421)
!2446 = !DILocation(line: 1371, column: 19, scope: !2421)
!2447 = !DILocation(line: 1371, column: 12, scope: !2421)
!2448 = !DILocation(line: 1372, column: 11, scope: !2449)
!2449 = distinct !DILexicalBlock(scope: !2421, file: !3, line: 1372, column: 6)
!2450 = !DILocation(line: 1372, column: 8, scope: !2449)
!2451 = !DILocation(line: 1372, column: 6, scope: !2421)
!2452 = !DILocation(line: 1373, column: 6, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2454, file: !3, line: 1373, column: 6)
!2454 = distinct !DILexicalBlock(scope: !2449, file: !3, line: 1372, column: 24)
!2455 = !DILocation(line: 1373, column: 8, scope: !2453)
!2456 = !DILocation(line: 1373, column: 6, scope: !2454)
!2457 = !DILocation(line: 1374, column: 1, scope: !2458)
!2458 = distinct !DILexicalBlock(scope: !2453, file: !3, line: 1373, column: 24)
!2459 = !DILocation(line: 1375, column: 8, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2458, file: !3, line: 1375, column: 6)
!2461 = !DILocation(line: 1375, column: 14, scope: !2460)
!2462 = !DILocation(line: 1375, column: 21, scope: !2460)
!2463 = !DILocation(line: 1375, column: 26, scope: !2460)
!2464 = !DILocation(line: 1375, column: 36, scope: !2460)
!2465 = !DILocation(line: 1375, column: 39, scope: !2460)
!2466 = !DILocation(line: 1375, column: 6, scope: !2458)
!2467 = !DILocation(line: 1376, column: 1, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2460, file: !3, line: 1375, column: 48)
!2469 = !DILocation(line: 1378, column: 1, scope: !2458)
!2470 = !DILocation(line: 1379, column: 1, scope: !2454)
!2471 = !DILocation(line: 1381, column: 11, scope: !2472)
!2472 = distinct !DILexicalBlock(scope: !2449, file: !3, line: 1381, column: 11)
!2473 = !DILocation(line: 1381, column: 16, scope: !2472)
!2474 = !DILocation(line: 1381, column: 11, scope: !2449)
!2475 = !DILocation(line: 1382, column: 6, scope: !2476)
!2476 = distinct !DILexicalBlock(scope: !2477, file: !3, line: 1382, column: 6)
!2477 = distinct !DILexicalBlock(scope: !2472, file: !3, line: 1381, column: 26)
!2478 = !DILocation(line: 1382, column: 13, scope: !2476)
!2479 = !DILocation(line: 1382, column: 11, scope: !2476)
!2480 = !DILocation(line: 1382, column: 6, scope: !2477)
!2481 = !DILocation(line: 1382, column: 42, scope: !2476)
!2482 = !DILocation(line: 1382, column: 20, scope: !2476)
!2483 = !DILocation(line: 1383, column: 1, scope: !2477)
!2484 = !DILocation(line: 1385, column: 10, scope: !2421)
!2485 = !DILocation(line: 1385, column: 15, scope: !2421)
!2486 = !DILocation(line: 1385, column: 8, scope: !2421)
!2487 = !DILocation(line: 1386, column: 8, scope: !2421)
!2488 = !DILocation(line: 1387, column: 5, scope: !2421)
!2489 = !DILocation(line: 1387, column: 17, scope: !2421)
!2490 = !DILocation(line: 1387, column: 15, scope: !2421)
!2491 = !DILocation(line: 1387, column: 11, scope: !2421)
!2492 = !DILocation(line: 1387, column: 3, scope: !2421)
!2493 = !DILocation(line: 1388, column: 17, scope: !2494)
!2494 = distinct !DILexicalBlock(scope: !2421, file: !3, line: 1388, column: 6)
!2495 = !DILocation(line: 1388, column: 27, scope: !2494)
!2496 = !DILocation(line: 1388, column: 38, scope: !2494)
!2497 = !DILocation(line: 1388, column: 23, scope: !2494)
!2498 = !DILocation(line: 1388, column: 6, scope: !2494)
!2499 = !DILocation(line: 1388, column: 6, scope: !2421)
!2500 = !DILocation(line: 1389, column: 23, scope: !2501)
!2501 = distinct !DILexicalBlock(scope: !2494, file: !3, line: 1388, column: 49)
!2502 = !DILocation(line: 1390, column: 1, scope: !2501)
!2503 = !DILocation(line: 1391, column: 6, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !2421, file: !3, line: 1391, column: 6)
!2505 = !DILocation(line: 1391, column: 6, scope: !2421)
!2506 = !DILocation(line: 1391, column: 20, scope: !2504)
!2507 = !DILocation(line: 1391, column: 18, scope: !2504)
!2508 = !DILocation(line: 1391, column: 16, scope: !2504)
!2509 = !DILocation(line: 1391, column: 14, scope: !2504)
!2510 = !DILocation(line: 1392, column: 8, scope: !2421)
!2511 = !DILocation(line: 1392, column: 1, scope: !2421)
!2512 = !DILocation(line: 1394, column: 1, scope: !2421)
!2513 = distinct !DISubprogram(name: "float32_to_float64", scope: !3, file: !3, line: 1403, type: !2514, isLocal: false, isDefinition: true, scopeLine: 1404, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2514 = !DISubroutineType(types: !2515)
!2515 = !{!1130, !1109}
!2516 = !DILocalVariable(name: "a", arg: 1, scope: !2513, file: !3, line: 1403, type: !1109)
!2517 = !DILocation(line: 1403, column: 37, scope: !2513)
!2518 = !DILocalVariable(name: "aSign", scope: !2513, file: !3, line: 1405, type: !1241)
!2519 = !DILocation(line: 1405, column: 6, scope: !2513)
!2520 = !DILocalVariable(name: "aExp", scope: !2513, file: !3, line: 1406, type: !60)
!2521 = !DILocation(line: 1406, column: 7, scope: !2513)
!2522 = !DILocalVariable(name: "aSig", scope: !2513, file: !3, line: 1407, type: !27)
!2523 = !DILocation(line: 1407, column: 8, scope: !2513)
!2524 = !DILocation(line: 1409, column: 28, scope: !2513)
!2525 = !DILocation(line: 1409, column: 8, scope: !2513)
!2526 = !DILocation(line: 1409, column: 6, scope: !2513)
!2527 = !DILocation(line: 1410, column: 27, scope: !2513)
!2528 = !DILocation(line: 1410, column: 8, scope: !2513)
!2529 = !DILocation(line: 1410, column: 6, scope: !2513)
!2530 = !DILocation(line: 1411, column: 29, scope: !2513)
!2531 = !DILocation(line: 1411, column: 9, scope: !2513)
!2532 = !DILocation(line: 1411, column: 7, scope: !2513)
!2533 = !DILocation(line: 1412, column: 6, scope: !2534)
!2534 = distinct !DILexicalBlock(scope: !2513, file: !3, line: 1412, column: 6)
!2535 = !DILocation(line: 1412, column: 11, scope: !2534)
!2536 = !DILocation(line: 1412, column: 6, scope: !2513)
!2537 = !DILocation(line: 1413, column: 6, scope: !2538)
!2538 = distinct !DILexicalBlock(scope: !2539, file: !3, line: 1413, column: 6)
!2539 = distinct !DILexicalBlock(scope: !2534, file: !3, line: 1412, column: 21)
!2540 = !DILocation(line: 1413, column: 6, scope: !2539)
!2541 = !DILocation(line: 1413, column: 60, scope: !2538)
!2542 = !DILocation(line: 1413, column: 40, scope: !2538)
!2543 = !DILocation(line: 1413, column: 20, scope: !2538)
!2544 = !DILocation(line: 1413, column: 13, scope: !2538)
!2545 = !DILocation(line: 1414, column: 21, scope: !2539)
!2546 = !DILocation(line: 1414, column: 8, scope: !2539)
!2547 = !DILocation(line: 1414, column: 1, scope: !2539)
!2548 = !DILocation(line: 1416, column: 6, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2513, file: !3, line: 1416, column: 6)
!2550 = !DILocation(line: 1416, column: 11, scope: !2549)
!2551 = !DILocation(line: 1416, column: 6, scope: !2513)
!2552 = !DILocation(line: 1417, column: 6, scope: !2553)
!2553 = distinct !DILexicalBlock(scope: !2554, file: !3, line: 1417, column: 6)
!2554 = distinct !DILexicalBlock(scope: !2549, file: !3, line: 1416, column: 18)
!2555 = !DILocation(line: 1417, column: 11, scope: !2553)
!2556 = !DILocation(line: 1417, column: 6, scope: !2554)
!2557 = !DILocation(line: 1417, column: 38, scope: !2553)
!2558 = !DILocation(line: 1417, column: 25, scope: !2553)
!2559 = !DILocation(line: 1417, column: 18, scope: !2553)
!2560 = !DILocation(line: 1418, column: 28, scope: !2554)
!2561 = !DILocation(line: 1418, column: 1, scope: !2554)
!2562 = !DILocation(line: 1419, column: 1, scope: !2554)
!2563 = !DILocation(line: 1420, column: 1, scope: !2554)
!2564 = !DILocation(line: 1421, column: 21, scope: !2513)
!2565 = !DILocation(line: 1421, column: 28, scope: !2513)
!2566 = !DILocation(line: 1421, column: 33, scope: !2513)
!2567 = !DILocation(line: 1421, column: 53, scope: !2513)
!2568 = !DILocation(line: 1421, column: 44, scope: !2513)
!2569 = !DILocation(line: 1421, column: 59, scope: !2513)
!2570 = !DILocation(line: 1421, column: 8, scope: !2513)
!2571 = !DILocation(line: 1421, column: 1, scope: !2513)
!2572 = !DILocation(line: 1423, column: 1, scope: !2513)
!2573 = distinct !DISubprogram(name: "commonNaNToFloat64", scope: !43, file: !43, line: 195, type: !2574, isLocal: true, isDefinition: true, scopeLine: 196, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2574 = !DISubroutineType(types: !2575)
!2575 = !{!1130, !2576}
!2576 = !DIDerivedType(tag: DW_TAG_typedef, name: "commonNaNT", file: !43, line: 59, baseType: !2577)
!2577 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !43, line: 56, size: 192, elements: !2578)
!2578 = !{!2579, !2580, !2581}
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2577, file: !43, line: 57, baseType: !1241, size: 32)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2577, file: !43, line: 58, baseType: !24, size: 64, offset: 64)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2577, file: !43, line: 58, baseType: !24, size: 64, offset: 128)
!2582 = !DILocalVariable(name: "a", arg: 1, scope: !2573, file: !43, line: 195, type: !2576)
!2583 = !DILocation(line: 195, column: 47, scope: !2573)
!2584 = !DILocation(line: 199, column: 26, scope: !2573)
!2585 = !DILocation(line: 199, column: 15, scope: !2573)
!2586 = !DILocation(line: 199, column: 32, scope: !2573)
!2587 = !DILocation(line: 200, column: 9, scope: !2573)
!2588 = !DILocation(line: 201, column: 15, scope: !2573)
!2589 = !DILocation(line: 201, column: 19, scope: !2573)
!2590 = !DILocation(line: 201, column: 9, scope: !2573)
!2591 = !DILocation(line: 198, column: 5, scope: !2573)
!2592 = distinct !DISubprogram(name: "float32ToCommonNaN", scope: !43, file: !43, line: 96, type: !2593, isLocal: true, isDefinition: true, scopeLine: 97, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2593 = !DISubroutineType(types: !2594)
!2594 = !{!2576, !1109}
!2595 = !DILocalVariable(name: "a", arg: 1, scope: !2592, file: !43, line: 96, type: !1109)
!2596 = !DILocation(line: 96, column: 47, scope: !2592)
!2597 = !DILocalVariable(name: "z", scope: !2592, file: !43, line: 98, type: !2576)
!2598 = !DILocation(line: 98, column: 16, scope: !2592)
!2599 = !DILocation(line: 100, column: 36, scope: !2600)
!2600 = distinct !DILexicalBlock(scope: !2592, file: !43, line: 100, column: 10)
!2601 = !DILocation(line: 100, column: 10, scope: !2600)
!2602 = !DILocation(line: 100, column: 10, scope: !2592)
!2603 = !DILocation(line: 100, column: 42, scope: !2600)
!2604 = !DILocation(line: 101, column: 14, scope: !2592)
!2605 = !DILocation(line: 101, column: 15, scope: !2592)
!2606 = !DILocation(line: 101, column: 7, scope: !2592)
!2607 = !DILocation(line: 101, column: 12, scope: !2592)
!2608 = !DILocation(line: 102, column: 7, scope: !2592)
!2609 = !DILocation(line: 102, column: 11, scope: !2592)
!2610 = !DILocation(line: 103, column: 25, scope: !2592)
!2611 = !DILocation(line: 103, column: 16, scope: !2592)
!2612 = !DILocation(line: 103, column: 28, scope: !2592)
!2613 = !DILocation(line: 103, column: 7, scope: !2592)
!2614 = !DILocation(line: 103, column: 12, scope: !2592)
!2615 = !DILocation(line: 104, column: 12, scope: !2592)
!2616 = !DILocation(line: 104, column: 5, scope: !2592)
!2617 = distinct !DISubprogram(name: "normalizeFloat32Subnormal", scope: !3, file: !3, line: 206, type: !2618, isLocal: true, isDefinition: true, scopeLine: 207, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2618 = !DISubroutineType(types: !2619)
!2619 = !{null, !27, !2620, !74}
!2620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64)
!2621 = !DILocalVariable(name: "aSig", arg: 1, scope: !2617, file: !3, line: 206, type: !27)
!2622 = !DILocation(line: 206, column: 43, scope: !2617)
!2623 = !DILocalVariable(name: "zExpPtr", arg: 2, scope: !2617, file: !3, line: 206, type: !2620)
!2624 = !DILocation(line: 206, column: 56, scope: !2617)
!2625 = !DILocalVariable(name: "zSigPtr", arg: 3, scope: !2617, file: !3, line: 206, type: !74)
!2626 = !DILocation(line: 206, column: 73, scope: !2617)
!2627 = !DILocalVariable(name: "shiftCount", scope: !2617, file: !3, line: 208, type: !38)
!2628 = !DILocation(line: 208, column: 6, scope: !2617)
!2629 = !DILocation(line: 210, column: 35, scope: !2617)
!2630 = !DILocation(line: 210, column: 14, scope: !2617)
!2631 = !DILocation(line: 210, column: 42, scope: !2617)
!2632 = !DILocation(line: 210, column: 12, scope: !2617)
!2633 = !DILocation(line: 211, column: 12, scope: !2617)
!2634 = !DILocation(line: 211, column: 18, scope: !2617)
!2635 = !DILocation(line: 211, column: 16, scope: !2617)
!2636 = !DILocation(line: 211, column: 2, scope: !2617)
!2637 = !DILocation(line: 211, column: 10, scope: !2617)
!2638 = !DILocation(line: 212, column: 16, scope: !2617)
!2639 = !DILocation(line: 212, column: 14, scope: !2617)
!2640 = !DILocation(line: 212, column: 2, scope: !2617)
!2641 = !DILocation(line: 212, column: 10, scope: !2617)
!2642 = !DILocation(line: 214, column: 1, scope: !2617)
!2643 = distinct !DISubprogram(name: "float32_to_floatx80", scope: !3, file: !3, line: 1434, type: !2644, isLocal: false, isDefinition: true, scopeLine: 1435, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2644 = !DISubroutineType(types: !2645)
!2645 = !{!1151, !1109}
!2646 = !DILocalVariable(name: "a", arg: 1, scope: !2643, file: !3, line: 1434, type: !1109)
!2647 = !DILocation(line: 1434, column: 39, scope: !2643)
!2648 = !DILocalVariable(name: "aSign", scope: !2643, file: !3, line: 1436, type: !1241)
!2649 = !DILocation(line: 1436, column: 10, scope: !2643)
!2650 = !DILocalVariable(name: "aExp", scope: !2643, file: !3, line: 1437, type: !60)
!2651 = !DILocation(line: 1437, column: 11, scope: !2643)
!2652 = !DILocalVariable(name: "aSig", scope: !2643, file: !3, line: 1438, type: !27)
!2653 = !DILocation(line: 1438, column: 12, scope: !2643)
!2654 = !DILocation(line: 1440, column: 32, scope: !2643)
!2655 = !DILocation(line: 1440, column: 12, scope: !2643)
!2656 = !DILocation(line: 1440, column: 10, scope: !2643)
!2657 = !DILocation(line: 1441, column: 31, scope: !2643)
!2658 = !DILocation(line: 1441, column: 12, scope: !2643)
!2659 = !DILocation(line: 1441, column: 10, scope: !2643)
!2660 = !DILocation(line: 1442, column: 33, scope: !2643)
!2661 = !DILocation(line: 1442, column: 13, scope: !2643)
!2662 = !DILocation(line: 1442, column: 11, scope: !2643)
!2663 = !DILocation(line: 1443, column: 10, scope: !2664)
!2664 = distinct !DILexicalBlock(scope: !2643, file: !3, line: 1443, column: 10)
!2665 = !DILocation(line: 1443, column: 15, scope: !2664)
!2666 = !DILocation(line: 1443, column: 10, scope: !2643)
!2667 = !DILocation(line: 1444, column: 14, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2669, file: !3, line: 1444, column: 14)
!2669 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 1443, column: 25)
!2670 = !DILocation(line: 1444, column: 14, scope: !2669)
!2671 = !DILocation(line: 1444, column: 69, scope: !2668)
!2672 = !DILocation(line: 1444, column: 49, scope: !2668)
!2673 = !DILocation(line: 1444, column: 28, scope: !2668)
!2674 = !DILocation(line: 1444, column: 21, scope: !2668)
!2675 = !DILocation(line: 1445, column: 30, scope: !2669)
!2676 = !DILocation(line: 1445, column: 16, scope: !2669)
!2677 = !DILocation(line: 1445, column: 9, scope: !2669)
!2678 = !DILocation(line: 1447, column: 10, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2643, file: !3, line: 1447, column: 10)
!2680 = !DILocation(line: 1447, column: 15, scope: !2679)
!2681 = !DILocation(line: 1447, column: 10, scope: !2643)
!2682 = !DILocation(line: 1448, column: 14, scope: !2683)
!2683 = distinct !DILexicalBlock(scope: !2684, file: !3, line: 1448, column: 14)
!2684 = distinct !DILexicalBlock(scope: !2679, file: !3, line: 1447, column: 22)
!2685 = !DILocation(line: 1448, column: 19, scope: !2683)
!2686 = !DILocation(line: 1448, column: 14, scope: !2684)
!2687 = !DILocation(line: 1448, column: 47, scope: !2683)
!2688 = !DILocation(line: 1448, column: 33, scope: !2683)
!2689 = !DILocation(line: 1448, column: 26, scope: !2683)
!2690 = !DILocation(line: 1449, column: 36, scope: !2684)
!2691 = !DILocation(line: 1449, column: 9, scope: !2684)
!2692 = !DILocation(line: 1450, column: 5, scope: !2684)
!2693 = !DILocation(line: 1451, column: 10, scope: !2643)
!2694 = !DILocation(line: 1452, column: 26, scope: !2643)
!2695 = !DILocation(line: 1452, column: 33, scope: !2643)
!2696 = !DILocation(line: 1452, column: 38, scope: !2643)
!2697 = !DILocation(line: 1452, column: 59, scope: !2643)
!2698 = !DILocation(line: 1452, column: 50, scope: !2643)
!2699 = !DILocation(line: 1452, column: 65, scope: !2643)
!2700 = !DILocation(line: 1452, column: 12, scope: !2643)
!2701 = !DILocation(line: 1452, column: 5, scope: !2643)
!2702 = !DILocation(line: 1454, column: 1, scope: !2643)
!2703 = distinct !DISubprogram(name: "commonNaNToFloatx80", scope: !43, file: !43, line: 288, type: !2704, isLocal: true, isDefinition: true, scopeLine: 289, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2704 = !DISubroutineType(types: !2705)
!2705 = !{!1151, !2576}
!2706 = !DILocalVariable(name: "a", arg: 1, scope: !2703, file: !43, line: 288, type: !2576)
!2707 = !DILocation(line: 288, column: 49, scope: !2703)
!2708 = !DILocalVariable(name: "z", scope: !2703, file: !43, line: 290, type: !1151)
!2709 = !DILocation(line: 290, column: 14, scope: !2703)
!2710 = !DILocation(line: 292, column: 47, scope: !2703)
!2711 = !DILocation(line: 292, column: 51, scope: !2703)
!2712 = !DILocation(line: 292, column: 41, scope: !2703)
!2713 = !DILocation(line: 292, column: 7, scope: !2703)
!2714 = !DILocation(line: 292, column: 11, scope: !2703)
!2715 = !DILocation(line: 293, column: 29, scope: !2703)
!2716 = !DILocation(line: 293, column: 18, scope: !2703)
!2717 = !DILocation(line: 293, column: 16, scope: !2703)
!2718 = !DILocation(line: 293, column: 35, scope: !2703)
!2719 = !DILocation(line: 293, column: 42, scope: !2703)
!2720 = !DILocation(line: 293, column: 14, scope: !2703)
!2721 = !DILocation(line: 293, column: 7, scope: !2703)
!2722 = !DILocation(line: 293, column: 12, scope: !2703)
!2723 = !DILocation(line: 294, column: 12, scope: !2703)
!2724 = !DILocation(line: 294, column: 5, scope: !2703)
!2725 = distinct !DISubprogram(name: "float32_to_float128", scope: !3, file: !3, line: 1467, type: !2726, isLocal: false, isDefinition: true, scopeLine: 1468, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2726 = !DISubroutineType(types: !2727)
!2727 = !{!1190, !1109}
!2728 = !DILocalVariable(name: "a", arg: 1, scope: !2725, file: !3, line: 1467, type: !1109)
!2729 = !DILocation(line: 1467, column: 39, scope: !2725)
!2730 = !DILocalVariable(name: "aSign", scope: !2725, file: !3, line: 1469, type: !1241)
!2731 = !DILocation(line: 1469, column: 10, scope: !2725)
!2732 = !DILocalVariable(name: "aExp", scope: !2725, file: !3, line: 1470, type: !60)
!2733 = !DILocation(line: 1470, column: 11, scope: !2725)
!2734 = !DILocalVariable(name: "aSig", scope: !2725, file: !3, line: 1471, type: !27)
!2735 = !DILocation(line: 1471, column: 12, scope: !2725)
!2736 = !DILocation(line: 1473, column: 32, scope: !2725)
!2737 = !DILocation(line: 1473, column: 12, scope: !2725)
!2738 = !DILocation(line: 1473, column: 10, scope: !2725)
!2739 = !DILocation(line: 1474, column: 31, scope: !2725)
!2740 = !DILocation(line: 1474, column: 12, scope: !2725)
!2741 = !DILocation(line: 1474, column: 10, scope: !2725)
!2742 = !DILocation(line: 1475, column: 33, scope: !2725)
!2743 = !DILocation(line: 1475, column: 13, scope: !2725)
!2744 = !DILocation(line: 1475, column: 11, scope: !2725)
!2745 = !DILocation(line: 1476, column: 10, scope: !2746)
!2746 = distinct !DILexicalBlock(scope: !2725, file: !3, line: 1476, column: 10)
!2747 = !DILocation(line: 1476, column: 15, scope: !2746)
!2748 = !DILocation(line: 1476, column: 10, scope: !2725)
!2749 = !DILocation(line: 1477, column: 14, scope: !2750)
!2750 = distinct !DILexicalBlock(scope: !2751, file: !3, line: 1477, column: 14)
!2751 = distinct !DILexicalBlock(scope: !2746, file: !3, line: 1476, column: 25)
!2752 = !DILocation(line: 1477, column: 14, scope: !2751)
!2753 = !DILocation(line: 1477, column: 69, scope: !2750)
!2754 = !DILocation(line: 1477, column: 49, scope: !2750)
!2755 = !DILocation(line: 1477, column: 28, scope: !2750)
!2756 = !DILocation(line: 1477, column: 21, scope: !2750)
!2757 = !DILocation(line: 1478, column: 30, scope: !2751)
!2758 = !DILocation(line: 1478, column: 16, scope: !2751)
!2759 = !DILocation(line: 1478, column: 9, scope: !2751)
!2760 = !DILocation(line: 1480, column: 10, scope: !2761)
!2761 = distinct !DILexicalBlock(scope: !2725, file: !3, line: 1480, column: 10)
!2762 = !DILocation(line: 1480, column: 15, scope: !2761)
!2763 = !DILocation(line: 1480, column: 10, scope: !2725)
!2764 = !DILocation(line: 1481, column: 14, scope: !2765)
!2765 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 1481, column: 14)
!2766 = distinct !DILexicalBlock(scope: !2761, file: !3, line: 1480, column: 22)
!2767 = !DILocation(line: 1481, column: 19, scope: !2765)
!2768 = !DILocation(line: 1481, column: 14, scope: !2766)
!2769 = !DILocation(line: 1481, column: 47, scope: !2765)
!2770 = !DILocation(line: 1481, column: 33, scope: !2765)
!2771 = !DILocation(line: 1481, column: 26, scope: !2765)
!2772 = !DILocation(line: 1482, column: 36, scope: !2766)
!2773 = !DILocation(line: 1482, column: 9, scope: !2766)
!2774 = !DILocation(line: 1483, column: 9, scope: !2766)
!2775 = !DILocation(line: 1484, column: 5, scope: !2766)
!2776 = !DILocation(line: 1485, column: 26, scope: !2725)
!2777 = !DILocation(line: 1485, column: 33, scope: !2725)
!2778 = !DILocation(line: 1485, column: 38, scope: !2725)
!2779 = !DILocation(line: 1485, column: 59, scope: !2725)
!2780 = !DILocation(line: 1485, column: 50, scope: !2725)
!2781 = !DILocation(line: 1485, column: 65, scope: !2725)
!2782 = !DILocation(line: 1485, column: 12, scope: !2725)
!2783 = !DILocation(line: 1485, column: 5, scope: !2725)
!2784 = !DILocation(line: 1487, column: 1, scope: !2725)
!2785 = distinct !DISubprogram(name: "commonNaNToFloat128", scope: !43, file: !43, line: 380, type: !2786, isLocal: true, isDefinition: true, scopeLine: 381, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2786 = !DISubroutineType(types: !2787)
!2787 = !{!1190, !2576}
!2788 = !DILocalVariable(name: "a", arg: 1, scope: !2785, file: !43, line: 380, type: !2576)
!2789 = !DILocation(line: 380, column: 49, scope: !2785)
!2790 = !DILocalVariable(name: "z", scope: !2785, file: !43, line: 382, type: !1190)
!2791 = !DILocation(line: 382, column: 14, scope: !2785)
!2792 = !DILocation(line: 384, column: 22, scope: !2785)
!2793 = !DILocation(line: 384, column: 30, scope: !2785)
!2794 = !DILocation(line: 384, column: 42, scope: !2785)
!2795 = !DILocation(line: 384, column: 51, scope: !2785)
!2796 = !DILocation(line: 384, column: 5, scope: !2785)
!2797 = !DILocation(line: 385, column: 30, scope: !2785)
!2798 = !DILocation(line: 385, column: 19, scope: !2785)
!2799 = !DILocation(line: 385, column: 36, scope: !2785)
!2800 = !DILocation(line: 385, column: 43, scope: !2785)
!2801 = !DILocation(line: 385, column: 7, scope: !2785)
!2802 = !DILocation(line: 385, column: 12, scope: !2785)
!2803 = !DILocation(line: 386, column: 12, scope: !2785)
!2804 = !DILocation(line: 386, column: 5, scope: !2785)
!2805 = distinct !DISubprogram(name: "float32_round_to_int", scope: !3, file: !3, line: 1498, type: !2806, isLocal: false, isDefinition: true, scopeLine: 1499, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2806 = !DISubroutineType(types: !2807)
!2807 = !{!1109, !1109}
!2808 = !DILocalVariable(name: "a", arg: 1, scope: !2805, file: !3, line: 1498, type: !1109)
!2809 = !DILocation(line: 1498, column: 39, scope: !2805)
!2810 = !DILocalVariable(name: "aSign", scope: !2805, file: !3, line: 1500, type: !1241)
!2811 = !DILocation(line: 1500, column: 6, scope: !2805)
!2812 = !DILocalVariable(name: "aExp", scope: !2805, file: !3, line: 1501, type: !60)
!2813 = !DILocation(line: 1501, column: 7, scope: !2805)
!2814 = !DILocalVariable(name: "lastBitMask", scope: !2805, file: !3, line: 1502, type: !27)
!2815 = !DILocation(line: 1502, column: 8, scope: !2805)
!2816 = !DILocalVariable(name: "roundBitsMask", scope: !2805, file: !3, line: 1502, type: !27)
!2817 = !DILocation(line: 1502, column: 21, scope: !2805)
!2818 = !DILocalVariable(name: "roundingMode", scope: !2805, file: !3, line: 1503, type: !38)
!2819 = !DILocation(line: 1503, column: 6, scope: !2805)
!2820 = !DILocalVariable(name: "z", scope: !2805, file: !3, line: 1504, type: !1109)
!2821 = !DILocation(line: 1504, column: 9, scope: !2805)
!2822 = !DILocation(line: 1506, column: 27, scope: !2805)
!2823 = !DILocation(line: 1506, column: 8, scope: !2805)
!2824 = !DILocation(line: 1506, column: 6, scope: !2805)
!2825 = !DILocation(line: 1507, column: 14, scope: !2826)
!2826 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 1507, column: 6)
!2827 = !DILocation(line: 1507, column: 11, scope: !2826)
!2828 = !DILocation(line: 1507, column: 6, scope: !2805)
!2829 = !DILocation(line: 1508, column: 8, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2831, file: !3, line: 1508, column: 6)
!2831 = distinct !DILexicalBlock(scope: !2826, file: !3, line: 1507, column: 21)
!2832 = !DILocation(line: 1508, column: 13, scope: !2830)
!2833 = !DILocation(line: 1508, column: 23, scope: !2830)
!2834 = !DILocation(line: 1508, column: 46, scope: !2830)
!2835 = !DILocation(line: 1508, column: 26, scope: !2830)
!2836 = !DILocation(line: 1508, column: 6, scope: !2831)
!2837 = !DILocation(line: 1509, column: 29, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2830, file: !3, line: 1508, column: 52)
!2839 = !DILocation(line: 1509, column: 32, scope: !2838)
!2840 = !DILocation(line: 1509, column: 8, scope: !2838)
!2841 = !DILocation(line: 1509, column: 1, scope: !2838)
!2842 = !DILocation(line: 1511, column: 8, scope: !2831)
!2843 = !DILocation(line: 1511, column: 1, scope: !2831)
!2844 = !DILocation(line: 1513, column: 6, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 1513, column: 6)
!2846 = !DILocation(line: 1513, column: 11, scope: !2845)
!2847 = !DILocation(line: 1513, column: 6, scope: !2805)
!2848 = !DILocation(line: 1514, column: 17, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2850, file: !3, line: 1514, column: 6)
!2850 = distinct !DILexicalBlock(scope: !2845, file: !3, line: 1513, column: 21)
!2851 = !DILocation(line: 1514, column: 18, scope: !2849)
!2852 = !DILocation(line: 1514, column: 24, scope: !2849)
!2853 = !DILocation(line: 1514, column: 6, scope: !2850)
!2854 = !DILocation(line: 1514, column: 38, scope: !2849)
!2855 = !DILocation(line: 1514, column: 31, scope: !2849)
!2856 = !DILocation(line: 1515, column: 23, scope: !2850)
!2857 = !DILocation(line: 1516, column: 29, scope: !2850)
!2858 = !DILocation(line: 1516, column: 9, scope: !2850)
!2859 = !DILocation(line: 1516, column: 7, scope: !2850)
!2860 = !DILocation(line: 1517, column: 10, scope: !2850)
!2861 = !DILocation(line: 1517, column: 1, scope: !2850)
!2862 = !DILocation(line: 1519, column: 8, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2864, file: !3, line: 1519, column: 6)
!2864 = distinct !DILexicalBlock(scope: !2850, file: !3, line: 1517, column: 32)
!2865 = !DILocation(line: 1519, column: 13, scope: !2863)
!2866 = !DILocation(line: 1519, column: 23, scope: !2863)
!2867 = !DILocation(line: 1519, column: 46, scope: !2863)
!2868 = !DILocation(line: 1519, column: 26, scope: !2863)
!2869 = !DILocation(line: 1519, column: 6, scope: !2864)
!2870 = !DILocation(line: 1520, column: 21, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2863, file: !3, line: 1519, column: 52)
!2872 = !DILocation(line: 1520, column: 8, scope: !2871)
!2873 = !DILocation(line: 1520, column: 1, scope: !2871)
!2874 = !DILocation(line: 1522, column: 1, scope: !2864)
!2875 = !DILocation(line: 1524, column: 8, scope: !2864)
!2876 = !DILocation(line: 1524, column: 1, scope: !2864)
!2877 = !DILocation(line: 1526, column: 8, scope: !2864)
!2878 = !DILocation(line: 1526, column: 1, scope: !2864)
!2879 = !DILocation(line: 1528, column: 21, scope: !2850)
!2880 = !DILocation(line: 1528, column: 8, scope: !2850)
!2881 = !DILocation(line: 1528, column: 1, scope: !2850)
!2882 = !DILocation(line: 1530, column: 13, scope: !2805)
!2883 = !DILocation(line: 1531, column: 24, scope: !2805)
!2884 = !DILocation(line: 1531, column: 22, scope: !2805)
!2885 = !DILocation(line: 1531, column: 13, scope: !2805)
!2886 = !DILocation(line: 1532, column: 17, scope: !2805)
!2887 = !DILocation(line: 1532, column: 29, scope: !2805)
!2888 = !DILocation(line: 1532, column: 15, scope: !2805)
!2889 = !DILocation(line: 1533, column: 5, scope: !2805)
!2890 = !DILocation(line: 1533, column: 3, scope: !2805)
!2891 = !DILocation(line: 1534, column: 16, scope: !2805)
!2892 = !DILocation(line: 1534, column: 14, scope: !2805)
!2893 = !DILocation(line: 1535, column: 6, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 1535, column: 6)
!2895 = !DILocation(line: 1535, column: 19, scope: !2894)
!2896 = !DILocation(line: 1535, column: 6, scope: !2805)
!2897 = !DILocation(line: 1536, column: 6, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2894, file: !3, line: 1535, column: 49)
!2899 = !DILocation(line: 1536, column: 17, scope: !2898)
!2900 = !DILocation(line: 1536, column: 3, scope: !2898)
!2901 = !DILocation(line: 1537, column: 8, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2898, file: !3, line: 1537, column: 6)
!2903 = !DILocation(line: 1537, column: 12, scope: !2902)
!2904 = !DILocation(line: 1537, column: 10, scope: !2902)
!2905 = !DILocation(line: 1537, column: 28, scope: !2902)
!2906 = !DILocation(line: 1537, column: 6, scope: !2898)
!2907 = !DILocation(line: 1537, column: 42, scope: !2902)
!2908 = !DILocation(line: 1537, column: 40, scope: !2902)
!2909 = !DILocation(line: 1537, column: 37, scope: !2902)
!2910 = !DILocation(line: 1537, column: 35, scope: !2902)
!2911 = !DILocation(line: 1538, column: 1, scope: !2898)
!2912 = !DILocation(line: 1539, column: 11, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2894, file: !3, line: 1539, column: 11)
!2914 = !DILocation(line: 1539, column: 24, scope: !2913)
!2915 = !DILocation(line: 1539, column: 11, scope: !2894)
!2916 = !DILocation(line: 1540, column: 26, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 1540, column: 6)
!2918 = distinct !DILexicalBlock(scope: !2913, file: !3, line: 1539, column: 49)
!2919 = !DILocation(line: 1540, column: 6, scope: !2917)
!2920 = !DILocation(line: 1540, column: 34, scope: !2917)
!2921 = !DILocation(line: 1540, column: 47, scope: !2917)
!2922 = !DILocation(line: 1540, column: 30, scope: !2917)
!2923 = !DILocation(line: 1540, column: 6, scope: !2918)
!2924 = !DILocation(line: 1541, column: 6, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2917, file: !3, line: 1540, column: 69)
!2926 = !DILocation(line: 1541, column: 3, scope: !2925)
!2927 = !DILocation(line: 1542, column: 1, scope: !2925)
!2928 = !DILocation(line: 1543, column: 1, scope: !2918)
!2929 = !DILocation(line: 1544, column: 8, scope: !2805)
!2930 = !DILocation(line: 1544, column: 6, scope: !2805)
!2931 = !DILocation(line: 1544, column: 3, scope: !2805)
!2932 = !DILocation(line: 1545, column: 6, scope: !2933)
!2933 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 1545, column: 6)
!2934 = !DILocation(line: 1545, column: 11, scope: !2933)
!2935 = !DILocation(line: 1545, column: 8, scope: !2933)
!2936 = !DILocation(line: 1545, column: 6, scope: !2805)
!2937 = !DILocation(line: 1545, column: 37, scope: !2933)
!2938 = !DILocation(line: 1545, column: 15, scope: !2933)
!2939 = !DILocation(line: 1546, column: 8, scope: !2805)
!2940 = !DILocation(line: 1546, column: 1, scope: !2805)
!2941 = !DILocation(line: 1548, column: 1, scope: !2805)
!2942 = distinct !DISubprogram(name: "propagateFloat32NaN", scope: !43, file: !43, line: 126, type: !2943, isLocal: true, isDefinition: true, scopeLine: 127, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2943 = !DISubroutineType(types: !2944)
!2944 = !{!1109, !1109, !1109}
!2945 = !DILocalVariable(name: "a", arg: 1, scope: !2942, file: !43, line: 126, type: !1109)
!2946 = !DILocation(line: 126, column: 45, scope: !2942)
!2947 = !DILocalVariable(name: "b", arg: 2, scope: !2942, file: !43, line: 126, type: !1109)
!2948 = !DILocation(line: 126, column: 56, scope: !2942)
!2949 = !DILocalVariable(name: "aIsNaN", scope: !2942, file: !43, line: 128, type: !1241)
!2950 = !DILocation(line: 128, column: 10, scope: !2942)
!2951 = !DILocalVariable(name: "aIsSignalingNaN", scope: !2942, file: !43, line: 128, type: !1241)
!2952 = !DILocation(line: 128, column: 18, scope: !2942)
!2953 = !DILocalVariable(name: "bIsNaN", scope: !2942, file: !43, line: 128, type: !1241)
!2954 = !DILocation(line: 128, column: 35, scope: !2942)
!2955 = !DILocalVariable(name: "bIsSignalingNaN", scope: !2942, file: !43, line: 128, type: !1241)
!2956 = !DILocation(line: 128, column: 43, scope: !2942)
!2957 = !DILocation(line: 130, column: 30, scope: !2942)
!2958 = !DILocation(line: 130, column: 14, scope: !2942)
!2959 = !DILocation(line: 130, column: 12, scope: !2942)
!2960 = !DILocation(line: 131, column: 49, scope: !2942)
!2961 = !DILocation(line: 131, column: 23, scope: !2942)
!2962 = !DILocation(line: 131, column: 21, scope: !2942)
!2963 = !DILocation(line: 132, column: 30, scope: !2942)
!2964 = !DILocation(line: 132, column: 14, scope: !2942)
!2965 = !DILocation(line: 132, column: 12, scope: !2942)
!2966 = !DILocation(line: 133, column: 49, scope: !2942)
!2967 = !DILocation(line: 133, column: 23, scope: !2942)
!2968 = !DILocation(line: 133, column: 21, scope: !2942)
!2969 = !DILocation(line: 134, column: 7, scope: !2942)
!2970 = !DILocation(line: 135, column: 7, scope: !2942)
!2971 = !DILocation(line: 136, column: 10, scope: !2972)
!2972 = distinct !DILexicalBlock(scope: !2942, file: !43, line: 136, column: 10)
!2973 = !DILocation(line: 136, column: 28, scope: !2972)
!2974 = !DILocation(line: 136, column: 26, scope: !2972)
!2975 = !DILocation(line: 136, column: 10, scope: !2942)
!2976 = !DILocation(line: 136, column: 46, scope: !2972)
!2977 = !DILocation(line: 137, column: 12, scope: !2942)
!2978 = !DILocation(line: 137, column: 30, scope: !2942)
!2979 = !DILocation(line: 137, column: 34, scope: !2942)
!2980 = !DILocation(line: 137, column: 52, scope: !2942)
!2981 = !DILocation(line: 137, column: 56, scope: !2942)
!2982 = !DILocation(line: 137, column: 65, scope: !2942)
!2983 = !DILocation(line: 137, column: 69, scope: !2942)
!2984 = !DILocation(line: 137, column: 5, scope: !2942)
!2985 = distinct !DISubprogram(name: "float32_add", scope: !3, file: !3, line: 1768, type: !2943, isLocal: false, isDefinition: true, scopeLine: 1769, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!2986 = !DILocalVariable(name: "a", arg: 1, scope: !2985, file: !3, line: 1768, type: !1109)
!2987 = !DILocation(line: 1768, column: 30, scope: !2985)
!2988 = !DILocalVariable(name: "b", arg: 2, scope: !2985, file: !3, line: 1768, type: !1109)
!2989 = !DILocation(line: 1768, column: 41, scope: !2985)
!2990 = !DILocalVariable(name: "aSign", scope: !2985, file: !3, line: 1770, type: !1241)
!2991 = !DILocation(line: 1770, column: 6, scope: !2985)
!2992 = !DILocalVariable(name: "bSign", scope: !2985, file: !3, line: 1770, type: !1241)
!2993 = !DILocation(line: 1770, column: 13, scope: !2985)
!2994 = !DILocation(line: 1772, column: 29, scope: !2985)
!2995 = !DILocation(line: 1772, column: 9, scope: !2985)
!2996 = !DILocation(line: 1772, column: 7, scope: !2985)
!2997 = !DILocation(line: 1773, column: 29, scope: !2985)
!2998 = !DILocation(line: 1773, column: 9, scope: !2985)
!2999 = !DILocation(line: 1773, column: 7, scope: !2985)
!3000 = !DILocation(line: 1774, column: 6, scope: !3001)
!3001 = distinct !DILexicalBlock(scope: !2985, file: !3, line: 1774, column: 6)
!3002 = !DILocation(line: 1774, column: 15, scope: !3001)
!3003 = !DILocation(line: 1774, column: 12, scope: !3001)
!3004 = !DILocation(line: 1774, column: 6, scope: !2985)
!3005 = !DILocation(line: 1775, column: 24, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !3001, file: !3, line: 1774, column: 23)
!3007 = !DILocation(line: 1775, column: 27, scope: !3006)
!3008 = !DILocation(line: 1775, column: 30, scope: !3006)
!3009 = !DILocation(line: 1775, column: 8, scope: !3006)
!3010 = !DILocation(line: 1775, column: 1, scope: !3006)
!3011 = !DILocation(line: 1778, column: 24, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !3001, file: !3, line: 1777, column: 6)
!3013 = !DILocation(line: 1778, column: 27, scope: !3012)
!3014 = !DILocation(line: 1778, column: 30, scope: !3012)
!3015 = !DILocation(line: 1778, column: 8, scope: !3012)
!3016 = !DILocation(line: 1778, column: 1, scope: !3012)
!3017 = !DILocation(line: 1781, column: 1, scope: !2985)
!3018 = distinct !DISubprogram(name: "addFloat32Sigs", scope: !3, file: !3, line: 1622, type: !3019, isLocal: true, isDefinition: true, scopeLine: 1623, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!3019 = !DISubroutineType(types: !3020)
!3020 = !{!1109, !1109, !1109, !1241}
!3021 = !DILocalVariable(name: "a", arg: 1, scope: !3018, file: !3, line: 1622, type: !1109)
!3022 = !DILocation(line: 1622, column: 40, scope: !3018)
!3023 = !DILocalVariable(name: "b", arg: 2, scope: !3018, file: !3, line: 1622, type: !1109)
!3024 = !DILocation(line: 1622, column: 51, scope: !3018)
!3025 = !DILocalVariable(name: "zSign", arg: 3, scope: !3018, file: !3, line: 1622, type: !1241)
!3026 = !DILocation(line: 1622, column: 59, scope: !3018)
!3027 = !DILocalVariable(name: "aExp", scope: !3018, file: !3, line: 1624, type: !60)
!3028 = !DILocation(line: 1624, column: 7, scope: !3018)
!3029 = !DILocalVariable(name: "bExp", scope: !3018, file: !3, line: 1624, type: !60)
!3030 = !DILocation(line: 1624, column: 13, scope: !3018)
!3031 = !DILocalVariable(name: "zExp", scope: !3018, file: !3, line: 1624, type: !60)
!3032 = !DILocation(line: 1624, column: 19, scope: !3018)
!3033 = !DILocalVariable(name: "aSig", scope: !3018, file: !3, line: 1625, type: !27)
!3034 = !DILocation(line: 1625, column: 8, scope: !3018)
!3035 = !DILocalVariable(name: "bSig", scope: !3018, file: !3, line: 1625, type: !27)
!3036 = !DILocation(line: 1625, column: 14, scope: !3018)
!3037 = !DILocalVariable(name: "zSig", scope: !3018, file: !3, line: 1625, type: !27)
!3038 = !DILocation(line: 1625, column: 20, scope: !3018)
!3039 = !DILocalVariable(name: "expDiff", scope: !3018, file: !3, line: 1626, type: !60)
!3040 = !DILocation(line: 1626, column: 7, scope: !3018)
!3041 = !DILocation(line: 1628, column: 28, scope: !3018)
!3042 = !DILocation(line: 1628, column: 8, scope: !3018)
!3043 = !DILocation(line: 1628, column: 6, scope: !3018)
!3044 = !DILocation(line: 1629, column: 27, scope: !3018)
!3045 = !DILocation(line: 1629, column: 8, scope: !3018)
!3046 = !DILocation(line: 1629, column: 6, scope: !3018)
!3047 = !DILocation(line: 1630, column: 28, scope: !3018)
!3048 = !DILocation(line: 1630, column: 8, scope: !3018)
!3049 = !DILocation(line: 1630, column: 6, scope: !3018)
!3050 = !DILocation(line: 1631, column: 27, scope: !3018)
!3051 = !DILocation(line: 1631, column: 8, scope: !3018)
!3052 = !DILocation(line: 1631, column: 6, scope: !3018)
!3053 = !DILocation(line: 1632, column: 11, scope: !3018)
!3054 = !DILocation(line: 1632, column: 18, scope: !3018)
!3055 = !DILocation(line: 1632, column: 16, scope: !3018)
!3056 = !DILocation(line: 1632, column: 9, scope: !3018)
!3057 = !DILocation(line: 1633, column: 6, scope: !3018)
!3058 = !DILocation(line: 1634, column: 6, scope: !3018)
!3059 = !DILocation(line: 1635, column: 10, scope: !3060)
!3060 = distinct !DILexicalBlock(scope: !3018, file: !3, line: 1635, column: 6)
!3061 = !DILocation(line: 1635, column: 8, scope: !3060)
!3062 = !DILocation(line: 1635, column: 6, scope: !3018)
!3063 = !DILocation(line: 1636, column: 6, scope: !3064)
!3064 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 1636, column: 6)
!3065 = distinct !DILexicalBlock(scope: !3060, file: !3, line: 1635, column: 20)
!3066 = !DILocation(line: 1636, column: 11, scope: !3064)
!3067 = !DILocation(line: 1636, column: 6, scope: !3065)
!3068 = !DILocation(line: 1637, column: 6, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !3070, file: !3, line: 1637, column: 6)
!3070 = distinct !DILexicalBlock(scope: !3064, file: !3, line: 1636, column: 21)
!3071 = !DILocation(line: 1637, column: 6, scope: !3070)
!3072 = !DILocation(line: 1637, column: 41, scope: !3069)
!3073 = !DILocation(line: 1637, column: 44, scope: !3069)
!3074 = !DILocation(line: 1637, column: 20, scope: !3069)
!3075 = !DILocation(line: 1637, column: 13, scope: !3069)
!3076 = !DILocation(line: 1638, column: 8, scope: !3070)
!3077 = !DILocation(line: 1638, column: 1, scope: !3070)
!3078 = !DILocation(line: 1640, column: 6, scope: !3079)
!3079 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 1640, column: 6)
!3080 = !DILocation(line: 1640, column: 11, scope: !3079)
!3081 = !DILocation(line: 1640, column: 6, scope: !3065)
!3082 = !DILocation(line: 1641, column: 1, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3079, file: !3, line: 1640, column: 18)
!3084 = !DILocation(line: 1642, column: 1, scope: !3083)
!3085 = !DILocation(line: 1644, column: 6, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !3079, file: !3, line: 1643, column: 6)
!3087 = !DILocation(line: 1646, column: 22, scope: !3065)
!3088 = !DILocation(line: 1646, column: 28, scope: !3065)
!3089 = !DILocation(line: 1646, column: 1, scope: !3065)
!3090 = !DILocation(line: 1647, column: 8, scope: !3065)
!3091 = !DILocation(line: 1647, column: 6, scope: !3065)
!3092 = !DILocation(line: 1648, column: 1, scope: !3065)
!3093 = !DILocation(line: 1649, column: 11, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3060, file: !3, line: 1649, column: 11)
!3095 = !DILocation(line: 1649, column: 19, scope: !3094)
!3096 = !DILocation(line: 1649, column: 11, scope: !3060)
!3097 = !DILocation(line: 1650, column: 6, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 1650, column: 6)
!3099 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 1649, column: 25)
!3100 = !DILocation(line: 1650, column: 11, scope: !3098)
!3101 = !DILocation(line: 1650, column: 6, scope: !3099)
!3102 = !DILocation(line: 1651, column: 6, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3104, file: !3, line: 1651, column: 6)
!3104 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1650, column: 21)
!3105 = !DILocation(line: 1651, column: 6, scope: !3104)
!3106 = !DILocation(line: 1651, column: 41, scope: !3103)
!3107 = !DILocation(line: 1651, column: 44, scope: !3103)
!3108 = !DILocation(line: 1651, column: 20, scope: !3103)
!3109 = !DILocation(line: 1651, column: 13, scope: !3103)
!3110 = !DILocation(line: 1652, column: 21, scope: !3104)
!3111 = !DILocation(line: 1652, column: 8, scope: !3104)
!3112 = !DILocation(line: 1652, column: 1, scope: !3104)
!3113 = !DILocation(line: 1654, column: 6, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 1654, column: 6)
!3115 = !DILocation(line: 1654, column: 11, scope: !3114)
!3116 = !DILocation(line: 1654, column: 6, scope: !3099)
!3117 = !DILocation(line: 1655, column: 1, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1654, column: 18)
!3119 = !DILocation(line: 1656, column: 1, scope: !3118)
!3120 = !DILocation(line: 1658, column: 6, scope: !3121)
!3121 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1657, column: 6)
!3122 = !DILocation(line: 1660, column: 22, scope: !3099)
!3123 = !DILocation(line: 1660, column: 30, scope: !3099)
!3124 = !DILocation(line: 1660, column: 28, scope: !3099)
!3125 = !DILocation(line: 1660, column: 1, scope: !3099)
!3126 = !DILocation(line: 1661, column: 8, scope: !3099)
!3127 = !DILocation(line: 1661, column: 6, scope: !3099)
!3128 = !DILocation(line: 1662, column: 1, scope: !3099)
!3129 = !DILocation(line: 1664, column: 6, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 1664, column: 6)
!3131 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 1663, column: 6)
!3132 = !DILocation(line: 1664, column: 11, scope: !3130)
!3133 = !DILocation(line: 1664, column: 6, scope: !3131)
!3134 = !DILocation(line: 1665, column: 6, scope: !3135)
!3135 = distinct !DILexicalBlock(scope: !3136, file: !3, line: 1665, column: 6)
!3136 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 1664, column: 21)
!3137 = !DILocation(line: 1665, column: 13, scope: !3135)
!3138 = !DILocation(line: 1665, column: 11, scope: !3135)
!3139 = !DILocation(line: 1665, column: 6, scope: !3136)
!3140 = !DILocation(line: 1665, column: 48, scope: !3135)
!3141 = !DILocation(line: 1665, column: 51, scope: !3135)
!3142 = !DILocation(line: 1665, column: 27, scope: !3135)
!3143 = !DILocation(line: 1665, column: 20, scope: !3135)
!3144 = !DILocation(line: 1666, column: 8, scope: !3136)
!3145 = !DILocation(line: 1666, column: 1, scope: !3136)
!3146 = !DILocation(line: 1668, column: 6, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 1668, column: 6)
!3148 = !DILocation(line: 1668, column: 11, scope: !3147)
!3149 = !DILocation(line: 1668, column: 6, scope: !3131)
!3150 = !DILocation(line: 1668, column: 38, scope: !3147)
!3151 = !DILocation(line: 1668, column: 50, scope: !3147)
!3152 = !DILocation(line: 1668, column: 57, scope: !3147)
!3153 = !DILocation(line: 1668, column: 55, scope: !3147)
!3154 = !DILocation(line: 1668, column: 63, scope: !3147)
!3155 = !DILocation(line: 1668, column: 25, scope: !3147)
!3156 = !DILocation(line: 1668, column: 18, scope: !3147)
!3157 = !DILocation(line: 1669, column: 21, scope: !3131)
!3158 = !DILocation(line: 1669, column: 19, scope: !3131)
!3159 = !DILocation(line: 1669, column: 28, scope: !3131)
!3160 = !DILocation(line: 1669, column: 26, scope: !3131)
!3161 = !DILocation(line: 1669, column: 6, scope: !3131)
!3162 = !DILocation(line: 1670, column: 8, scope: !3131)
!3163 = !DILocation(line: 1670, column: 6, scope: !3131)
!3164 = !DILocation(line: 1671, column: 1, scope: !3131)
!3165 = !DILocation(line: 1673, column: 6, scope: !3018)
!3166 = !DILocation(line: 1674, column: 10, scope: !3018)
!3167 = !DILocation(line: 1674, column: 17, scope: !3018)
!3168 = !DILocation(line: 1674, column: 15, scope: !3018)
!3169 = !DILocation(line: 1674, column: 23, scope: !3018)
!3170 = !DILocation(line: 1674, column: 6, scope: !3018)
!3171 = !DILocation(line: 1675, column: 1, scope: !3018)
!3172 = !DILocation(line: 1676, column: 16, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3018, file: !3, line: 1676, column: 6)
!3174 = !DILocation(line: 1676, column: 21, scope: !3173)
!3175 = !DILocation(line: 1676, column: 6, scope: !3018)
!3176 = !DILocation(line: 1677, column: 8, scope: !3177)
!3177 = distinct !DILexicalBlock(scope: !3173, file: !3, line: 1676, column: 27)
!3178 = !DILocation(line: 1677, column: 15, scope: !3177)
!3179 = !DILocation(line: 1677, column: 13, scope: !3177)
!3180 = !DILocation(line: 1677, column: 6, scope: !3177)
!3181 = !DILocation(line: 1678, column: 1, scope: !3177)
!3182 = !DILocation(line: 1679, column: 1, scope: !3177)
!3183 = !DILocation(line: 1676, column: 23, scope: !3173)
!3184 = !DILocation(line: 1681, column: 29, scope: !3018)
!3185 = !DILocation(line: 1681, column: 36, scope: !3018)
!3186 = !DILocation(line: 1681, column: 42, scope: !3018)
!3187 = !DILocation(line: 1681, column: 8, scope: !3018)
!3188 = !DILocation(line: 1681, column: 1, scope: !3018)
!3189 = !DILocation(line: 1683, column: 1, scope: !3018)
!3190 = distinct !DISubprogram(name: "subFloat32Sigs", scope: !3, file: !3, line: 1695, type: !3019, isLocal: true, isDefinition: true, scopeLine: 1696, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!3191 = !DILocalVariable(name: "a", arg: 1, scope: !3190, file: !3, line: 1695, type: !1109)
!3192 = !DILocation(line: 1695, column: 40, scope: !3190)
!3193 = !DILocalVariable(name: "b", arg: 2, scope: !3190, file: !3, line: 1695, type: !1109)
!3194 = !DILocation(line: 1695, column: 51, scope: !3190)
!3195 = !DILocalVariable(name: "zSign", arg: 3, scope: !3190, file: !3, line: 1695, type: !1241)
!3196 = !DILocation(line: 1695, column: 59, scope: !3190)
!3197 = !DILocalVariable(name: "aExp", scope: !3190, file: !3, line: 1697, type: !60)
!3198 = !DILocation(line: 1697, column: 7, scope: !3190)
!3199 = !DILocalVariable(name: "bExp", scope: !3190, file: !3, line: 1697, type: !60)
!3200 = !DILocation(line: 1697, column: 13, scope: !3190)
!3201 = !DILocalVariable(name: "zExp", scope: !3190, file: !3, line: 1697, type: !60)
!3202 = !DILocation(line: 1697, column: 19, scope: !3190)
!3203 = !DILocalVariable(name: "aSig", scope: !3190, file: !3, line: 1698, type: !27)
!3204 = !DILocation(line: 1698, column: 8, scope: !3190)
!3205 = !DILocalVariable(name: "bSig", scope: !3190, file: !3, line: 1698, type: !27)
!3206 = !DILocation(line: 1698, column: 14, scope: !3190)
!3207 = !DILocalVariable(name: "zSig", scope: !3190, file: !3, line: 1698, type: !27)
!3208 = !DILocation(line: 1698, column: 20, scope: !3190)
!3209 = !DILocalVariable(name: "expDiff", scope: !3190, file: !3, line: 1699, type: !60)
!3210 = !DILocation(line: 1699, column: 7, scope: !3190)
!3211 = !DILocation(line: 1701, column: 28, scope: !3190)
!3212 = !DILocation(line: 1701, column: 8, scope: !3190)
!3213 = !DILocation(line: 1701, column: 6, scope: !3190)
!3214 = !DILocation(line: 1702, column: 27, scope: !3190)
!3215 = !DILocation(line: 1702, column: 8, scope: !3190)
!3216 = !DILocation(line: 1702, column: 6, scope: !3190)
!3217 = !DILocation(line: 1703, column: 28, scope: !3190)
!3218 = !DILocation(line: 1703, column: 8, scope: !3190)
!3219 = !DILocation(line: 1703, column: 6, scope: !3190)
!3220 = !DILocation(line: 1704, column: 27, scope: !3190)
!3221 = !DILocation(line: 1704, column: 8, scope: !3190)
!3222 = !DILocation(line: 1704, column: 6, scope: !3190)
!3223 = !DILocation(line: 1705, column: 11, scope: !3190)
!3224 = !DILocation(line: 1705, column: 18, scope: !3190)
!3225 = !DILocation(line: 1705, column: 16, scope: !3190)
!3226 = !DILocation(line: 1705, column: 9, scope: !3190)
!3227 = !DILocation(line: 1706, column: 6, scope: !3190)
!3228 = !DILocation(line: 1707, column: 6, scope: !3190)
!3229 = !DILocation(line: 1708, column: 10, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1708, column: 6)
!3231 = !DILocation(line: 1708, column: 8, scope: !3230)
!3232 = !DILocation(line: 1708, column: 6, scope: !3190)
!3233 = !DILocation(line: 1708, column: 20, scope: !3230)
!3234 = !DILocation(line: 1709, column: 6, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1709, column: 6)
!3236 = !DILocation(line: 1709, column: 14, scope: !3235)
!3237 = !DILocation(line: 1709, column: 6, scope: !3190)
!3238 = !DILocation(line: 1709, column: 20, scope: !3235)
!3239 = !DILocation(line: 1710, column: 6, scope: !3240)
!3240 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1710, column: 6)
!3241 = !DILocation(line: 1710, column: 11, scope: !3240)
!3242 = !DILocation(line: 1710, column: 6, scope: !3190)
!3243 = !DILocation(line: 1711, column: 6, scope: !3244)
!3244 = distinct !DILexicalBlock(scope: !3245, file: !3, line: 1711, column: 6)
!3245 = distinct !DILexicalBlock(scope: !3240, file: !3, line: 1710, column: 21)
!3246 = !DILocation(line: 1711, column: 13, scope: !3244)
!3247 = !DILocation(line: 1711, column: 11, scope: !3244)
!3248 = !DILocation(line: 1711, column: 6, scope: !3245)
!3249 = !DILocation(line: 1711, column: 48, scope: !3244)
!3250 = !DILocation(line: 1711, column: 51, scope: !3244)
!3251 = !DILocation(line: 1711, column: 27, scope: !3244)
!3252 = !DILocation(line: 1711, column: 20, scope: !3244)
!3253 = !DILocation(line: 1712, column: 1, scope: !3245)
!3254 = !DILocation(line: 1713, column: 1, scope: !3245)
!3255 = !DILocation(line: 1715, column: 6, scope: !3256)
!3256 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1715, column: 6)
!3257 = !DILocation(line: 1715, column: 11, scope: !3256)
!3258 = !DILocation(line: 1715, column: 6, scope: !3190)
!3259 = !DILocation(line: 1716, column: 6, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 1715, column: 18)
!3261 = !DILocation(line: 1717, column: 6, scope: !3260)
!3262 = !DILocation(line: 1718, column: 1, scope: !3260)
!3263 = !DILocation(line: 1719, column: 6, scope: !3264)
!3264 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1719, column: 6)
!3265 = !DILocation(line: 1719, column: 13, scope: !3264)
!3266 = !DILocation(line: 1719, column: 11, scope: !3264)
!3267 = !DILocation(line: 1719, column: 6, scope: !3190)
!3268 = !DILocation(line: 1719, column: 20, scope: !3264)
!3269 = !DILocation(line: 1720, column: 6, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1720, column: 6)
!3271 = !DILocation(line: 1720, column: 13, scope: !3270)
!3272 = !DILocation(line: 1720, column: 11, scope: !3270)
!3273 = !DILocation(line: 1720, column: 6, scope: !3190)
!3274 = !DILocation(line: 1720, column: 20, scope: !3270)
!3275 = !DILocation(line: 1721, column: 21, scope: !3190)
!3276 = !DILocation(line: 1721, column: 41, scope: !3190)
!3277 = !DILocation(line: 1721, column: 8, scope: !3190)
!3278 = !DILocation(line: 1721, column: 1, scope: !3190)
!3279 = !DILocation(line: 1723, column: 6, scope: !3280)
!3280 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1723, column: 6)
!3281 = !DILocation(line: 1723, column: 11, scope: !3280)
!3282 = !DILocation(line: 1723, column: 6, scope: !3190)
!3283 = !DILocation(line: 1724, column: 6, scope: !3284)
!3284 = distinct !DILexicalBlock(scope: !3285, file: !3, line: 1724, column: 6)
!3285 = distinct !DILexicalBlock(scope: !3280, file: !3, line: 1723, column: 21)
!3286 = !DILocation(line: 1724, column: 6, scope: !3285)
!3287 = !DILocation(line: 1724, column: 41, scope: !3284)
!3288 = !DILocation(line: 1724, column: 44, scope: !3284)
!3289 = !DILocation(line: 1724, column: 20, scope: !3284)
!3290 = !DILocation(line: 1724, column: 13, scope: !3284)
!3291 = !DILocation(line: 1725, column: 21, scope: !3285)
!3292 = !DILocation(line: 1725, column: 27, scope: !3285)
!3293 = !DILocation(line: 1725, column: 8, scope: !3285)
!3294 = !DILocation(line: 1725, column: 1, scope: !3285)
!3295 = !DILocation(line: 1727, column: 6, scope: !3296)
!3296 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1727, column: 6)
!3297 = !DILocation(line: 1727, column: 11, scope: !3296)
!3298 = !DILocation(line: 1727, column: 6, scope: !3190)
!3299 = !DILocation(line: 1728, column: 1, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 1727, column: 18)
!3301 = !DILocation(line: 1729, column: 1, scope: !3300)
!3302 = !DILocation(line: 1731, column: 6, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 1730, column: 6)
!3304 = !DILocation(line: 1733, column: 22, scope: !3190)
!3305 = !DILocation(line: 1733, column: 30, scope: !3190)
!3306 = !DILocation(line: 1733, column: 28, scope: !3190)
!3307 = !DILocation(line: 1733, column: 1, scope: !3190)
!3308 = !DILocation(line: 1734, column: 6, scope: !3190)
!3309 = !DILocation(line: 1734, column: 1, scope: !3190)
!3310 = !DILocation(line: 1736, column: 16, scope: !3190)
!3311 = !DILocation(line: 1736, column: 23, scope: !3190)
!3312 = !DILocation(line: 1736, column: 21, scope: !3190)
!3313 = !DILocation(line: 1736, column: 14, scope: !3190)
!3314 = !DILocation(line: 1737, column: 8, scope: !3190)
!3315 = !DILocation(line: 1737, column: 6, scope: !3190)
!3316 = !DILocation(line: 1738, column: 7, scope: !3190)
!3317 = !DILocation(line: 1739, column: 1, scope: !3190)
!3318 = !DILocation(line: 1741, column: 6, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1741, column: 6)
!3320 = !DILocation(line: 1741, column: 11, scope: !3319)
!3321 = !DILocation(line: 1741, column: 6, scope: !3190)
!3322 = !DILocation(line: 1742, column: 6, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !3324, file: !3, line: 1742, column: 6)
!3324 = distinct !DILexicalBlock(scope: !3319, file: !3, line: 1741, column: 21)
!3325 = !DILocation(line: 1742, column: 6, scope: !3324)
!3326 = !DILocation(line: 1742, column: 41, scope: !3323)
!3327 = !DILocation(line: 1742, column: 44, scope: !3323)
!3328 = !DILocation(line: 1742, column: 20, scope: !3323)
!3329 = !DILocation(line: 1742, column: 13, scope: !3323)
!3330 = !DILocation(line: 1743, column: 8, scope: !3324)
!3331 = !DILocation(line: 1743, column: 1, scope: !3324)
!3332 = !DILocation(line: 1745, column: 6, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1745, column: 6)
!3334 = !DILocation(line: 1745, column: 11, scope: !3333)
!3335 = !DILocation(line: 1745, column: 6, scope: !3190)
!3336 = !DILocation(line: 1746, column: 1, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3333, file: !3, line: 1745, column: 18)
!3338 = !DILocation(line: 1747, column: 1, scope: !3337)
!3339 = !DILocation(line: 1749, column: 6, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3333, file: !3, line: 1748, column: 6)
!3341 = !DILocation(line: 1751, column: 22, scope: !3190)
!3342 = !DILocation(line: 1751, column: 28, scope: !3190)
!3343 = !DILocation(line: 1751, column: 1, scope: !3190)
!3344 = !DILocation(line: 1752, column: 6, scope: !3190)
!3345 = !DILocation(line: 1752, column: 1, scope: !3190)
!3346 = !DILocation(line: 1754, column: 16, scope: !3190)
!3347 = !DILocation(line: 1754, column: 23, scope: !3190)
!3348 = !DILocation(line: 1754, column: 21, scope: !3190)
!3349 = !DILocation(line: 1754, column: 14, scope: !3190)
!3350 = !DILocation(line: 1755, column: 8, scope: !3190)
!3351 = !DILocation(line: 1755, column: 6, scope: !3190)
!3352 = !DILocation(line: 1755, column: 1, scope: !3190)
!3353 = !DILocation(line: 1757, column: 1, scope: !3190)
!3354 = !DILocation(line: 1758, column: 38, scope: !3190)
!3355 = !DILocation(line: 1758, column: 45, scope: !3190)
!3356 = !DILocation(line: 1758, column: 51, scope: !3190)
!3357 = !DILocation(line: 1758, column: 8, scope: !3190)
!3358 = !DILocation(line: 1758, column: 1, scope: !3190)
!3359 = !DILocation(line: 1760, column: 1, scope: !3190)
!3360 = distinct !DISubprogram(name: "float32_sub", scope: !3, file: !3, line: 1789, type: !2943, isLocal: false, isDefinition: true, scopeLine: 1790, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!3361 = !DILocalVariable(name: "a", arg: 1, scope: !3360, file: !3, line: 1789, type: !1109)
!3362 = !DILocation(line: 1789, column: 30, scope: !3360)
!3363 = !DILocalVariable(name: "b", arg: 2, scope: !3360, file: !3, line: 1789, type: !1109)
!3364 = !DILocation(line: 1789, column: 41, scope: !3360)
!3365 = !DILocalVariable(name: "aSign", scope: !3360, file: !3, line: 1791, type: !1241)
!3366 = !DILocation(line: 1791, column: 6, scope: !3360)
!3367 = !DILocalVariable(name: "bSign", scope: !3360, file: !3, line: 1791, type: !1241)
!3368 = !DILocation(line: 1791, column: 13, scope: !3360)
!3369 = !DILocation(line: 1793, column: 29, scope: !3360)
!3370 = !DILocation(line: 1793, column: 9, scope: !3360)
!3371 = !DILocation(line: 1793, column: 7, scope: !3360)
!3372 = !DILocation(line: 1794, column: 29, scope: !3360)
!3373 = !DILocation(line: 1794, column: 9, scope: !3360)
!3374 = !DILocation(line: 1794, column: 7, scope: !3360)
!3375 = !DILocation(line: 1795, column: 6, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 1795, column: 6)
!3377 = !DILocation(line: 1795, column: 15, scope: !3376)
!3378 = !DILocation(line: 1795, column: 12, scope: !3376)
!3379 = !DILocation(line: 1795, column: 6, scope: !3360)
!3380 = !DILocation(line: 1796, column: 24, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 1795, column: 23)
!3382 = !DILocation(line: 1796, column: 27, scope: !3381)
!3383 = !DILocation(line: 1796, column: 30, scope: !3381)
!3384 = !DILocation(line: 1796, column: 8, scope: !3381)
!3385 = !DILocation(line: 1796, column: 1, scope: !3381)
!3386 = !DILocation(line: 1799, column: 24, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 1798, column: 6)
!3388 = !DILocation(line: 1799, column: 27, scope: !3387)
!3389 = !DILocation(line: 1799, column: 30, scope: !3387)
!3390 = !DILocation(line: 1799, column: 8, scope: !3387)
!3391 = !DILocation(line: 1799, column: 1, scope: !3387)
!3392 = !DILocation(line: 1802, column: 1, scope: !3360)
!3393 = distinct !DISubprogram(name: "marknan", scope: !3, file: !3, line: 1864, type: !3394, isLocal: false, isDefinition: true, scopeLine: 1864, isOptimized: false, unit: !2, variables: !50)
!3394 = !DISubroutineType(types: !3395)
!3395 = !{null}
!3396 = !DILocation(line: 1864, column: 16, scope: !3393)
!3397 = !DILocation(line: 1864, column: 45, scope: !3393)
!3398 = distinct !DISubprogram(name: "markinf", scope: !3, file: !3, line: 1865, type: !3394, isLocal: false, isDefinition: true, scopeLine: 1865, isOptimized: false, unit: !2, variables: !50)
!3399 = !DILocation(line: 1865, column: 16, scope: !3398)
!3400 = !DILocation(line: 1865, column: 45, scope: !3398)
!3401 = distinct !DISubprogram(name: "markpositive", scope: !3, file: !3, line: 1866, type: !3394, isLocal: false, isDefinition: true, scopeLine: 1866, isOptimized: false, unit: !2, variables: !50)
!3402 = !DILocation(line: 1866, column: 21, scope: !3401)
!3403 = !DILocation(line: 1866, column: 55, scope: !3401)
!3404 = distinct !DISubprogram(name: "marknegative", scope: !3, file: !3, line: 1867, type: !3394, isLocal: false, isDefinition: true, scopeLine: 1867, isOptimized: false, unit: !2, variables: !50)
!3405 = !DILocation(line: 1867, column: 21, scope: !3404)
!3406 = !DILocation(line: 1867, column: 55, scope: !3404)
!3407 = distinct !DISubprogram(name: "markzero", scope: !3, file: !3, line: 1868, type: !3394, isLocal: false, isDefinition: true, scopeLine: 1868, isOptimized: false, unit: !2, variables: !50)
!3408 = !DILocation(line: 1868, column: 17, scope: !3407)
!3409 = !DILocation(line: 1868, column: 47, scope: !3407)
!3410 = distinct !DISubprogram(name: "float32_mul", scope: !3, file: !3, line: 1870, type: !2943, isLocal: false, isDefinition: true, scopeLine: 1871, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!3411 = !DILocalVariable(name: "a", arg: 1, scope: !3410, file: !3, line: 1870, type: !1109)
!3412 = !DILocation(line: 1870, column: 30, scope: !3410)
!3413 = !DILocalVariable(name: "b", arg: 2, scope: !3410, file: !3, line: 1870, type: !1109)
!3414 = !DILocation(line: 1870, column: 41, scope: !3410)
!3415 = !DILocalVariable(name: "aSign", scope: !3410, file: !3, line: 1872, type: !1241)
!3416 = !DILocation(line: 1872, column: 6, scope: !3410)
!3417 = !DILocalVariable(name: "bSign", scope: !3410, file: !3, line: 1872, type: !1241)
!3418 = !DILocation(line: 1872, column: 13, scope: !3410)
!3419 = !DILocalVariable(name: "zSign", scope: !3410, file: !3, line: 1872, type: !1241)
!3420 = !DILocation(line: 1872, column: 20, scope: !3410)
!3421 = !DILocalVariable(name: "aExp", scope: !3410, file: !3, line: 1873, type: !60)
!3422 = !DILocation(line: 1873, column: 7, scope: !3410)
!3423 = !DILocalVariable(name: "bExp", scope: !3410, file: !3, line: 1873, type: !60)
!3424 = !DILocation(line: 1873, column: 13, scope: !3410)
!3425 = !DILocalVariable(name: "zExp", scope: !3410, file: !3, line: 1873, type: !60)
!3426 = !DILocation(line: 1873, column: 19, scope: !3410)
!3427 = !DILocalVariable(name: "aSig", scope: !3410, file: !3, line: 1874, type: !27)
!3428 = !DILocation(line: 1874, column: 8, scope: !3410)
!3429 = !DILocalVariable(name: "bSig", scope: !3410, file: !3, line: 1874, type: !27)
!3430 = !DILocation(line: 1874, column: 14, scope: !3410)
!3431 = !DILocalVariable(name: "zSig64", scope: !3410, file: !3, line: 1875, type: !24)
!3432 = !DILocation(line: 1875, column: 8, scope: !3410)
!3433 = !DILocalVariable(name: "zSig", scope: !3410, file: !3, line: 1876, type: !27)
!3434 = !DILocation(line: 1876, column: 8, scope: !3410)
!3435 = !DILocation(line: 1878, column: 28, scope: !3410)
!3436 = !DILocation(line: 1878, column: 8, scope: !3410)
!3437 = !DILocation(line: 1878, column: 6, scope: !3410)
!3438 = !DILocation(line: 1879, column: 27, scope: !3410)
!3439 = !DILocation(line: 1879, column: 8, scope: !3410)
!3440 = !DILocation(line: 1879, column: 6, scope: !3410)
!3441 = !DILocation(line: 1880, column: 29, scope: !3410)
!3442 = !DILocation(line: 1880, column: 9, scope: !3410)
!3443 = !DILocation(line: 1880, column: 7, scope: !3410)
!3444 = !DILocation(line: 1881, column: 28, scope: !3410)
!3445 = !DILocation(line: 1881, column: 8, scope: !3410)
!3446 = !DILocation(line: 1881, column: 6, scope: !3410)
!3447 = !DILocation(line: 1882, column: 27, scope: !3410)
!3448 = !DILocation(line: 1882, column: 8, scope: !3410)
!3449 = !DILocation(line: 1882, column: 6, scope: !3410)
!3450 = !DILocation(line: 1883, column: 29, scope: !3410)
!3451 = !DILocation(line: 1883, column: 9, scope: !3410)
!3452 = !DILocation(line: 1883, column: 7, scope: !3410)
!3453 = !DILocation(line: 1884, column: 9, scope: !3410)
!3454 = !DILocation(line: 1884, column: 17, scope: !3410)
!3455 = !DILocation(line: 1884, column: 15, scope: !3410)
!3456 = !DILocation(line: 1884, column: 7, scope: !3410)
!3457 = !DILocation(line: 1885, column: 6, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1885, column: 6)
!3459 = !DILocation(line: 1885, column: 11, scope: !3458)
!3460 = !DILocation(line: 1885, column: 6, scope: !3410)
!3461 = !DILocation(line: 1886, column: 5, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3463, file: !3, line: 1886, column: 5)
!3463 = distinct !DILexicalBlock(scope: !3458, file: !3, line: 1885, column: 21)
!3464 = !DILocation(line: 1886, column: 5, scope: !3463)
!3465 = !DILocation(line: 1887, column: 1, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3462, file: !3, line: 1886, column: 10)
!3467 = !DILocation(line: 1888, column: 28, scope: !3466)
!3468 = !DILocation(line: 1888, column: 30, scope: !3466)
!3469 = !DILocation(line: 1888, column: 8, scope: !3466)
!3470 = !DILocation(line: 1888, column: 1, scope: !3466)
!3471 = !DILocation(line: 1889, column: 11, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3462, file: !3, line: 1889, column: 11)
!3473 = !DILocation(line: 1889, column: 16, scope: !3472)
!3474 = !DILocation(line: 1889, column: 11, scope: !3462)
!3475 = !DILocation(line: 1890, column: 5, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3477, file: !3, line: 1890, column: 5)
!3477 = distinct !DILexicalBlock(scope: !3472, file: !3, line: 1889, column: 24)
!3478 = !DILocation(line: 1890, column: 5, scope: !3477)
!3479 = !DILocation(line: 1891, column: 1, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3476, file: !3, line: 1890, column: 11)
!3481 = !DILocation(line: 1892, column: 28, scope: !3480)
!3482 = !DILocation(line: 1892, column: 30, scope: !3480)
!3483 = !DILocation(line: 1892, column: 8, scope: !3480)
!3484 = !DILocation(line: 1892, column: 1, scope: !3480)
!3485 = !DILocation(line: 1894, column: 1, scope: !3477)
!3486 = !DILocation(line: 1895, column: 8, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3463, file: !3, line: 1895, column: 6)
!3488 = !DILocation(line: 1895, column: 15, scope: !3487)
!3489 = !DILocation(line: 1895, column: 13, scope: !3487)
!3490 = !DILocation(line: 1895, column: 22, scope: !3487)
!3491 = !DILocation(line: 1895, column: 6, scope: !3463)
!3492 = !DILocation(line: 1896, column: 1, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 1895, column: 29)
!3494 = !DILocation(line: 1897, column: 1, scope: !3493)
!3495 = !DILocation(line: 1898, column: 1, scope: !3493)
!3496 = !DILocation(line: 1900, column: 4, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3463, file: !3, line: 1900, column: 4)
!3498 = !DILocation(line: 1900, column: 10, scope: !3497)
!3499 = !DILocation(line: 1900, column: 4, scope: !3463)
!3500 = !DILocation(line: 1901, column: 1, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 1900, column: 14)
!3502 = !DILocation(line: 1902, column: 21, scope: !3501)
!3503 = !DILocation(line: 1902, column: 8, scope: !3501)
!3504 = !DILocation(line: 1902, column: 1, scope: !3501)
!3505 = !DILocation(line: 1903, column: 11, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 1903, column: 11)
!3507 = !DILocation(line: 1903, column: 17, scope: !3506)
!3508 = !DILocation(line: 1903, column: 11, scope: !3497)
!3509 = !DILocation(line: 1904, column: 1, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1903, column: 22)
!3511 = !DILocation(line: 1905, column: 21, scope: !3510)
!3512 = !DILocation(line: 1905, column: 8, scope: !3510)
!3513 = !DILocation(line: 1905, column: 1, scope: !3510)
!3514 = !DILocation(line: 1907, column: 1, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1906, column: 6)
!3516 = !DILocation(line: 1908, column: 21, scope: !3515)
!3517 = !DILocation(line: 1908, column: 8, scope: !3515)
!3518 = !DILocation(line: 1908, column: 1, scope: !3515)
!3519 = !DILocation(line: 1911, column: 6, scope: !3520)
!3520 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1911, column: 6)
!3521 = !DILocation(line: 1911, column: 11, scope: !3520)
!3522 = !DILocation(line: 1911, column: 6, scope: !3410)
!3523 = !DILocation(line: 1912, column: 6, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 1912, column: 6)
!3525 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 1911, column: 21)
!3526 = !DILocation(line: 1912, column: 6, scope: !3525)
!3527 = !DILocation(line: 1913, column: 1, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 1912, column: 12)
!3529 = !DILocation(line: 1914, column: 29, scope: !3528)
!3530 = !DILocation(line: 1914, column: 32, scope: !3528)
!3531 = !DILocation(line: 1914, column: 8, scope: !3528)
!3532 = !DILocation(line: 1914, column: 1, scope: !3528)
!3533 = !DILocation(line: 1916, column: 8, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 1916, column: 6)
!3535 = !DILocation(line: 1916, column: 15, scope: !3534)
!3536 = !DILocation(line: 1916, column: 13, scope: !3534)
!3537 = !DILocation(line: 1916, column: 22, scope: !3534)
!3538 = !DILocation(line: 1916, column: 6, scope: !3525)
!3539 = !DILocation(line: 1917, column: 1, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3534, file: !3, line: 1916, column: 29)
!3541 = !DILocation(line: 1918, column: 1, scope: !3540)
!3542 = !DILocation(line: 1919, column: 1, scope: !3540)
!3543 = !DILocation(line: 1921, column: 4, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 1921, column: 4)
!3545 = !DILocation(line: 1921, column: 10, scope: !3544)
!3546 = !DILocation(line: 1921, column: 4, scope: !3525)
!3547 = !DILocation(line: 1922, column: 1, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 1921, column: 14)
!3549 = !DILocation(line: 1923, column: 21, scope: !3548)
!3550 = !DILocation(line: 1923, column: 8, scope: !3548)
!3551 = !DILocation(line: 1923, column: 1, scope: !3548)
!3552 = !DILocation(line: 1924, column: 11, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 1924, column: 11)
!3554 = !DILocation(line: 1924, column: 17, scope: !3553)
!3555 = !DILocation(line: 1924, column: 11, scope: !3544)
!3556 = !DILocation(line: 1925, column: 1, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 1924, column: 22)
!3558 = !DILocation(line: 1926, column: 21, scope: !3557)
!3559 = !DILocation(line: 1926, column: 8, scope: !3557)
!3560 = !DILocation(line: 1926, column: 1, scope: !3557)
!3561 = !DILocation(line: 1928, column: 1, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 1927, column: 6)
!3563 = !DILocation(line: 1929, column: 21, scope: !3562)
!3564 = !DILocation(line: 1929, column: 8, scope: !3562)
!3565 = !DILocation(line: 1929, column: 1, scope: !3562)
!3566 = !DILocation(line: 1933, column: 6, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1933, column: 6)
!3568 = !DILocation(line: 1933, column: 11, scope: !3567)
!3569 = !DILocation(line: 1933, column: 6, scope: !3410)
!3570 = !DILocation(line: 1934, column: 6, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 1934, column: 6)
!3572 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 1933, column: 18)
!3573 = !DILocation(line: 1934, column: 11, scope: !3571)
!3574 = !DILocation(line: 1934, column: 6, scope: !3572)
!3575 = !DILocation(line: 1935, column: 4, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3577, file: !3, line: 1935, column: 4)
!3577 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 1934, column: 17)
!3578 = !DILocation(line: 1935, column: 10, scope: !3576)
!3579 = !DILocation(line: 1935, column: 4, scope: !3577)
!3580 = !DILocation(line: 1936, column: 1, scope: !3581)
!3581 = distinct !DILexicalBlock(scope: !3576, file: !3, line: 1935, column: 14)
!3582 = !DILocation(line: 1937, column: 21, scope: !3581)
!3583 = !DILocation(line: 1937, column: 8, scope: !3581)
!3584 = !DILocation(line: 1937, column: 1, scope: !3581)
!3585 = !DILocation(line: 1938, column: 11, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3576, file: !3, line: 1938, column: 11)
!3587 = !DILocation(line: 1938, column: 17, scope: !3586)
!3588 = !DILocation(line: 1938, column: 11, scope: !3576)
!3589 = !DILocation(line: 1939, column: 1, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3586, file: !3, line: 1938, column: 22)
!3591 = !DILocation(line: 1940, column: 21, scope: !3590)
!3592 = !DILocation(line: 1940, column: 8, scope: !3590)
!3593 = !DILocation(line: 1940, column: 1, scope: !3590)
!3594 = !DILocation(line: 1942, column: 1, scope: !3595)
!3595 = distinct !DILexicalBlock(scope: !3586, file: !3, line: 1941, column: 6)
!3596 = !DILocation(line: 1943, column: 21, scope: !3595)
!3597 = !DILocation(line: 1943, column: 8, scope: !3595)
!3598 = !DILocation(line: 1943, column: 1, scope: !3595)
!3599 = !DILocation(line: 1946, column: 28, scope: !3572)
!3600 = !DILocation(line: 1946, column: 1, scope: !3572)
!3601 = !DILocation(line: 1947, column: 1, scope: !3572)
!3602 = !DILocation(line: 1948, column: 6, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1948, column: 6)
!3604 = !DILocation(line: 1948, column: 11, scope: !3603)
!3605 = !DILocation(line: 1948, column: 6, scope: !3410)
!3606 = !DILocation(line: 1950, column: 6, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3608, file: !3, line: 1950, column: 6)
!3608 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 1948, column: 18)
!3609 = !DILocation(line: 1950, column: 11, scope: !3607)
!3610 = !DILocation(line: 1950, column: 6, scope: !3608)
!3611 = !DILocation(line: 1951, column: 4, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 1951, column: 4)
!3613 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 1950, column: 17)
!3614 = !DILocation(line: 1951, column: 10, scope: !3612)
!3615 = !DILocation(line: 1951, column: 4, scope: !3613)
!3616 = !DILocation(line: 1952, column: 1, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3612, file: !3, line: 1951, column: 14)
!3618 = !DILocation(line: 1953, column: 21, scope: !3617)
!3619 = !DILocation(line: 1953, column: 8, scope: !3617)
!3620 = !DILocation(line: 1953, column: 1, scope: !3617)
!3621 = !DILocation(line: 1954, column: 11, scope: !3622)
!3622 = distinct !DILexicalBlock(scope: !3612, file: !3, line: 1954, column: 11)
!3623 = !DILocation(line: 1954, column: 17, scope: !3622)
!3624 = !DILocation(line: 1954, column: 11, scope: !3612)
!3625 = !DILocation(line: 1955, column: 1, scope: !3626)
!3626 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 1954, column: 22)
!3627 = !DILocation(line: 1956, column: 21, scope: !3626)
!3628 = !DILocation(line: 1956, column: 8, scope: !3626)
!3629 = !DILocation(line: 1956, column: 1, scope: !3626)
!3630 = !DILocation(line: 1958, column: 1, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 1957, column: 6)
!3632 = !DILocation(line: 1959, column: 21, scope: !3631)
!3633 = !DILocation(line: 1959, column: 8, scope: !3631)
!3634 = !DILocation(line: 1959, column: 1, scope: !3631)
!3635 = !DILocation(line: 1962, column: 28, scope: !3608)
!3636 = !DILocation(line: 1962, column: 1, scope: !3608)
!3637 = !DILocation(line: 1963, column: 1, scope: !3608)
!3638 = !DILocation(line: 1964, column: 8, scope: !3410)
!3639 = !DILocation(line: 1964, column: 15, scope: !3410)
!3640 = !DILocation(line: 1964, column: 13, scope: !3410)
!3641 = !DILocation(line: 1964, column: 20, scope: !3410)
!3642 = !DILocation(line: 1964, column: 6, scope: !3410)
!3643 = !DILocation(line: 1965, column: 10, scope: !3410)
!3644 = !DILocation(line: 1965, column: 15, scope: !3410)
!3645 = !DILocation(line: 1965, column: 29, scope: !3410)
!3646 = !DILocation(line: 1965, column: 6, scope: !3410)
!3647 = !DILocation(line: 1966, column: 10, scope: !3410)
!3648 = !DILocation(line: 1966, column: 15, scope: !3410)
!3649 = !DILocation(line: 1966, column: 29, scope: !3410)
!3650 = !DILocation(line: 1966, column: 6, scope: !3410)
!3651 = !DILocation(line: 1967, column: 33, scope: !3410)
!3652 = !DILocation(line: 1967, column: 24, scope: !3410)
!3653 = !DILocation(line: 1967, column: 42, scope: !3410)
!3654 = !DILocation(line: 1967, column: 40, scope: !3410)
!3655 = !DILocation(line: 1967, column: 1, scope: !3410)
!3656 = !DILocation(line: 1968, column: 8, scope: !3410)
!3657 = !DILocation(line: 1968, column: 6, scope: !3410)
!3658 = !DILocation(line: 1969, column: 23, scope: !3659)
!3659 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1969, column: 6)
!3660 = !DILocation(line: 1969, column: 27, scope: !3659)
!3661 = !DILocation(line: 1969, column: 8, scope: !3659)
!3662 = !DILocation(line: 1969, column: 6, scope: !3410)
!3663 = !DILocation(line: 1970, column: 6, scope: !3664)
!3664 = distinct !DILexicalBlock(scope: !3659, file: !3, line: 1969, column: 35)
!3665 = !DILocation(line: 1971, column: 1, scope: !3664)
!3666 = !DILocation(line: 1972, column: 1, scope: !3664)
!3667 = !DILocation(line: 1973, column: 4, scope: !3668)
!3668 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1973, column: 4)
!3669 = !DILocation(line: 1973, column: 10, scope: !3668)
!3670 = !DILocation(line: 1973, column: 4, scope: !3410)
!3671 = !DILocation(line: 1974, column: 1, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3668, file: !3, line: 1973, column: 14)
!3673 = !DILocation(line: 1975, column: 29, scope: !3672)
!3674 = !DILocation(line: 1975, column: 36, scope: !3672)
!3675 = !DILocation(line: 1975, column: 42, scope: !3672)
!3676 = !DILocation(line: 1975, column: 8, scope: !3672)
!3677 = !DILocation(line: 1975, column: 1, scope: !3672)
!3678 = !DILocation(line: 1976, column: 11, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !3668, file: !3, line: 1976, column: 11)
!3680 = !DILocation(line: 1976, column: 17, scope: !3679)
!3681 = !DILocation(line: 1976, column: 11, scope: !3668)
!3682 = !DILocation(line: 1977, column: 1, scope: !3683)
!3683 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 1976, column: 22)
!3684 = !DILocation(line: 1978, column: 29, scope: !3683)
!3685 = !DILocation(line: 1978, column: 36, scope: !3683)
!3686 = !DILocation(line: 1978, column: 42, scope: !3683)
!3687 = !DILocation(line: 1978, column: 8, scope: !3683)
!3688 = !DILocation(line: 1978, column: 1, scope: !3683)
!3689 = !DILocation(line: 1980, column: 1, scope: !3690)
!3690 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 1979, column: 6)
!3691 = !DILocation(line: 1981, column: 29, scope: !3690)
!3692 = !DILocation(line: 1981, column: 36, scope: !3690)
!3693 = !DILocation(line: 1981, column: 42, scope: !3690)
!3694 = !DILocation(line: 1981, column: 8, scope: !3690)
!3695 = !DILocation(line: 1981, column: 1, scope: !3690)
!3696 = !DILocation(line: 1983, column: 1, scope: !3410)
!3697 = distinct !DISubprogram(name: "float32_div", scope: !3, file: !3, line: 1993, type: !2943, isLocal: false, isDefinition: true, scopeLine: 1994, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!3698 = !DILocalVariable(name: "a", arg: 1, scope: !3697, file: !3, line: 1993, type: !1109)
!3699 = !DILocation(line: 1993, column: 30, scope: !3697)
!3700 = !DILocalVariable(name: "b", arg: 2, scope: !3697, file: !3, line: 1993, type: !1109)
!3701 = !DILocation(line: 1993, column: 41, scope: !3697)
!3702 = !DILocalVariable(name: "aSign", scope: !3697, file: !3, line: 1995, type: !1241)
!3703 = !DILocation(line: 1995, column: 6, scope: !3697)
!3704 = !DILocalVariable(name: "bSign", scope: !3697, file: !3, line: 1995, type: !1241)
!3705 = !DILocation(line: 1995, column: 13, scope: !3697)
!3706 = !DILocalVariable(name: "zSign", scope: !3697, file: !3, line: 1995, type: !1241)
!3707 = !DILocation(line: 1995, column: 20, scope: !3697)
!3708 = !DILocalVariable(name: "aExp", scope: !3697, file: !3, line: 1996, type: !60)
!3709 = !DILocation(line: 1996, column: 7, scope: !3697)
!3710 = !DILocalVariable(name: "bExp", scope: !3697, file: !3, line: 1996, type: !60)
!3711 = !DILocation(line: 1996, column: 13, scope: !3697)
!3712 = !DILocalVariable(name: "zExp", scope: !3697, file: !3, line: 1996, type: !60)
!3713 = !DILocation(line: 1996, column: 19, scope: !3697)
!3714 = !DILocalVariable(name: "aSig", scope: !3697, file: !3, line: 1997, type: !27)
!3715 = !DILocation(line: 1997, column: 8, scope: !3697)
!3716 = !DILocalVariable(name: "bSig", scope: !3697, file: !3, line: 1997, type: !27)
!3717 = !DILocation(line: 1997, column: 14, scope: !3697)
!3718 = !DILocalVariable(name: "zSig", scope: !3697, file: !3, line: 1997, type: !27)
!3719 = !DILocation(line: 1997, column: 20, scope: !3697)
!3720 = !DILocation(line: 1999, column: 28, scope: !3697)
!3721 = !DILocation(line: 1999, column: 8, scope: !3697)
!3722 = !DILocation(line: 1999, column: 6, scope: !3697)
!3723 = !DILocation(line: 2000, column: 27, scope: !3697)
!3724 = !DILocation(line: 2000, column: 8, scope: !3697)
!3725 = !DILocation(line: 2000, column: 6, scope: !3697)
!3726 = !DILocation(line: 2001, column: 29, scope: !3697)
!3727 = !DILocation(line: 2001, column: 9, scope: !3697)
!3728 = !DILocation(line: 2001, column: 7, scope: !3697)
!3729 = !DILocation(line: 2002, column: 28, scope: !3697)
!3730 = !DILocation(line: 2002, column: 8, scope: !3697)
!3731 = !DILocation(line: 2002, column: 6, scope: !3697)
!3732 = !DILocation(line: 2003, column: 27, scope: !3697)
!3733 = !DILocation(line: 2003, column: 8, scope: !3697)
!3734 = !DILocation(line: 2003, column: 6, scope: !3697)
!3735 = !DILocation(line: 2004, column: 29, scope: !3697)
!3736 = !DILocation(line: 2004, column: 9, scope: !3697)
!3737 = !DILocation(line: 2004, column: 7, scope: !3697)
!3738 = !DILocation(line: 2005, column: 9, scope: !3697)
!3739 = !DILocation(line: 2005, column: 17, scope: !3697)
!3740 = !DILocation(line: 2005, column: 15, scope: !3697)
!3741 = !DILocation(line: 2005, column: 7, scope: !3697)
!3742 = !DILocation(line: 2006, column: 6, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 2006, column: 6)
!3744 = !DILocation(line: 2006, column: 11, scope: !3743)
!3745 = !DILocation(line: 2006, column: 6, scope: !3697)
!3746 = !DILocation(line: 2007, column: 6, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 2007, column: 6)
!3748 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 2006, column: 21)
!3749 = !DILocation(line: 2007, column: 6, scope: !3748)
!3750 = !DILocation(line: 2007, column: 41, scope: !3747)
!3751 = !DILocation(line: 2007, column: 44, scope: !3747)
!3752 = !DILocation(line: 2007, column: 20, scope: !3747)
!3753 = !DILocation(line: 2007, column: 13, scope: !3747)
!3754 = !DILocation(line: 2008, column: 6, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 2008, column: 6)
!3756 = !DILocation(line: 2008, column: 11, scope: !3755)
!3757 = !DILocation(line: 2008, column: 6, scope: !3748)
!3758 = !DILocation(line: 2009, column: 6, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 2009, column: 6)
!3760 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 2008, column: 21)
!3761 = !DILocation(line: 2009, column: 6, scope: !3760)
!3762 = !DILocation(line: 2009, column: 41, scope: !3759)
!3763 = !DILocation(line: 2009, column: 44, scope: !3759)
!3764 = !DILocation(line: 2009, column: 20, scope: !3759)
!3765 = !DILocation(line: 2009, column: 13, scope: !3759)
!3766 = !DILocation(line: 2010, column: 1, scope: !3760)
!3767 = !DILocation(line: 2011, column: 1, scope: !3760)
!3768 = !DILocation(line: 2013, column: 21, scope: !3748)
!3769 = !DILocation(line: 2013, column: 8, scope: !3748)
!3770 = !DILocation(line: 2013, column: 1, scope: !3748)
!3771 = !DILocation(line: 2015, column: 6, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 2015, column: 6)
!3773 = !DILocation(line: 2015, column: 11, scope: !3772)
!3774 = !DILocation(line: 2015, column: 6, scope: !3697)
!3775 = !DILocation(line: 2016, column: 6, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 2016, column: 6)
!3777 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 2015, column: 21)
!3778 = !DILocation(line: 2016, column: 6, scope: !3777)
!3779 = !DILocation(line: 2016, column: 41, scope: !3776)
!3780 = !DILocation(line: 2016, column: 44, scope: !3776)
!3781 = !DILocation(line: 2016, column: 20, scope: !3776)
!3782 = !DILocation(line: 2016, column: 13, scope: !3776)
!3783 = !DILocation(line: 2017, column: 21, scope: !3777)
!3784 = !DILocation(line: 2017, column: 8, scope: !3777)
!3785 = !DILocation(line: 2017, column: 1, scope: !3777)
!3786 = !DILocation(line: 2019, column: 6, scope: !3787)
!3787 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 2019, column: 6)
!3788 = !DILocation(line: 2019, column: 11, scope: !3787)
!3789 = !DILocation(line: 2019, column: 6, scope: !3697)
!3790 = !DILocation(line: 2020, column: 6, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3792, file: !3, line: 2020, column: 6)
!3792 = distinct !DILexicalBlock(scope: !3787, file: !3, line: 2019, column: 18)
!3793 = !DILocation(line: 2020, column: 11, scope: !3791)
!3794 = !DILocation(line: 2020, column: 6, scope: !3792)
!3795 = !DILocation(line: 2021, column: 8, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3797, file: !3, line: 2021, column: 6)
!3797 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 2020, column: 18)
!3798 = !DILocation(line: 2021, column: 15, scope: !3796)
!3799 = !DILocation(line: 2021, column: 13, scope: !3796)
!3800 = !DILocation(line: 2021, column: 22, scope: !3796)
!3801 = !DILocation(line: 2021, column: 6, scope: !3797)
!3802 = !DILocation(line: 2022, column: 1, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 2021, column: 29)
!3804 = !DILocation(line: 2023, column: 1, scope: !3803)
!3805 = !DILocation(line: 2025, column: 1, scope: !3797)
!3806 = !DILocation(line: 2026, column: 21, scope: !3797)
!3807 = !DILocation(line: 2026, column: 8, scope: !3797)
!3808 = !DILocation(line: 2026, column: 1, scope: !3797)
!3809 = !DILocation(line: 2028, column: 28, scope: !3792)
!3810 = !DILocation(line: 2028, column: 1, scope: !3792)
!3811 = !DILocation(line: 2029, column: 1, scope: !3792)
!3812 = !DILocation(line: 2030, column: 6, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 2030, column: 6)
!3814 = !DILocation(line: 2030, column: 11, scope: !3813)
!3815 = !DILocation(line: 2030, column: 6, scope: !3697)
!3816 = !DILocation(line: 2031, column: 6, scope: !3817)
!3817 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 2031, column: 6)
!3818 = distinct !DILexicalBlock(scope: !3813, file: !3, line: 2030, column: 18)
!3819 = !DILocation(line: 2031, column: 11, scope: !3817)
!3820 = !DILocation(line: 2031, column: 6, scope: !3818)
!3821 = !DILocation(line: 2031, column: 38, scope: !3817)
!3822 = !DILocation(line: 2031, column: 25, scope: !3817)
!3823 = !DILocation(line: 2031, column: 18, scope: !3817)
!3824 = !DILocation(line: 2032, column: 28, scope: !3818)
!3825 = !DILocation(line: 2032, column: 1, scope: !3818)
!3826 = !DILocation(line: 2033, column: 1, scope: !3818)
!3827 = !DILocation(line: 2034, column: 8, scope: !3697)
!3828 = !DILocation(line: 2034, column: 15, scope: !3697)
!3829 = !DILocation(line: 2034, column: 13, scope: !3697)
!3830 = !DILocation(line: 2034, column: 20, scope: !3697)
!3831 = !DILocation(line: 2034, column: 6, scope: !3697)
!3832 = !DILocation(line: 2035, column: 10, scope: !3697)
!3833 = !DILocation(line: 2035, column: 15, scope: !3697)
!3834 = !DILocation(line: 2035, column: 29, scope: !3697)
!3835 = !DILocation(line: 2035, column: 6, scope: !3697)
!3836 = !DILocation(line: 2036, column: 10, scope: !3697)
!3837 = !DILocation(line: 2036, column: 15, scope: !3697)
!3838 = !DILocation(line: 2036, column: 29, scope: !3697)
!3839 = !DILocation(line: 2036, column: 6, scope: !3697)
!3840 = !DILocation(line: 2037, column: 6, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 2037, column: 6)
!3842 = !DILocation(line: 2037, column: 16, scope: !3841)
!3843 = !DILocation(line: 2037, column: 23, scope: !3841)
!3844 = !DILocation(line: 2037, column: 21, scope: !3841)
!3845 = !DILocation(line: 2037, column: 11, scope: !3841)
!3846 = !DILocation(line: 2037, column: 6, scope: !3697)
!3847 = !DILocation(line: 2038, column: 6, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3841, file: !3, line: 2037, column: 32)
!3849 = !DILocation(line: 2039, column: 1, scope: !3848)
!3850 = !DILocation(line: 2040, column: 1, scope: !3848)
!3851 = !DILocation(line: 2041, column: 21, scope: !3697)
!3852 = !DILocation(line: 2041, column: 12, scope: !3697)
!3853 = !DILocation(line: 2041, column: 27, scope: !3697)
!3854 = !DILocation(line: 2041, column: 36, scope: !3697)
!3855 = !DILocation(line: 2041, column: 34, scope: !3697)
!3856 = !DILocation(line: 2041, column: 8, scope: !3697)
!3857 = !DILocation(line: 2041, column: 6, scope: !3697)
!3858 = !DILocation(line: 2042, column: 8, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 2042, column: 6)
!3860 = !DILocation(line: 2042, column: 13, scope: !3859)
!3861 = !DILocation(line: 2042, column: 22, scope: !3859)
!3862 = !DILocation(line: 2042, column: 6, scope: !3697)
!3863 = !DILocation(line: 2043, column: 20, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3859, file: !3, line: 2042, column: 29)
!3865 = !DILocation(line: 2043, column: 11, scope: !3864)
!3866 = !DILocation(line: 2043, column: 27, scope: !3864)
!3867 = !DILocation(line: 2043, column: 25, scope: !3864)
!3868 = !DILocation(line: 2043, column: 46, scope: !3864)
!3869 = !DILocation(line: 2043, column: 37, scope: !3864)
!3870 = !DILocation(line: 2043, column: 52, scope: !3864)
!3871 = !DILocation(line: 2043, column: 32, scope: !3864)
!3872 = !DILocation(line: 2043, column: 6, scope: !3864)
!3873 = !DILocation(line: 2044, column: 1, scope: !3864)
!3874 = !DILocation(line: 2045, column: 29, scope: !3697)
!3875 = !DILocation(line: 2045, column: 36, scope: !3697)
!3876 = !DILocation(line: 2045, column: 42, scope: !3697)
!3877 = !DILocation(line: 2045, column: 8, scope: !3697)
!3878 = !DILocation(line: 2045, column: 1, scope: !3697)
!3879 = !DILocation(line: 2047, column: 1, scope: !3697)
!3880 = distinct !DISubprogram(name: "float32_rem", scope: !3, file: !3, line: 2055, type: !2943, isLocal: false, isDefinition: true, scopeLine: 2056, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!3881 = !DILocalVariable(name: "a", arg: 1, scope: !3880, file: !3, line: 2055, type: !1109)
!3882 = !DILocation(line: 2055, column: 30, scope: !3880)
!3883 = !DILocalVariable(name: "b", arg: 2, scope: !3880, file: !3, line: 2055, type: !1109)
!3884 = !DILocation(line: 2055, column: 41, scope: !3880)
!3885 = !DILocalVariable(name: "aSign", scope: !3880, file: !3, line: 2057, type: !1241)
!3886 = !DILocation(line: 2057, column: 6, scope: !3880)
!3887 = !DILocalVariable(name: "bSign", scope: !3880, file: !3, line: 2057, type: !1241)
!3888 = !DILocation(line: 2057, column: 13, scope: !3880)
!3889 = !DILocalVariable(name: "zSign", scope: !3880, file: !3, line: 2057, type: !1241)
!3890 = !DILocation(line: 2057, column: 20, scope: !3880)
!3891 = !DILocalVariable(name: "aExp", scope: !3880, file: !3, line: 2058, type: !60)
!3892 = !DILocation(line: 2058, column: 7, scope: !3880)
!3893 = !DILocalVariable(name: "bExp", scope: !3880, file: !3, line: 2058, type: !60)
!3894 = !DILocation(line: 2058, column: 13, scope: !3880)
!3895 = !DILocalVariable(name: "expDiff", scope: !3880, file: !3, line: 2058, type: !60)
!3896 = !DILocation(line: 2058, column: 19, scope: !3880)
!3897 = !DILocalVariable(name: "aSig", scope: !3880, file: !3, line: 2059, type: !27)
!3898 = !DILocation(line: 2059, column: 8, scope: !3880)
!3899 = !DILocalVariable(name: "bSig", scope: !3880, file: !3, line: 2059, type: !27)
!3900 = !DILocation(line: 2059, column: 14, scope: !3880)
!3901 = !DILocalVariable(name: "q", scope: !3880, file: !3, line: 2060, type: !27)
!3902 = !DILocation(line: 2060, column: 8, scope: !3880)
!3903 = !DILocalVariable(name: "aSig64", scope: !3880, file: !3, line: 2061, type: !24)
!3904 = !DILocation(line: 2061, column: 8, scope: !3880)
!3905 = !DILocalVariable(name: "bSig64", scope: !3880, file: !3, line: 2061, type: !24)
!3906 = !DILocation(line: 2061, column: 16, scope: !3880)
!3907 = !DILocalVariable(name: "q64", scope: !3880, file: !3, line: 2061, type: !24)
!3908 = !DILocation(line: 2061, column: 24, scope: !3880)
!3909 = !DILocalVariable(name: "alternateASig", scope: !3880, file: !3, line: 2062, type: !27)
!3910 = !DILocation(line: 2062, column: 8, scope: !3880)
!3911 = !DILocalVariable(name: "sigMean", scope: !3880, file: !3, line: 2063, type: !31)
!3912 = !DILocation(line: 2063, column: 9, scope: !3880)
!3913 = !DILocation(line: 2065, column: 28, scope: !3880)
!3914 = !DILocation(line: 2065, column: 8, scope: !3880)
!3915 = !DILocation(line: 2065, column: 6, scope: !3880)
!3916 = !DILocation(line: 2066, column: 27, scope: !3880)
!3917 = !DILocation(line: 2066, column: 8, scope: !3880)
!3918 = !DILocation(line: 2066, column: 6, scope: !3880)
!3919 = !DILocation(line: 2067, column: 29, scope: !3880)
!3920 = !DILocation(line: 2067, column: 9, scope: !3880)
!3921 = !DILocation(line: 2067, column: 7, scope: !3880)
!3922 = !DILocation(line: 2068, column: 28, scope: !3880)
!3923 = !DILocation(line: 2068, column: 8, scope: !3880)
!3924 = !DILocation(line: 2068, column: 6, scope: !3880)
!3925 = !DILocation(line: 2069, column: 27, scope: !3880)
!3926 = !DILocation(line: 2069, column: 8, scope: !3880)
!3927 = !DILocation(line: 2069, column: 6, scope: !3880)
!3928 = !DILocation(line: 2070, column: 29, scope: !3880)
!3929 = !DILocation(line: 2070, column: 9, scope: !3880)
!3930 = !DILocation(line: 2070, column: 7, scope: !3880)
!3931 = !DILocation(line: 2071, column: 6, scope: !3932)
!3932 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2071, column: 6)
!3933 = !DILocation(line: 2071, column: 11, scope: !3932)
!3934 = !DILocation(line: 2071, column: 6, scope: !3880)
!3935 = !DILocation(line: 2072, column: 6, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 2072, column: 6)
!3937 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 2071, column: 21)
!3938 = !DILocation(line: 2072, column: 11, scope: !3936)
!3939 = !DILocation(line: 2072, column: 18, scope: !3936)
!3940 = !DILocation(line: 2072, column: 23, scope: !3936)
!3941 = !DILocation(line: 2072, column: 33, scope: !3936)
!3942 = !DILocation(line: 2072, column: 36, scope: !3936)
!3943 = !DILocation(line: 2072, column: 6, scope: !3937)
!3944 = !DILocation(line: 2073, column: 29, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3936, file: !3, line: 2072, column: 45)
!3946 = !DILocation(line: 2073, column: 32, scope: !3945)
!3947 = !DILocation(line: 2073, column: 8, scope: !3945)
!3948 = !DILocation(line: 2073, column: 1, scope: !3945)
!3949 = !DILocation(line: 2075, column: 1, scope: !3937)
!3950 = !DILocation(line: 2076, column: 1, scope: !3937)
!3951 = !DILocation(line: 2078, column: 6, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2078, column: 6)
!3953 = !DILocation(line: 2078, column: 11, scope: !3952)
!3954 = !DILocation(line: 2078, column: 6, scope: !3880)
!3955 = !DILocation(line: 2079, column: 6, scope: !3956)
!3956 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 2079, column: 6)
!3957 = distinct !DILexicalBlock(scope: !3952, file: !3, line: 2078, column: 21)
!3958 = !DILocation(line: 2079, column: 6, scope: !3957)
!3959 = !DILocation(line: 2079, column: 41, scope: !3956)
!3960 = !DILocation(line: 2079, column: 44, scope: !3956)
!3961 = !DILocation(line: 2079, column: 20, scope: !3956)
!3962 = !DILocation(line: 2079, column: 13, scope: !3956)
!3963 = !DILocation(line: 2080, column: 8, scope: !3957)
!3964 = !DILocation(line: 2080, column: 1, scope: !3957)
!3965 = !DILocation(line: 2082, column: 6, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2082, column: 6)
!3967 = !DILocation(line: 2082, column: 11, scope: !3966)
!3968 = !DILocation(line: 2082, column: 6, scope: !3880)
!3969 = !DILocation(line: 2083, column: 6, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 2083, column: 6)
!3971 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 2082, column: 18)
!3972 = !DILocation(line: 2083, column: 11, scope: !3970)
!3973 = !DILocation(line: 2083, column: 6, scope: !3971)
!3974 = !DILocation(line: 2084, column: 1, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3970, file: !3, line: 2083, column: 18)
!3976 = !DILocation(line: 2085, column: 1, scope: !3975)
!3977 = !DILocation(line: 2087, column: 28, scope: !3971)
!3978 = !DILocation(line: 2087, column: 1, scope: !3971)
!3979 = !DILocation(line: 2088, column: 1, scope: !3971)
!3980 = !DILocation(line: 2089, column: 6, scope: !3981)
!3981 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2089, column: 6)
!3982 = !DILocation(line: 2089, column: 11, scope: !3981)
!3983 = !DILocation(line: 2089, column: 6, scope: !3880)
!3984 = !DILocation(line: 2090, column: 6, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 2090, column: 6)
!3986 = distinct !DILexicalBlock(scope: !3981, file: !3, line: 2089, column: 18)
!3987 = !DILocation(line: 2090, column: 11, scope: !3985)
!3988 = !DILocation(line: 2090, column: 6, scope: !3986)
!3989 = !DILocation(line: 2090, column: 25, scope: !3985)
!3990 = !DILocation(line: 2090, column: 18, scope: !3985)
!3991 = !DILocation(line: 2091, column: 28, scope: !3986)
!3992 = !DILocation(line: 2091, column: 1, scope: !3986)
!3993 = !DILocation(line: 2092, column: 1, scope: !3986)
!3994 = !DILocation(line: 2093, column: 11, scope: !3880)
!3995 = !DILocation(line: 2093, column: 18, scope: !3880)
!3996 = !DILocation(line: 2093, column: 16, scope: !3880)
!3997 = !DILocation(line: 2093, column: 9, scope: !3880)
!3998 = !DILocation(line: 2094, column: 6, scope: !3880)
!3999 = !DILocation(line: 2095, column: 6, scope: !3880)
!4000 = !DILocation(line: 2096, column: 6, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2096, column: 6)
!4002 = !DILocation(line: 2096, column: 14, scope: !4001)
!4003 = !DILocation(line: 2096, column: 6, scope: !3880)
!4004 = !DILocation(line: 2097, column: 6, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 2096, column: 21)
!4006 = !DILocation(line: 2098, column: 6, scope: !4005)
!4007 = !DILocation(line: 2099, column: 6, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 2099, column: 6)
!4009 = !DILocation(line: 2099, column: 14, scope: !4008)
!4010 = !DILocation(line: 2099, column: 6, scope: !4005)
!4011 = !DILocation(line: 2100, column: 6, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 2100, column: 6)
!4013 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 2099, column: 20)
!4014 = !DILocation(line: 2100, column: 14, scope: !4012)
!4015 = !DILocation(line: 2100, column: 6, scope: !4013)
!4016 = !DILocation(line: 2100, column: 28, scope: !4012)
!4017 = !DILocation(line: 2100, column: 21, scope: !4012)
!4018 = !DILocation(line: 2101, column: 6, scope: !4013)
!4019 = !DILocation(line: 2102, column: 1, scope: !4013)
!4020 = !DILocation(line: 2103, column: 7, scope: !4005)
!4021 = !DILocation(line: 2103, column: 15, scope: !4005)
!4022 = !DILocation(line: 2103, column: 12, scope: !4005)
!4023 = !DILocation(line: 2103, column: 3, scope: !4005)
!4024 = !DILocation(line: 2104, column: 6, scope: !4025)
!4025 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 2104, column: 6)
!4026 = !DILocation(line: 2104, column: 6, scope: !4005)
!4027 = !DILocation(line: 2104, column: 18, scope: !4025)
!4028 = !DILocation(line: 2104, column: 15, scope: !4025)
!4029 = !DILocation(line: 2104, column: 10, scope: !4025)
!4030 = !DILocation(line: 2105, column: 10, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 2105, column: 6)
!4032 = !DILocation(line: 2105, column: 8, scope: !4031)
!4033 = !DILocation(line: 2105, column: 6, scope: !4005)
!4034 = !DILocation(line: 2106, column: 18, scope: !4035)
!4035 = distinct !DILexicalBlock(scope: !4031, file: !3, line: 2105, column: 20)
!4036 = !DILocation(line: 2106, column: 9, scope: !4035)
!4037 = !DILocation(line: 2106, column: 24, scope: !4035)
!4038 = !DILocation(line: 2106, column: 33, scope: !4035)
!4039 = !DILocation(line: 2106, column: 31, scope: !4035)
!4040 = !DILocation(line: 2106, column: 5, scope: !4035)
!4041 = !DILocation(line: 2106, column: 3, scope: !4035)
!4042 = !DILocation(line: 2107, column: 12, scope: !4035)
!4043 = !DILocation(line: 2107, column: 10, scope: !4035)
!4044 = !DILocation(line: 2107, column: 3, scope: !4035)
!4045 = !DILocation(line: 2108, column: 6, scope: !4035)
!4046 = !DILocation(line: 2109, column: 12, scope: !4035)
!4047 = !DILocation(line: 2109, column: 16, scope: !4035)
!4048 = !DILocation(line: 2109, column: 25, scope: !4035)
!4049 = !DILocation(line: 2109, column: 33, scope: !4035)
!4050 = !DILocation(line: 2109, column: 21, scope: !4035)
!4051 = !DILocation(line: 2109, column: 43, scope: !4035)
!4052 = !DILocation(line: 2109, column: 50, scope: !4035)
!4053 = !DILocation(line: 2109, column: 48, scope: !4035)
!4054 = !DILocation(line: 2109, column: 41, scope: !4035)
!4055 = !DILocation(line: 2109, column: 6, scope: !4035)
!4056 = !DILocation(line: 2110, column: 1, scope: !4035)
!4057 = !DILocation(line: 2112, column: 6, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4031, file: !3, line: 2111, column: 6)
!4059 = !DILocation(line: 2113, column: 6, scope: !4058)
!4060 = !DILocation(line: 2115, column: 1, scope: !4005)
!4061 = !DILocation(line: 2117, column: 6, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4063, file: !3, line: 2117, column: 6)
!4063 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 2116, column: 6)
!4064 = !DILocation(line: 2117, column: 14, scope: !4062)
!4065 = !DILocation(line: 2117, column: 11, scope: !4062)
!4066 = !DILocation(line: 2117, column: 6, scope: !4063)
!4067 = !DILocation(line: 2117, column: 29, scope: !4062)
!4068 = !DILocation(line: 2117, column: 26, scope: !4062)
!4069 = !DILocation(line: 2117, column: 21, scope: !4062)
!4070 = !DILocation(line: 2118, column: 21, scope: !4063)
!4071 = !DILocation(line: 2118, column: 12, scope: !4063)
!4072 = !DILocation(line: 2118, column: 27, scope: !4063)
!4073 = !DILocation(line: 2118, column: 8, scope: !4063)
!4074 = !DILocation(line: 2119, column: 21, scope: !4063)
!4075 = !DILocation(line: 2119, column: 12, scope: !4063)
!4076 = !DILocation(line: 2119, column: 27, scope: !4063)
!4077 = !DILocation(line: 2119, column: 8, scope: !4063)
!4078 = !DILocation(line: 2120, column: 9, scope: !4063)
!4079 = !DILocation(line: 2121, column: 1, scope: !4063)
!4080 = !DILocation(line: 2121, column: 13, scope: !4063)
!4081 = !DILocation(line: 2121, column: 11, scope: !4063)
!4082 = !DILocation(line: 2122, column: 27, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4063, file: !3, line: 2121, column: 23)
!4084 = !DILocation(line: 2122, column: 38, scope: !4083)
!4085 = !DILocation(line: 2122, column: 7, scope: !4083)
!4086 = !DILocation(line: 2122, column: 5, scope: !4083)
!4087 = !DILocation(line: 2123, column: 13, scope: !4083)
!4088 = !DILocation(line: 2123, column: 11, scope: !4083)
!4089 = !DILocation(line: 2123, column: 7, scope: !4083)
!4090 = !DILocation(line: 2123, column: 21, scope: !4083)
!4091 = !DILocation(line: 2123, column: 25, scope: !4083)
!4092 = !DILocation(line: 2123, column: 5, scope: !4083)
!4093 = !DILocation(line: 2124, column: 16, scope: !4083)
!4094 = !DILocation(line: 2124, column: 23, scope: !4083)
!4095 = !DILocation(line: 2124, column: 21, scope: !4083)
!4096 = !DILocation(line: 2124, column: 28, scope: !4083)
!4097 = !DILocation(line: 2124, column: 10, scope: !4083)
!4098 = !DILocation(line: 2124, column: 8, scope: !4083)
!4099 = !DILocation(line: 2125, column: 9, scope: !4083)
!4100 = distinct !{!4100, !4079, !4101}
!4101 = !DILocation(line: 2126, column: 1, scope: !4063)
!4102 = !DILocation(line: 2127, column: 9, scope: !4063)
!4103 = !DILocation(line: 2128, column: 27, scope: !4063)
!4104 = !DILocation(line: 2128, column: 38, scope: !4063)
!4105 = !DILocation(line: 2128, column: 7, scope: !4063)
!4106 = !DILocation(line: 2128, column: 5, scope: !4063)
!4107 = !DILocation(line: 2129, column: 13, scope: !4063)
!4108 = !DILocation(line: 2129, column: 11, scope: !4063)
!4109 = !DILocation(line: 2129, column: 7, scope: !4063)
!4110 = !DILocation(line: 2129, column: 21, scope: !4063)
!4111 = !DILocation(line: 2129, column: 25, scope: !4063)
!4112 = !DILocation(line: 2129, column: 5, scope: !4063)
!4113 = !DILocation(line: 2130, column: 5, scope: !4063)
!4114 = !DILocation(line: 2130, column: 17, scope: !4063)
!4115 = !DILocation(line: 2130, column: 15, scope: !4063)
!4116 = !DILocation(line: 2130, column: 8, scope: !4063)
!4117 = !DILocation(line: 2130, column: 3, scope: !4063)
!4118 = !DILocation(line: 2131, column: 6, scope: !4063)
!4119 = !DILocation(line: 2132, column: 12, scope: !4063)
!4120 = !DILocation(line: 2132, column: 18, scope: !4063)
!4121 = !DILocation(line: 2132, column: 28, scope: !4063)
!4122 = !DILocation(line: 2132, column: 36, scope: !4063)
!4123 = !DILocation(line: 2132, column: 24, scope: !4063)
!4124 = !DILocation(line: 2132, column: 46, scope: !4063)
!4125 = !DILocation(line: 2132, column: 53, scope: !4063)
!4126 = !DILocation(line: 2132, column: 51, scope: !4063)
!4127 = !DILocation(line: 2132, column: 44, scope: !4063)
!4128 = !DILocation(line: 2132, column: 8, scope: !4063)
!4129 = !DILocation(line: 2132, column: 6, scope: !4063)
!4130 = !DILocation(line: 2134, column: 1, scope: !3880)
!4131 = distinct !{!4131, !4130, !4132}
!4132 = !DILocation(line: 2138, column: 31, scope: !3880)
!4133 = !DILocation(line: 2135, column: 17, scope: !4134)
!4134 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2134, column: 4)
!4135 = !DILocation(line: 2135, column: 15, scope: !4134)
!4136 = !DILocation(line: 2136, column: 1, scope: !4134)
!4137 = !DILocation(line: 2137, column: 9, scope: !4134)
!4138 = !DILocation(line: 2137, column: 6, scope: !4134)
!4139 = !DILocation(line: 2138, column: 1, scope: !4134)
!4140 = !DILocation(line: 2138, column: 26, scope: !3880)
!4141 = !DILocation(line: 2138, column: 13, scope: !3880)
!4142 = !DILocation(line: 2139, column: 11, scope: !3880)
!4143 = !DILocation(line: 2139, column: 18, scope: !3880)
!4144 = !DILocation(line: 2139, column: 16, scope: !3880)
!4145 = !DILocation(line: 2139, column: 9, scope: !3880)
!4146 = !DILocation(line: 2140, column: 8, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2140, column: 6)
!4148 = !DILocation(line: 2140, column: 16, scope: !4147)
!4149 = !DILocation(line: 2140, column: 22, scope: !4147)
!4150 = !DILocation(line: 2140, column: 29, scope: !4147)
!4151 = !DILocation(line: 2140, column: 37, scope: !4147)
!4152 = !DILocation(line: 2140, column: 44, scope: !4147)
!4153 = !DILocation(line: 2140, column: 49, scope: !4147)
!4154 = !DILocation(line: 2140, column: 51, scope: !4147)
!4155 = !DILocation(line: 2140, column: 6, scope: !3880)
!4156 = !DILocation(line: 2141, column: 8, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 2140, column: 61)
!4158 = !DILocation(line: 2141, column: 6, scope: !4157)
!4159 = !DILocation(line: 2142, column: 1, scope: !4157)
!4160 = !DILocation(line: 2143, column: 21, scope: !3880)
!4161 = !DILocation(line: 2143, column: 26, scope: !3880)
!4162 = !DILocation(line: 2143, column: 7, scope: !3880)
!4163 = !DILocation(line: 2144, column: 6, scope: !4164)
!4164 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2144, column: 6)
!4165 = !DILocation(line: 2144, column: 6, scope: !3880)
!4166 = !DILocation(line: 2144, column: 23, scope: !4164)
!4167 = !DILocation(line: 2144, column: 21, scope: !4164)
!4168 = !DILocation(line: 2144, column: 19, scope: !4164)
!4169 = !DILocation(line: 2144, column: 14, scope: !4164)
!4170 = !DILocation(line: 2145, column: 38, scope: !3880)
!4171 = !DILocation(line: 2145, column: 46, scope: !3880)
!4172 = !DILocation(line: 2145, column: 44, scope: !3880)
!4173 = !DILocation(line: 2145, column: 53, scope: !3880)
!4174 = !DILocation(line: 2145, column: 59, scope: !3880)
!4175 = !DILocation(line: 2145, column: 8, scope: !3880)
!4176 = !DILocation(line: 2145, column: 1, scope: !3880)
!4177 = !DILocation(line: 2147, column: 1, scope: !3880)
!4178 = distinct !DISubprogram(name: "estimateDiv128To64", scope: !47, file: !47, line: 546, type: !4179, isLocal: true, isDefinition: true, scopeLine: 547, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4179 = !DISubroutineType(types: !4180)
!4180 = !{!24, !24, !24, !24}
!4181 = !DILocalVariable(name: "a0", arg: 1, scope: !4178, file: !47, line: 546, type: !24)
!4182 = !DILocation(line: 546, column: 42, scope: !4178)
!4183 = !DILocalVariable(name: "a1", arg: 2, scope: !4178, file: !47, line: 546, type: !24)
!4184 = !DILocation(line: 546, column: 53, scope: !4178)
!4185 = !DILocalVariable(name: "b", arg: 3, scope: !4178, file: !47, line: 546, type: !24)
!4186 = !DILocation(line: 546, column: 64, scope: !4178)
!4187 = !DILocalVariable(name: "b0", scope: !4178, file: !47, line: 548, type: !24)
!4188 = !DILocation(line: 548, column: 12, scope: !4178)
!4189 = !DILocalVariable(name: "b1", scope: !4178, file: !47, line: 548, type: !24)
!4190 = !DILocation(line: 548, column: 16, scope: !4178)
!4191 = !DILocalVariable(name: "rem0", scope: !4178, file: !47, line: 549, type: !24)
!4192 = !DILocation(line: 549, column: 12, scope: !4178)
!4193 = !DILocalVariable(name: "rem1", scope: !4178, file: !47, line: 549, type: !24)
!4194 = !DILocation(line: 549, column: 18, scope: !4178)
!4195 = !DILocalVariable(name: "term0", scope: !4178, file: !47, line: 549, type: !24)
!4196 = !DILocation(line: 549, column: 24, scope: !4178)
!4197 = !DILocalVariable(name: "term1", scope: !4178, file: !47, line: 549, type: !24)
!4198 = !DILocation(line: 549, column: 31, scope: !4178)
!4199 = !DILocalVariable(name: "z", scope: !4178, file: !47, line: 550, type: !24)
!4200 = !DILocation(line: 550, column: 12, scope: !4178)
!4201 = !DILocation(line: 552, column: 10, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4178, file: !47, line: 552, column: 10)
!4203 = !DILocation(line: 552, column: 15, scope: !4202)
!4204 = !DILocation(line: 552, column: 12, scope: !4202)
!4205 = !DILocation(line: 552, column: 10, scope: !4178)
!4206 = !DILocation(line: 552, column: 20, scope: !4202)
!4207 = !DILocation(line: 553, column: 10, scope: !4178)
!4208 = !DILocation(line: 553, column: 11, scope: !4178)
!4209 = !DILocation(line: 553, column: 8, scope: !4178)
!4210 = !DILocation(line: 554, column: 11, scope: !4178)
!4211 = !DILocation(line: 554, column: 13, scope: !4178)
!4212 = !DILocation(line: 554, column: 21, scope: !4178)
!4213 = !DILocation(line: 554, column: 18, scope: !4178)
!4214 = !DILocation(line: 554, column: 9, scope: !4178)
!4215 = !DILocation(line: 554, column: 60, scope: !4178)
!4216 = !DILocation(line: 554, column: 65, scope: !4178)
!4217 = !DILocation(line: 554, column: 63, scope: !4178)
!4218 = !DILocation(line: 554, column: 69, scope: !4178)
!4219 = !DILocation(line: 554, column: 7, scope: !4178)
!4220 = !DILocation(line: 555, column: 17, scope: !4178)
!4221 = !DILocation(line: 555, column: 20, scope: !4178)
!4222 = !DILocation(line: 555, column: 5, scope: !4178)
!4223 = !DILocation(line: 556, column: 13, scope: !4178)
!4224 = !DILocation(line: 556, column: 17, scope: !4178)
!4225 = !DILocation(line: 556, column: 21, scope: !4178)
!4226 = !DILocation(line: 556, column: 28, scope: !4178)
!4227 = !DILocation(line: 556, column: 5, scope: !4178)
!4228 = !DILocation(line: 557, column: 5, scope: !4178)
!4229 = !DILocation(line: 557, column: 25, scope: !4178)
!4230 = !DILocation(line: 557, column: 32, scope: !4178)
!4231 = !DILocation(line: 558, column: 11, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4178, file: !47, line: 557, column: 38)
!4233 = !DILocation(line: 559, column: 14, scope: !4232)
!4234 = !DILocation(line: 559, column: 15, scope: !4232)
!4235 = !DILocation(line: 559, column: 12, scope: !4232)
!4236 = !DILocation(line: 560, column: 17, scope: !4232)
!4237 = !DILocation(line: 560, column: 23, scope: !4232)
!4238 = !DILocation(line: 560, column: 29, scope: !4232)
!4239 = !DILocation(line: 560, column: 33, scope: !4232)
!4240 = !DILocation(line: 560, column: 9, scope: !4232)
!4241 = distinct !{!4241, !4228, !4242}
!4242 = !DILocation(line: 561, column: 5, scope: !4178)
!4243 = !DILocation(line: 562, column: 14, scope: !4178)
!4244 = !DILocation(line: 562, column: 18, scope: !4178)
!4245 = !DILocation(line: 562, column: 29, scope: !4178)
!4246 = !DILocation(line: 562, column: 33, scope: !4178)
!4247 = !DILocation(line: 562, column: 25, scope: !4178)
!4248 = !DILocation(line: 562, column: 10, scope: !4178)
!4249 = !DILocation(line: 563, column: 12, scope: !4178)
!4250 = !DILocation(line: 563, column: 14, scope: !4178)
!4251 = !DILocation(line: 563, column: 22, scope: !4178)
!4252 = !DILocation(line: 563, column: 19, scope: !4178)
!4253 = !DILocation(line: 563, column: 10, scope: !4178)
!4254 = !DILocation(line: 563, column: 44, scope: !4178)
!4255 = !DILocation(line: 563, column: 51, scope: !4178)
!4256 = !DILocation(line: 563, column: 49, scope: !4178)
!4257 = !DILocation(line: 563, column: 7, scope: !4178)
!4258 = !DILocation(line: 564, column: 12, scope: !4178)
!4259 = !DILocation(line: 564, column: 5, scope: !4178)
!4260 = !DILocation(line: 566, column: 1, scope: !4178)
!4261 = distinct !DISubprogram(name: "float32_sqrt", scope: !3, file: !3, line: 2155, type: !2806, isLocal: false, isDefinition: true, scopeLine: 2156, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4262 = !DILocalVariable(name: "a", arg: 1, scope: !4261, file: !3, line: 2155, type: !1109)
!4263 = !DILocation(line: 2155, column: 31, scope: !4261)
!4264 = !DILocalVariable(name: "aSign", scope: !4261, file: !3, line: 2157, type: !1241)
!4265 = !DILocation(line: 2157, column: 6, scope: !4261)
!4266 = !DILocalVariable(name: "aExp", scope: !4261, file: !3, line: 2158, type: !60)
!4267 = !DILocation(line: 2158, column: 7, scope: !4261)
!4268 = !DILocalVariable(name: "zExp", scope: !4261, file: !3, line: 2158, type: !60)
!4269 = !DILocation(line: 2158, column: 13, scope: !4261)
!4270 = !DILocalVariable(name: "aSig", scope: !4261, file: !3, line: 2159, type: !27)
!4271 = !DILocation(line: 2159, column: 8, scope: !4261)
!4272 = !DILocalVariable(name: "zSig", scope: !4261, file: !3, line: 2159, type: !27)
!4273 = !DILocation(line: 2159, column: 14, scope: !4261)
!4274 = !DILocalVariable(name: "rem", scope: !4261, file: !3, line: 2160, type: !24)
!4275 = !DILocation(line: 2160, column: 8, scope: !4261)
!4276 = !DILocalVariable(name: "term", scope: !4261, file: !3, line: 2160, type: !24)
!4277 = !DILocation(line: 2160, column: 13, scope: !4261)
!4278 = !DILocation(line: 2162, column: 28, scope: !4261)
!4279 = !DILocation(line: 2162, column: 8, scope: !4261)
!4280 = !DILocation(line: 2162, column: 6, scope: !4261)
!4281 = !DILocation(line: 2163, column: 27, scope: !4261)
!4282 = !DILocation(line: 2163, column: 8, scope: !4261)
!4283 = !DILocation(line: 2163, column: 6, scope: !4261)
!4284 = !DILocation(line: 2164, column: 29, scope: !4261)
!4285 = !DILocation(line: 2164, column: 9, scope: !4261)
!4286 = !DILocation(line: 2164, column: 7, scope: !4261)
!4287 = !DILocation(line: 2165, column: 6, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4261, file: !3, line: 2165, column: 6)
!4289 = !DILocation(line: 2165, column: 11, scope: !4288)
!4290 = !DILocation(line: 2165, column: 6, scope: !4261)
!4291 = !DILocation(line: 2166, column: 6, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 2166, column: 6)
!4293 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 2165, column: 21)
!4294 = !DILocation(line: 2166, column: 6, scope: !4293)
!4295 = !DILocation(line: 2166, column: 41, scope: !4292)
!4296 = !DILocation(line: 2166, column: 20, scope: !4292)
!4297 = !DILocation(line: 2166, column: 13, scope: !4292)
!4298 = !DILocation(line: 2167, column: 8, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 2167, column: 6)
!4300 = !DILocation(line: 2167, column: 6, scope: !4293)
!4301 = !DILocation(line: 2167, column: 23, scope: !4299)
!4302 = !DILocation(line: 2167, column: 16, scope: !4299)
!4303 = !DILocation(line: 2168, column: 1, scope: !4293)
!4304 = !DILocation(line: 2169, column: 1, scope: !4293)
!4305 = !DILocation(line: 2171, column: 6, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4261, file: !3, line: 2171, column: 6)
!4307 = !DILocation(line: 2171, column: 6, scope: !4261)
!4308 = !DILocation(line: 2172, column: 8, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4310, file: !3, line: 2172, column: 6)
!4310 = distinct !DILexicalBlock(scope: !4306, file: !3, line: 2171, column: 14)
!4311 = !DILocation(line: 2172, column: 15, scope: !4309)
!4312 = !DILocation(line: 2172, column: 13, scope: !4309)
!4313 = !DILocation(line: 2172, column: 22, scope: !4309)
!4314 = !DILocation(line: 2172, column: 6, scope: !4310)
!4315 = !DILocation(line: 2172, column: 36, scope: !4309)
!4316 = !DILocation(line: 2172, column: 29, scope: !4309)
!4317 = !DILocation(line: 2173, column: 1, scope: !4310)
!4318 = !DILocation(line: 2174, column: 1, scope: !4310)
!4319 = !DILocation(line: 2176, column: 6, scope: !4320)
!4320 = distinct !DILexicalBlock(scope: !4261, file: !3, line: 2176, column: 6)
!4321 = !DILocation(line: 2176, column: 11, scope: !4320)
!4322 = !DILocation(line: 2176, column: 6, scope: !4261)
!4323 = !DILocation(line: 2177, column: 6, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 2177, column: 6)
!4325 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2176, column: 18)
!4326 = !DILocation(line: 2177, column: 11, scope: !4324)
!4327 = !DILocation(line: 2177, column: 6, scope: !4325)
!4328 = !DILocation(line: 2177, column: 18, scope: !4324)
!4329 = !DILocation(line: 2178, column: 28, scope: !4325)
!4330 = !DILocation(line: 2178, column: 1, scope: !4325)
!4331 = !DILocation(line: 2179, column: 1, scope: !4325)
!4332 = !DILocation(line: 2180, column: 12, scope: !4261)
!4333 = !DILocation(line: 2180, column: 17, scope: !4261)
!4334 = !DILocation(line: 2180, column: 25, scope: !4261)
!4335 = !DILocation(line: 2180, column: 31, scope: !4261)
!4336 = !DILocation(line: 2180, column: 6, scope: !4261)
!4337 = !DILocation(line: 2181, column: 10, scope: !4261)
!4338 = !DILocation(line: 2181, column: 15, scope: !4261)
!4339 = !DILocation(line: 2181, column: 29, scope: !4261)
!4340 = !DILocation(line: 2181, column: 6, scope: !4261)
!4341 = !DILocation(line: 2182, column: 24, scope: !4261)
!4342 = !DILocation(line: 2182, column: 30, scope: !4261)
!4343 = !DILocation(line: 2182, column: 8, scope: !4261)
!4344 = !DILocation(line: 2182, column: 37, scope: !4261)
!4345 = !DILocation(line: 2182, column: 6, scope: !4261)
!4346 = !DILocation(line: 2183, column: 8, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4261, file: !3, line: 2183, column: 6)
!4348 = !DILocation(line: 2183, column: 13, scope: !4347)
!4349 = !DILocation(line: 2183, column: 22, scope: !4347)
!4350 = !DILocation(line: 2183, column: 6, scope: !4261)
!4351 = !DILocation(line: 2184, column: 6, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 2184, column: 6)
!4353 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 2183, column: 29)
!4354 = !DILocation(line: 2184, column: 11, scope: !4352)
!4355 = !DILocation(line: 2184, column: 6, scope: !4353)
!4356 = !DILocation(line: 2185, column: 6, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 2184, column: 17)
!4358 = !DILocation(line: 2186, column: 1, scope: !4357)
!4359 = !DILocation(line: 2188, column: 10, scope: !4353)
!4360 = !DILocation(line: 2188, column: 15, scope: !4353)
!4361 = !DILocation(line: 2188, column: 6, scope: !4353)
!4362 = !DILocation(line: 2189, column: 19, scope: !4353)
!4363 = !DILocation(line: 2189, column: 10, scope: !4353)
!4364 = !DILocation(line: 2189, column: 28, scope: !4353)
!4365 = !DILocation(line: 2189, column: 26, scope: !4353)
!4366 = !DILocation(line: 2189, column: 6, scope: !4353)
!4367 = !DILocation(line: 2190, column: 20, scope: !4353)
!4368 = !DILocation(line: 2190, column: 11, scope: !4353)
!4369 = !DILocation(line: 2190, column: 26, scope: !4353)
!4370 = !DILocation(line: 2190, column: 35, scope: !4353)
!4371 = !DILocation(line: 2190, column: 33, scope: !4353)
!4372 = !DILocation(line: 2190, column: 5, scope: !4353)
!4373 = !DILocation(line: 2191, column: 1, scope: !4353)
!4374 = !DILocation(line: 2191, column: 19, scope: !4353)
!4375 = !DILocation(line: 2191, column: 23, scope: !4353)
!4376 = !DILocation(line: 2192, column: 1, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 2191, column: 29)
!4378 = !DILocation(line: 2193, column: 21, scope: !4377)
!4379 = !DILocation(line: 2193, column: 12, scope: !4377)
!4380 = !DILocation(line: 2193, column: 27, scope: !4377)
!4381 = !DILocation(line: 2193, column: 33, scope: !4377)
!4382 = !DILocation(line: 2193, column: 5, scope: !4377)
!4383 = distinct !{!4383, !4373, !4384}
!4384 = !DILocation(line: 2194, column: 1, scope: !4353)
!4385 = !DILocation(line: 2195, column: 11, scope: !4353)
!4386 = !DILocation(line: 2195, column: 15, scope: !4353)
!4387 = !DILocation(line: 2195, column: 6, scope: !4353)
!4388 = !DILocation(line: 2196, column: 1, scope: !4353)
!4389 = !DILocation(line: 2197, column: 22, scope: !4261)
!4390 = !DILocation(line: 2197, column: 1, scope: !4261)
!4391 = !DILocation(line: 2199, column: 32, scope: !4261)
!4392 = !DILocation(line: 2199, column: 38, scope: !4261)
!4393 = !DILocation(line: 2199, column: 8, scope: !4261)
!4394 = !DILocation(line: 2199, column: 1, scope: !4261)
!4395 = !DILocation(line: 2201, column: 1, scope: !4261)
!4396 = !DILocalVariable(name: "aExp", arg: 1, scope: !57, file: !47, line: 578, type: !60)
!4397 = !DILocation(line: 578, column: 37, scope: !57)
!4398 = !DILocalVariable(name: "a", arg: 2, scope: !57, file: !47, line: 578, type: !27)
!4399 = !DILocation(line: 578, column: 50, scope: !57)
!4400 = !DILocalVariable(name: "index", scope: !57, file: !47, line: 588, type: !38)
!4401 = !DILocation(line: 588, column: 10, scope: !57)
!4402 = !DILocalVariable(name: "z", scope: !57, file: !47, line: 589, type: !27)
!4403 = !DILocation(line: 589, column: 12, scope: !57)
!4404 = !DILocation(line: 591, column: 15, scope: !57)
!4405 = !DILocation(line: 591, column: 16, scope: !57)
!4406 = !DILocation(line: 591, column: 23, scope: !57)
!4407 = !DILocation(line: 591, column: 11, scope: !57)
!4408 = !DILocation(line: 592, column: 10, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !57, file: !47, line: 592, column: 10)
!4410 = !DILocation(line: 592, column: 15, scope: !4409)
!4411 = !DILocation(line: 592, column: 10, scope: !57)
!4412 = !DILocation(line: 593, column: 24, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4409, file: !47, line: 592, column: 21)
!4414 = !DILocation(line: 593, column: 25, scope: !4413)
!4415 = !DILocation(line: 593, column: 20, scope: !4413)
!4416 = !DILocation(line: 593, column: 54, scope: !4413)
!4417 = !DILocation(line: 593, column: 34, scope: !4413)
!4418 = !DILocation(line: 593, column: 32, scope: !4413)
!4419 = !DILocation(line: 593, column: 11, scope: !4413)
!4420 = !DILocation(line: 594, column: 17, scope: !4413)
!4421 = !DILocation(line: 594, column: 21, scope: !4413)
!4422 = !DILocation(line: 594, column: 19, scope: !4413)
!4423 = !DILocation(line: 594, column: 24, scope: !4413)
!4424 = !DILocation(line: 594, column: 35, scope: !4413)
!4425 = !DILocation(line: 594, column: 36, scope: !4413)
!4426 = !DILocation(line: 594, column: 31, scope: !4413)
!4427 = !DILocation(line: 594, column: 11, scope: !4413)
!4428 = !DILocation(line: 595, column: 11, scope: !4413)
!4429 = !DILocation(line: 596, column: 5, scope: !4413)
!4430 = !DILocation(line: 598, column: 24, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4409, file: !47, line: 597, column: 10)
!4432 = !DILocation(line: 598, column: 25, scope: !4431)
!4433 = !DILocation(line: 598, column: 20, scope: !4431)
!4434 = !DILocation(line: 598, column: 55, scope: !4431)
!4435 = !DILocation(line: 598, column: 34, scope: !4431)
!4436 = !DILocation(line: 598, column: 32, scope: !4431)
!4437 = !DILocation(line: 598, column: 11, scope: !4431)
!4438 = !DILocation(line: 599, column: 13, scope: !4431)
!4439 = !DILocation(line: 599, column: 17, scope: !4431)
!4440 = !DILocation(line: 599, column: 15, scope: !4431)
!4441 = !DILocation(line: 599, column: 21, scope: !4431)
!4442 = !DILocation(line: 599, column: 19, scope: !4431)
!4443 = !DILocation(line: 599, column: 11, scope: !4431)
!4444 = !DILocation(line: 600, column: 26, scope: !4431)
!4445 = !DILocation(line: 600, column: 23, scope: !4431)
!4446 = !DILocation(line: 600, column: 13, scope: !4431)
!4447 = !DILocation(line: 600, column: 47, scope: !4431)
!4448 = !DILocation(line: 600, column: 48, scope: !4431)
!4449 = !DILocation(line: 600, column: 11, scope: !4431)
!4450 = !DILocation(line: 601, column: 14, scope: !4451)
!4451 = distinct !DILexicalBlock(scope: !4431, file: !47, line: 601, column: 14)
!4452 = !DILocation(line: 601, column: 19, scope: !4451)
!4453 = !DILocation(line: 601, column: 16, scope: !4451)
!4454 = !DILocation(line: 601, column: 14, scope: !4431)
!4455 = !DILocation(line: 601, column: 53, scope: !4451)
!4456 = !DILocation(line: 601, column: 56, scope: !4451)
!4457 = !DILocation(line: 601, column: 23, scope: !4451)
!4458 = !DILocation(line: 603, column: 38, scope: !57)
!4459 = !DILocation(line: 603, column: 29, scope: !57)
!4460 = !DILocation(line: 603, column: 41, scope: !57)
!4461 = !DILocation(line: 603, column: 50, scope: !57)
!4462 = !DILocation(line: 603, column: 48, scope: !57)
!4463 = !DILocation(line: 603, column: 14, scope: !57)
!4464 = !DILocation(line: 603, column: 60, scope: !57)
!4465 = !DILocation(line: 603, column: 61, scope: !57)
!4466 = !DILocation(line: 603, column: 56, scope: !57)
!4467 = !DILocation(line: 603, column: 5, scope: !57)
!4468 = !DILocation(line: 605, column: 1, scope: !57)
!4469 = distinct !DISubprogram(name: "float32_eq", scope: !3, file: !3, line: 2209, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2210, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4470 = !DISubroutineType(types: !4471)
!4471 = !{!1022, !1109, !1109}
!4472 = !DILocalVariable(name: "a", arg: 1, scope: !4469, file: !3, line: 2209, type: !1109)
!4473 = !DILocation(line: 2209, column: 26, scope: !4469)
!4474 = !DILocalVariable(name: "b", arg: 2, scope: !4469, file: !3, line: 2209, type: !1109)
!4475 = !DILocation(line: 2209, column: 37, scope: !4469)
!4476 = !DILocation(line: 2212, column: 32, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 2212, column: 9)
!4478 = !DILocation(line: 2212, column: 13, scope: !4477)
!4479 = !DILocation(line: 2212, column: 36, scope: !4477)
!4480 = !DILocation(line: 2212, column: 46, scope: !4477)
!4481 = !DILocation(line: 2212, column: 69, scope: !4477)
!4482 = !DILocation(line: 2212, column: 49, scope: !4477)
!4483 = !DILocation(line: 2213, column: 1, scope: !4477)
!4484 = !DILocation(line: 2213, column: 27, scope: !4477)
!4485 = !DILocation(line: 2213, column: 8, scope: !4477)
!4486 = !DILocation(line: 2213, column: 31, scope: !4477)
!4487 = !DILocation(line: 2213, column: 41, scope: !4477)
!4488 = !DILocation(line: 2213, column: 64, scope: !4477)
!4489 = !DILocation(line: 2213, column: 44, scope: !4477)
!4490 = !DILocation(line: 2212, column: 9, scope: !4469)
!4491 = !DILocation(line: 2215, column: 22, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 2215, column: 6)
!4493 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 2214, column: 3)
!4494 = !DILocation(line: 2215, column: 6, scope: !4492)
!4495 = !DILocation(line: 2215, column: 26, scope: !4492)
!4496 = !DILocation(line: 2215, column: 45, scope: !4492)
!4497 = !DILocation(line: 2215, column: 29, scope: !4492)
!4498 = !DILocation(line: 2215, column: 6, scope: !4493)
!4499 = !DILocation(line: 2216, column: 1, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 2215, column: 51)
!4501 = !DILocation(line: 2217, column: 1, scope: !4500)
!4502 = !DILocation(line: 2218, column: 1, scope: !4493)
!4503 = !DILocation(line: 2220, column: 10, scope: !4469)
!4504 = !DILocation(line: 2220, column: 15, scope: !4469)
!4505 = !DILocation(line: 2220, column: 12, scope: !4469)
!4506 = !DILocation(line: 2220, column: 19, scope: !4469)
!4507 = !DILocation(line: 2220, column: 37, scope: !4469)
!4508 = !DILocation(line: 2220, column: 41, scope: !4469)
!4509 = !DILocation(line: 2220, column: 39, scope: !4469)
!4510 = !DILocation(line: 2220, column: 44, scope: !4469)
!4511 = !DILocation(line: 2220, column: 50, scope: !4469)
!4512 = !DILocation(line: 2220, column: 1, scope: !4469)
!4513 = !DILocation(line: 2222, column: 1, scope: !4469)
!4514 = distinct !DISubprogram(name: "float32_le", scope: !3, file: !3, line: 2231, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2232, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4515 = !DILocalVariable(name: "a", arg: 1, scope: !4514, file: !3, line: 2231, type: !1109)
!4516 = !DILocation(line: 2231, column: 26, scope: !4514)
!4517 = !DILocalVariable(name: "b", arg: 2, scope: !4514, file: !3, line: 2231, type: !1109)
!4518 = !DILocation(line: 2231, column: 37, scope: !4514)
!4519 = !DILocalVariable(name: "aSign", scope: !4514, file: !3, line: 2233, type: !1241)
!4520 = !DILocation(line: 2233, column: 6, scope: !4514)
!4521 = !DILocalVariable(name: "bSign", scope: !4514, file: !3, line: 2233, type: !1241)
!4522 = !DILocation(line: 2233, column: 13, scope: !4514)
!4523 = !DILocation(line: 2235, column: 32, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 2235, column: 9)
!4525 = !DILocation(line: 2235, column: 13, scope: !4524)
!4526 = !DILocation(line: 2235, column: 36, scope: !4524)
!4527 = !DILocation(line: 2235, column: 46, scope: !4524)
!4528 = !DILocation(line: 2235, column: 69, scope: !4524)
!4529 = !DILocation(line: 2235, column: 49, scope: !4524)
!4530 = !DILocation(line: 2236, column: 1, scope: !4524)
!4531 = !DILocation(line: 2236, column: 27, scope: !4524)
!4532 = !DILocation(line: 2236, column: 8, scope: !4524)
!4533 = !DILocation(line: 2236, column: 31, scope: !4524)
!4534 = !DILocation(line: 2236, column: 41, scope: !4524)
!4535 = !DILocation(line: 2236, column: 64, scope: !4524)
!4536 = !DILocation(line: 2236, column: 44, scope: !4524)
!4537 = !DILocation(line: 2235, column: 9, scope: !4514)
!4538 = !DILocation(line: 2238, column: 1, scope: !4539)
!4539 = distinct !DILexicalBlock(scope: !4524, file: !3, line: 2237, column: 3)
!4540 = !DILocation(line: 2239, column: 1, scope: !4539)
!4541 = !DILocation(line: 2241, column: 29, scope: !4514)
!4542 = !DILocation(line: 2241, column: 9, scope: !4514)
!4543 = !DILocation(line: 2241, column: 7, scope: !4514)
!4544 = !DILocation(line: 2242, column: 29, scope: !4514)
!4545 = !DILocation(line: 2242, column: 9, scope: !4514)
!4546 = !DILocation(line: 2242, column: 7, scope: !4514)
!4547 = !DILocation(line: 2243, column: 6, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 2243, column: 6)
!4549 = !DILocation(line: 2243, column: 15, scope: !4548)
!4550 = !DILocation(line: 2243, column: 12, scope: !4548)
!4551 = !DILocation(line: 2243, column: 6, scope: !4514)
!4552 = !DILocation(line: 2243, column: 30, scope: !4548)
!4553 = !DILocation(line: 2243, column: 36, scope: !4548)
!4554 = !DILocation(line: 2243, column: 54, scope: !4548)
!4555 = !DILocation(line: 2243, column: 58, scope: !4548)
!4556 = !DILocation(line: 2243, column: 56, scope: !4548)
!4557 = !DILocation(line: 2243, column: 61, scope: !4548)
!4558 = !DILocation(line: 2243, column: 67, scope: !4548)
!4559 = !DILocation(line: 2243, column: 23, scope: !4548)
!4560 = !DILocation(line: 2244, column: 10, scope: !4514)
!4561 = !DILocation(line: 2244, column: 15, scope: !4514)
!4562 = !DILocation(line: 2244, column: 12, scope: !4514)
!4563 = !DILocation(line: 2244, column: 19, scope: !4514)
!4564 = !DILocation(line: 2244, column: 24, scope: !4514)
!4565 = !DILocation(line: 2244, column: 34, scope: !4514)
!4566 = !DILocation(line: 2244, column: 38, scope: !4514)
!4567 = !DILocation(line: 2244, column: 36, scope: !4514)
!4568 = !DILocation(line: 2244, column: 30, scope: !4514)
!4569 = !DILocation(line: 2244, column: 1, scope: !4514)
!4570 = !DILocation(line: 2246, column: 1, scope: !4514)
!4571 = distinct !DISubprogram(name: "float32_lt", scope: !3, file: !3, line: 2254, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2255, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4572 = !DILocalVariable(name: "a", arg: 1, scope: !4571, file: !3, line: 2254, type: !1109)
!4573 = !DILocation(line: 2254, column: 26, scope: !4571)
!4574 = !DILocalVariable(name: "b", arg: 2, scope: !4571, file: !3, line: 2254, type: !1109)
!4575 = !DILocation(line: 2254, column: 37, scope: !4571)
!4576 = !DILocalVariable(name: "aSign", scope: !4571, file: !3, line: 2256, type: !1241)
!4577 = !DILocation(line: 2256, column: 10, scope: !4571)
!4578 = !DILocalVariable(name: "bSign", scope: !4571, file: !3, line: 2256, type: !1241)
!4579 = !DILocation(line: 2256, column: 17, scope: !4571)
!4580 = !DILocation(line: 2258, column: 36, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 2258, column: 13)
!4582 = !DILocation(line: 2258, column: 17, scope: !4581)
!4583 = !DILocation(line: 2258, column: 40, scope: !4581)
!4584 = !DILocation(line: 2258, column: 50, scope: !4581)
!4585 = !DILocation(line: 2258, column: 73, scope: !4581)
!4586 = !DILocation(line: 2258, column: 53, scope: !4581)
!4587 = !DILocation(line: 2259, column: 10, scope: !4581)
!4588 = !DILocation(line: 2259, column: 36, scope: !4581)
!4589 = !DILocation(line: 2259, column: 17, scope: !4581)
!4590 = !DILocation(line: 2259, column: 40, scope: !4581)
!4591 = !DILocation(line: 2259, column: 50, scope: !4581)
!4592 = !DILocation(line: 2259, column: 73, scope: !4581)
!4593 = !DILocation(line: 2259, column: 53, scope: !4581)
!4594 = !DILocation(line: 2258, column: 13, scope: !4571)
!4595 = !DILocation(line: 2261, column: 9, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4581, file: !3, line: 2260, column: 10)
!4597 = !DILocation(line: 2262, column: 9, scope: !4596)
!4598 = !DILocation(line: 2264, column: 33, scope: !4571)
!4599 = !DILocation(line: 2264, column: 13, scope: !4571)
!4600 = !DILocation(line: 2264, column: 11, scope: !4571)
!4601 = !DILocation(line: 2265, column: 33, scope: !4571)
!4602 = !DILocation(line: 2265, column: 13, scope: !4571)
!4603 = !DILocation(line: 2265, column: 11, scope: !4571)
!4604 = !DILocation(line: 2266, column: 10, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 2266, column: 10)
!4606 = !DILocation(line: 2266, column: 19, scope: !4605)
!4607 = !DILocation(line: 2266, column: 16, scope: !4605)
!4608 = !DILocation(line: 2266, column: 10, scope: !4571)
!4609 = !DILocation(line: 2266, column: 34, scope: !4605)
!4610 = !DILocation(line: 2266, column: 40, scope: !4605)
!4611 = !DILocation(line: 2266, column: 58, scope: !4605)
!4612 = !DILocation(line: 2266, column: 62, scope: !4605)
!4613 = !DILocation(line: 2266, column: 60, scope: !4605)
!4614 = !DILocation(line: 2266, column: 65, scope: !4605)
!4615 = !DILocation(line: 2266, column: 71, scope: !4605)
!4616 = !DILocation(line: 2266, column: 27, scope: !4605)
!4617 = !DILocation(line: 2267, column: 14, scope: !4571)
!4618 = !DILocation(line: 2267, column: 19, scope: !4571)
!4619 = !DILocation(line: 2267, column: 16, scope: !4571)
!4620 = !DILocation(line: 2267, column: 23, scope: !4571)
!4621 = !DILocation(line: 2267, column: 28, scope: !4571)
!4622 = !DILocation(line: 2267, column: 38, scope: !4571)
!4623 = !DILocation(line: 2267, column: 42, scope: !4571)
!4624 = !DILocation(line: 2267, column: 40, scope: !4571)
!4625 = !DILocation(line: 2267, column: 34, scope: !4571)
!4626 = !DILocation(line: 2267, column: 5, scope: !4571)
!4627 = !DILocation(line: 2269, column: 1, scope: !4571)
!4628 = distinct !DISubprogram(name: "marktrue", scope: !3, file: !3, line: 2271, type: !3394, isLocal: false, isDefinition: true, scopeLine: 2271, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4629 = !DILocation(line: 2271, column: 21, scope: !4628)
!4630 = !DILocation(line: 2271, column: 49, scope: !4628)
!4631 = distinct !DISubprogram(name: "markfalse", scope: !3, file: !3, line: 2272, type: !3394, isLocal: false, isDefinition: true, scopeLine: 2272, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4632 = !DILocation(line: 2272, column: 22, scope: !4631)
!4633 = !DILocation(line: 2272, column: 51, scope: !4631)
!4634 = distinct !DISubprogram(name: "float32_ge", scope: !3, file: !3, line: 2320, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2321, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4635 = !DILocalVariable(name: "a", arg: 1, scope: !4634, file: !3, line: 2320, type: !1109)
!4636 = !DILocation(line: 2320, column: 26, scope: !4634)
!4637 = !DILocalVariable(name: "b", arg: 2, scope: !4634, file: !3, line: 2320, type: !1109)
!4638 = !DILocation(line: 2320, column: 37, scope: !4634)
!4639 = !DILocation(line: 2322, column: 20, scope: !4634)
!4640 = !DILocation(line: 2322, column: 22, scope: !4634)
!4641 = !DILocation(line: 2322, column: 9, scope: !4634)
!4642 = !DILocation(line: 2322, column: 8, scope: !4634)
!4643 = !DILocation(line: 2322, column: 1, scope: !4634)
!4644 = distinct !DISubprogram(name: "float32_gt", scope: !3, file: !3, line: 2325, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2326, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4645 = !DILocalVariable(name: "a", arg: 1, scope: !4644, file: !3, line: 2325, type: !1109)
!4646 = !DILocation(line: 2325, column: 26, scope: !4644)
!4647 = !DILocalVariable(name: "b", arg: 2, scope: !4644, file: !3, line: 2325, type: !1109)
!4648 = !DILocation(line: 2325, column: 37, scope: !4644)
!4649 = !DILocation(line: 2327, column: 20, scope: !4644)
!4650 = !DILocation(line: 2327, column: 22, scope: !4644)
!4651 = !DILocation(line: 2327, column: 9, scope: !4644)
!4652 = !DILocation(line: 2327, column: 8, scope: !4644)
!4653 = !DILocation(line: 2327, column: 1, scope: !4644)
!4654 = distinct !DISubprogram(name: "float32_ge_quiet", scope: !3, file: !3, line: 2330, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2331, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4655 = !DILocalVariable(name: "a", arg: 1, scope: !4654, file: !3, line: 2330, type: !1109)
!4656 = !DILocation(line: 2330, column: 32, scope: !4654)
!4657 = !DILocalVariable(name: "b", arg: 2, scope: !4654, file: !3, line: 2330, type: !1109)
!4658 = !DILocation(line: 2330, column: 43, scope: !4654)
!4659 = !DILocation(line: 2332, column: 26, scope: !4654)
!4660 = !DILocation(line: 2332, column: 28, scope: !4654)
!4661 = !DILocation(line: 2332, column: 8, scope: !4654)
!4662 = !DILocation(line: 2332, column: 30, scope: !4654)
!4663 = !DILocation(line: 2332, column: 43, scope: !4654)
!4664 = !DILocation(line: 2332, column: 45, scope: !4654)
!4665 = !DILocation(line: 2332, column: 32, scope: !4654)
!4666 = !DILocation(line: 2332, column: 1, scope: !4654)
!4667 = distinct !DISubprogram(name: "float32_uno_quiet", scope: !3, file: !3, line: 2351, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2352, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4668 = !DILocalVariable(name: "a", arg: 1, scope: !4667, file: !3, line: 2351, type: !1109)
!4669 = !DILocation(line: 2351, column: 33, scope: !4667)
!4670 = !DILocalVariable(name: "b", arg: 2, scope: !4667, file: !3, line: 2351, type: !1109)
!4671 = !DILocation(line: 2351, column: 44, scope: !4667)
!4672 = !DILocation(line: 2353, column: 23, scope: !4667)
!4673 = !DILocation(line: 2353, column: 8, scope: !4667)
!4674 = !DILocation(line: 2353, column: 25, scope: !4667)
!4675 = !DILocation(line: 2353, column: 42, scope: !4667)
!4676 = !DILocation(line: 2353, column: 27, scope: !4667)
!4677 = !DILocation(line: 2353, column: 1, scope: !4667)
!4678 = distinct !DISubprogram(name: "float32_gt_quiet", scope: !3, file: !3, line: 2334, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2335, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4679 = !DILocalVariable(name: "a", arg: 1, scope: !4678, file: !3, line: 2334, type: !1109)
!4680 = !DILocation(line: 2334, column: 32, scope: !4678)
!4681 = !DILocalVariable(name: "b", arg: 2, scope: !4678, file: !3, line: 2334, type: !1109)
!4682 = !DILocation(line: 2334, column: 43, scope: !4678)
!4683 = !DILocation(line: 2336, column: 26, scope: !4678)
!4684 = !DILocation(line: 2336, column: 28, scope: !4678)
!4685 = !DILocation(line: 2336, column: 8, scope: !4678)
!4686 = !DILocation(line: 2336, column: 30, scope: !4678)
!4687 = !DILocation(line: 2336, column: 43, scope: !4678)
!4688 = !DILocation(line: 2336, column: 45, scope: !4678)
!4689 = !DILocation(line: 2336, column: 32, scope: !4678)
!4690 = !DILocation(line: 2336, column: 1, scope: !4678)
!4691 = distinct !DISubprogram(name: "float32_ne", scope: !3, file: !3, line: 2338, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2339, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4692 = !DILocalVariable(name: "a", arg: 1, scope: !4691, file: !3, line: 2338, type: !1109)
!4693 = !DILocation(line: 2338, column: 26, scope: !4691)
!4694 = !DILocalVariable(name: "b", arg: 2, scope: !4691, file: !3, line: 2338, type: !1109)
!4695 = !DILocation(line: 2338, column: 37, scope: !4691)
!4696 = !DILocation(line: 2340, column: 20, scope: !4691)
!4697 = !DILocation(line: 2340, column: 22, scope: !4691)
!4698 = !DILocation(line: 2340, column: 9, scope: !4691)
!4699 = !DILocation(line: 2340, column: 8, scope: !4691)
!4700 = !DILocation(line: 2340, column: 1, scope: !4691)
!4701 = distinct !DISubprogram(name: "float32_one_quiet", scope: !3, file: !3, line: 2343, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2344, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4702 = !DILocalVariable(name: "a", arg: 1, scope: !4701, file: !3, line: 2343, type: !1109)
!4703 = !DILocation(line: 2343, column: 33, scope: !4701)
!4704 = !DILocalVariable(name: "b", arg: 2, scope: !4701, file: !3, line: 2343, type: !1109)
!4705 = !DILocation(line: 2343, column: 44, scope: !4701)
!4706 = !DILocation(line: 2345, column: 26, scope: !4701)
!4707 = !DILocation(line: 2345, column: 28, scope: !4701)
!4708 = !DILocation(line: 2345, column: 8, scope: !4701)
!4709 = !DILocation(line: 2345, column: 30, scope: !4701)
!4710 = !DILocation(line: 2345, column: 43, scope: !4701)
!4711 = !DILocation(line: 2345, column: 45, scope: !4701)
!4712 = !DILocation(line: 2345, column: 32, scope: !4701)
!4713 = !DILocation(line: 2345, column: 1, scope: !4701)
!4714 = distinct !DISubprogram(name: "float32_ord_quiet", scope: !3, file: !3, line: 2347, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2348, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4715 = !DILocalVariable(name: "a", arg: 1, scope: !4714, file: !3, line: 2347, type: !1109)
!4716 = !DILocation(line: 2347, column: 33, scope: !4714)
!4717 = !DILocalVariable(name: "b", arg: 2, scope: !4714, file: !3, line: 2347, type: !1109)
!4718 = !DILocation(line: 2347, column: 44, scope: !4714)
!4719 = !DILocation(line: 2349, column: 24, scope: !4714)
!4720 = !DILocation(line: 2349, column: 9, scope: !4714)
!4721 = !DILocation(line: 2349, column: 26, scope: !4714)
!4722 = !DILocation(line: 2349, column: 44, scope: !4714)
!4723 = !DILocation(line: 2349, column: 29, scope: !4714)
!4724 = !DILocation(line: 2349, column: 28, scope: !4714)
!4725 = !DILocation(line: 2349, column: 1, scope: !4714)
!4726 = distinct !DISubprogram(name: "float32_eq_signaling", scope: !3, file: !3, line: 2362, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2363, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4727 = !DILocalVariable(name: "a", arg: 1, scope: !4726, file: !3, line: 2362, type: !1109)
!4728 = !DILocation(line: 2362, column: 36, scope: !4726)
!4729 = !DILocalVariable(name: "b", arg: 2, scope: !4726, file: !3, line: 2362, type: !1109)
!4730 = !DILocation(line: 2362, column: 47, scope: !4726)
!4731 = !DILocation(line: 2365, column: 32, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 2365, column: 9)
!4733 = !DILocation(line: 2365, column: 13, scope: !4732)
!4734 = !DILocation(line: 2365, column: 36, scope: !4732)
!4735 = !DILocation(line: 2365, column: 46, scope: !4732)
!4736 = !DILocation(line: 2365, column: 69, scope: !4732)
!4737 = !DILocation(line: 2365, column: 49, scope: !4732)
!4738 = !DILocation(line: 2366, column: 1, scope: !4732)
!4739 = !DILocation(line: 2366, column: 27, scope: !4732)
!4740 = !DILocation(line: 2366, column: 8, scope: !4732)
!4741 = !DILocation(line: 2366, column: 31, scope: !4732)
!4742 = !DILocation(line: 2366, column: 41, scope: !4732)
!4743 = !DILocation(line: 2366, column: 64, scope: !4732)
!4744 = !DILocation(line: 2366, column: 44, scope: !4732)
!4745 = !DILocation(line: 2365, column: 9, scope: !4726)
!4746 = !DILocation(line: 2368, column: 1, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 2367, column: 3)
!4748 = !DILocation(line: 2369, column: 1, scope: !4747)
!4749 = !DILocation(line: 2371, column: 10, scope: !4726)
!4750 = !DILocation(line: 2371, column: 15, scope: !4726)
!4751 = !DILocation(line: 2371, column: 12, scope: !4726)
!4752 = !DILocation(line: 2371, column: 19, scope: !4726)
!4753 = !DILocation(line: 2371, column: 37, scope: !4726)
!4754 = !DILocation(line: 2371, column: 41, scope: !4726)
!4755 = !DILocation(line: 2371, column: 39, scope: !4726)
!4756 = !DILocation(line: 2371, column: 44, scope: !4726)
!4757 = !DILocation(line: 2371, column: 50, scope: !4726)
!4758 = !DILocation(line: 2371, column: 1, scope: !4726)
!4759 = !DILocation(line: 2373, column: 1, scope: !4726)
!4760 = distinct !DISubprogram(name: "float32_le_quiet", scope: !3, file: !3, line: 2382, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2383, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4761 = !DILocalVariable(name: "a", arg: 1, scope: !4760, file: !3, line: 2382, type: !1109)
!4762 = !DILocation(line: 2382, column: 32, scope: !4760)
!4763 = !DILocalVariable(name: "b", arg: 2, scope: !4760, file: !3, line: 2382, type: !1109)
!4764 = !DILocation(line: 2382, column: 43, scope: !4760)
!4765 = !DILocalVariable(name: "aSign", scope: !4760, file: !3, line: 2384, type: !1241)
!4766 = !DILocation(line: 2384, column: 6, scope: !4760)
!4767 = !DILocalVariable(name: "bSign", scope: !4760, file: !3, line: 2384, type: !1241)
!4768 = !DILocation(line: 2384, column: 13, scope: !4760)
!4769 = !DILocalVariable(name: "aExp", scope: !4760, file: !3, line: 2385, type: !60)
!4770 = !DILocation(line: 2385, column: 7, scope: !4760)
!4771 = !DILocalVariable(name: "bExp", scope: !4760, file: !3, line: 2385, type: !60)
!4772 = !DILocation(line: 2385, column: 13, scope: !4760)
!4773 = !DILocation(line: 2387, column: 32, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4760, file: !3, line: 2387, column: 9)
!4775 = !DILocation(line: 2387, column: 13, scope: !4774)
!4776 = !DILocation(line: 2387, column: 36, scope: !4774)
!4777 = !DILocation(line: 2387, column: 46, scope: !4774)
!4778 = !DILocation(line: 2387, column: 69, scope: !4774)
!4779 = !DILocation(line: 2387, column: 49, scope: !4774)
!4780 = !DILocation(line: 2388, column: 1, scope: !4774)
!4781 = !DILocation(line: 2388, column: 27, scope: !4774)
!4782 = !DILocation(line: 2388, column: 8, scope: !4774)
!4783 = !DILocation(line: 2388, column: 31, scope: !4774)
!4784 = !DILocation(line: 2388, column: 41, scope: !4774)
!4785 = !DILocation(line: 2388, column: 64, scope: !4774)
!4786 = !DILocation(line: 2388, column: 44, scope: !4774)
!4787 = !DILocation(line: 2387, column: 9, scope: !4760)
!4788 = !DILocation(line: 2390, column: 22, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4790, file: !3, line: 2390, column: 6)
!4790 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 2389, column: 3)
!4791 = !DILocation(line: 2390, column: 6, scope: !4789)
!4792 = !DILocation(line: 2390, column: 26, scope: !4789)
!4793 = !DILocation(line: 2390, column: 45, scope: !4789)
!4794 = !DILocation(line: 2390, column: 29, scope: !4789)
!4795 = !DILocation(line: 2390, column: 6, scope: !4790)
!4796 = !DILocation(line: 2391, column: 1, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 2390, column: 51)
!4798 = !DILocation(line: 2392, column: 1, scope: !4797)
!4799 = !DILocation(line: 2393, column: 1, scope: !4790)
!4800 = !DILocation(line: 2395, column: 29, scope: !4760)
!4801 = !DILocation(line: 2395, column: 9, scope: !4760)
!4802 = !DILocation(line: 2395, column: 7, scope: !4760)
!4803 = !DILocation(line: 2396, column: 29, scope: !4760)
!4804 = !DILocation(line: 2396, column: 9, scope: !4760)
!4805 = !DILocation(line: 2396, column: 7, scope: !4760)
!4806 = !DILocation(line: 2397, column: 6, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4760, file: !3, line: 2397, column: 6)
!4808 = !DILocation(line: 2397, column: 15, scope: !4807)
!4809 = !DILocation(line: 2397, column: 12, scope: !4807)
!4810 = !DILocation(line: 2397, column: 6, scope: !4760)
!4811 = !DILocation(line: 2397, column: 30, scope: !4807)
!4812 = !DILocation(line: 2397, column: 36, scope: !4807)
!4813 = !DILocation(line: 2397, column: 54, scope: !4807)
!4814 = !DILocation(line: 2397, column: 58, scope: !4807)
!4815 = !DILocation(line: 2397, column: 56, scope: !4807)
!4816 = !DILocation(line: 2397, column: 61, scope: !4807)
!4817 = !DILocation(line: 2397, column: 67, scope: !4807)
!4818 = !DILocation(line: 2397, column: 23, scope: !4807)
!4819 = !DILocation(line: 2398, column: 10, scope: !4760)
!4820 = !DILocation(line: 2398, column: 15, scope: !4760)
!4821 = !DILocation(line: 2398, column: 12, scope: !4760)
!4822 = !DILocation(line: 2398, column: 19, scope: !4760)
!4823 = !DILocation(line: 2398, column: 24, scope: !4760)
!4824 = !DILocation(line: 2398, column: 34, scope: !4760)
!4825 = !DILocation(line: 2398, column: 38, scope: !4760)
!4826 = !DILocation(line: 2398, column: 36, scope: !4760)
!4827 = !DILocation(line: 2398, column: 30, scope: !4760)
!4828 = !DILocation(line: 2398, column: 1, scope: !4760)
!4829 = !DILocation(line: 2400, column: 1, scope: !4760)
!4830 = distinct !DISubprogram(name: "float32_lt_quiet", scope: !3, file: !3, line: 2409, type: !4470, isLocal: false, isDefinition: true, scopeLine: 2410, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4831 = !DILocalVariable(name: "a", arg: 1, scope: !4830, file: !3, line: 2409, type: !1109)
!4832 = !DILocation(line: 2409, column: 32, scope: !4830)
!4833 = !DILocalVariable(name: "b", arg: 2, scope: !4830, file: !3, line: 2409, type: !1109)
!4834 = !DILocation(line: 2409, column: 43, scope: !4830)
!4835 = !DILocalVariable(name: "aSign", scope: !4830, file: !3, line: 2411, type: !1241)
!4836 = !DILocation(line: 2411, column: 6, scope: !4830)
!4837 = !DILocalVariable(name: "bSign", scope: !4830, file: !3, line: 2411, type: !1241)
!4838 = !DILocation(line: 2411, column: 13, scope: !4830)
!4839 = !DILocation(line: 2413, column: 32, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4830, file: !3, line: 2413, column: 9)
!4841 = !DILocation(line: 2413, column: 13, scope: !4840)
!4842 = !DILocation(line: 2413, column: 36, scope: !4840)
!4843 = !DILocation(line: 2413, column: 46, scope: !4840)
!4844 = !DILocation(line: 2413, column: 69, scope: !4840)
!4845 = !DILocation(line: 2413, column: 49, scope: !4840)
!4846 = !DILocation(line: 2414, column: 1, scope: !4840)
!4847 = !DILocation(line: 2414, column: 27, scope: !4840)
!4848 = !DILocation(line: 2414, column: 8, scope: !4840)
!4849 = !DILocation(line: 2414, column: 31, scope: !4840)
!4850 = !DILocation(line: 2414, column: 41, scope: !4840)
!4851 = !DILocation(line: 2414, column: 64, scope: !4840)
!4852 = !DILocation(line: 2414, column: 44, scope: !4840)
!4853 = !DILocation(line: 2413, column: 9, scope: !4830)
!4854 = !DILocation(line: 2416, column: 22, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 2416, column: 6)
!4856 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 2415, column: 3)
!4857 = !DILocation(line: 2416, column: 6, scope: !4855)
!4858 = !DILocation(line: 2416, column: 26, scope: !4855)
!4859 = !DILocation(line: 2416, column: 45, scope: !4855)
!4860 = !DILocation(line: 2416, column: 29, scope: !4855)
!4861 = !DILocation(line: 2416, column: 6, scope: !4856)
!4862 = !DILocation(line: 2417, column: 1, scope: !4863)
!4863 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 2416, column: 51)
!4864 = !DILocation(line: 2418, column: 1, scope: !4863)
!4865 = !DILocation(line: 2419, column: 1, scope: !4856)
!4866 = !DILocation(line: 2421, column: 29, scope: !4830)
!4867 = !DILocation(line: 2421, column: 9, scope: !4830)
!4868 = !DILocation(line: 2421, column: 7, scope: !4830)
!4869 = !DILocation(line: 2422, column: 29, scope: !4830)
!4870 = !DILocation(line: 2422, column: 9, scope: !4830)
!4871 = !DILocation(line: 2422, column: 7, scope: !4830)
!4872 = !DILocation(line: 2423, column: 6, scope: !4873)
!4873 = distinct !DILexicalBlock(scope: !4830, file: !3, line: 2423, column: 6)
!4874 = !DILocation(line: 2423, column: 15, scope: !4873)
!4875 = !DILocation(line: 2423, column: 12, scope: !4873)
!4876 = !DILocation(line: 2423, column: 6, scope: !4830)
!4877 = !DILocation(line: 2423, column: 30, scope: !4873)
!4878 = !DILocation(line: 2423, column: 36, scope: !4873)
!4879 = !DILocation(line: 2423, column: 54, scope: !4873)
!4880 = !DILocation(line: 2423, column: 58, scope: !4873)
!4881 = !DILocation(line: 2423, column: 56, scope: !4873)
!4882 = !DILocation(line: 2423, column: 61, scope: !4873)
!4883 = !DILocation(line: 2423, column: 67, scope: !4873)
!4884 = !DILocation(line: 2423, column: 23, scope: !4873)
!4885 = !DILocation(line: 2424, column: 10, scope: !4830)
!4886 = !DILocation(line: 2424, column: 15, scope: !4830)
!4887 = !DILocation(line: 2424, column: 12, scope: !4830)
!4888 = !DILocation(line: 2424, column: 19, scope: !4830)
!4889 = !DILocation(line: 2424, column: 24, scope: !4830)
!4890 = !DILocation(line: 2424, column: 34, scope: !4830)
!4891 = !DILocation(line: 2424, column: 38, scope: !4830)
!4892 = !DILocation(line: 2424, column: 36, scope: !4830)
!4893 = !DILocation(line: 2424, column: 30, scope: !4830)
!4894 = !DILocation(line: 2424, column: 1, scope: !4830)
!4895 = !DILocation(line: 2426, column: 1, scope: !4830)
!4896 = distinct !DISubprogram(name: "float64_to_int32", scope: !3, file: !3, line: 2438, type: !4897, isLocal: false, isDefinition: true, scopeLine: 2439, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4897 = !DISubroutineType(types: !4898)
!4898 = !{!32, !1130}
!4899 = !DILocalVariable(name: "a", arg: 1, scope: !4896, file: !3, line: 2438, type: !1130)
!4900 = !DILocation(line: 2438, column: 33, scope: !4896)
!4901 = !DILocalVariable(name: "aSign", scope: !4896, file: !3, line: 2440, type: !1241)
!4902 = !DILocation(line: 2440, column: 6, scope: !4896)
!4903 = !DILocalVariable(name: "aExp", scope: !4896, file: !3, line: 2441, type: !60)
!4904 = !DILocation(line: 2441, column: 7, scope: !4896)
!4905 = !DILocalVariable(name: "shiftCount", scope: !4896, file: !3, line: 2441, type: !60)
!4906 = !DILocation(line: 2441, column: 13, scope: !4896)
!4907 = !DILocalVariable(name: "aSig", scope: !4896, file: !3, line: 2442, type: !24)
!4908 = !DILocation(line: 2442, column: 8, scope: !4896)
!4909 = !DILocation(line: 2444, column: 28, scope: !4896)
!4910 = !DILocation(line: 2444, column: 8, scope: !4896)
!4911 = !DILocation(line: 2444, column: 6, scope: !4896)
!4912 = !DILocation(line: 2445, column: 27, scope: !4896)
!4913 = !DILocation(line: 2445, column: 8, scope: !4896)
!4914 = !DILocation(line: 2445, column: 6, scope: !4896)
!4915 = !DILocation(line: 2446, column: 29, scope: !4896)
!4916 = !DILocation(line: 2446, column: 9, scope: !4896)
!4917 = !DILocation(line: 2446, column: 7, scope: !4896)
!4918 = !DILocation(line: 2447, column: 8, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2447, column: 6)
!4920 = !DILocation(line: 2447, column: 13, scope: !4919)
!4921 = !DILocation(line: 2447, column: 24, scope: !4919)
!4922 = !DILocation(line: 2447, column: 27, scope: !4919)
!4923 = !DILocation(line: 2447, column: 6, scope: !4896)
!4924 = !DILocation(line: 2447, column: 40, scope: !4919)
!4925 = !DILocation(line: 2447, column: 34, scope: !4919)
!4926 = !DILocation(line: 2448, column: 6, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2448, column: 6)
!4928 = !DILocation(line: 2448, column: 6, scope: !4896)
!4929 = !DILocation(line: 2448, column: 18, scope: !4927)
!4930 = !DILocation(line: 2448, column: 13, scope: !4927)
!4931 = !DILocation(line: 2449, column: 22, scope: !4896)
!4932 = !DILocation(line: 2449, column: 20, scope: !4896)
!4933 = !DILocation(line: 2449, column: 12, scope: !4896)
!4934 = !DILocation(line: 2450, column: 10, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2450, column: 6)
!4936 = !DILocation(line: 2450, column: 8, scope: !4935)
!4937 = !DILocation(line: 2450, column: 6, scope: !4896)
!4938 = !DILocation(line: 2450, column: 44, scope: !4935)
!4939 = !DILocation(line: 2450, column: 50, scope: !4935)
!4940 = !DILocation(line: 2450, column: 23, scope: !4935)
!4941 = !DILocation(line: 2451, column: 27, scope: !4896)
!4942 = !DILocation(line: 2451, column: 34, scope: !4896)
!4943 = !DILocation(line: 2451, column: 8, scope: !4896)
!4944 = !DILocation(line: 2451, column: 1, scope: !4896)
!4945 = distinct !DISubprogram(name: "float64_to_int32_round_to_zero", scope: !3, file: !3, line: 2465, type: !4897, isLocal: false, isDefinition: true, scopeLine: 2466, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!4946 = !DILocalVariable(name: "a", arg: 1, scope: !4945, file: !3, line: 2465, type: !1130)
!4947 = !DILocation(line: 2465, column: 47, scope: !4945)
!4948 = !DILocalVariable(name: "aSign", scope: !4945, file: !3, line: 2467, type: !1241)
!4949 = !DILocation(line: 2467, column: 6, scope: !4945)
!4950 = !DILocalVariable(name: "aExp", scope: !4945, file: !3, line: 2468, type: !60)
!4951 = !DILocation(line: 2468, column: 7, scope: !4945)
!4952 = !DILocalVariable(name: "shiftCount", scope: !4945, file: !3, line: 2468, type: !60)
!4953 = !DILocation(line: 2468, column: 13, scope: !4945)
!4954 = !DILocalVariable(name: "aSig", scope: !4945, file: !3, line: 2469, type: !24)
!4955 = !DILocation(line: 2469, column: 8, scope: !4945)
!4956 = !DILocalVariable(name: "savedASig", scope: !4945, file: !3, line: 2469, type: !24)
!4957 = !DILocation(line: 2469, column: 14, scope: !4945)
!4958 = !DILocalVariable(name: "z", scope: !4945, file: !3, line: 2470, type: !1319)
!4959 = !DILocation(line: 2470, column: 7, scope: !4945)
!4960 = !DILocation(line: 2472, column: 28, scope: !4945)
!4961 = !DILocation(line: 2472, column: 8, scope: !4945)
!4962 = !DILocation(line: 2472, column: 6, scope: !4945)
!4963 = !DILocation(line: 2473, column: 27, scope: !4945)
!4964 = !DILocation(line: 2473, column: 8, scope: !4945)
!4965 = !DILocation(line: 2473, column: 6, scope: !4945)
!4966 = !DILocation(line: 2474, column: 29, scope: !4945)
!4967 = !DILocation(line: 2474, column: 9, scope: !4945)
!4968 = !DILocation(line: 2474, column: 7, scope: !4945)
!4969 = !DILocation(line: 2475, column: 14, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 2475, column: 6)
!4971 = !DILocation(line: 2475, column: 12, scope: !4970)
!4972 = !DILocation(line: 2475, column: 6, scope: !4945)
!4973 = !DILocation(line: 2476, column: 8, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4975, file: !3, line: 2476, column: 6)
!4975 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 2475, column: 21)
!4976 = !DILocation(line: 2476, column: 13, scope: !4974)
!4977 = !DILocation(line: 2476, column: 24, scope: !4974)
!4978 = !DILocation(line: 2476, column: 27, scope: !4974)
!4979 = !DILocation(line: 2476, column: 6, scope: !4975)
!4980 = !DILocation(line: 2476, column: 40, scope: !4974)
!4981 = !DILocation(line: 2476, column: 34, scope: !4974)
!4982 = !DILocation(line: 2477, column: 1, scope: !4975)
!4983 = !DILocation(line: 2479, column: 11, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 2479, column: 11)
!4985 = !DILocation(line: 2479, column: 16, scope: !4984)
!4986 = !DILocation(line: 2479, column: 11, scope: !4970)
!4987 = !DILocation(line: 2480, column: 6, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 2480, column: 6)
!4989 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 2479, column: 26)
!4990 = !DILocation(line: 2480, column: 11, scope: !4988)
!4991 = !DILocation(line: 2480, column: 14, scope: !4988)
!4992 = !DILocation(line: 2480, column: 6, scope: !4989)
!4993 = !DILocation(line: 2480, column: 43, scope: !4988)
!4994 = !DILocation(line: 2480, column: 21, scope: !4988)
!4995 = !DILocation(line: 2481, column: 1, scope: !4989)
!4996 = !DILocation(line: 2483, column: 6, scope: !4945)
!4997 = !DILocation(line: 2484, column: 22, scope: !4945)
!4998 = !DILocation(line: 2484, column: 20, scope: !4945)
!4999 = !DILocation(line: 2484, column: 12, scope: !4945)
!5000 = !DILocation(line: 2485, column: 13, scope: !4945)
!5001 = !DILocation(line: 2485, column: 11, scope: !4945)
!5002 = !DILocation(line: 2486, column: 10, scope: !4945)
!5003 = !DILocation(line: 2486, column: 6, scope: !4945)
!5004 = !DILocation(line: 2487, column: 5, scope: !4945)
!5005 = !DILocation(line: 2487, column: 3, scope: !4945)
!5006 = !DILocation(line: 2488, column: 6, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 2488, column: 6)
!5008 = !DILocation(line: 2488, column: 6, scope: !4945)
!5009 = !DILocation(line: 2488, column: 20, scope: !5007)
!5010 = !DILocation(line: 2488, column: 18, scope: !5007)
!5011 = !DILocation(line: 2488, column: 16, scope: !5007)
!5012 = !DILocation(line: 2488, column: 14, scope: !5007)
!5013 = !DILocation(line: 2489, column: 8, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 2489, column: 6)
!5015 = !DILocation(line: 2489, column: 10, scope: !5014)
!5016 = !DILocation(line: 2489, column: 18, scope: !5014)
!5017 = !DILocation(line: 2489, column: 16, scope: !5014)
!5018 = !DILocation(line: 2489, column: 6, scope: !4945)
!5019 = !DILocation(line: 2489, column: 26, scope: !5014)
!5020 = !DILocation(line: 2491, column: 9, scope: !5021)
!5021 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 2489, column: 26)
!5022 = !DILocation(line: 2492, column: 8, scope: !5021)
!5023 = !DILocation(line: 2492, column: 1, scope: !5021)
!5024 = !DILocation(line: 2494, column: 8, scope: !5025)
!5025 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 2494, column: 6)
!5026 = !DILocation(line: 2494, column: 14, scope: !5025)
!5027 = !DILocation(line: 2494, column: 12, scope: !5025)
!5028 = !DILocation(line: 2494, column: 30, scope: !5025)
!5029 = !DILocation(line: 2494, column: 27, scope: !5025)
!5030 = !DILocation(line: 2494, column: 6, scope: !4945)
!5031 = !DILocation(line: 2495, column: 23, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 2494, column: 42)
!5033 = !DILocation(line: 2496, column: 1, scope: !5032)
!5034 = !DILocation(line: 2497, column: 8, scope: !4945)
!5035 = !DILocation(line: 2497, column: 1, scope: !4945)
!5036 = !DILocation(line: 2499, column: 1, scope: !4945)
!5037 = distinct !DISubprogram(name: "float64_to_int64", scope: !3, file: !3, line: 2511, type: !5038, isLocal: false, isDefinition: true, scopeLine: 2512, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5038 = !DISubroutineType(types: !5039)
!5039 = !{!34, !1130}
!5040 = !DILocalVariable(name: "a", arg: 1, scope: !5037, file: !3, line: 2511, type: !1130)
!5041 = !DILocation(line: 2511, column: 33, scope: !5037)
!5042 = !DILocalVariable(name: "aSign", scope: !5037, file: !3, line: 2513, type: !1241)
!5043 = !DILocation(line: 2513, column: 6, scope: !5037)
!5044 = !DILocalVariable(name: "aExp", scope: !5037, file: !3, line: 2514, type: !60)
!5045 = !DILocation(line: 2514, column: 7, scope: !5037)
!5046 = !DILocalVariable(name: "shiftCount", scope: !5037, file: !3, line: 2514, type: !60)
!5047 = !DILocation(line: 2514, column: 13, scope: !5037)
!5048 = !DILocalVariable(name: "aSig", scope: !5037, file: !3, line: 2515, type: !24)
!5049 = !DILocation(line: 2515, column: 8, scope: !5037)
!5050 = !DILocalVariable(name: "aSigExtra", scope: !5037, file: !3, line: 2515, type: !24)
!5051 = !DILocation(line: 2515, column: 14, scope: !5037)
!5052 = !DILocation(line: 2517, column: 28, scope: !5037)
!5053 = !DILocation(line: 2517, column: 8, scope: !5037)
!5054 = !DILocation(line: 2517, column: 6, scope: !5037)
!5055 = !DILocation(line: 2518, column: 27, scope: !5037)
!5056 = !DILocation(line: 2518, column: 8, scope: !5037)
!5057 = !DILocation(line: 2518, column: 6, scope: !5037)
!5058 = !DILocation(line: 2519, column: 29, scope: !5037)
!5059 = !DILocation(line: 2519, column: 9, scope: !5037)
!5060 = !DILocation(line: 2519, column: 7, scope: !5037)
!5061 = !DILocation(line: 2520, column: 6, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 2520, column: 6)
!5063 = !DILocation(line: 2520, column: 6, scope: !5037)
!5064 = !DILocation(line: 2520, column: 18, scope: !5062)
!5065 = !DILocation(line: 2520, column: 13, scope: !5062)
!5066 = !DILocation(line: 2521, column: 22, scope: !5037)
!5067 = !DILocation(line: 2521, column: 20, scope: !5037)
!5068 = !DILocation(line: 2521, column: 12, scope: !5037)
!5069 = !DILocation(line: 2522, column: 6, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 2522, column: 6)
!5071 = !DILocation(line: 2522, column: 17, scope: !5070)
!5072 = !DILocation(line: 2522, column: 6, scope: !5037)
!5073 = !DILocation(line: 2523, column: 14, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 2523, column: 6)
!5075 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 2522, column: 24)
!5076 = !DILocation(line: 2523, column: 12, scope: !5074)
!5077 = !DILocation(line: 2523, column: 6, scope: !5075)
!5078 = !DILocation(line: 2524, column: 1, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5074, file: !3, line: 2523, column: 21)
!5080 = !DILocation(line: 2525, column: 11, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5079, file: !3, line: 2525, column: 9)
!5082 = !DILocation(line: 2526, column: 1, scope: !5081)
!5083 = !DILocation(line: 2526, column: 11, scope: !5081)
!5084 = !DILocation(line: 2526, column: 16, scope: !5081)
!5085 = !DILocation(line: 2527, column: 1, scope: !5081)
!5086 = !DILocation(line: 2527, column: 6, scope: !5081)
!5087 = !DILocation(line: 2527, column: 11, scope: !5081)
!5088 = !DILocation(line: 2525, column: 9, scope: !5079)
!5089 = !DILocation(line: 2529, column: 1, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 2528, column: 3)
!5091 = !DILocation(line: 2531, column: 1, scope: !5079)
!5092 = !DILocation(line: 2533, column: 11, scope: !5075)
!5093 = !DILocation(line: 2534, column: 12, scope: !5075)
!5094 = !DILocation(line: 2534, column: 10, scope: !5075)
!5095 = !DILocation(line: 2534, column: 6, scope: !5075)
!5096 = !DILocation(line: 2535, column: 1, scope: !5075)
!5097 = !DILocation(line: 2537, column: 27, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 2536, column: 6)
!5099 = !DILocation(line: 2537, column: 36, scope: !5098)
!5100 = !DILocation(line: 2537, column: 1, scope: !5098)
!5101 = !DILocation(line: 2539, column: 27, scope: !5037)
!5102 = !DILocation(line: 2539, column: 34, scope: !5037)
!5103 = !DILocation(line: 2539, column: 40, scope: !5037)
!5104 = !DILocation(line: 2539, column: 8, scope: !5037)
!5105 = !DILocation(line: 2539, column: 1, scope: !5037)
!5106 = !DILocation(line: 2541, column: 1, scope: !5037)
!5107 = distinct !DISubprogram(name: "float64_to_int64_round_to_zero", scope: !3, file: !3, line: 2553, type: !5038, isLocal: false, isDefinition: true, scopeLine: 2554, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5108 = !DILocalVariable(name: "a", arg: 1, scope: !5107, file: !3, line: 2553, type: !1130)
!5109 = !DILocation(line: 2553, column: 47, scope: !5107)
!5110 = !DILocalVariable(name: "aSign", scope: !5107, file: !3, line: 2555, type: !1241)
!5111 = !DILocation(line: 2555, column: 6, scope: !5107)
!5112 = !DILocalVariable(name: "aExp", scope: !5107, file: !3, line: 2556, type: !60)
!5113 = !DILocation(line: 2556, column: 7, scope: !5107)
!5114 = !DILocalVariable(name: "shiftCount", scope: !5107, file: !3, line: 2556, type: !60)
!5115 = !DILocation(line: 2556, column: 13, scope: !5107)
!5116 = !DILocalVariable(name: "aSig", scope: !5107, file: !3, line: 2557, type: !24)
!5117 = !DILocation(line: 2557, column: 8, scope: !5107)
!5118 = !DILocalVariable(name: "z", scope: !5107, file: !3, line: 2558, type: !1628)
!5119 = !DILocation(line: 2558, column: 7, scope: !5107)
!5120 = !DILocation(line: 2560, column: 28, scope: !5107)
!5121 = !DILocation(line: 2560, column: 8, scope: !5107)
!5122 = !DILocation(line: 2560, column: 6, scope: !5107)
!5123 = !DILocation(line: 2561, column: 27, scope: !5107)
!5124 = !DILocation(line: 2561, column: 8, scope: !5107)
!5125 = !DILocation(line: 2561, column: 6, scope: !5107)
!5126 = !DILocation(line: 2562, column: 29, scope: !5107)
!5127 = !DILocation(line: 2562, column: 9, scope: !5107)
!5128 = !DILocation(line: 2562, column: 7, scope: !5107)
!5129 = !DILocation(line: 2563, column: 6, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 2563, column: 6)
!5131 = !DILocation(line: 2563, column: 6, scope: !5107)
!5132 = !DILocation(line: 2563, column: 18, scope: !5130)
!5133 = !DILocation(line: 2563, column: 13, scope: !5130)
!5134 = !DILocation(line: 2564, column: 14, scope: !5107)
!5135 = !DILocation(line: 2564, column: 19, scope: !5107)
!5136 = !DILocation(line: 2564, column: 12, scope: !5107)
!5137 = !DILocation(line: 2565, column: 11, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 2565, column: 6)
!5139 = !DILocation(line: 2565, column: 8, scope: !5138)
!5140 = !DILocation(line: 2565, column: 6, scope: !5107)
!5141 = !DILocation(line: 2566, column: 15, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5143, file: !3, line: 2566, column: 6)
!5143 = distinct !DILexicalBlock(scope: !5138, file: !3, line: 2565, column: 24)
!5144 = !DILocation(line: 2566, column: 12, scope: !5142)
!5145 = !DILocation(line: 2566, column: 6, scope: !5143)
!5146 = !DILocation(line: 2567, column: 6, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5148, file: !3, line: 2567, column: 6)
!5148 = distinct !DILexicalBlock(scope: !5142, file: !3, line: 2566, column: 22)
!5149 = !DILocation(line: 2567, column: 8, scope: !5147)
!5150 = !DILocation(line: 2567, column: 6, scope: !5148)
!5151 = !DILocation(line: 2568, column: 1, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5147, file: !3, line: 2567, column: 41)
!5153 = !DILocation(line: 2569, column: 11, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5152, file: !3, line: 2569, column: 9)
!5155 = !DILocation(line: 2570, column: 1, scope: !5154)
!5156 = !DILocation(line: 2570, column: 11, scope: !5154)
!5157 = !DILocation(line: 2570, column: 16, scope: !5154)
!5158 = !DILocation(line: 2571, column: 1, scope: !5154)
!5159 = !DILocation(line: 2571, column: 6, scope: !5154)
!5160 = !DILocation(line: 2571, column: 11, scope: !5154)
!5161 = !DILocation(line: 2569, column: 9, scope: !5152)
!5162 = !DILocation(line: 2573, column: 1, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 2572, column: 3)
!5164 = !DILocation(line: 2575, column: 1, scope: !5152)
!5165 = !DILocation(line: 2576, column: 1, scope: !5148)
!5166 = !DILocation(line: 2578, column: 5, scope: !5143)
!5167 = !DILocation(line: 2578, column: 11, scope: !5143)
!5168 = !DILocation(line: 2578, column: 9, scope: !5143)
!5169 = !DILocation(line: 2578, column: 3, scope: !5143)
!5170 = !DILocation(line: 2579, column: 1, scope: !5143)
!5171 = !DILocation(line: 2581, column: 6, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5173, file: !3, line: 2581, column: 6)
!5173 = distinct !DILexicalBlock(scope: !5138, file: !3, line: 2580, column: 6)
!5174 = !DILocation(line: 2581, column: 11, scope: !5172)
!5175 = !DILocation(line: 2581, column: 6, scope: !5173)
!5176 = !DILocation(line: 2582, column: 6, scope: !5177)
!5177 = distinct !DILexicalBlock(scope: !5178, file: !3, line: 2582, column: 6)
!5178 = distinct !DILexicalBlock(scope: !5172, file: !3, line: 2581, column: 21)
!5179 = !DILocation(line: 2582, column: 13, scope: !5177)
!5180 = !DILocation(line: 2582, column: 11, scope: !5177)
!5181 = !DILocation(line: 2582, column: 6, scope: !5178)
!5182 = !DILocation(line: 2582, column: 42, scope: !5177)
!5183 = !DILocation(line: 2582, column: 20, scope: !5177)
!5184 = !DILocation(line: 2583, column: 1, scope: !5178)
!5185 = !DILocation(line: 2585, column: 5, scope: !5173)
!5186 = !DILocation(line: 2585, column: 15, scope: !5173)
!5187 = !DILocation(line: 2585, column: 13, scope: !5173)
!5188 = !DILocation(line: 2585, column: 9, scope: !5173)
!5189 = !DILocation(line: 2585, column: 3, scope: !5173)
!5190 = !DILocation(line: 2586, column: 17, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5173, file: !3, line: 2586, column: 6)
!5192 = !DILocation(line: 2586, column: 25, scope: !5191)
!5193 = !DILocation(line: 2586, column: 36, scope: !5191)
!5194 = !DILocation(line: 2586, column: 21, scope: !5191)
!5195 = !DILocation(line: 2586, column: 6, scope: !5191)
!5196 = !DILocation(line: 2586, column: 6, scope: !5173)
!5197 = !DILocation(line: 2587, column: 23, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5191, file: !3, line: 2586, column: 47)
!5199 = !DILocation(line: 2588, column: 1, scope: !5198)
!5200 = !DILocation(line: 2590, column: 6, scope: !5201)
!5201 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 2590, column: 6)
!5202 = !DILocation(line: 2590, column: 6, scope: !5107)
!5203 = !DILocation(line: 2590, column: 20, scope: !5201)
!5204 = !DILocation(line: 2590, column: 18, scope: !5201)
!5205 = !DILocation(line: 2590, column: 16, scope: !5201)
!5206 = !DILocation(line: 2590, column: 14, scope: !5201)
!5207 = !DILocation(line: 2591, column: 8, scope: !5107)
!5208 = !DILocation(line: 2591, column: 1, scope: !5107)
!5209 = !DILocation(line: 2593, column: 1, scope: !5107)
!5210 = distinct !DISubprogram(name: "float64_to_float32", scope: !3, file: !3, line: 2602, type: !5211, isLocal: false, isDefinition: true, scopeLine: 2603, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5211 = !DISubroutineType(types: !5212)
!5212 = !{!1109, !1130}
!5213 = !DILocalVariable(name: "a", arg: 1, scope: !5210, file: !3, line: 2602, type: !1130)
!5214 = !DILocation(line: 2602, column: 37, scope: !5210)
!5215 = !DILocalVariable(name: "aSign", scope: !5210, file: !3, line: 2604, type: !1241)
!5216 = !DILocation(line: 2604, column: 6, scope: !5210)
!5217 = !DILocalVariable(name: "aExp", scope: !5210, file: !3, line: 2605, type: !60)
!5218 = !DILocation(line: 2605, column: 7, scope: !5210)
!5219 = !DILocalVariable(name: "aSig", scope: !5210, file: !3, line: 2606, type: !24)
!5220 = !DILocation(line: 2606, column: 8, scope: !5210)
!5221 = !DILocalVariable(name: "zSig", scope: !5210, file: !3, line: 2607, type: !27)
!5222 = !DILocation(line: 2607, column: 8, scope: !5210)
!5223 = !DILocation(line: 2609, column: 28, scope: !5210)
!5224 = !DILocation(line: 2609, column: 8, scope: !5210)
!5225 = !DILocation(line: 2609, column: 6, scope: !5210)
!5226 = !DILocation(line: 2610, column: 27, scope: !5210)
!5227 = !DILocation(line: 2610, column: 8, scope: !5210)
!5228 = !DILocation(line: 2610, column: 6, scope: !5210)
!5229 = !DILocation(line: 2611, column: 29, scope: !5210)
!5230 = !DILocation(line: 2611, column: 9, scope: !5210)
!5231 = !DILocation(line: 2611, column: 7, scope: !5210)
!5232 = !DILocation(line: 2612, column: 6, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !5210, file: !3, line: 2612, column: 6)
!5234 = !DILocation(line: 2612, column: 11, scope: !5233)
!5235 = !DILocation(line: 2612, column: 6, scope: !5210)
!5236 = !DILocation(line: 2613, column: 6, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5238, file: !3, line: 2613, column: 6)
!5238 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 2612, column: 22)
!5239 = !DILocation(line: 2613, column: 6, scope: !5238)
!5240 = !DILocation(line: 2613, column: 60, scope: !5237)
!5241 = !DILocation(line: 2613, column: 40, scope: !5237)
!5242 = !DILocation(line: 2613, column: 20, scope: !5237)
!5243 = !DILocation(line: 2613, column: 13, scope: !5237)
!5244 = !DILocation(line: 2614, column: 21, scope: !5238)
!5245 = !DILocation(line: 2614, column: 8, scope: !5238)
!5246 = !DILocation(line: 2614, column: 1, scope: !5238)
!5247 = !DILocation(line: 2616, column: 22, scope: !5210)
!5248 = !DILocation(line: 2616, column: 1, scope: !5210)
!5249 = !DILocation(line: 2617, column: 8, scope: !5210)
!5250 = !DILocation(line: 2617, column: 6, scope: !5210)
!5251 = !DILocation(line: 2618, column: 6, scope: !5252)
!5252 = distinct !DILexicalBlock(scope: !5210, file: !3, line: 2618, column: 6)
!5253 = !DILocation(line: 2618, column: 11, scope: !5252)
!5254 = !DILocation(line: 2618, column: 14, scope: !5252)
!5255 = !DILocation(line: 2618, column: 6, scope: !5210)
!5256 = !DILocation(line: 2619, column: 6, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5252, file: !3, line: 2618, column: 21)
!5258 = !DILocation(line: 2620, column: 6, scope: !5257)
!5259 = !DILocation(line: 2621, column: 1, scope: !5257)
!5260 = !DILocation(line: 2622, column: 29, scope: !5210)
!5261 = !DILocation(line: 2622, column: 36, scope: !5210)
!5262 = !DILocation(line: 2622, column: 42, scope: !5210)
!5263 = !DILocation(line: 2622, column: 8, scope: !5210)
!5264 = !DILocation(line: 2622, column: 1, scope: !5210)
!5265 = !DILocation(line: 2624, column: 1, scope: !5210)
!5266 = distinct !DISubprogram(name: "commonNaNToFloat32", scope: !43, file: !43, line: 113, type: !5267, isLocal: true, isDefinition: true, scopeLine: 114, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5267 = !DISubroutineType(types: !5268)
!5268 = !{!1109, !2576}
!5269 = !DILocalVariable(name: "a", arg: 1, scope: !5266, file: !43, line: 113, type: !2576)
!5270 = !DILocation(line: 113, column: 47, scope: !5266)
!5271 = !DILocation(line: 116, column: 27, scope: !5266)
!5272 = !DILocation(line: 116, column: 33, scope: !5266)
!5273 = !DILocation(line: 116, column: 40, scope: !5266)
!5274 = !DILocation(line: 116, column: 12, scope: !5266)
!5275 = !DILocation(line: 116, column: 59, scope: !5266)
!5276 = !DILocation(line: 116, column: 63, scope: !5266)
!5277 = !DILocation(line: 116, column: 53, scope: !5266)
!5278 = !DILocation(line: 116, column: 5, scope: !5266)
!5279 = distinct !DISubprogram(name: "float64ToCommonNaN", scope: !43, file: !43, line: 178, type: !5280, isLocal: true, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5280 = !DISubroutineType(types: !5281)
!5281 = !{!2576, !1130}
!5282 = !DILocalVariable(name: "a", arg: 1, scope: !5279, file: !43, line: 178, type: !1130)
!5283 = !DILocation(line: 178, column: 47, scope: !5279)
!5284 = !DILocalVariable(name: "z", scope: !5279, file: !43, line: 180, type: !2576)
!5285 = !DILocation(line: 180, column: 16, scope: !5279)
!5286 = !DILocation(line: 182, column: 36, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5279, file: !43, line: 182, column: 10)
!5288 = !DILocation(line: 182, column: 10, scope: !5287)
!5289 = !DILocation(line: 182, column: 10, scope: !5279)
!5290 = !DILocation(line: 182, column: 42, scope: !5287)
!5291 = !DILocation(line: 183, column: 14, scope: !5279)
!5292 = !DILocation(line: 183, column: 15, scope: !5279)
!5293 = !DILocation(line: 183, column: 7, scope: !5279)
!5294 = !DILocation(line: 183, column: 12, scope: !5279)
!5295 = !DILocation(line: 184, column: 7, scope: !5279)
!5296 = !DILocation(line: 184, column: 11, scope: !5279)
!5297 = !DILocation(line: 185, column: 14, scope: !5279)
!5298 = !DILocation(line: 185, column: 15, scope: !5279)
!5299 = !DILocation(line: 185, column: 7, scope: !5279)
!5300 = !DILocation(line: 185, column: 12, scope: !5279)
!5301 = !DILocation(line: 186, column: 12, scope: !5279)
!5302 = !DILocation(line: 186, column: 5, scope: !5279)
!5303 = distinct !DISubprogram(name: "float64_to_floatx80", scope: !3, file: !3, line: 2635, type: !5304, isLocal: false, isDefinition: true, scopeLine: 2636, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5304 = !DISubroutineType(types: !5305)
!5305 = !{!1151, !1130}
!5306 = !DILocalVariable(name: "a", arg: 1, scope: !5303, file: !3, line: 2635, type: !1130)
!5307 = !DILocation(line: 2635, column: 39, scope: !5303)
!5308 = !DILocalVariable(name: "aSign", scope: !5303, file: !3, line: 2637, type: !1241)
!5309 = !DILocation(line: 2637, column: 10, scope: !5303)
!5310 = !DILocalVariable(name: "aExp", scope: !5303, file: !3, line: 2638, type: !60)
!5311 = !DILocation(line: 2638, column: 11, scope: !5303)
!5312 = !DILocalVariable(name: "aSig", scope: !5303, file: !3, line: 2639, type: !24)
!5313 = !DILocation(line: 2639, column: 12, scope: !5303)
!5314 = !DILocation(line: 2641, column: 32, scope: !5303)
!5315 = !DILocation(line: 2641, column: 12, scope: !5303)
!5316 = !DILocation(line: 2641, column: 10, scope: !5303)
!5317 = !DILocation(line: 2642, column: 31, scope: !5303)
!5318 = !DILocation(line: 2642, column: 12, scope: !5303)
!5319 = !DILocation(line: 2642, column: 10, scope: !5303)
!5320 = !DILocation(line: 2643, column: 33, scope: !5303)
!5321 = !DILocation(line: 2643, column: 13, scope: !5303)
!5322 = !DILocation(line: 2643, column: 11, scope: !5303)
!5323 = !DILocation(line: 2644, column: 10, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 2644, column: 10)
!5325 = !DILocation(line: 2644, column: 15, scope: !5324)
!5326 = !DILocation(line: 2644, column: 10, scope: !5303)
!5327 = !DILocation(line: 2645, column: 14, scope: !5328)
!5328 = distinct !DILexicalBlock(scope: !5329, file: !3, line: 2645, column: 14)
!5329 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 2644, column: 26)
!5330 = !DILocation(line: 2645, column: 14, scope: !5329)
!5331 = !DILocation(line: 2645, column: 69, scope: !5328)
!5332 = !DILocation(line: 2645, column: 49, scope: !5328)
!5333 = !DILocation(line: 2645, column: 28, scope: !5328)
!5334 = !DILocation(line: 2645, column: 21, scope: !5328)
!5335 = !DILocation(line: 2646, column: 30, scope: !5329)
!5336 = !DILocation(line: 2646, column: 16, scope: !5329)
!5337 = !DILocation(line: 2646, column: 9, scope: !5329)
!5338 = !DILocation(line: 2648, column: 10, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 2648, column: 10)
!5340 = !DILocation(line: 2648, column: 15, scope: !5339)
!5341 = !DILocation(line: 2648, column: 10, scope: !5303)
!5342 = !DILocation(line: 2649, column: 14, scope: !5343)
!5343 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 2649, column: 14)
!5344 = distinct !DILexicalBlock(scope: !5339, file: !3, line: 2648, column: 22)
!5345 = !DILocation(line: 2649, column: 19, scope: !5343)
!5346 = !DILocation(line: 2649, column: 14, scope: !5344)
!5347 = !DILocation(line: 2649, column: 47, scope: !5343)
!5348 = !DILocation(line: 2649, column: 33, scope: !5343)
!5349 = !DILocation(line: 2649, column: 26, scope: !5343)
!5350 = !DILocation(line: 2650, column: 36, scope: !5344)
!5351 = !DILocation(line: 2650, column: 9, scope: !5344)
!5352 = !DILocation(line: 2651, column: 5, scope: !5344)
!5353 = !DILocation(line: 2654, column: 13, scope: !5303)
!5354 = !DILocation(line: 2654, column: 20, scope: !5303)
!5355 = !DILocation(line: 2654, column: 25, scope: !5303)
!5356 = !DILocation(line: 2654, column: 37, scope: !5303)
!5357 = !DILocation(line: 2654, column: 42, scope: !5303)
!5358 = !DILocation(line: 2654, column: 73, scope: !5303)
!5359 = !DILocation(line: 2653, column: 9, scope: !5303)
!5360 = !DILocation(line: 2652, column: 5, scope: !5303)
!5361 = !DILocation(line: 2656, column: 1, scope: !5303)
!5362 = distinct !DISubprogram(name: "normalizeFloat64Subnormal", scope: !3, file: !3, line: 368, type: !5363, isLocal: true, isDefinition: true, scopeLine: 369, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5363 = !DISubroutineType(types: !5364)
!5364 = !{null, !24, !2620, !119}
!5365 = !DILocalVariable(name: "aSig", arg: 1, scope: !5362, file: !3, line: 368, type: !24)
!5366 = !DILocation(line: 368, column: 43, scope: !5362)
!5367 = !DILocalVariable(name: "zExpPtr", arg: 2, scope: !5362, file: !3, line: 368, type: !2620)
!5368 = !DILocation(line: 368, column: 56, scope: !5362)
!5369 = !DILocalVariable(name: "zSigPtr", arg: 3, scope: !5362, file: !3, line: 368, type: !119)
!5370 = !DILocation(line: 368, column: 73, scope: !5362)
!5371 = !DILocalVariable(name: "shiftCount", scope: !5362, file: !3, line: 370, type: !38)
!5372 = !DILocation(line: 370, column: 6, scope: !5362)
!5373 = !DILocation(line: 372, column: 35, scope: !5362)
!5374 = !DILocation(line: 372, column: 14, scope: !5362)
!5375 = !DILocation(line: 372, column: 42, scope: !5362)
!5376 = !DILocation(line: 372, column: 12, scope: !5362)
!5377 = !DILocation(line: 373, column: 12, scope: !5362)
!5378 = !DILocation(line: 373, column: 18, scope: !5362)
!5379 = !DILocation(line: 373, column: 16, scope: !5362)
!5380 = !DILocation(line: 373, column: 2, scope: !5362)
!5381 = !DILocation(line: 373, column: 10, scope: !5362)
!5382 = !DILocation(line: 374, column: 16, scope: !5362)
!5383 = !DILocation(line: 374, column: 14, scope: !5362)
!5384 = !DILocation(line: 374, column: 2, scope: !5362)
!5385 = !DILocation(line: 374, column: 10, scope: !5362)
!5386 = !DILocation(line: 376, column: 1, scope: !5362)
!5387 = distinct !DISubprogram(name: "float64_to_float128", scope: !3, file: !3, line: 2669, type: !5388, isLocal: false, isDefinition: true, scopeLine: 2670, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5388 = !DISubroutineType(types: !5389)
!5389 = !{!1190, !1130}
!5390 = !DILocalVariable(name: "a", arg: 1, scope: !5387, file: !3, line: 2669, type: !1130)
!5391 = !DILocation(line: 2669, column: 39, scope: !5387)
!5392 = !DILocalVariable(name: "aSign", scope: !5387, file: !3, line: 2671, type: !1241)
!5393 = !DILocation(line: 2671, column: 10, scope: !5387)
!5394 = !DILocalVariable(name: "aExp", scope: !5387, file: !3, line: 2672, type: !60)
!5395 = !DILocation(line: 2672, column: 11, scope: !5387)
!5396 = !DILocalVariable(name: "aSig", scope: !5387, file: !3, line: 2673, type: !24)
!5397 = !DILocation(line: 2673, column: 12, scope: !5387)
!5398 = !DILocalVariable(name: "zSig0", scope: !5387, file: !3, line: 2673, type: !24)
!5399 = !DILocation(line: 2673, column: 18, scope: !5387)
!5400 = !DILocalVariable(name: "zSig1", scope: !5387, file: !3, line: 2673, type: !24)
!5401 = !DILocation(line: 2673, column: 25, scope: !5387)
!5402 = !DILocation(line: 2675, column: 32, scope: !5387)
!5403 = !DILocation(line: 2675, column: 12, scope: !5387)
!5404 = !DILocation(line: 2675, column: 10, scope: !5387)
!5405 = !DILocation(line: 2676, column: 31, scope: !5387)
!5406 = !DILocation(line: 2676, column: 12, scope: !5387)
!5407 = !DILocation(line: 2676, column: 10, scope: !5387)
!5408 = !DILocation(line: 2677, column: 33, scope: !5387)
!5409 = !DILocation(line: 2677, column: 13, scope: !5387)
!5410 = !DILocation(line: 2677, column: 11, scope: !5387)
!5411 = !DILocation(line: 2678, column: 10, scope: !5412)
!5412 = distinct !DILexicalBlock(scope: !5387, file: !3, line: 2678, column: 10)
!5413 = !DILocation(line: 2678, column: 15, scope: !5412)
!5414 = !DILocation(line: 2678, column: 10, scope: !5387)
!5415 = !DILocation(line: 2679, column: 14, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 2679, column: 14)
!5417 = distinct !DILexicalBlock(scope: !5412, file: !3, line: 2678, column: 26)
!5418 = !DILocation(line: 2679, column: 14, scope: !5417)
!5419 = !DILocation(line: 2679, column: 69, scope: !5416)
!5420 = !DILocation(line: 2679, column: 49, scope: !5416)
!5421 = !DILocation(line: 2679, column: 28, scope: !5416)
!5422 = !DILocation(line: 2679, column: 21, scope: !5416)
!5423 = !DILocation(line: 2680, column: 30, scope: !5417)
!5424 = !DILocation(line: 2680, column: 16, scope: !5417)
!5425 = !DILocation(line: 2680, column: 9, scope: !5417)
!5426 = !DILocation(line: 2682, column: 10, scope: !5427)
!5427 = distinct !DILexicalBlock(scope: !5387, file: !3, line: 2682, column: 10)
!5428 = !DILocation(line: 2682, column: 15, scope: !5427)
!5429 = !DILocation(line: 2682, column: 10, scope: !5387)
!5430 = !DILocation(line: 2683, column: 14, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5432, file: !3, line: 2683, column: 14)
!5432 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 2682, column: 22)
!5433 = !DILocation(line: 2683, column: 19, scope: !5431)
!5434 = !DILocation(line: 2683, column: 14, scope: !5432)
!5435 = !DILocation(line: 2683, column: 47, scope: !5431)
!5436 = !DILocation(line: 2683, column: 33, scope: !5431)
!5437 = !DILocation(line: 2683, column: 26, scope: !5431)
!5438 = !DILocation(line: 2684, column: 36, scope: !5432)
!5439 = !DILocation(line: 2684, column: 9, scope: !5432)
!5440 = !DILocation(line: 2685, column: 9, scope: !5432)
!5441 = !DILocation(line: 2686, column: 5, scope: !5432)
!5442 = !DILocation(line: 2687, column: 20, scope: !5387)
!5443 = !DILocation(line: 2687, column: 5, scope: !5387)
!5444 = !DILocation(line: 2688, column: 26, scope: !5387)
!5445 = !DILocation(line: 2688, column: 33, scope: !5387)
!5446 = !DILocation(line: 2688, column: 38, scope: !5387)
!5447 = !DILocation(line: 2688, column: 48, scope: !5387)
!5448 = !DILocation(line: 2688, column: 55, scope: !5387)
!5449 = !DILocation(line: 2688, column: 12, scope: !5387)
!5450 = !DILocation(line: 2688, column: 5, scope: !5387)
!5451 = !DILocation(line: 2690, column: 1, scope: !5387)
!5452 = distinct !DISubprogram(name: "float64_round_to_int", scope: !3, file: !3, line: 2701, type: !5453, isLocal: false, isDefinition: true, scopeLine: 2702, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5453 = !DISubroutineType(types: !5454)
!5454 = !{!1130, !1130}
!5455 = !DILocalVariable(name: "a", arg: 1, scope: !5452, file: !3, line: 2701, type: !1130)
!5456 = !DILocation(line: 2701, column: 39, scope: !5452)
!5457 = !DILocalVariable(name: "aSign", scope: !5452, file: !3, line: 2703, type: !1241)
!5458 = !DILocation(line: 2703, column: 6, scope: !5452)
!5459 = !DILocalVariable(name: "aExp", scope: !5452, file: !3, line: 2704, type: !60)
!5460 = !DILocation(line: 2704, column: 7, scope: !5452)
!5461 = !DILocalVariable(name: "lastBitMask", scope: !5452, file: !3, line: 2705, type: !24)
!5462 = !DILocation(line: 2705, column: 8, scope: !5452)
!5463 = !DILocalVariable(name: "roundBitsMask", scope: !5452, file: !3, line: 2705, type: !24)
!5464 = !DILocation(line: 2705, column: 21, scope: !5452)
!5465 = !DILocalVariable(name: "roundingMode", scope: !5452, file: !3, line: 2706, type: !38)
!5466 = !DILocation(line: 2706, column: 6, scope: !5452)
!5467 = !DILocalVariable(name: "z", scope: !5452, file: !3, line: 2707, type: !1130)
!5468 = !DILocation(line: 2707, column: 9, scope: !5452)
!5469 = !DILocation(line: 2709, column: 27, scope: !5452)
!5470 = !DILocation(line: 2709, column: 8, scope: !5452)
!5471 = !DILocation(line: 2709, column: 6, scope: !5452)
!5472 = !DILocation(line: 2710, column: 15, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 2710, column: 6)
!5474 = !DILocation(line: 2710, column: 12, scope: !5473)
!5475 = !DILocation(line: 2710, column: 6, scope: !5452)
!5476 = !DILocation(line: 2711, column: 8, scope: !5477)
!5477 = distinct !DILexicalBlock(scope: !5478, file: !3, line: 2711, column: 6)
!5478 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 2710, column: 22)
!5479 = !DILocation(line: 2711, column: 13, scope: !5477)
!5480 = !DILocation(line: 2711, column: 24, scope: !5477)
!5481 = !DILocation(line: 2711, column: 47, scope: !5477)
!5482 = !DILocation(line: 2711, column: 27, scope: !5477)
!5483 = !DILocation(line: 2711, column: 6, scope: !5478)
!5484 = !DILocation(line: 2712, column: 29, scope: !5485)
!5485 = distinct !DILexicalBlock(scope: !5477, file: !3, line: 2711, column: 53)
!5486 = !DILocation(line: 2712, column: 32, scope: !5485)
!5487 = !DILocation(line: 2712, column: 8, scope: !5485)
!5488 = !DILocation(line: 2712, column: 1, scope: !5485)
!5489 = !DILocation(line: 2714, column: 8, scope: !5478)
!5490 = !DILocation(line: 2714, column: 1, scope: !5478)
!5491 = !DILocation(line: 2716, column: 6, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 2716, column: 6)
!5493 = !DILocation(line: 2716, column: 11, scope: !5492)
!5494 = !DILocation(line: 2716, column: 6, scope: !5452)
!5495 = !DILocation(line: 2717, column: 17, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 2717, column: 6)
!5497 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 2716, column: 21)
!5498 = !DILocation(line: 2717, column: 18, scope: !5496)
!5499 = !DILocation(line: 2717, column: 24, scope: !5496)
!5500 = !DILocation(line: 2717, column: 6, scope: !5497)
!5501 = !DILocation(line: 2717, column: 38, scope: !5496)
!5502 = !DILocation(line: 2717, column: 31, scope: !5496)
!5503 = !DILocation(line: 2718, column: 23, scope: !5497)
!5504 = !DILocation(line: 2719, column: 29, scope: !5497)
!5505 = !DILocation(line: 2719, column: 9, scope: !5497)
!5506 = !DILocation(line: 2719, column: 7, scope: !5497)
!5507 = !DILocation(line: 2720, column: 10, scope: !5497)
!5508 = !DILocation(line: 2720, column: 1, scope: !5497)
!5509 = !DILocation(line: 2722, column: 8, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 2722, column: 6)
!5511 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 2720, column: 32)
!5512 = !DILocation(line: 2722, column: 13, scope: !5510)
!5513 = !DILocation(line: 2722, column: 24, scope: !5510)
!5514 = !DILocation(line: 2722, column: 47, scope: !5510)
!5515 = !DILocation(line: 2722, column: 27, scope: !5510)
!5516 = !DILocation(line: 2722, column: 6, scope: !5511)
!5517 = !DILocation(line: 2723, column: 21, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5510, file: !3, line: 2722, column: 53)
!5519 = !DILocation(line: 2723, column: 8, scope: !5518)
!5520 = !DILocation(line: 2723, column: 1, scope: !5518)
!5521 = !DILocation(line: 2725, column: 1, scope: !5511)
!5522 = !DILocation(line: 2727, column: 8, scope: !5511)
!5523 = !DILocation(line: 2727, column: 1, scope: !5511)
!5524 = !DILocation(line: 2730, column: 1, scope: !5511)
!5525 = !DILocation(line: 2729, column: 1, scope: !5511)
!5526 = !DILocation(line: 2732, column: 21, scope: !5497)
!5527 = !DILocation(line: 2732, column: 8, scope: !5497)
!5528 = !DILocation(line: 2732, column: 1, scope: !5497)
!5529 = !DILocation(line: 2734, column: 13, scope: !5452)
!5530 = !DILocation(line: 2735, column: 25, scope: !5452)
!5531 = !DILocation(line: 2735, column: 23, scope: !5452)
!5532 = !DILocation(line: 2735, column: 13, scope: !5452)
!5533 = !DILocation(line: 2736, column: 17, scope: !5452)
!5534 = !DILocation(line: 2736, column: 29, scope: !5452)
!5535 = !DILocation(line: 2736, column: 15, scope: !5452)
!5536 = !DILocation(line: 2737, column: 5, scope: !5452)
!5537 = !DILocation(line: 2737, column: 3, scope: !5452)
!5538 = !DILocation(line: 2738, column: 16, scope: !5452)
!5539 = !DILocation(line: 2738, column: 14, scope: !5452)
!5540 = !DILocation(line: 2739, column: 6, scope: !5541)
!5541 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 2739, column: 6)
!5542 = !DILocation(line: 2739, column: 19, scope: !5541)
!5543 = !DILocation(line: 2739, column: 6, scope: !5452)
!5544 = !DILocation(line: 2740, column: 6, scope: !5545)
!5545 = distinct !DILexicalBlock(scope: !5541, file: !3, line: 2739, column: 49)
!5546 = !DILocation(line: 2740, column: 17, scope: !5545)
!5547 = !DILocation(line: 2740, column: 3, scope: !5545)
!5548 = !DILocation(line: 2741, column: 8, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5545, file: !3, line: 2741, column: 6)
!5550 = !DILocation(line: 2741, column: 12, scope: !5549)
!5551 = !DILocation(line: 2741, column: 10, scope: !5549)
!5552 = !DILocation(line: 2741, column: 28, scope: !5549)
!5553 = !DILocation(line: 2741, column: 6, scope: !5545)
!5554 = !DILocation(line: 2741, column: 42, scope: !5549)
!5555 = !DILocation(line: 2741, column: 40, scope: !5549)
!5556 = !DILocation(line: 2741, column: 37, scope: !5549)
!5557 = !DILocation(line: 2741, column: 35, scope: !5549)
!5558 = !DILocation(line: 2742, column: 1, scope: !5545)
!5559 = !DILocation(line: 2743, column: 11, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5541, file: !3, line: 2743, column: 11)
!5561 = !DILocation(line: 2743, column: 24, scope: !5560)
!5562 = !DILocation(line: 2743, column: 11, scope: !5541)
!5563 = !DILocation(line: 2744, column: 26, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5565, file: !3, line: 2744, column: 6)
!5565 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 2743, column: 49)
!5566 = !DILocation(line: 2744, column: 6, scope: !5564)
!5567 = !DILocation(line: 2744, column: 34, scope: !5564)
!5568 = !DILocation(line: 2744, column: 47, scope: !5564)
!5569 = !DILocation(line: 2744, column: 30, scope: !5564)
!5570 = !DILocation(line: 2744, column: 6, scope: !5565)
!5571 = !DILocation(line: 2745, column: 6, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5564, file: !3, line: 2744, column: 69)
!5573 = !DILocation(line: 2745, column: 3, scope: !5572)
!5574 = !DILocation(line: 2746, column: 1, scope: !5572)
!5575 = !DILocation(line: 2747, column: 1, scope: !5565)
!5576 = !DILocation(line: 2748, column: 8, scope: !5452)
!5577 = !DILocation(line: 2748, column: 6, scope: !5452)
!5578 = !DILocation(line: 2748, column: 3, scope: !5452)
!5579 = !DILocation(line: 2749, column: 6, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 2749, column: 6)
!5581 = !DILocation(line: 2749, column: 11, scope: !5580)
!5582 = !DILocation(line: 2749, column: 8, scope: !5580)
!5583 = !DILocation(line: 2749, column: 6, scope: !5452)
!5584 = !DILocation(line: 2749, column: 37, scope: !5580)
!5585 = !DILocation(line: 2749, column: 15, scope: !5580)
!5586 = !DILocation(line: 2750, column: 8, scope: !5452)
!5587 = !DILocation(line: 2750, column: 1, scope: !5452)
!5588 = !DILocation(line: 2752, column: 1, scope: !5452)
!5589 = distinct !DISubprogram(name: "propagateFloat64NaN", scope: !43, file: !43, line: 211, type: !5590, isLocal: true, isDefinition: true, scopeLine: 212, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5590 = !DISubroutineType(types: !5591)
!5591 = !{!1130, !1130, !1130}
!5592 = !DILocalVariable(name: "a", arg: 1, scope: !5589, file: !43, line: 211, type: !1130)
!5593 = !DILocation(line: 211, column: 45, scope: !5589)
!5594 = !DILocalVariable(name: "b", arg: 2, scope: !5589, file: !43, line: 211, type: !1130)
!5595 = !DILocation(line: 211, column: 56, scope: !5589)
!5596 = !DILocalVariable(name: "aIsNaN", scope: !5589, file: !43, line: 213, type: !1241)
!5597 = !DILocation(line: 213, column: 10, scope: !5589)
!5598 = !DILocalVariable(name: "aIsSignalingNaN", scope: !5589, file: !43, line: 213, type: !1241)
!5599 = !DILocation(line: 213, column: 18, scope: !5589)
!5600 = !DILocalVariable(name: "bIsNaN", scope: !5589, file: !43, line: 213, type: !1241)
!5601 = !DILocation(line: 213, column: 35, scope: !5589)
!5602 = !DILocalVariable(name: "bIsSignalingNaN", scope: !5589, file: !43, line: 213, type: !1241)
!5603 = !DILocation(line: 213, column: 43, scope: !5589)
!5604 = !DILocation(line: 215, column: 30, scope: !5589)
!5605 = !DILocation(line: 215, column: 14, scope: !5589)
!5606 = !DILocation(line: 215, column: 12, scope: !5589)
!5607 = !DILocation(line: 216, column: 49, scope: !5589)
!5608 = !DILocation(line: 216, column: 23, scope: !5589)
!5609 = !DILocation(line: 216, column: 21, scope: !5589)
!5610 = !DILocation(line: 217, column: 30, scope: !5589)
!5611 = !DILocation(line: 217, column: 14, scope: !5589)
!5612 = !DILocation(line: 217, column: 12, scope: !5589)
!5613 = !DILocation(line: 218, column: 49, scope: !5589)
!5614 = !DILocation(line: 218, column: 23, scope: !5589)
!5615 = !DILocation(line: 218, column: 21, scope: !5589)
!5616 = !DILocation(line: 219, column: 7, scope: !5589)
!5617 = !DILocation(line: 220, column: 7, scope: !5589)
!5618 = !DILocation(line: 221, column: 10, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5589, file: !43, line: 221, column: 10)
!5620 = !DILocation(line: 221, column: 28, scope: !5619)
!5621 = !DILocation(line: 221, column: 26, scope: !5619)
!5622 = !DILocation(line: 221, column: 10, scope: !5589)
!5623 = !DILocation(line: 221, column: 46, scope: !5619)
!5624 = !DILocation(line: 222, column: 12, scope: !5589)
!5625 = !DILocation(line: 222, column: 30, scope: !5589)
!5626 = !DILocation(line: 222, column: 34, scope: !5589)
!5627 = !DILocation(line: 222, column: 52, scope: !5589)
!5628 = !DILocation(line: 222, column: 56, scope: !5589)
!5629 = !DILocation(line: 222, column: 65, scope: !5589)
!5630 = !DILocation(line: 222, column: 69, scope: !5589)
!5631 = !DILocation(line: 222, column: 5, scope: !5589)
!5632 = distinct !DISubprogram(name: "float64_add", scope: !3, file: !3, line: 2906, type: !5590, isLocal: false, isDefinition: true, scopeLine: 2907, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5633 = !DILocalVariable(name: "a", arg: 1, scope: !5632, file: !3, line: 2906, type: !1130)
!5634 = !DILocation(line: 2906, column: 30, scope: !5632)
!5635 = !DILocalVariable(name: "b", arg: 2, scope: !5632, file: !3, line: 2906, type: !1130)
!5636 = !DILocation(line: 2906, column: 41, scope: !5632)
!5637 = !DILocalVariable(name: "aSign", scope: !5632, file: !3, line: 2908, type: !1241)
!5638 = !DILocation(line: 2908, column: 6, scope: !5632)
!5639 = !DILocalVariable(name: "bSign", scope: !5632, file: !3, line: 2908, type: !1241)
!5640 = !DILocation(line: 2908, column: 13, scope: !5632)
!5641 = !DILocation(line: 2910, column: 29, scope: !5632)
!5642 = !DILocation(line: 2910, column: 9, scope: !5632)
!5643 = !DILocation(line: 2910, column: 7, scope: !5632)
!5644 = !DILocation(line: 2911, column: 29, scope: !5632)
!5645 = !DILocation(line: 2911, column: 9, scope: !5632)
!5646 = !DILocation(line: 2911, column: 7, scope: !5632)
!5647 = !DILocation(line: 2912, column: 6, scope: !5648)
!5648 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 2912, column: 6)
!5649 = !DILocation(line: 2912, column: 15, scope: !5648)
!5650 = !DILocation(line: 2912, column: 12, scope: !5648)
!5651 = !DILocation(line: 2912, column: 6, scope: !5632)
!5652 = !DILocation(line: 2913, column: 24, scope: !5653)
!5653 = distinct !DILexicalBlock(scope: !5648, file: !3, line: 2912, column: 23)
!5654 = !DILocation(line: 2913, column: 27, scope: !5653)
!5655 = !DILocation(line: 2913, column: 30, scope: !5653)
!5656 = !DILocation(line: 2913, column: 8, scope: !5653)
!5657 = !DILocation(line: 2913, column: 1, scope: !5653)
!5658 = !DILocation(line: 2916, column: 24, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5648, file: !3, line: 2915, column: 6)
!5660 = !DILocation(line: 2916, column: 27, scope: !5659)
!5661 = !DILocation(line: 2916, column: 30, scope: !5659)
!5662 = !DILocation(line: 2916, column: 8, scope: !5659)
!5663 = !DILocation(line: 2916, column: 1, scope: !5659)
!5664 = !DILocation(line: 2919, column: 1, scope: !5632)
!5665 = distinct !DISubprogram(name: "addFloat64Sigs", scope: !3, file: !3, line: 2762, type: !5666, isLocal: true, isDefinition: true, scopeLine: 2763, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5666 = !DISubroutineType(types: !5667)
!5667 = !{!1130, !1130, !1130, !1241}
!5668 = !DILocalVariable(name: "a", arg: 1, scope: !5665, file: !3, line: 2762, type: !1130)
!5669 = !DILocation(line: 2762, column: 40, scope: !5665)
!5670 = !DILocalVariable(name: "b", arg: 2, scope: !5665, file: !3, line: 2762, type: !1130)
!5671 = !DILocation(line: 2762, column: 51, scope: !5665)
!5672 = !DILocalVariable(name: "zSign", arg: 3, scope: !5665, file: !3, line: 2762, type: !1241)
!5673 = !DILocation(line: 2762, column: 59, scope: !5665)
!5674 = !DILocalVariable(name: "aExp", scope: !5665, file: !3, line: 2764, type: !60)
!5675 = !DILocation(line: 2764, column: 7, scope: !5665)
!5676 = !DILocalVariable(name: "bExp", scope: !5665, file: !3, line: 2764, type: !60)
!5677 = !DILocation(line: 2764, column: 13, scope: !5665)
!5678 = !DILocalVariable(name: "zExp", scope: !5665, file: !3, line: 2764, type: !60)
!5679 = !DILocation(line: 2764, column: 19, scope: !5665)
!5680 = !DILocalVariable(name: "aSig", scope: !5665, file: !3, line: 2765, type: !24)
!5681 = !DILocation(line: 2765, column: 8, scope: !5665)
!5682 = !DILocalVariable(name: "bSig", scope: !5665, file: !3, line: 2765, type: !24)
!5683 = !DILocation(line: 2765, column: 14, scope: !5665)
!5684 = !DILocalVariable(name: "zSig", scope: !5665, file: !3, line: 2765, type: !24)
!5685 = !DILocation(line: 2765, column: 20, scope: !5665)
!5686 = !DILocalVariable(name: "expDiff", scope: !5665, file: !3, line: 2766, type: !60)
!5687 = !DILocation(line: 2766, column: 7, scope: !5665)
!5688 = !DILocation(line: 2768, column: 28, scope: !5665)
!5689 = !DILocation(line: 2768, column: 8, scope: !5665)
!5690 = !DILocation(line: 2768, column: 6, scope: !5665)
!5691 = !DILocation(line: 2769, column: 27, scope: !5665)
!5692 = !DILocation(line: 2769, column: 8, scope: !5665)
!5693 = !DILocation(line: 2769, column: 6, scope: !5665)
!5694 = !DILocation(line: 2770, column: 28, scope: !5665)
!5695 = !DILocation(line: 2770, column: 8, scope: !5665)
!5696 = !DILocation(line: 2770, column: 6, scope: !5665)
!5697 = !DILocation(line: 2771, column: 27, scope: !5665)
!5698 = !DILocation(line: 2771, column: 8, scope: !5665)
!5699 = !DILocation(line: 2771, column: 6, scope: !5665)
!5700 = !DILocation(line: 2772, column: 11, scope: !5665)
!5701 = !DILocation(line: 2772, column: 18, scope: !5665)
!5702 = !DILocation(line: 2772, column: 16, scope: !5665)
!5703 = !DILocation(line: 2772, column: 9, scope: !5665)
!5704 = !DILocation(line: 2773, column: 6, scope: !5665)
!5705 = !DILocation(line: 2774, column: 6, scope: !5665)
!5706 = !DILocation(line: 2775, column: 10, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 2775, column: 6)
!5708 = !DILocation(line: 2775, column: 8, scope: !5707)
!5709 = !DILocation(line: 2775, column: 6, scope: !5665)
!5710 = !DILocation(line: 2776, column: 6, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 2776, column: 6)
!5712 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 2775, column: 20)
!5713 = !DILocation(line: 2776, column: 11, scope: !5711)
!5714 = !DILocation(line: 2776, column: 6, scope: !5712)
!5715 = !DILocation(line: 2777, column: 6, scope: !5716)
!5716 = distinct !DILexicalBlock(scope: !5717, file: !3, line: 2777, column: 6)
!5717 = distinct !DILexicalBlock(scope: !5711, file: !3, line: 2776, column: 22)
!5718 = !DILocation(line: 2777, column: 6, scope: !5717)
!5719 = !DILocation(line: 2777, column: 41, scope: !5716)
!5720 = !DILocation(line: 2777, column: 44, scope: !5716)
!5721 = !DILocation(line: 2777, column: 20, scope: !5716)
!5722 = !DILocation(line: 2777, column: 13, scope: !5716)
!5723 = !DILocation(line: 2778, column: 8, scope: !5717)
!5724 = !DILocation(line: 2778, column: 1, scope: !5717)
!5725 = !DILocation(line: 2780, column: 6, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 2780, column: 6)
!5727 = !DILocation(line: 2780, column: 11, scope: !5726)
!5728 = !DILocation(line: 2780, column: 6, scope: !5712)
!5729 = !DILocation(line: 2781, column: 1, scope: !5730)
!5730 = distinct !DILexicalBlock(scope: !5726, file: !3, line: 2780, column: 18)
!5731 = !DILocation(line: 2782, column: 1, scope: !5730)
!5732 = !DILocation(line: 2784, column: 6, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5726, file: !3, line: 2783, column: 6)
!5734 = !DILocation(line: 2786, column: 22, scope: !5712)
!5735 = !DILocation(line: 2786, column: 28, scope: !5712)
!5736 = !DILocation(line: 2786, column: 1, scope: !5712)
!5737 = !DILocation(line: 2787, column: 8, scope: !5712)
!5738 = !DILocation(line: 2787, column: 6, scope: !5712)
!5739 = !DILocation(line: 2788, column: 1, scope: !5712)
!5740 = !DILocation(line: 2789, column: 11, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 2789, column: 11)
!5742 = !DILocation(line: 2789, column: 19, scope: !5741)
!5743 = !DILocation(line: 2789, column: 11, scope: !5707)
!5744 = !DILocation(line: 2790, column: 6, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 2790, column: 6)
!5746 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 2789, column: 25)
!5747 = !DILocation(line: 2790, column: 11, scope: !5745)
!5748 = !DILocation(line: 2790, column: 6, scope: !5746)
!5749 = !DILocation(line: 2791, column: 6, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !5751, file: !3, line: 2791, column: 6)
!5751 = distinct !DILexicalBlock(scope: !5745, file: !3, line: 2790, column: 22)
!5752 = !DILocation(line: 2791, column: 6, scope: !5751)
!5753 = !DILocation(line: 2791, column: 41, scope: !5750)
!5754 = !DILocation(line: 2791, column: 44, scope: !5750)
!5755 = !DILocation(line: 2791, column: 20, scope: !5750)
!5756 = !DILocation(line: 2791, column: 13, scope: !5750)
!5757 = !DILocation(line: 2792, column: 21, scope: !5751)
!5758 = !DILocation(line: 2792, column: 8, scope: !5751)
!5759 = !DILocation(line: 2792, column: 1, scope: !5751)
!5760 = !DILocation(line: 2794, column: 6, scope: !5761)
!5761 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 2794, column: 6)
!5762 = !DILocation(line: 2794, column: 11, scope: !5761)
!5763 = !DILocation(line: 2794, column: 6, scope: !5746)
!5764 = !DILocation(line: 2795, column: 1, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5761, file: !3, line: 2794, column: 18)
!5766 = !DILocation(line: 2796, column: 1, scope: !5765)
!5767 = !DILocation(line: 2798, column: 6, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5761, file: !3, line: 2797, column: 6)
!5769 = !DILocation(line: 2800, column: 22, scope: !5746)
!5770 = !DILocation(line: 2800, column: 30, scope: !5746)
!5771 = !DILocation(line: 2800, column: 28, scope: !5746)
!5772 = !DILocation(line: 2800, column: 1, scope: !5746)
!5773 = !DILocation(line: 2801, column: 8, scope: !5746)
!5774 = !DILocation(line: 2801, column: 6, scope: !5746)
!5775 = !DILocation(line: 2802, column: 1, scope: !5746)
!5776 = !DILocation(line: 2804, column: 6, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 2804, column: 6)
!5778 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 2803, column: 6)
!5779 = !DILocation(line: 2804, column: 11, scope: !5777)
!5780 = !DILocation(line: 2804, column: 6, scope: !5778)
!5781 = !DILocation(line: 2805, column: 6, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 2805, column: 6)
!5783 = distinct !DILexicalBlock(scope: !5777, file: !3, line: 2804, column: 22)
!5784 = !DILocation(line: 2805, column: 13, scope: !5782)
!5785 = !DILocation(line: 2805, column: 11, scope: !5782)
!5786 = !DILocation(line: 2805, column: 6, scope: !5783)
!5787 = !DILocation(line: 2805, column: 48, scope: !5782)
!5788 = !DILocation(line: 2805, column: 51, scope: !5782)
!5789 = !DILocation(line: 2805, column: 27, scope: !5782)
!5790 = !DILocation(line: 2805, column: 20, scope: !5782)
!5791 = !DILocation(line: 2806, column: 8, scope: !5783)
!5792 = !DILocation(line: 2806, column: 1, scope: !5783)
!5793 = !DILocation(line: 2808, column: 6, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 2808, column: 6)
!5795 = !DILocation(line: 2808, column: 11, scope: !5794)
!5796 = !DILocation(line: 2808, column: 6, scope: !5778)
!5797 = !DILocation(line: 2808, column: 38, scope: !5794)
!5798 = !DILocation(line: 2808, column: 50, scope: !5794)
!5799 = !DILocation(line: 2808, column: 57, scope: !5794)
!5800 = !DILocation(line: 2808, column: 55, scope: !5794)
!5801 = !DILocation(line: 2808, column: 63, scope: !5794)
!5802 = !DILocation(line: 2808, column: 25, scope: !5794)
!5803 = !DILocation(line: 2808, column: 18, scope: !5794)
!5804 = !DILocation(line: 2809, column: 38, scope: !5778)
!5805 = !DILocation(line: 2809, column: 36, scope: !5778)
!5806 = !DILocation(line: 2809, column: 45, scope: !5778)
!5807 = !DILocation(line: 2809, column: 43, scope: !5778)
!5808 = !DILocation(line: 2809, column: 6, scope: !5778)
!5809 = !DILocation(line: 2810, column: 8, scope: !5778)
!5810 = !DILocation(line: 2810, column: 6, scope: !5778)
!5811 = !DILocation(line: 2811, column: 1, scope: !5778)
!5812 = !DILocation(line: 2813, column: 6, scope: !5665)
!5813 = !DILocation(line: 2814, column: 10, scope: !5665)
!5814 = !DILocation(line: 2814, column: 17, scope: !5665)
!5815 = !DILocation(line: 2814, column: 15, scope: !5665)
!5816 = !DILocation(line: 2814, column: 23, scope: !5665)
!5817 = !DILocation(line: 2814, column: 6, scope: !5665)
!5818 = !DILocation(line: 2815, column: 1, scope: !5665)
!5819 = !DILocation(line: 2816, column: 16, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 2816, column: 6)
!5821 = !DILocation(line: 2816, column: 21, scope: !5820)
!5822 = !DILocation(line: 2816, column: 6, scope: !5665)
!5823 = !DILocation(line: 2817, column: 8, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 2816, column: 27)
!5825 = !DILocation(line: 2817, column: 15, scope: !5824)
!5826 = !DILocation(line: 2817, column: 13, scope: !5824)
!5827 = !DILocation(line: 2817, column: 6, scope: !5824)
!5828 = !DILocation(line: 2818, column: 1, scope: !5824)
!5829 = !DILocation(line: 2819, column: 1, scope: !5824)
!5830 = !DILocation(line: 2816, column: 23, scope: !5820)
!5831 = !DILocation(line: 2821, column: 29, scope: !5665)
!5832 = !DILocation(line: 2821, column: 36, scope: !5665)
!5833 = !DILocation(line: 2821, column: 42, scope: !5665)
!5834 = !DILocation(line: 2821, column: 8, scope: !5665)
!5835 = !DILocation(line: 2821, column: 1, scope: !5665)
!5836 = !DILocation(line: 2823, column: 1, scope: !5665)
!5837 = distinct !DISubprogram(name: "subFloat64Sigs", scope: !3, file: !3, line: 2833, type: !5666, isLocal: true, isDefinition: true, scopeLine: 2834, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!5838 = !DILocalVariable(name: "a", arg: 1, scope: !5837, file: !3, line: 2833, type: !1130)
!5839 = !DILocation(line: 2833, column: 40, scope: !5837)
!5840 = !DILocalVariable(name: "b", arg: 2, scope: !5837, file: !3, line: 2833, type: !1130)
!5841 = !DILocation(line: 2833, column: 51, scope: !5837)
!5842 = !DILocalVariable(name: "zSign", arg: 3, scope: !5837, file: !3, line: 2833, type: !1241)
!5843 = !DILocation(line: 2833, column: 59, scope: !5837)
!5844 = !DILocalVariable(name: "aExp", scope: !5837, file: !3, line: 2835, type: !60)
!5845 = !DILocation(line: 2835, column: 7, scope: !5837)
!5846 = !DILocalVariable(name: "bExp", scope: !5837, file: !3, line: 2835, type: !60)
!5847 = !DILocation(line: 2835, column: 13, scope: !5837)
!5848 = !DILocalVariable(name: "zExp", scope: !5837, file: !3, line: 2835, type: !60)
!5849 = !DILocation(line: 2835, column: 19, scope: !5837)
!5850 = !DILocalVariable(name: "aSig", scope: !5837, file: !3, line: 2836, type: !24)
!5851 = !DILocation(line: 2836, column: 8, scope: !5837)
!5852 = !DILocalVariable(name: "bSig", scope: !5837, file: !3, line: 2836, type: !24)
!5853 = !DILocation(line: 2836, column: 14, scope: !5837)
!5854 = !DILocalVariable(name: "zSig", scope: !5837, file: !3, line: 2836, type: !24)
!5855 = !DILocation(line: 2836, column: 20, scope: !5837)
!5856 = !DILocalVariable(name: "expDiff", scope: !5837, file: !3, line: 2837, type: !60)
!5857 = !DILocation(line: 2837, column: 7, scope: !5837)
!5858 = !DILocation(line: 2839, column: 28, scope: !5837)
!5859 = !DILocation(line: 2839, column: 8, scope: !5837)
!5860 = !DILocation(line: 2839, column: 6, scope: !5837)
!5861 = !DILocation(line: 2840, column: 27, scope: !5837)
!5862 = !DILocation(line: 2840, column: 8, scope: !5837)
!5863 = !DILocation(line: 2840, column: 6, scope: !5837)
!5864 = !DILocation(line: 2841, column: 28, scope: !5837)
!5865 = !DILocation(line: 2841, column: 8, scope: !5837)
!5866 = !DILocation(line: 2841, column: 6, scope: !5837)
!5867 = !DILocation(line: 2842, column: 27, scope: !5837)
!5868 = !DILocation(line: 2842, column: 8, scope: !5837)
!5869 = !DILocation(line: 2842, column: 6, scope: !5837)
!5870 = !DILocation(line: 2843, column: 11, scope: !5837)
!5871 = !DILocation(line: 2843, column: 18, scope: !5837)
!5872 = !DILocation(line: 2843, column: 16, scope: !5837)
!5873 = !DILocation(line: 2843, column: 9, scope: !5837)
!5874 = !DILocation(line: 2844, column: 6, scope: !5837)
!5875 = !DILocation(line: 2845, column: 6, scope: !5837)
!5876 = !DILocation(line: 2846, column: 10, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2846, column: 6)
!5878 = !DILocation(line: 2846, column: 8, scope: !5877)
!5879 = !DILocation(line: 2846, column: 6, scope: !5837)
!5880 = !DILocation(line: 2846, column: 20, scope: !5877)
!5881 = !DILocation(line: 2847, column: 6, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2847, column: 6)
!5883 = !DILocation(line: 2847, column: 14, scope: !5882)
!5884 = !DILocation(line: 2847, column: 6, scope: !5837)
!5885 = !DILocation(line: 2847, column: 20, scope: !5882)
!5886 = !DILocation(line: 2848, column: 6, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2848, column: 6)
!5888 = !DILocation(line: 2848, column: 11, scope: !5887)
!5889 = !DILocation(line: 2848, column: 6, scope: !5837)
!5890 = !DILocation(line: 2849, column: 6, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5892, file: !3, line: 2849, column: 6)
!5892 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 2848, column: 22)
!5893 = !DILocation(line: 2849, column: 13, scope: !5891)
!5894 = !DILocation(line: 2849, column: 11, scope: !5891)
!5895 = !DILocation(line: 2849, column: 6, scope: !5892)
!5896 = !DILocation(line: 2849, column: 48, scope: !5891)
!5897 = !DILocation(line: 2849, column: 51, scope: !5891)
!5898 = !DILocation(line: 2849, column: 27, scope: !5891)
!5899 = !DILocation(line: 2849, column: 20, scope: !5891)
!5900 = !DILocation(line: 2850, column: 1, scope: !5892)
!5901 = !DILocation(line: 2851, column: 1, scope: !5892)
!5902 = !DILocation(line: 2853, column: 6, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2853, column: 6)
!5904 = !DILocation(line: 2853, column: 11, scope: !5903)
!5905 = !DILocation(line: 2853, column: 6, scope: !5837)
!5906 = !DILocation(line: 2854, column: 6, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5903, file: !3, line: 2853, column: 18)
!5908 = !DILocation(line: 2855, column: 6, scope: !5907)
!5909 = !DILocation(line: 2856, column: 1, scope: !5907)
!5910 = !DILocation(line: 2857, column: 6, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2857, column: 6)
!5912 = !DILocation(line: 2857, column: 13, scope: !5911)
!5913 = !DILocation(line: 2857, column: 11, scope: !5911)
!5914 = !DILocation(line: 2857, column: 6, scope: !5837)
!5915 = !DILocation(line: 2857, column: 20, scope: !5911)
!5916 = !DILocation(line: 2858, column: 6, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2858, column: 6)
!5918 = !DILocation(line: 2858, column: 13, scope: !5917)
!5919 = !DILocation(line: 2858, column: 11, scope: !5917)
!5920 = !DILocation(line: 2858, column: 6, scope: !5837)
!5921 = !DILocation(line: 2858, column: 20, scope: !5917)
!5922 = !DILocation(line: 2859, column: 21, scope: !5837)
!5923 = !DILocation(line: 2859, column: 41, scope: !5837)
!5924 = !DILocation(line: 2859, column: 8, scope: !5837)
!5925 = !DILocation(line: 2859, column: 1, scope: !5837)
!5926 = !DILocation(line: 2861, column: 6, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2861, column: 6)
!5928 = !DILocation(line: 2861, column: 11, scope: !5927)
!5929 = !DILocation(line: 2861, column: 6, scope: !5837)
!5930 = !DILocation(line: 2862, column: 6, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5932, file: !3, line: 2862, column: 6)
!5932 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 2861, column: 22)
!5933 = !DILocation(line: 2862, column: 6, scope: !5932)
!5934 = !DILocation(line: 2862, column: 41, scope: !5931)
!5935 = !DILocation(line: 2862, column: 44, scope: !5931)
!5936 = !DILocation(line: 2862, column: 20, scope: !5931)
!5937 = !DILocation(line: 2862, column: 13, scope: !5931)
!5938 = !DILocation(line: 2863, column: 21, scope: !5932)
!5939 = !DILocation(line: 2863, column: 27, scope: !5932)
!5940 = !DILocation(line: 2863, column: 8, scope: !5932)
!5941 = !DILocation(line: 2863, column: 1, scope: !5932)
!5942 = !DILocation(line: 2865, column: 6, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2865, column: 6)
!5944 = !DILocation(line: 2865, column: 11, scope: !5943)
!5945 = !DILocation(line: 2865, column: 6, scope: !5837)
!5946 = !DILocation(line: 2866, column: 1, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5943, file: !3, line: 2865, column: 18)
!5948 = !DILocation(line: 2867, column: 1, scope: !5947)
!5949 = !DILocation(line: 2869, column: 6, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5943, file: !3, line: 2868, column: 6)
!5951 = !DILocation(line: 2871, column: 22, scope: !5837)
!5952 = !DILocation(line: 2871, column: 30, scope: !5837)
!5953 = !DILocation(line: 2871, column: 28, scope: !5837)
!5954 = !DILocation(line: 2871, column: 1, scope: !5837)
!5955 = !DILocation(line: 2872, column: 6, scope: !5837)
!5956 = !DILocation(line: 2872, column: 1, scope: !5837)
!5957 = !DILocation(line: 2874, column: 16, scope: !5837)
!5958 = !DILocation(line: 2874, column: 23, scope: !5837)
!5959 = !DILocation(line: 2874, column: 21, scope: !5837)
!5960 = !DILocation(line: 2874, column: 14, scope: !5837)
!5961 = !DILocation(line: 2875, column: 8, scope: !5837)
!5962 = !DILocation(line: 2875, column: 6, scope: !5837)
!5963 = !DILocation(line: 2876, column: 7, scope: !5837)
!5964 = !DILocation(line: 2877, column: 1, scope: !5837)
!5965 = !DILocation(line: 2879, column: 6, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2879, column: 6)
!5967 = !DILocation(line: 2879, column: 11, scope: !5966)
!5968 = !DILocation(line: 2879, column: 6, scope: !5837)
!5969 = !DILocation(line: 2880, column: 6, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5971, file: !3, line: 2880, column: 6)
!5971 = distinct !DILexicalBlock(scope: !5966, file: !3, line: 2879, column: 22)
!5972 = !DILocation(line: 2880, column: 6, scope: !5971)
!5973 = !DILocation(line: 2880, column: 41, scope: !5970)
!5974 = !DILocation(line: 2880, column: 44, scope: !5970)
!5975 = !DILocation(line: 2880, column: 20, scope: !5970)
!5976 = !DILocation(line: 2880, column: 13, scope: !5970)
!5977 = !DILocation(line: 2881, column: 8, scope: !5971)
!5978 = !DILocation(line: 2881, column: 1, scope: !5971)
!5979 = !DILocation(line: 2883, column: 6, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 2883, column: 6)
!5981 = !DILocation(line: 2883, column: 11, scope: !5980)
!5982 = !DILocation(line: 2883, column: 6, scope: !5837)
!5983 = !DILocation(line: 2884, column: 1, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 2883, column: 18)
!5985 = !DILocation(line: 2885, column: 1, scope: !5984)
!5986 = !DILocation(line: 2887, column: 6, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 2886, column: 6)
!5988 = !DILocation(line: 2889, column: 22, scope: !5837)
!5989 = !DILocation(line: 2889, column: 28, scope: !5837)
!5990 = !DILocation(line: 2889, column: 1, scope: !5837)
!5991 = !DILocation(line: 2890, column: 6, scope: !5837)
!5992 = !DILocation(line: 2890, column: 1, scope: !5837)
!5993 = !DILocation(line: 2892, column: 16, scope: !5837)
!5994 = !DILocation(line: 2892, column: 23, scope: !5837)
!5995 = !DILocation(line: 2892, column: 21, scope: !5837)
!5996 = !DILocation(line: 2892, column: 14, scope: !5837)
!5997 = !DILocation(line: 2893, column: 8, scope: !5837)
!5998 = !DILocation(line: 2893, column: 6, scope: !5837)
!5999 = !DILocation(line: 2893, column: 1, scope: !5837)
!6000 = !DILocation(line: 2895, column: 1, scope: !5837)
!6001 = !DILocation(line: 2896, column: 38, scope: !5837)
!6002 = !DILocation(line: 2896, column: 45, scope: !5837)
!6003 = !DILocation(line: 2896, column: 51, scope: !5837)
!6004 = !DILocation(line: 2896, column: 8, scope: !5837)
!6005 = !DILocation(line: 2896, column: 1, scope: !5837)
!6006 = !DILocation(line: 2898, column: 1, scope: !5837)
!6007 = distinct !DISubprogram(name: "float64_sub", scope: !3, file: !3, line: 2927, type: !5590, isLocal: false, isDefinition: true, scopeLine: 2928, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6008 = !DILocalVariable(name: "a", arg: 1, scope: !6007, file: !3, line: 2927, type: !1130)
!6009 = !DILocation(line: 2927, column: 30, scope: !6007)
!6010 = !DILocalVariable(name: "b", arg: 2, scope: !6007, file: !3, line: 2927, type: !1130)
!6011 = !DILocation(line: 2927, column: 41, scope: !6007)
!6012 = !DILocalVariable(name: "aSign", scope: !6007, file: !3, line: 2929, type: !1241)
!6013 = !DILocation(line: 2929, column: 6, scope: !6007)
!6014 = !DILocalVariable(name: "bSign", scope: !6007, file: !3, line: 2929, type: !1241)
!6015 = !DILocation(line: 2929, column: 13, scope: !6007)
!6016 = !DILocation(line: 2931, column: 29, scope: !6007)
!6017 = !DILocation(line: 2931, column: 9, scope: !6007)
!6018 = !DILocation(line: 2931, column: 7, scope: !6007)
!6019 = !DILocation(line: 2932, column: 29, scope: !6007)
!6020 = !DILocation(line: 2932, column: 9, scope: !6007)
!6021 = !DILocation(line: 2932, column: 7, scope: !6007)
!6022 = !DILocation(line: 2933, column: 6, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 2933, column: 6)
!6024 = !DILocation(line: 2933, column: 15, scope: !6023)
!6025 = !DILocation(line: 2933, column: 12, scope: !6023)
!6026 = !DILocation(line: 2933, column: 6, scope: !6007)
!6027 = !DILocation(line: 2934, column: 24, scope: !6028)
!6028 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 2933, column: 23)
!6029 = !DILocation(line: 2934, column: 27, scope: !6028)
!6030 = !DILocation(line: 2934, column: 30, scope: !6028)
!6031 = !DILocation(line: 2934, column: 8, scope: !6028)
!6032 = !DILocation(line: 2934, column: 1, scope: !6028)
!6033 = !DILocation(line: 2937, column: 24, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 2936, column: 6)
!6035 = !DILocation(line: 2937, column: 27, scope: !6034)
!6036 = !DILocation(line: 2937, column: 30, scope: !6034)
!6037 = !DILocation(line: 2937, column: 8, scope: !6034)
!6038 = !DILocation(line: 2937, column: 1, scope: !6034)
!6039 = !DILocation(line: 2940, column: 1, scope: !6007)
!6040 = distinct !DISubprogram(name: "float64_mul", scope: !3, file: !3, line: 2948, type: !5590, isLocal: false, isDefinition: true, scopeLine: 2949, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6041 = !DILocalVariable(name: "a", arg: 1, scope: !6040, file: !3, line: 2948, type: !1130)
!6042 = !DILocation(line: 2948, column: 30, scope: !6040)
!6043 = !DILocalVariable(name: "b", arg: 2, scope: !6040, file: !3, line: 2948, type: !1130)
!6044 = !DILocation(line: 2948, column: 41, scope: !6040)
!6045 = !DILocalVariable(name: "aSign", scope: !6040, file: !3, line: 2950, type: !1241)
!6046 = !DILocation(line: 2950, column: 6, scope: !6040)
!6047 = !DILocalVariable(name: "bSign", scope: !6040, file: !3, line: 2950, type: !1241)
!6048 = !DILocation(line: 2950, column: 13, scope: !6040)
!6049 = !DILocalVariable(name: "zSign", scope: !6040, file: !3, line: 2950, type: !1241)
!6050 = !DILocation(line: 2950, column: 20, scope: !6040)
!6051 = !DILocalVariable(name: "aExp", scope: !6040, file: !3, line: 2951, type: !60)
!6052 = !DILocation(line: 2951, column: 7, scope: !6040)
!6053 = !DILocalVariable(name: "bExp", scope: !6040, file: !3, line: 2951, type: !60)
!6054 = !DILocation(line: 2951, column: 13, scope: !6040)
!6055 = !DILocalVariable(name: "zExp", scope: !6040, file: !3, line: 2951, type: !60)
!6056 = !DILocation(line: 2951, column: 19, scope: !6040)
!6057 = !DILocalVariable(name: "aSig", scope: !6040, file: !3, line: 2952, type: !24)
!6058 = !DILocation(line: 2952, column: 8, scope: !6040)
!6059 = !DILocalVariable(name: "bSig", scope: !6040, file: !3, line: 2952, type: !24)
!6060 = !DILocation(line: 2952, column: 14, scope: !6040)
!6061 = !DILocalVariable(name: "zSig0", scope: !6040, file: !3, line: 2952, type: !24)
!6062 = !DILocation(line: 2952, column: 20, scope: !6040)
!6063 = !DILocalVariable(name: "zSig1", scope: !6040, file: !3, line: 2952, type: !24)
!6064 = !DILocation(line: 2952, column: 27, scope: !6040)
!6065 = !DILocation(line: 2954, column: 28, scope: !6040)
!6066 = !DILocation(line: 2954, column: 8, scope: !6040)
!6067 = !DILocation(line: 2954, column: 6, scope: !6040)
!6068 = !DILocation(line: 2955, column: 27, scope: !6040)
!6069 = !DILocation(line: 2955, column: 8, scope: !6040)
!6070 = !DILocation(line: 2955, column: 6, scope: !6040)
!6071 = !DILocation(line: 2956, column: 29, scope: !6040)
!6072 = !DILocation(line: 2956, column: 9, scope: !6040)
!6073 = !DILocation(line: 2956, column: 7, scope: !6040)
!6074 = !DILocation(line: 2957, column: 28, scope: !6040)
!6075 = !DILocation(line: 2957, column: 8, scope: !6040)
!6076 = !DILocation(line: 2957, column: 6, scope: !6040)
!6077 = !DILocation(line: 2958, column: 27, scope: !6040)
!6078 = !DILocation(line: 2958, column: 8, scope: !6040)
!6079 = !DILocation(line: 2958, column: 6, scope: !6040)
!6080 = !DILocation(line: 2959, column: 29, scope: !6040)
!6081 = !DILocation(line: 2959, column: 9, scope: !6040)
!6082 = !DILocation(line: 2959, column: 7, scope: !6040)
!6083 = !DILocation(line: 2960, column: 9, scope: !6040)
!6084 = !DILocation(line: 2960, column: 17, scope: !6040)
!6085 = !DILocation(line: 2960, column: 15, scope: !6040)
!6086 = !DILocation(line: 2960, column: 7, scope: !6040)
!6087 = !DILocation(line: 2961, column: 6, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !6040, file: !3, line: 2961, column: 6)
!6089 = !DILocation(line: 2961, column: 11, scope: !6088)
!6090 = !DILocation(line: 2961, column: 6, scope: !6040)
!6091 = !DILocation(line: 2962, column: 6, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6093, file: !3, line: 2962, column: 6)
!6093 = distinct !DILexicalBlock(scope: !6088, file: !3, line: 2961, column: 22)
!6094 = !DILocation(line: 2962, column: 11, scope: !6092)
!6095 = !DILocation(line: 2962, column: 18, scope: !6092)
!6096 = !DILocation(line: 2962, column: 23, scope: !6092)
!6097 = !DILocation(line: 2962, column: 34, scope: !6092)
!6098 = !DILocation(line: 2962, column: 37, scope: !6092)
!6099 = !DILocation(line: 2962, column: 6, scope: !6093)
!6100 = !DILocation(line: 2963, column: 29, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2962, column: 46)
!6102 = !DILocation(line: 2963, column: 32, scope: !6101)
!6103 = !DILocation(line: 2963, column: 8, scope: !6101)
!6104 = !DILocation(line: 2963, column: 1, scope: !6101)
!6105 = !DILocation(line: 2965, column: 8, scope: !6106)
!6106 = distinct !DILexicalBlock(scope: !6093, file: !3, line: 2965, column: 6)
!6107 = !DILocation(line: 2965, column: 15, scope: !6106)
!6108 = !DILocation(line: 2965, column: 13, scope: !6106)
!6109 = !DILocation(line: 2965, column: 22, scope: !6106)
!6110 = !DILocation(line: 2965, column: 6, scope: !6093)
!6111 = !DILocation(line: 2966, column: 1, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 2965, column: 29)
!6113 = !DILocation(line: 2967, column: 1, scope: !6112)
!6114 = !DILocation(line: 2969, column: 21, scope: !6093)
!6115 = !DILocation(line: 2969, column: 8, scope: !6093)
!6116 = !DILocation(line: 2969, column: 1, scope: !6093)
!6117 = !DILocation(line: 2971, column: 6, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !6040, file: !3, line: 2971, column: 6)
!6119 = !DILocation(line: 2971, column: 11, scope: !6118)
!6120 = !DILocation(line: 2971, column: 6, scope: !6040)
!6121 = !DILocation(line: 2972, column: 6, scope: !6122)
!6122 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2972, column: 6)
!6123 = distinct !DILexicalBlock(scope: !6118, file: !3, line: 2971, column: 22)
!6124 = !DILocation(line: 2972, column: 6, scope: !6123)
!6125 = !DILocation(line: 2972, column: 41, scope: !6122)
!6126 = !DILocation(line: 2972, column: 44, scope: !6122)
!6127 = !DILocation(line: 2972, column: 20, scope: !6122)
!6128 = !DILocation(line: 2972, column: 13, scope: !6122)
!6129 = !DILocation(line: 2973, column: 8, scope: !6130)
!6130 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2973, column: 6)
!6131 = !DILocation(line: 2973, column: 15, scope: !6130)
!6132 = !DILocation(line: 2973, column: 13, scope: !6130)
!6133 = !DILocation(line: 2973, column: 22, scope: !6130)
!6134 = !DILocation(line: 2973, column: 6, scope: !6123)
!6135 = !DILocation(line: 2974, column: 1, scope: !6136)
!6136 = distinct !DILexicalBlock(scope: !6130, file: !3, line: 2973, column: 29)
!6137 = !DILocation(line: 2975, column: 1, scope: !6136)
!6138 = !DILocation(line: 2977, column: 21, scope: !6123)
!6139 = !DILocation(line: 2977, column: 8, scope: !6123)
!6140 = !DILocation(line: 2977, column: 1, scope: !6123)
!6141 = !DILocation(line: 2979, column: 6, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !6040, file: !3, line: 2979, column: 6)
!6143 = !DILocation(line: 2979, column: 11, scope: !6142)
!6144 = !DILocation(line: 2979, column: 6, scope: !6040)
!6145 = !DILocation(line: 2980, column: 6, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6147, file: !3, line: 2980, column: 6)
!6147 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 2979, column: 18)
!6148 = !DILocation(line: 2980, column: 11, scope: !6146)
!6149 = !DILocation(line: 2980, column: 6, scope: !6147)
!6150 = !DILocation(line: 2980, column: 38, scope: !6146)
!6151 = !DILocation(line: 2980, column: 25, scope: !6146)
!6152 = !DILocation(line: 2980, column: 18, scope: !6146)
!6153 = !DILocation(line: 2981, column: 28, scope: !6147)
!6154 = !DILocation(line: 2981, column: 1, scope: !6147)
!6155 = !DILocation(line: 2982, column: 1, scope: !6147)
!6156 = !DILocation(line: 2983, column: 6, scope: !6157)
!6157 = distinct !DILexicalBlock(scope: !6040, file: !3, line: 2983, column: 6)
!6158 = !DILocation(line: 2983, column: 11, scope: !6157)
!6159 = !DILocation(line: 2983, column: 6, scope: !6040)
!6160 = !DILocation(line: 2984, column: 6, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6162, file: !3, line: 2984, column: 6)
!6162 = distinct !DILexicalBlock(scope: !6157, file: !3, line: 2983, column: 18)
!6163 = !DILocation(line: 2984, column: 11, scope: !6161)
!6164 = !DILocation(line: 2984, column: 6, scope: !6162)
!6165 = !DILocation(line: 2984, column: 38, scope: !6161)
!6166 = !DILocation(line: 2984, column: 25, scope: !6161)
!6167 = !DILocation(line: 2984, column: 18, scope: !6161)
!6168 = !DILocation(line: 2985, column: 28, scope: !6162)
!6169 = !DILocation(line: 2985, column: 1, scope: !6162)
!6170 = !DILocation(line: 2986, column: 1, scope: !6162)
!6171 = !DILocation(line: 2987, column: 8, scope: !6040)
!6172 = !DILocation(line: 2987, column: 15, scope: !6040)
!6173 = !DILocation(line: 2987, column: 13, scope: !6040)
!6174 = !DILocation(line: 2987, column: 20, scope: !6040)
!6175 = !DILocation(line: 2987, column: 6, scope: !6040)
!6176 = !DILocation(line: 2988, column: 10, scope: !6040)
!6177 = !DILocation(line: 2988, column: 15, scope: !6040)
!6178 = !DILocation(line: 2988, column: 46, scope: !6040)
!6179 = !DILocation(line: 2988, column: 6, scope: !6040)
!6180 = !DILocation(line: 2989, column: 10, scope: !6040)
!6181 = !DILocation(line: 2989, column: 15, scope: !6040)
!6182 = !DILocation(line: 2989, column: 46, scope: !6040)
!6183 = !DILocation(line: 2989, column: 6, scope: !6040)
!6184 = !DILocation(line: 2990, column: 13, scope: !6040)
!6185 = !DILocation(line: 2990, column: 19, scope: !6040)
!6186 = !DILocation(line: 2990, column: 1, scope: !6040)
!6187 = !DILocation(line: 2991, column: 12, scope: !6040)
!6188 = !DILocation(line: 2991, column: 18, scope: !6040)
!6189 = !DILocation(line: 2991, column: 10, scope: !6040)
!6190 = !DILocation(line: 2991, column: 7, scope: !6040)
!6191 = !DILocation(line: 2992, column: 23, scope: !6192)
!6192 = distinct !DILexicalBlock(scope: !6040, file: !3, line: 2992, column: 6)
!6193 = !DILocation(line: 2992, column: 28, scope: !6192)
!6194 = !DILocation(line: 2992, column: 8, scope: !6192)
!6195 = !DILocation(line: 2992, column: 6, scope: !6040)
!6196 = !DILocation(line: 2993, column: 7, scope: !6197)
!6197 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 2992, column: 36)
!6198 = !DILocation(line: 2994, column: 1, scope: !6197)
!6199 = !DILocation(line: 2995, column: 1, scope: !6197)
!6200 = !DILocation(line: 2996, column: 29, scope: !6040)
!6201 = !DILocation(line: 2996, column: 36, scope: !6040)
!6202 = !DILocation(line: 2996, column: 42, scope: !6040)
!6203 = !DILocation(line: 2996, column: 8, scope: !6040)
!6204 = !DILocation(line: 2996, column: 1, scope: !6040)
!6205 = !DILocation(line: 2998, column: 1, scope: !6040)
!6206 = distinct !DISubprogram(name: "roundAndPackFloat64", scope: !3, file: !3, line: 418, type: !1291, isLocal: true, isDefinition: true, scopeLine: 419, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6207 = !DILocalVariable(name: "zSign", arg: 1, scope: !6206, file: !3, line: 418, type: !1241)
!6208 = !DILocation(line: 418, column: 42, scope: !6206)
!6209 = !DILocalVariable(name: "zExp", arg: 2, scope: !6206, file: !3, line: 418, type: !60)
!6210 = !DILocation(line: 418, column: 55, scope: !6206)
!6211 = !DILocalVariable(name: "zSig", arg: 3, scope: !6206, file: !3, line: 418, type: !24)
!6212 = !DILocation(line: 418, column: 68, scope: !6206)
!6213 = !DILocalVariable(name: "roundingMode", scope: !6206, file: !3, line: 420, type: !38)
!6214 = !DILocation(line: 420, column: 6, scope: !6206)
!6215 = !DILocalVariable(name: "roundNearestEven", scope: !6206, file: !3, line: 421, type: !1241)
!6216 = !DILocation(line: 421, column: 6, scope: !6206)
!6217 = !DILocalVariable(name: "roundIncrement", scope: !6206, file: !3, line: 422, type: !60)
!6218 = !DILocation(line: 422, column: 7, scope: !6206)
!6219 = !DILocalVariable(name: "roundBits", scope: !6206, file: !3, line: 422, type: !60)
!6220 = !DILocation(line: 422, column: 23, scope: !6206)
!6221 = !DILocalVariable(name: "isTiny", scope: !6206, file: !3, line: 423, type: !1241)
!6222 = !DILocation(line: 423, column: 6, scope: !6206)
!6223 = !DILocation(line: 425, column: 16, scope: !6206)
!6224 = !DILocation(line: 425, column: 14, scope: !6206)
!6225 = !DILocation(line: 426, column: 22, scope: !6206)
!6226 = !DILocation(line: 426, column: 35, scope: !6206)
!6227 = !DILocation(line: 426, column: 18, scope: !6206)
!6228 = !DILocation(line: 427, column: 16, scope: !6206)
!6229 = !DILocation(line: 428, column: 8, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 428, column: 6)
!6231 = !DILocation(line: 428, column: 6, scope: !6206)
!6232 = !DILocation(line: 429, column: 6, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6234, file: !3, line: 429, column: 6)
!6234 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 428, column: 27)
!6235 = !DILocation(line: 429, column: 19, scope: !6233)
!6236 = !DILocation(line: 429, column: 6, scope: !6234)
!6237 = !DILocation(line: 430, column: 16, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 429, column: 44)
!6239 = !DILocation(line: 431, column: 1, scope: !6238)
!6240 = !DILocation(line: 433, column: 16, scope: !6241)
!6241 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 432, column: 6)
!6242 = !DILocation(line: 434, column: 6, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6241, file: !3, line: 434, column: 6)
!6244 = !DILocation(line: 434, column: 6, scope: !6241)
!6245 = !DILocation(line: 435, column: 6, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6247, file: !3, line: 435, column: 6)
!6247 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 434, column: 14)
!6248 = !DILocation(line: 435, column: 19, scope: !6246)
!6249 = !DILocation(line: 435, column: 6, scope: !6247)
!6250 = !DILocation(line: 435, column: 54, scope: !6246)
!6251 = !DILocation(line: 435, column: 39, scope: !6246)
!6252 = !DILocation(line: 436, column: 1, scope: !6247)
!6253 = !DILocation(line: 438, column: 6, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6255, file: !3, line: 438, column: 6)
!6255 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 437, column: 6)
!6256 = !DILocation(line: 438, column: 19, scope: !6254)
!6257 = !DILocation(line: 438, column: 6, scope: !6255)
!6258 = !DILocation(line: 438, column: 56, scope: !6254)
!6259 = !DILocation(line: 438, column: 41, scope: !6254)
!6260 = !DILocation(line: 441, column: 1, scope: !6234)
!6261 = !DILocation(line: 442, column: 13, scope: !6206)
!6262 = !DILocation(line: 442, column: 18, scope: !6206)
!6263 = !DILocation(line: 442, column: 11, scope: !6206)
!6264 = !DILocation(line: 443, column: 24, scope: !6265)
!6265 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 443, column: 6)
!6266 = !DILocation(line: 443, column: 15, scope: !6265)
!6267 = !DILocation(line: 443, column: 12, scope: !6265)
!6268 = !DILocation(line: 443, column: 6, scope: !6206)
!6269 = !DILocation(line: 444, column: 19, scope: !6270)
!6270 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 444, column: 9)
!6271 = distinct !DILexicalBlock(scope: !6265, file: !3, line: 443, column: 31)
!6272 = !DILocation(line: 444, column: 17, scope: !6270)
!6273 = !DILocation(line: 445, column: 1, scope: !6270)
!6274 = !DILocation(line: 445, column: 11, scope: !6270)
!6275 = !DILocation(line: 445, column: 16, scope: !6270)
!6276 = !DILocation(line: 446, column: 1, scope: !6270)
!6277 = !DILocation(line: 446, column: 18, scope: !6270)
!6278 = !DILocation(line: 446, column: 25, scope: !6270)
!6279 = !DILocation(line: 446, column: 23, scope: !6270)
!6280 = !DILocation(line: 446, column: 42, scope: !6270)
!6281 = !DILocation(line: 444, column: 9, scope: !6271)
!6282 = !DILocation(line: 448, column: 1, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6270, file: !3, line: 447, column: 3)
!6284 = !DILocation(line: 449, column: 21, scope: !6283)
!6285 = !DILocation(line: 449, column: 8, scope: !6283)
!6286 = !DILocation(line: 449, column: 43, scope: !6283)
!6287 = !DILocation(line: 449, column: 58, scope: !6283)
!6288 = !DILocation(line: 449, column: 41, scope: !6283)
!6289 = !DILocation(line: 449, column: 39, scope: !6283)
!6290 = !DILocation(line: 449, column: 1, scope: !6283)
!6291 = !DILocation(line: 451, column: 6, scope: !6292)
!6292 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 451, column: 6)
!6293 = !DILocation(line: 451, column: 11, scope: !6292)
!6294 = !DILocation(line: 451, column: 6, scope: !6271)
!6295 = !DILocation(line: 453, column: 3, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 451, column: 17)
!6297 = !DILocation(line: 453, column: 25, scope: !6296)
!6298 = !DILocation(line: 454, column: 1, scope: !6296)
!6299 = !DILocation(line: 454, column: 6, scope: !6296)
!6300 = !DILocation(line: 454, column: 11, scope: !6296)
!6301 = !DILocation(line: 455, column: 1, scope: !6296)
!6302 = !DILocation(line: 455, column: 6, scope: !6296)
!6303 = !DILocation(line: 455, column: 13, scope: !6296)
!6304 = !DILocation(line: 455, column: 11, scope: !6296)
!6305 = !DILocation(line: 455, column: 28, scope: !6296)
!6306 = !DILocation(line: 452, column: 8, scope: !6296)
!6307 = !DILocation(line: 456, column: 22, scope: !6296)
!6308 = !DILocation(line: 456, column: 30, scope: !6296)
!6309 = !DILocation(line: 456, column: 28, scope: !6296)
!6310 = !DILocation(line: 456, column: 1, scope: !6296)
!6311 = !DILocation(line: 457, column: 6, scope: !6296)
!6312 = !DILocation(line: 458, column: 13, scope: !6296)
!6313 = !DILocation(line: 458, column: 18, scope: !6296)
!6314 = !DILocation(line: 458, column: 11, scope: !6296)
!6315 = !DILocation(line: 459, column: 6, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 459, column: 6)
!6317 = !DILocation(line: 459, column: 13, scope: !6316)
!6318 = !DILocation(line: 459, column: 16, scope: !6316)
!6319 = !DILocation(line: 459, column: 6, scope: !6296)
!6320 = !DILocation(line: 459, column: 28, scope: !6316)
!6321 = !DILocation(line: 460, column: 1, scope: !6296)
!6322 = !DILocation(line: 461, column: 1, scope: !6271)
!6323 = !DILocation(line: 462, column: 6, scope: !6324)
!6324 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 462, column: 6)
!6325 = !DILocation(line: 462, column: 6, scope: !6206)
!6326 = !DILocation(line: 462, column: 40, scope: !6324)
!6327 = !DILocation(line: 462, column: 18, scope: !6324)
!6328 = !DILocation(line: 463, column: 10, scope: !6206)
!6329 = !DILocation(line: 463, column: 17, scope: !6206)
!6330 = !DILocation(line: 463, column: 15, scope: !6206)
!6331 = !DILocation(line: 463, column: 33, scope: !6206)
!6332 = !DILocation(line: 463, column: 6, scope: !6206)
!6333 = !DILocation(line: 464, column: 17, scope: !6206)
!6334 = !DILocation(line: 464, column: 27, scope: !6206)
!6335 = !DILocation(line: 464, column: 37, scope: !6206)
!6336 = !DILocation(line: 464, column: 46, scope: !6206)
!6337 = !DILocation(line: 464, column: 44, scope: !6206)
!6338 = !DILocation(line: 464, column: 9, scope: !6206)
!6339 = !DILocation(line: 464, column: 6, scope: !6206)
!6340 = !DILocation(line: 465, column: 6, scope: !6341)
!6341 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 465, column: 6)
!6342 = !DILocation(line: 465, column: 11, scope: !6341)
!6343 = !DILocation(line: 465, column: 6, scope: !6206)
!6344 = !DILocation(line: 465, column: 23, scope: !6341)
!6345 = !DILocation(line: 465, column: 18, scope: !6341)
!6346 = !DILocation(line: 466, column: 21, scope: !6206)
!6347 = !DILocation(line: 466, column: 28, scope: !6206)
!6348 = !DILocation(line: 466, column: 34, scope: !6206)
!6349 = !DILocation(line: 466, column: 8, scope: !6206)
!6350 = !DILocation(line: 466, column: 1, scope: !6206)
!6351 = !DILocation(line: 468, column: 1, scope: !6206)
!6352 = distinct !DISubprogram(name: "float64_div", scope: !3, file: !3, line: 3006, type: !5590, isLocal: false, isDefinition: true, scopeLine: 3007, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6353 = !DILocalVariable(name: "a", arg: 1, scope: !6352, file: !3, line: 3006, type: !1130)
!6354 = !DILocation(line: 3006, column: 30, scope: !6352)
!6355 = !DILocalVariable(name: "b", arg: 2, scope: !6352, file: !3, line: 3006, type: !1130)
!6356 = !DILocation(line: 3006, column: 41, scope: !6352)
!6357 = !DILocalVariable(name: "aSign", scope: !6352, file: !3, line: 3008, type: !1241)
!6358 = !DILocation(line: 3008, column: 6, scope: !6352)
!6359 = !DILocalVariable(name: "bSign", scope: !6352, file: !3, line: 3008, type: !1241)
!6360 = !DILocation(line: 3008, column: 13, scope: !6352)
!6361 = !DILocalVariable(name: "zSign", scope: !6352, file: !3, line: 3008, type: !1241)
!6362 = !DILocation(line: 3008, column: 20, scope: !6352)
!6363 = !DILocalVariable(name: "aExp", scope: !6352, file: !3, line: 3009, type: !60)
!6364 = !DILocation(line: 3009, column: 7, scope: !6352)
!6365 = !DILocalVariable(name: "bExp", scope: !6352, file: !3, line: 3009, type: !60)
!6366 = !DILocation(line: 3009, column: 13, scope: !6352)
!6367 = !DILocalVariable(name: "zExp", scope: !6352, file: !3, line: 3009, type: !60)
!6368 = !DILocation(line: 3009, column: 19, scope: !6352)
!6369 = !DILocalVariable(name: "aSig", scope: !6352, file: !3, line: 3010, type: !24)
!6370 = !DILocation(line: 3010, column: 8, scope: !6352)
!6371 = !DILocalVariable(name: "bSig", scope: !6352, file: !3, line: 3010, type: !24)
!6372 = !DILocation(line: 3010, column: 14, scope: !6352)
!6373 = !DILocalVariable(name: "zSig", scope: !6352, file: !3, line: 3010, type: !24)
!6374 = !DILocation(line: 3010, column: 20, scope: !6352)
!6375 = !DILocalVariable(name: "rem0", scope: !6352, file: !3, line: 3011, type: !24)
!6376 = !DILocation(line: 3011, column: 8, scope: !6352)
!6377 = !DILocalVariable(name: "rem1", scope: !6352, file: !3, line: 3011, type: !24)
!6378 = !DILocation(line: 3011, column: 14, scope: !6352)
!6379 = !DILocalVariable(name: "term0", scope: !6352, file: !3, line: 3012, type: !24)
!6380 = !DILocation(line: 3012, column: 8, scope: !6352)
!6381 = !DILocalVariable(name: "term1", scope: !6352, file: !3, line: 3012, type: !24)
!6382 = !DILocation(line: 3012, column: 15, scope: !6352)
!6383 = !DILocation(line: 3014, column: 28, scope: !6352)
!6384 = !DILocation(line: 3014, column: 8, scope: !6352)
!6385 = !DILocation(line: 3014, column: 6, scope: !6352)
!6386 = !DILocation(line: 3015, column: 27, scope: !6352)
!6387 = !DILocation(line: 3015, column: 8, scope: !6352)
!6388 = !DILocation(line: 3015, column: 6, scope: !6352)
!6389 = !DILocation(line: 3016, column: 29, scope: !6352)
!6390 = !DILocation(line: 3016, column: 9, scope: !6352)
!6391 = !DILocation(line: 3016, column: 7, scope: !6352)
!6392 = !DILocation(line: 3017, column: 28, scope: !6352)
!6393 = !DILocation(line: 3017, column: 8, scope: !6352)
!6394 = !DILocation(line: 3017, column: 6, scope: !6352)
!6395 = !DILocation(line: 3018, column: 27, scope: !6352)
!6396 = !DILocation(line: 3018, column: 8, scope: !6352)
!6397 = !DILocation(line: 3018, column: 6, scope: !6352)
!6398 = !DILocation(line: 3019, column: 29, scope: !6352)
!6399 = !DILocation(line: 3019, column: 9, scope: !6352)
!6400 = !DILocation(line: 3019, column: 7, scope: !6352)
!6401 = !DILocation(line: 3020, column: 9, scope: !6352)
!6402 = !DILocation(line: 3020, column: 17, scope: !6352)
!6403 = !DILocation(line: 3020, column: 15, scope: !6352)
!6404 = !DILocation(line: 3020, column: 7, scope: !6352)
!6405 = !DILocation(line: 3021, column: 6, scope: !6406)
!6406 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3021, column: 6)
!6407 = !DILocation(line: 3021, column: 11, scope: !6406)
!6408 = !DILocation(line: 3021, column: 6, scope: !6352)
!6409 = !DILocation(line: 3022, column: 6, scope: !6410)
!6410 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 3022, column: 6)
!6411 = distinct !DILexicalBlock(scope: !6406, file: !3, line: 3021, column: 22)
!6412 = !DILocation(line: 3022, column: 6, scope: !6411)
!6413 = !DILocation(line: 3022, column: 41, scope: !6410)
!6414 = !DILocation(line: 3022, column: 44, scope: !6410)
!6415 = !DILocation(line: 3022, column: 20, scope: !6410)
!6416 = !DILocation(line: 3022, column: 13, scope: !6410)
!6417 = !DILocation(line: 3023, column: 6, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 3023, column: 6)
!6419 = !DILocation(line: 3023, column: 11, scope: !6418)
!6420 = !DILocation(line: 3023, column: 6, scope: !6411)
!6421 = !DILocation(line: 3024, column: 6, scope: !6422)
!6422 = distinct !DILexicalBlock(scope: !6423, file: !3, line: 3024, column: 6)
!6423 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 3023, column: 22)
!6424 = !DILocation(line: 3024, column: 6, scope: !6423)
!6425 = !DILocation(line: 3024, column: 41, scope: !6422)
!6426 = !DILocation(line: 3024, column: 44, scope: !6422)
!6427 = !DILocation(line: 3024, column: 20, scope: !6422)
!6428 = !DILocation(line: 3024, column: 13, scope: !6422)
!6429 = !DILocation(line: 3025, column: 1, scope: !6423)
!6430 = !DILocation(line: 3026, column: 1, scope: !6423)
!6431 = !DILocation(line: 3028, column: 21, scope: !6411)
!6432 = !DILocation(line: 3028, column: 8, scope: !6411)
!6433 = !DILocation(line: 3028, column: 1, scope: !6411)
!6434 = !DILocation(line: 3030, column: 6, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3030, column: 6)
!6436 = !DILocation(line: 3030, column: 11, scope: !6435)
!6437 = !DILocation(line: 3030, column: 6, scope: !6352)
!6438 = !DILocation(line: 3031, column: 6, scope: !6439)
!6439 = distinct !DILexicalBlock(scope: !6440, file: !3, line: 3031, column: 6)
!6440 = distinct !DILexicalBlock(scope: !6435, file: !3, line: 3030, column: 22)
!6441 = !DILocation(line: 3031, column: 6, scope: !6440)
!6442 = !DILocation(line: 3031, column: 41, scope: !6439)
!6443 = !DILocation(line: 3031, column: 44, scope: !6439)
!6444 = !DILocation(line: 3031, column: 20, scope: !6439)
!6445 = !DILocation(line: 3031, column: 13, scope: !6439)
!6446 = !DILocation(line: 3032, column: 21, scope: !6440)
!6447 = !DILocation(line: 3032, column: 8, scope: !6440)
!6448 = !DILocation(line: 3032, column: 1, scope: !6440)
!6449 = !DILocation(line: 3034, column: 6, scope: !6450)
!6450 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3034, column: 6)
!6451 = !DILocation(line: 3034, column: 11, scope: !6450)
!6452 = !DILocation(line: 3034, column: 6, scope: !6352)
!6453 = !DILocation(line: 3035, column: 6, scope: !6454)
!6454 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 3035, column: 6)
!6455 = distinct !DILexicalBlock(scope: !6450, file: !3, line: 3034, column: 18)
!6456 = !DILocation(line: 3035, column: 11, scope: !6454)
!6457 = !DILocation(line: 3035, column: 6, scope: !6455)
!6458 = !DILocation(line: 3036, column: 8, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 3036, column: 6)
!6460 = distinct !DILexicalBlock(scope: !6454, file: !3, line: 3035, column: 18)
!6461 = !DILocation(line: 3036, column: 15, scope: !6459)
!6462 = !DILocation(line: 3036, column: 13, scope: !6459)
!6463 = !DILocation(line: 3036, column: 22, scope: !6459)
!6464 = !DILocation(line: 3036, column: 6, scope: !6460)
!6465 = !DILocation(line: 3037, column: 1, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 3036, column: 29)
!6467 = !DILocation(line: 3038, column: 1, scope: !6466)
!6468 = !DILocation(line: 3040, column: 1, scope: !6460)
!6469 = !DILocation(line: 3041, column: 21, scope: !6460)
!6470 = !DILocation(line: 3041, column: 8, scope: !6460)
!6471 = !DILocation(line: 3041, column: 1, scope: !6460)
!6472 = !DILocation(line: 3043, column: 28, scope: !6455)
!6473 = !DILocation(line: 3043, column: 1, scope: !6455)
!6474 = !DILocation(line: 3044, column: 1, scope: !6455)
!6475 = !DILocation(line: 3045, column: 6, scope: !6476)
!6476 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3045, column: 6)
!6477 = !DILocation(line: 3045, column: 11, scope: !6476)
!6478 = !DILocation(line: 3045, column: 6, scope: !6352)
!6479 = !DILocation(line: 3046, column: 6, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 3046, column: 6)
!6481 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 3045, column: 18)
!6482 = !DILocation(line: 3046, column: 11, scope: !6480)
!6483 = !DILocation(line: 3046, column: 6, scope: !6481)
!6484 = !DILocation(line: 3046, column: 38, scope: !6480)
!6485 = !DILocation(line: 3046, column: 25, scope: !6480)
!6486 = !DILocation(line: 3046, column: 18, scope: !6480)
!6487 = !DILocation(line: 3047, column: 28, scope: !6481)
!6488 = !DILocation(line: 3047, column: 1, scope: !6481)
!6489 = !DILocation(line: 3048, column: 1, scope: !6481)
!6490 = !DILocation(line: 3049, column: 8, scope: !6352)
!6491 = !DILocation(line: 3049, column: 15, scope: !6352)
!6492 = !DILocation(line: 3049, column: 13, scope: !6352)
!6493 = !DILocation(line: 3049, column: 20, scope: !6352)
!6494 = !DILocation(line: 3049, column: 6, scope: !6352)
!6495 = !DILocation(line: 3050, column: 10, scope: !6352)
!6496 = !DILocation(line: 3050, column: 15, scope: !6352)
!6497 = !DILocation(line: 3050, column: 46, scope: !6352)
!6498 = !DILocation(line: 3050, column: 6, scope: !6352)
!6499 = !DILocation(line: 3051, column: 10, scope: !6352)
!6500 = !DILocation(line: 3051, column: 15, scope: !6352)
!6501 = !DILocation(line: 3051, column: 46, scope: !6352)
!6502 = !DILocation(line: 3051, column: 6, scope: !6352)
!6503 = !DILocation(line: 3052, column: 6, scope: !6504)
!6504 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3052, column: 6)
!6505 = !DILocation(line: 3052, column: 16, scope: !6504)
!6506 = !DILocation(line: 3052, column: 23, scope: !6504)
!6507 = !DILocation(line: 3052, column: 21, scope: !6504)
!6508 = !DILocation(line: 3052, column: 11, scope: !6504)
!6509 = !DILocation(line: 3052, column: 6, scope: !6352)
!6510 = !DILocation(line: 3053, column: 6, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6504, file: !3, line: 3052, column: 32)
!6512 = !DILocation(line: 3054, column: 1, scope: !6511)
!6513 = !DILocation(line: 3055, column: 1, scope: !6511)
!6514 = !DILocation(line: 3056, column: 28, scope: !6352)
!6515 = !DILocation(line: 3056, column: 37, scope: !6352)
!6516 = !DILocation(line: 3056, column: 8, scope: !6352)
!6517 = !DILocation(line: 3056, column: 6, scope: !6352)
!6518 = !DILocation(line: 3057, column: 8, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3057, column: 6)
!6520 = !DILocation(line: 3057, column: 13, scope: !6519)
!6521 = !DILocation(line: 3057, column: 23, scope: !6519)
!6522 = !DILocation(line: 3057, column: 6, scope: !6352)
!6523 = !DILocation(line: 3058, column: 13, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6519, file: !3, line: 3057, column: 30)
!6525 = !DILocation(line: 3058, column: 19, scope: !6524)
!6526 = !DILocation(line: 3058, column: 1, scope: !6524)
!6527 = !DILocation(line: 3059, column: 9, scope: !6524)
!6528 = !DILocation(line: 3059, column: 18, scope: !6524)
!6529 = !DILocation(line: 3059, column: 25, scope: !6524)
!6530 = !DILocation(line: 3059, column: 1, scope: !6524)
!6531 = !DILocation(line: 3060, column: 1, scope: !6524)
!6532 = !DILocation(line: 3060, column: 19, scope: !6524)
!6533 = !DILocation(line: 3060, column: 24, scope: !6524)
!6534 = !DILocation(line: 3061, column: 1, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6524, file: !3, line: 3060, column: 30)
!6536 = !DILocation(line: 3062, column: 9, scope: !6535)
!6537 = !DILocation(line: 3062, column: 15, scope: !6535)
!6538 = !DILocation(line: 3062, column: 24, scope: !6535)
!6539 = !DILocation(line: 3062, column: 1, scope: !6535)
!6540 = distinct !{!6540, !6531, !6541}
!6541 = !DILocation(line: 3063, column: 1, scope: !6524)
!6542 = !DILocation(line: 3064, column: 11, scope: !6524)
!6543 = !DILocation(line: 3064, column: 16, scope: !6524)
!6544 = !DILocation(line: 3064, column: 9, scope: !6524)
!6545 = !DILocation(line: 3064, column: 6, scope: !6524)
!6546 = !DILocation(line: 3065, column: 1, scope: !6524)
!6547 = !DILocation(line: 3066, column: 29, scope: !6352)
!6548 = !DILocation(line: 3066, column: 36, scope: !6352)
!6549 = !DILocation(line: 3066, column: 42, scope: !6352)
!6550 = !DILocation(line: 3066, column: 8, scope: !6352)
!6551 = !DILocation(line: 3066, column: 1, scope: !6352)
!6552 = !DILocation(line: 3068, column: 1, scope: !6352)
!6553 = distinct !DISubprogram(name: "float64_rem", scope: !3, file: !3, line: 3076, type: !5590, isLocal: false, isDefinition: true, scopeLine: 3077, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6554 = !DILocalVariable(name: "a", arg: 1, scope: !6553, file: !3, line: 3076, type: !1130)
!6555 = !DILocation(line: 3076, column: 30, scope: !6553)
!6556 = !DILocalVariable(name: "b", arg: 2, scope: !6553, file: !3, line: 3076, type: !1130)
!6557 = !DILocation(line: 3076, column: 41, scope: !6553)
!6558 = !DILocalVariable(name: "aSign", scope: !6553, file: !3, line: 3078, type: !1241)
!6559 = !DILocation(line: 3078, column: 6, scope: !6553)
!6560 = !DILocalVariable(name: "bSign", scope: !6553, file: !3, line: 3078, type: !1241)
!6561 = !DILocation(line: 3078, column: 13, scope: !6553)
!6562 = !DILocalVariable(name: "zSign", scope: !6553, file: !3, line: 3078, type: !1241)
!6563 = !DILocation(line: 3078, column: 20, scope: !6553)
!6564 = !DILocalVariable(name: "aExp", scope: !6553, file: !3, line: 3079, type: !60)
!6565 = !DILocation(line: 3079, column: 7, scope: !6553)
!6566 = !DILocalVariable(name: "bExp", scope: !6553, file: !3, line: 3079, type: !60)
!6567 = !DILocation(line: 3079, column: 13, scope: !6553)
!6568 = !DILocalVariable(name: "expDiff", scope: !6553, file: !3, line: 3079, type: !60)
!6569 = !DILocation(line: 3079, column: 19, scope: !6553)
!6570 = !DILocalVariable(name: "aSig", scope: !6553, file: !3, line: 3080, type: !24)
!6571 = !DILocation(line: 3080, column: 8, scope: !6553)
!6572 = !DILocalVariable(name: "bSig", scope: !6553, file: !3, line: 3080, type: !24)
!6573 = !DILocation(line: 3080, column: 14, scope: !6553)
!6574 = !DILocalVariable(name: "q", scope: !6553, file: !3, line: 3081, type: !24)
!6575 = !DILocation(line: 3081, column: 8, scope: !6553)
!6576 = !DILocalVariable(name: "alternateASig", scope: !6553, file: !3, line: 3081, type: !24)
!6577 = !DILocation(line: 3081, column: 11, scope: !6553)
!6578 = !DILocalVariable(name: "sigMean", scope: !6553, file: !3, line: 3082, type: !33)
!6579 = !DILocation(line: 3082, column: 9, scope: !6553)
!6580 = !DILocation(line: 3084, column: 28, scope: !6553)
!6581 = !DILocation(line: 3084, column: 8, scope: !6553)
!6582 = !DILocation(line: 3084, column: 6, scope: !6553)
!6583 = !DILocation(line: 3085, column: 27, scope: !6553)
!6584 = !DILocation(line: 3085, column: 8, scope: !6553)
!6585 = !DILocation(line: 3085, column: 6, scope: !6553)
!6586 = !DILocation(line: 3086, column: 29, scope: !6553)
!6587 = !DILocation(line: 3086, column: 9, scope: !6553)
!6588 = !DILocation(line: 3086, column: 7, scope: !6553)
!6589 = !DILocation(line: 3087, column: 28, scope: !6553)
!6590 = !DILocation(line: 3087, column: 8, scope: !6553)
!6591 = !DILocation(line: 3087, column: 6, scope: !6553)
!6592 = !DILocation(line: 3088, column: 27, scope: !6553)
!6593 = !DILocation(line: 3088, column: 8, scope: !6553)
!6594 = !DILocation(line: 3088, column: 6, scope: !6553)
!6595 = !DILocation(line: 3089, column: 29, scope: !6553)
!6596 = !DILocation(line: 3089, column: 9, scope: !6553)
!6597 = !DILocation(line: 3089, column: 7, scope: !6553)
!6598 = !DILocation(line: 3090, column: 6, scope: !6599)
!6599 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3090, column: 6)
!6600 = !DILocation(line: 3090, column: 11, scope: !6599)
!6601 = !DILocation(line: 3090, column: 6, scope: !6553)
!6602 = !DILocation(line: 3091, column: 6, scope: !6603)
!6603 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 3091, column: 6)
!6604 = distinct !DILexicalBlock(scope: !6599, file: !3, line: 3090, column: 22)
!6605 = !DILocation(line: 3091, column: 11, scope: !6603)
!6606 = !DILocation(line: 3091, column: 18, scope: !6603)
!6607 = !DILocation(line: 3091, column: 23, scope: !6603)
!6608 = !DILocation(line: 3091, column: 34, scope: !6603)
!6609 = !DILocation(line: 3091, column: 37, scope: !6603)
!6610 = !DILocation(line: 3091, column: 6, scope: !6604)
!6611 = !DILocation(line: 3092, column: 29, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 3091, column: 46)
!6613 = !DILocation(line: 3092, column: 32, scope: !6612)
!6614 = !DILocation(line: 3092, column: 8, scope: !6612)
!6615 = !DILocation(line: 3092, column: 1, scope: !6612)
!6616 = !DILocation(line: 3094, column: 1, scope: !6604)
!6617 = !DILocation(line: 3095, column: 1, scope: !6604)
!6618 = !DILocation(line: 3097, column: 6, scope: !6619)
!6619 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3097, column: 6)
!6620 = !DILocation(line: 3097, column: 11, scope: !6619)
!6621 = !DILocation(line: 3097, column: 6, scope: !6553)
!6622 = !DILocation(line: 3098, column: 6, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6624, file: !3, line: 3098, column: 6)
!6624 = distinct !DILexicalBlock(scope: !6619, file: !3, line: 3097, column: 22)
!6625 = !DILocation(line: 3098, column: 6, scope: !6624)
!6626 = !DILocation(line: 3098, column: 41, scope: !6623)
!6627 = !DILocation(line: 3098, column: 44, scope: !6623)
!6628 = !DILocation(line: 3098, column: 20, scope: !6623)
!6629 = !DILocation(line: 3098, column: 13, scope: !6623)
!6630 = !DILocation(line: 3099, column: 8, scope: !6624)
!6631 = !DILocation(line: 3099, column: 1, scope: !6624)
!6632 = !DILocation(line: 3101, column: 6, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3101, column: 6)
!6634 = !DILocation(line: 3101, column: 11, scope: !6633)
!6635 = !DILocation(line: 3101, column: 6, scope: !6553)
!6636 = !DILocation(line: 3102, column: 6, scope: !6637)
!6637 = distinct !DILexicalBlock(scope: !6638, file: !3, line: 3102, column: 6)
!6638 = distinct !DILexicalBlock(scope: !6633, file: !3, line: 3101, column: 18)
!6639 = !DILocation(line: 3102, column: 11, scope: !6637)
!6640 = !DILocation(line: 3102, column: 6, scope: !6638)
!6641 = !DILocation(line: 3103, column: 1, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6637, file: !3, line: 3102, column: 18)
!6643 = !DILocation(line: 3104, column: 1, scope: !6642)
!6644 = !DILocation(line: 3106, column: 28, scope: !6638)
!6645 = !DILocation(line: 3106, column: 1, scope: !6638)
!6646 = !DILocation(line: 3107, column: 1, scope: !6638)
!6647 = !DILocation(line: 3108, column: 6, scope: !6648)
!6648 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3108, column: 6)
!6649 = !DILocation(line: 3108, column: 11, scope: !6648)
!6650 = !DILocation(line: 3108, column: 6, scope: !6553)
!6651 = !DILocation(line: 3109, column: 6, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 3109, column: 6)
!6653 = distinct !DILexicalBlock(scope: !6648, file: !3, line: 3108, column: 18)
!6654 = !DILocation(line: 3109, column: 11, scope: !6652)
!6655 = !DILocation(line: 3109, column: 6, scope: !6653)
!6656 = !DILocation(line: 3109, column: 25, scope: !6652)
!6657 = !DILocation(line: 3109, column: 18, scope: !6652)
!6658 = !DILocation(line: 3110, column: 28, scope: !6653)
!6659 = !DILocation(line: 3110, column: 1, scope: !6653)
!6660 = !DILocation(line: 3111, column: 1, scope: !6653)
!6661 = !DILocation(line: 3112, column: 11, scope: !6553)
!6662 = !DILocation(line: 3112, column: 18, scope: !6553)
!6663 = !DILocation(line: 3112, column: 16, scope: !6553)
!6664 = !DILocation(line: 3112, column: 9, scope: !6553)
!6665 = !DILocation(line: 3113, column: 10, scope: !6553)
!6666 = !DILocation(line: 3113, column: 15, scope: !6553)
!6667 = !DILocation(line: 3113, column: 46, scope: !6553)
!6668 = !DILocation(line: 3113, column: 6, scope: !6553)
!6669 = !DILocation(line: 3114, column: 10, scope: !6553)
!6670 = !DILocation(line: 3114, column: 15, scope: !6553)
!6671 = !DILocation(line: 3114, column: 46, scope: !6553)
!6672 = !DILocation(line: 3114, column: 6, scope: !6553)
!6673 = !DILocation(line: 3115, column: 6, scope: !6674)
!6674 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3115, column: 6)
!6675 = !DILocation(line: 3115, column: 14, scope: !6674)
!6676 = !DILocation(line: 3115, column: 6, scope: !6553)
!6677 = !DILocation(line: 3116, column: 6, scope: !6678)
!6678 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 3116, column: 6)
!6679 = distinct !DILexicalBlock(scope: !6674, file: !3, line: 3115, column: 20)
!6680 = !DILocation(line: 3116, column: 14, scope: !6678)
!6681 = !DILocation(line: 3116, column: 6, scope: !6679)
!6682 = !DILocation(line: 3116, column: 28, scope: !6678)
!6683 = !DILocation(line: 3116, column: 21, scope: !6678)
!6684 = !DILocation(line: 3117, column: 6, scope: !6679)
!6685 = !DILocation(line: 3118, column: 1, scope: !6679)
!6686 = !DILocation(line: 3119, column: 7, scope: !6553)
!6687 = !DILocation(line: 3119, column: 15, scope: !6553)
!6688 = !DILocation(line: 3119, column: 12, scope: !6553)
!6689 = !DILocation(line: 3119, column: 5, scope: !6553)
!6690 = !DILocation(line: 3119, column: 3, scope: !6553)
!6691 = !DILocation(line: 3120, column: 6, scope: !6692)
!6692 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3120, column: 6)
!6693 = !DILocation(line: 3120, column: 6, scope: !6553)
!6694 = !DILocation(line: 3120, column: 18, scope: !6692)
!6695 = !DILocation(line: 3120, column: 15, scope: !6692)
!6696 = !DILocation(line: 3120, column: 10, scope: !6692)
!6697 = !DILocation(line: 3121, column: 9, scope: !6553)
!6698 = !DILocation(line: 3122, column: 1, scope: !6553)
!6699 = !DILocation(line: 3122, column: 13, scope: !6553)
!6700 = !DILocation(line: 3122, column: 11, scope: !6553)
!6701 = !DILocation(line: 3123, column: 25, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3122, column: 23)
!6703 = !DILocation(line: 3123, column: 34, scope: !6702)
!6704 = !DILocation(line: 3123, column: 5, scope: !6702)
!6705 = !DILocation(line: 3123, column: 3, scope: !6702)
!6706 = !DILocation(line: 3124, column: 11, scope: !6702)
!6707 = !DILocation(line: 3124, column: 9, scope: !6702)
!6708 = !DILocation(line: 3124, column: 5, scope: !6702)
!6709 = !DILocation(line: 3124, column: 17, scope: !6702)
!6710 = !DILocation(line: 3124, column: 19, scope: !6702)
!6711 = !DILocation(line: 3124, column: 3, scope: !6702)
!6712 = !DILocation(line: 3125, column: 14, scope: !6702)
!6713 = !DILocation(line: 3125, column: 18, scope: !6702)
!6714 = !DILocation(line: 3125, column: 26, scope: !6702)
!6715 = !DILocation(line: 3125, column: 24, scope: !6702)
!6716 = !DILocation(line: 3125, column: 8, scope: !6702)
!6717 = !DILocation(line: 3125, column: 6, scope: !6702)
!6718 = !DILocation(line: 3126, column: 9, scope: !6702)
!6719 = distinct !{!6719, !6698, !6720}
!6720 = !DILocation(line: 3127, column: 1, scope: !6553)
!6721 = !DILocation(line: 3128, column: 9, scope: !6553)
!6722 = !DILocation(line: 3129, column: 10, scope: !6723)
!6723 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3129, column: 6)
!6724 = !DILocation(line: 3129, column: 8, scope: !6723)
!6725 = !DILocation(line: 3129, column: 6, scope: !6553)
!6726 = !DILocation(line: 3130, column: 25, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6723, file: !3, line: 3129, column: 20)
!6728 = !DILocation(line: 3130, column: 34, scope: !6727)
!6729 = !DILocation(line: 3130, column: 5, scope: !6727)
!6730 = !DILocation(line: 3130, column: 3, scope: !6727)
!6731 = !DILocation(line: 3131, column: 11, scope: !6727)
!6732 = !DILocation(line: 3131, column: 9, scope: !6727)
!6733 = !DILocation(line: 3131, column: 5, scope: !6727)
!6734 = !DILocation(line: 3131, column: 17, scope: !6727)
!6735 = !DILocation(line: 3131, column: 19, scope: !6727)
!6736 = !DILocation(line: 3131, column: 3, scope: !6727)
!6737 = !DILocation(line: 3132, column: 12, scope: !6727)
!6738 = !DILocation(line: 3132, column: 10, scope: !6727)
!6739 = !DILocation(line: 3132, column: 3, scope: !6727)
!6740 = !DILocation(line: 3133, column: 6, scope: !6727)
!6741 = !DILocation(line: 3134, column: 12, scope: !6727)
!6742 = !DILocation(line: 3134, column: 16, scope: !6727)
!6743 = !DILocation(line: 3134, column: 25, scope: !6727)
!6744 = !DILocation(line: 3134, column: 33, scope: !6727)
!6745 = !DILocation(line: 3134, column: 21, scope: !6727)
!6746 = !DILocation(line: 3134, column: 43, scope: !6727)
!6747 = !DILocation(line: 3134, column: 50, scope: !6727)
!6748 = !DILocation(line: 3134, column: 48, scope: !6727)
!6749 = !DILocation(line: 3134, column: 41, scope: !6727)
!6750 = !DILocation(line: 3134, column: 6, scope: !6727)
!6751 = !DILocation(line: 3135, column: 1, scope: !6727)
!6752 = !DILocation(line: 3137, column: 6, scope: !6753)
!6753 = distinct !DILexicalBlock(scope: !6723, file: !3, line: 3136, column: 6)
!6754 = !DILocation(line: 3138, column: 6, scope: !6753)
!6755 = !DILocation(line: 3140, column: 1, scope: !6553)
!6756 = distinct !{!6756, !6755, !6757}
!6757 = !DILocation(line: 3144, column: 31, scope: !6553)
!6758 = !DILocation(line: 3141, column: 17, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3140, column: 4)
!6760 = !DILocation(line: 3141, column: 15, scope: !6759)
!6761 = !DILocation(line: 3142, column: 1, scope: !6759)
!6762 = !DILocation(line: 3143, column: 9, scope: !6759)
!6763 = !DILocation(line: 3143, column: 6, scope: !6759)
!6764 = !DILocation(line: 3144, column: 1, scope: !6759)
!6765 = !DILocation(line: 3144, column: 26, scope: !6553)
!6766 = !DILocation(line: 3144, column: 13, scope: !6553)
!6767 = !DILocation(line: 3145, column: 11, scope: !6553)
!6768 = !DILocation(line: 3145, column: 18, scope: !6553)
!6769 = !DILocation(line: 3145, column: 16, scope: !6553)
!6770 = !DILocation(line: 3145, column: 9, scope: !6553)
!6771 = !DILocation(line: 3146, column: 8, scope: !6772)
!6772 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3146, column: 6)
!6773 = !DILocation(line: 3146, column: 16, scope: !6772)
!6774 = !DILocation(line: 3146, column: 22, scope: !6772)
!6775 = !DILocation(line: 3146, column: 29, scope: !6772)
!6776 = !DILocation(line: 3146, column: 37, scope: !6772)
!6777 = !DILocation(line: 3146, column: 44, scope: !6772)
!6778 = !DILocation(line: 3146, column: 49, scope: !6772)
!6779 = !DILocation(line: 3146, column: 51, scope: !6772)
!6780 = !DILocation(line: 3146, column: 6, scope: !6553)
!6781 = !DILocation(line: 3147, column: 8, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !6772, file: !3, line: 3146, column: 61)
!6783 = !DILocation(line: 3147, column: 6, scope: !6782)
!6784 = !DILocation(line: 3148, column: 1, scope: !6782)
!6785 = !DILocation(line: 3149, column: 21, scope: !6553)
!6786 = !DILocation(line: 3149, column: 26, scope: !6553)
!6787 = !DILocation(line: 3149, column: 7, scope: !6553)
!6788 = !DILocation(line: 3150, column: 6, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3150, column: 6)
!6790 = !DILocation(line: 3150, column: 6, scope: !6553)
!6791 = !DILocation(line: 3150, column: 23, scope: !6789)
!6792 = !DILocation(line: 3150, column: 21, scope: !6789)
!6793 = !DILocation(line: 3150, column: 19, scope: !6789)
!6794 = !DILocation(line: 3150, column: 14, scope: !6789)
!6795 = !DILocation(line: 3151, column: 38, scope: !6553)
!6796 = !DILocation(line: 3151, column: 46, scope: !6553)
!6797 = !DILocation(line: 3151, column: 44, scope: !6553)
!6798 = !DILocation(line: 3151, column: 53, scope: !6553)
!6799 = !DILocation(line: 3151, column: 59, scope: !6553)
!6800 = !DILocation(line: 3151, column: 8, scope: !6553)
!6801 = !DILocation(line: 3151, column: 1, scope: !6553)
!6802 = !DILocation(line: 3153, column: 1, scope: !6553)
!6803 = distinct !DISubprogram(name: "float64_sqrt", scope: !3, file: !3, line: 3161, type: !5453, isLocal: false, isDefinition: true, scopeLine: 3162, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6804 = !DILocalVariable(name: "a", arg: 1, scope: !6803, file: !3, line: 3161, type: !1130)
!6805 = !DILocation(line: 3161, column: 31, scope: !6803)
!6806 = !DILocalVariable(name: "aSign", scope: !6803, file: !3, line: 3163, type: !1241)
!6807 = !DILocation(line: 3163, column: 6, scope: !6803)
!6808 = !DILocalVariable(name: "aExp", scope: !6803, file: !3, line: 3164, type: !60)
!6809 = !DILocation(line: 3164, column: 7, scope: !6803)
!6810 = !DILocalVariable(name: "zExp", scope: !6803, file: !3, line: 3164, type: !60)
!6811 = !DILocation(line: 3164, column: 13, scope: !6803)
!6812 = !DILocalVariable(name: "aSig", scope: !6803, file: !3, line: 3165, type: !24)
!6813 = !DILocation(line: 3165, column: 8, scope: !6803)
!6814 = !DILocalVariable(name: "zSig", scope: !6803, file: !3, line: 3165, type: !24)
!6815 = !DILocation(line: 3165, column: 14, scope: !6803)
!6816 = !DILocalVariable(name: "doubleZSig", scope: !6803, file: !3, line: 3165, type: !24)
!6817 = !DILocation(line: 3165, column: 20, scope: !6803)
!6818 = !DILocalVariable(name: "rem0", scope: !6803, file: !3, line: 3166, type: !24)
!6819 = !DILocation(line: 3166, column: 8, scope: !6803)
!6820 = !DILocalVariable(name: "rem1", scope: !6803, file: !3, line: 3166, type: !24)
!6821 = !DILocation(line: 3166, column: 14, scope: !6803)
!6822 = !DILocalVariable(name: "term0", scope: !6803, file: !3, line: 3166, type: !24)
!6823 = !DILocation(line: 3166, column: 20, scope: !6803)
!6824 = !DILocalVariable(name: "term1", scope: !6803, file: !3, line: 3166, type: !24)
!6825 = !DILocation(line: 3166, column: 27, scope: !6803)
!6826 = !DILocalVariable(name: "z", scope: !6803, file: !3, line: 3167, type: !1130)
!6827 = !DILocation(line: 3167, column: 9, scope: !6803)
!6828 = !DILocation(line: 3169, column: 28, scope: !6803)
!6829 = !DILocation(line: 3169, column: 8, scope: !6803)
!6830 = !DILocation(line: 3169, column: 6, scope: !6803)
!6831 = !DILocation(line: 3170, column: 27, scope: !6803)
!6832 = !DILocation(line: 3170, column: 8, scope: !6803)
!6833 = !DILocation(line: 3170, column: 6, scope: !6803)
!6834 = !DILocation(line: 3171, column: 29, scope: !6803)
!6835 = !DILocation(line: 3171, column: 9, scope: !6803)
!6836 = !DILocation(line: 3171, column: 7, scope: !6803)
!6837 = !DILocation(line: 3172, column: 6, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6803, file: !3, line: 3172, column: 6)
!6839 = !DILocation(line: 3172, column: 11, scope: !6838)
!6840 = !DILocation(line: 3172, column: 6, scope: !6803)
!6841 = !DILocation(line: 3173, column: 6, scope: !6842)
!6842 = distinct !DILexicalBlock(scope: !6843, file: !3, line: 3173, column: 6)
!6843 = distinct !DILexicalBlock(scope: !6838, file: !3, line: 3172, column: 22)
!6844 = !DILocation(line: 3173, column: 6, scope: !6843)
!6845 = !DILocation(line: 3173, column: 41, scope: !6842)
!6846 = !DILocation(line: 3173, column: 44, scope: !6842)
!6847 = !DILocation(line: 3173, column: 20, scope: !6842)
!6848 = !DILocation(line: 3173, column: 13, scope: !6842)
!6849 = !DILocation(line: 3174, column: 8, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6843, file: !3, line: 3174, column: 6)
!6851 = !DILocation(line: 3174, column: 6, scope: !6843)
!6852 = !DILocation(line: 3174, column: 23, scope: !6850)
!6853 = !DILocation(line: 3174, column: 16, scope: !6850)
!6854 = !DILocation(line: 3175, column: 1, scope: !6843)
!6855 = !DILocation(line: 3176, column: 1, scope: !6843)
!6856 = !DILocation(line: 3178, column: 6, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6803, file: !3, line: 3178, column: 6)
!6858 = !DILocation(line: 3178, column: 6, scope: !6803)
!6859 = !DILocation(line: 3179, column: 8, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 3179, column: 6)
!6861 = distinct !DILexicalBlock(scope: !6857, file: !3, line: 3178, column: 14)
!6862 = !DILocation(line: 3179, column: 15, scope: !6860)
!6863 = !DILocation(line: 3179, column: 13, scope: !6860)
!6864 = !DILocation(line: 3179, column: 22, scope: !6860)
!6865 = !DILocation(line: 3179, column: 6, scope: !6861)
!6866 = !DILocation(line: 3179, column: 36, scope: !6860)
!6867 = !DILocation(line: 3179, column: 29, scope: !6860)
!6868 = !DILocation(line: 3180, column: 1, scope: !6861)
!6869 = !DILocation(line: 3181, column: 1, scope: !6861)
!6870 = !DILocation(line: 3183, column: 6, scope: !6871)
!6871 = distinct !DILexicalBlock(scope: !6803, file: !3, line: 3183, column: 6)
!6872 = !DILocation(line: 3183, column: 11, scope: !6871)
!6873 = !DILocation(line: 3183, column: 6, scope: !6803)
!6874 = !DILocation(line: 3184, column: 6, scope: !6875)
!6875 = distinct !DILexicalBlock(scope: !6876, file: !3, line: 3184, column: 6)
!6876 = distinct !DILexicalBlock(scope: !6871, file: !3, line: 3183, column: 18)
!6877 = !DILocation(line: 3184, column: 11, scope: !6875)
!6878 = !DILocation(line: 3184, column: 6, scope: !6876)
!6879 = !DILocation(line: 3184, column: 18, scope: !6875)
!6880 = !DILocation(line: 3185, column: 28, scope: !6876)
!6881 = !DILocation(line: 3185, column: 1, scope: !6876)
!6882 = !DILocation(line: 3186, column: 1, scope: !6876)
!6883 = !DILocation(line: 3187, column: 12, scope: !6803)
!6884 = !DILocation(line: 3187, column: 17, scope: !6803)
!6885 = !DILocation(line: 3187, column: 26, scope: !6803)
!6886 = !DILocation(line: 3187, column: 32, scope: !6803)
!6887 = !DILocation(line: 3187, column: 6, scope: !6803)
!6888 = !DILocation(line: 3188, column: 6, scope: !6803)
!6889 = !DILocation(line: 3189, column: 24, scope: !6803)
!6890 = !DILocation(line: 3189, column: 30, scope: !6803)
!6891 = !DILocation(line: 3189, column: 34, scope: !6803)
!6892 = !DILocation(line: 3189, column: 8, scope: !6803)
!6893 = !DILocation(line: 3189, column: 6, scope: !6803)
!6894 = !DILocation(line: 3190, column: 16, scope: !6803)
!6895 = !DILocation(line: 3190, column: 21, scope: !6803)
!6896 = !DILocation(line: 3190, column: 12, scope: !6803)
!6897 = !DILocation(line: 3190, column: 6, scope: !6803)
!6898 = !DILocation(line: 3191, column: 28, scope: !6803)
!6899 = !DILocation(line: 3191, column: 37, scope: !6803)
!6900 = !DILocation(line: 3191, column: 41, scope: !6803)
!6901 = !DILocation(line: 3191, column: 8, scope: !6803)
!6902 = !DILocation(line: 3191, column: 52, scope: !6803)
!6903 = !DILocation(line: 3191, column: 56, scope: !6803)
!6904 = !DILocation(line: 3191, column: 48, scope: !6803)
!6905 = !DILocation(line: 3191, column: 6, scope: !6803)
!6906 = !DILocation(line: 3192, column: 8, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6803, file: !3, line: 3192, column: 6)
!6908 = !DILocation(line: 3192, column: 13, scope: !6907)
!6909 = !DILocation(line: 3192, column: 23, scope: !6907)
!6910 = !DILocation(line: 3192, column: 6, scope: !6803)
!6911 = !DILocation(line: 3193, column: 14, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6907, file: !3, line: 3192, column: 30)
!6913 = !DILocation(line: 3193, column: 18, scope: !6912)
!6914 = !DILocation(line: 3193, column: 12, scope: !6912)
!6915 = !DILocation(line: 3194, column: 13, scope: !6912)
!6916 = !DILocation(line: 3194, column: 19, scope: !6912)
!6917 = !DILocation(line: 3194, column: 1, scope: !6912)
!6918 = !DILocation(line: 3195, column: 9, scope: !6912)
!6919 = !DILocation(line: 3195, column: 18, scope: !6912)
!6920 = !DILocation(line: 3195, column: 25, scope: !6912)
!6921 = !DILocation(line: 3195, column: 1, scope: !6912)
!6922 = !DILocation(line: 3196, column: 1, scope: !6912)
!6923 = !DILocation(line: 3196, column: 19, scope: !6912)
!6924 = !DILocation(line: 3196, column: 24, scope: !6912)
!6925 = !DILocation(line: 3197, column: 1, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 3196, column: 30)
!6927 = !DILocation(line: 3198, column: 12, scope: !6926)
!6928 = !DILocation(line: 3199, column: 9, scope: !6926)
!6929 = !DILocation(line: 3199, column: 15, scope: !6926)
!6930 = !DILocation(line: 3199, column: 21, scope: !6926)
!6931 = !DILocation(line: 3199, column: 25, scope: !6926)
!6932 = !DILocation(line: 3199, column: 31, scope: !6926)
!6933 = !DILocation(line: 3199, column: 42, scope: !6926)
!6934 = !DILocation(line: 3199, column: 1, scope: !6926)
!6935 = distinct !{!6935, !6922, !6936}
!6936 = !DILocation(line: 3200, column: 1, scope: !6912)
!6937 = !DILocation(line: 3201, column: 13, scope: !6912)
!6938 = !DILocation(line: 3201, column: 20, scope: !6912)
!6939 = !DILocation(line: 3201, column: 18, scope: !6912)
!6940 = !DILocation(line: 3201, column: 27, scope: !6912)
!6941 = !DILocation(line: 3201, column: 9, scope: !6912)
!6942 = !DILocation(line: 3201, column: 6, scope: !6912)
!6943 = !DILocation(line: 3202, column: 1, scope: !6912)
!6944 = !DILocation(line: 3203, column: 32, scope: !6803)
!6945 = !DILocation(line: 3203, column: 38, scope: !6803)
!6946 = !DILocation(line: 3203, column: 8, scope: !6803)
!6947 = !DILocation(line: 3203, column: 1, scope: !6803)
!6948 = !DILocation(line: 3205, column: 1, scope: !6803)
!6949 = distinct !DISubprogram(name: "float64_eq", scope: !3, file: !3, line: 3213, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3214, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6950 = !DISubroutineType(types: !6951)
!6951 = !{!1022, !1130, !1130}
!6952 = !DILocalVariable(name: "a", arg: 1, scope: !6949, file: !3, line: 3213, type: !1130)
!6953 = !DILocation(line: 3213, column: 26, scope: !6949)
!6954 = !DILocalVariable(name: "b", arg: 2, scope: !6949, file: !3, line: 3213, type: !1130)
!6955 = !DILocation(line: 3213, column: 37, scope: !6949)
!6956 = !DILocation(line: 3216, column: 32, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3216, column: 9)
!6958 = !DILocation(line: 3216, column: 13, scope: !6957)
!6959 = !DILocation(line: 3216, column: 36, scope: !6957)
!6960 = !DILocation(line: 3216, column: 47, scope: !6957)
!6961 = !DILocation(line: 3216, column: 70, scope: !6957)
!6962 = !DILocation(line: 3216, column: 50, scope: !6957)
!6963 = !DILocation(line: 3217, column: 1, scope: !6957)
!6964 = !DILocation(line: 3217, column: 27, scope: !6957)
!6965 = !DILocation(line: 3217, column: 8, scope: !6957)
!6966 = !DILocation(line: 3217, column: 31, scope: !6957)
!6967 = !DILocation(line: 3217, column: 42, scope: !6957)
!6968 = !DILocation(line: 3217, column: 65, scope: !6957)
!6969 = !DILocation(line: 3217, column: 45, scope: !6957)
!6970 = !DILocation(line: 3216, column: 9, scope: !6949)
!6971 = !DILocation(line: 3219, column: 22, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 3219, column: 6)
!6973 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 3218, column: 3)
!6974 = !DILocation(line: 3219, column: 6, scope: !6972)
!6975 = !DILocation(line: 3219, column: 26, scope: !6972)
!6976 = !DILocation(line: 3219, column: 45, scope: !6972)
!6977 = !DILocation(line: 3219, column: 29, scope: !6972)
!6978 = !DILocation(line: 3219, column: 6, scope: !6973)
!6979 = !DILocation(line: 3220, column: 1, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 3219, column: 51)
!6981 = !DILocation(line: 3221, column: 1, scope: !6980)
!6982 = !DILocation(line: 3222, column: 1, scope: !6973)
!6983 = !DILocation(line: 3224, column: 10, scope: !6949)
!6984 = !DILocation(line: 3224, column: 15, scope: !6949)
!6985 = !DILocation(line: 3224, column: 12, scope: !6949)
!6986 = !DILocation(line: 3224, column: 19, scope: !6949)
!6987 = !DILocation(line: 3224, column: 37, scope: !6949)
!6988 = !DILocation(line: 3224, column: 41, scope: !6949)
!6989 = !DILocation(line: 3224, column: 39, scope: !6949)
!6990 = !DILocation(line: 3224, column: 44, scope: !6949)
!6991 = !DILocation(line: 3224, column: 50, scope: !6949)
!6992 = !DILocation(line: 3224, column: 1, scope: !6949)
!6993 = !DILocation(line: 3226, column: 1, scope: !6949)
!6994 = distinct !DISubprogram(name: "float64_le", scope: !3, file: !3, line: 3235, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3236, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!6995 = !DILocalVariable(name: "a", arg: 1, scope: !6994, file: !3, line: 3235, type: !1130)
!6996 = !DILocation(line: 3235, column: 26, scope: !6994)
!6997 = !DILocalVariable(name: "b", arg: 2, scope: !6994, file: !3, line: 3235, type: !1130)
!6998 = !DILocation(line: 3235, column: 37, scope: !6994)
!6999 = !DILocalVariable(name: "aSign", scope: !6994, file: !3, line: 3237, type: !1241)
!7000 = !DILocation(line: 3237, column: 6, scope: !6994)
!7001 = !DILocalVariable(name: "bSign", scope: !6994, file: !3, line: 3237, type: !1241)
!7002 = !DILocation(line: 3237, column: 13, scope: !6994)
!7003 = !DILocation(line: 3239, column: 32, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !6994, file: !3, line: 3239, column: 9)
!7005 = !DILocation(line: 3239, column: 13, scope: !7004)
!7006 = !DILocation(line: 3239, column: 36, scope: !7004)
!7007 = !DILocation(line: 3239, column: 47, scope: !7004)
!7008 = !DILocation(line: 3239, column: 70, scope: !7004)
!7009 = !DILocation(line: 3239, column: 50, scope: !7004)
!7010 = !DILocation(line: 3240, column: 1, scope: !7004)
!7011 = !DILocation(line: 3240, column: 27, scope: !7004)
!7012 = !DILocation(line: 3240, column: 8, scope: !7004)
!7013 = !DILocation(line: 3240, column: 31, scope: !7004)
!7014 = !DILocation(line: 3240, column: 42, scope: !7004)
!7015 = !DILocation(line: 3240, column: 65, scope: !7004)
!7016 = !DILocation(line: 3240, column: 45, scope: !7004)
!7017 = !DILocation(line: 3239, column: 9, scope: !6994)
!7018 = !DILocation(line: 3242, column: 1, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !7004, file: !3, line: 3241, column: 3)
!7020 = !DILocation(line: 3243, column: 1, scope: !7019)
!7021 = !DILocation(line: 3245, column: 29, scope: !6994)
!7022 = !DILocation(line: 3245, column: 9, scope: !6994)
!7023 = !DILocation(line: 3245, column: 7, scope: !6994)
!7024 = !DILocation(line: 3246, column: 29, scope: !6994)
!7025 = !DILocation(line: 3246, column: 9, scope: !6994)
!7026 = !DILocation(line: 3246, column: 7, scope: !6994)
!7027 = !DILocation(line: 3247, column: 6, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !6994, file: !3, line: 3247, column: 6)
!7029 = !DILocation(line: 3247, column: 15, scope: !7028)
!7030 = !DILocation(line: 3247, column: 12, scope: !7028)
!7031 = !DILocation(line: 3247, column: 6, scope: !6994)
!7032 = !DILocation(line: 3247, column: 30, scope: !7028)
!7033 = !DILocation(line: 3247, column: 36, scope: !7028)
!7034 = !DILocation(line: 3247, column: 54, scope: !7028)
!7035 = !DILocation(line: 3247, column: 58, scope: !7028)
!7036 = !DILocation(line: 3247, column: 56, scope: !7028)
!7037 = !DILocation(line: 3247, column: 61, scope: !7028)
!7038 = !DILocation(line: 3247, column: 67, scope: !7028)
!7039 = !DILocation(line: 3247, column: 23, scope: !7028)
!7040 = !DILocation(line: 3248, column: 10, scope: !6994)
!7041 = !DILocation(line: 3248, column: 15, scope: !6994)
!7042 = !DILocation(line: 3248, column: 12, scope: !6994)
!7043 = !DILocation(line: 3248, column: 19, scope: !6994)
!7044 = !DILocation(line: 3248, column: 24, scope: !6994)
!7045 = !DILocation(line: 3248, column: 34, scope: !6994)
!7046 = !DILocation(line: 3248, column: 38, scope: !6994)
!7047 = !DILocation(line: 3248, column: 36, scope: !6994)
!7048 = !DILocation(line: 3248, column: 30, scope: !6994)
!7049 = !DILocation(line: 3248, column: 1, scope: !6994)
!7050 = !DILocation(line: 3250, column: 1, scope: !6994)
!7051 = distinct !DISubprogram(name: "float64_lt", scope: !3, file: !3, line: 3258, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3259, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7052 = !DILocalVariable(name: "a", arg: 1, scope: !7051, file: !3, line: 3258, type: !1130)
!7053 = !DILocation(line: 3258, column: 26, scope: !7051)
!7054 = !DILocalVariable(name: "b", arg: 2, scope: !7051, file: !3, line: 3258, type: !1130)
!7055 = !DILocation(line: 3258, column: 37, scope: !7051)
!7056 = !DILocalVariable(name: "aSign", scope: !7051, file: !3, line: 3260, type: !1241)
!7057 = !DILocation(line: 3260, column: 6, scope: !7051)
!7058 = !DILocalVariable(name: "bSign", scope: !7051, file: !3, line: 3260, type: !1241)
!7059 = !DILocation(line: 3260, column: 13, scope: !7051)
!7060 = !DILocation(line: 3262, column: 32, scope: !7061)
!7061 = distinct !DILexicalBlock(scope: !7051, file: !3, line: 3262, column: 9)
!7062 = !DILocation(line: 3262, column: 13, scope: !7061)
!7063 = !DILocation(line: 3262, column: 36, scope: !7061)
!7064 = !DILocation(line: 3262, column: 47, scope: !7061)
!7065 = !DILocation(line: 3262, column: 70, scope: !7061)
!7066 = !DILocation(line: 3262, column: 50, scope: !7061)
!7067 = !DILocation(line: 3263, column: 1, scope: !7061)
!7068 = !DILocation(line: 3263, column: 27, scope: !7061)
!7069 = !DILocation(line: 3263, column: 8, scope: !7061)
!7070 = !DILocation(line: 3263, column: 31, scope: !7061)
!7071 = !DILocation(line: 3263, column: 42, scope: !7061)
!7072 = !DILocation(line: 3263, column: 65, scope: !7061)
!7073 = !DILocation(line: 3263, column: 45, scope: !7061)
!7074 = !DILocation(line: 3262, column: 9, scope: !7051)
!7075 = !DILocation(line: 3265, column: 1, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7061, file: !3, line: 3264, column: 3)
!7077 = !DILocation(line: 3266, column: 1, scope: !7076)
!7078 = !DILocation(line: 3268, column: 29, scope: !7051)
!7079 = !DILocation(line: 3268, column: 9, scope: !7051)
!7080 = !DILocation(line: 3268, column: 7, scope: !7051)
!7081 = !DILocation(line: 3269, column: 29, scope: !7051)
!7082 = !DILocation(line: 3269, column: 9, scope: !7051)
!7083 = !DILocation(line: 3269, column: 7, scope: !7051)
!7084 = !DILocation(line: 3270, column: 6, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7051, file: !3, line: 3270, column: 6)
!7086 = !DILocation(line: 3270, column: 15, scope: !7085)
!7087 = !DILocation(line: 3270, column: 12, scope: !7085)
!7088 = !DILocation(line: 3270, column: 6, scope: !7051)
!7089 = !DILocation(line: 3270, column: 30, scope: !7085)
!7090 = !DILocation(line: 3270, column: 36, scope: !7085)
!7091 = !DILocation(line: 3270, column: 54, scope: !7085)
!7092 = !DILocation(line: 3270, column: 58, scope: !7085)
!7093 = !DILocation(line: 3270, column: 56, scope: !7085)
!7094 = !DILocation(line: 3270, column: 61, scope: !7085)
!7095 = !DILocation(line: 3270, column: 67, scope: !7085)
!7096 = !DILocation(line: 3270, column: 23, scope: !7085)
!7097 = !DILocation(line: 3271, column: 10, scope: !7051)
!7098 = !DILocation(line: 3271, column: 15, scope: !7051)
!7099 = !DILocation(line: 3271, column: 12, scope: !7051)
!7100 = !DILocation(line: 3271, column: 19, scope: !7051)
!7101 = !DILocation(line: 3271, column: 24, scope: !7051)
!7102 = !DILocation(line: 3271, column: 34, scope: !7051)
!7103 = !DILocation(line: 3271, column: 38, scope: !7051)
!7104 = !DILocation(line: 3271, column: 36, scope: !7051)
!7105 = !DILocation(line: 3271, column: 30, scope: !7051)
!7106 = !DILocation(line: 3271, column: 1, scope: !7051)
!7107 = !DILocation(line: 3273, column: 1, scope: !7051)
!7108 = distinct !DISubprogram(name: "float64_ge", scope: !3, file: !3, line: 3274, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3275, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7109 = !DILocalVariable(name: "a", arg: 1, scope: !7108, file: !3, line: 3274, type: !1130)
!7110 = !DILocation(line: 3274, column: 26, scope: !7108)
!7111 = !DILocalVariable(name: "b", arg: 2, scope: !7108, file: !3, line: 3274, type: !1130)
!7112 = !DILocation(line: 3274, column: 37, scope: !7108)
!7113 = !DILocation(line: 3276, column: 20, scope: !7108)
!7114 = !DILocation(line: 3276, column: 22, scope: !7108)
!7115 = !DILocation(line: 3276, column: 9, scope: !7108)
!7116 = !DILocation(line: 3276, column: 8, scope: !7108)
!7117 = !DILocation(line: 3276, column: 1, scope: !7108)
!7118 = distinct !DISubprogram(name: "float64_gt", scope: !3, file: !3, line: 3279, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3280, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7119 = !DILocalVariable(name: "a", arg: 1, scope: !7118, file: !3, line: 3279, type: !1130)
!7120 = !DILocation(line: 3279, column: 26, scope: !7118)
!7121 = !DILocalVariable(name: "b", arg: 2, scope: !7118, file: !3, line: 3279, type: !1130)
!7122 = !DILocation(line: 3279, column: 37, scope: !7118)
!7123 = !DILocation(line: 3281, column: 20, scope: !7118)
!7124 = !DILocation(line: 3281, column: 22, scope: !7118)
!7125 = !DILocation(line: 3281, column: 9, scope: !7118)
!7126 = !DILocation(line: 3281, column: 8, scope: !7118)
!7127 = !DILocation(line: 3281, column: 1, scope: !7118)
!7128 = distinct !DISubprogram(name: "float64_ge_quiet", scope: !3, file: !3, line: 3284, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3285, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7129 = !DILocalVariable(name: "a", arg: 1, scope: !7128, file: !3, line: 3284, type: !1130)
!7130 = !DILocation(line: 3284, column: 32, scope: !7128)
!7131 = !DILocalVariable(name: "b", arg: 2, scope: !7128, file: !3, line: 3284, type: !1130)
!7132 = !DILocation(line: 3284, column: 43, scope: !7128)
!7133 = !DILocation(line: 3286, column: 26, scope: !7128)
!7134 = !DILocation(line: 3286, column: 28, scope: !7128)
!7135 = !DILocation(line: 3286, column: 8, scope: !7128)
!7136 = !DILocation(line: 3286, column: 30, scope: !7128)
!7137 = !DILocation(line: 3286, column: 43, scope: !7128)
!7138 = !DILocation(line: 3286, column: 45, scope: !7128)
!7139 = !DILocation(line: 3286, column: 32, scope: !7128)
!7140 = !DILocation(line: 3286, column: 1, scope: !7128)
!7141 = distinct !DISubprogram(name: "float64_uno_quiet", scope: !3, file: !3, line: 3305, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3306, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7142 = !DILocalVariable(name: "a", arg: 1, scope: !7141, file: !3, line: 3305, type: !1130)
!7143 = !DILocation(line: 3305, column: 33, scope: !7141)
!7144 = !DILocalVariable(name: "b", arg: 2, scope: !7141, file: !3, line: 3305, type: !1130)
!7145 = !DILocation(line: 3305, column: 44, scope: !7141)
!7146 = !DILocation(line: 3307, column: 23, scope: !7141)
!7147 = !DILocation(line: 3307, column: 8, scope: !7141)
!7148 = !DILocation(line: 3307, column: 25, scope: !7141)
!7149 = !DILocation(line: 3307, column: 42, scope: !7141)
!7150 = !DILocation(line: 3307, column: 27, scope: !7141)
!7151 = !DILocation(line: 3307, column: 1, scope: !7141)
!7152 = distinct !DISubprogram(name: "float64_gt_quiet", scope: !3, file: !3, line: 3288, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3289, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7153 = !DILocalVariable(name: "a", arg: 1, scope: !7152, file: !3, line: 3288, type: !1130)
!7154 = !DILocation(line: 3288, column: 32, scope: !7152)
!7155 = !DILocalVariable(name: "b", arg: 2, scope: !7152, file: !3, line: 3288, type: !1130)
!7156 = !DILocation(line: 3288, column: 43, scope: !7152)
!7157 = !DILocation(line: 3290, column: 26, scope: !7152)
!7158 = !DILocation(line: 3290, column: 28, scope: !7152)
!7159 = !DILocation(line: 3290, column: 8, scope: !7152)
!7160 = !DILocation(line: 3290, column: 30, scope: !7152)
!7161 = !DILocation(line: 3290, column: 43, scope: !7152)
!7162 = !DILocation(line: 3290, column: 45, scope: !7152)
!7163 = !DILocation(line: 3290, column: 32, scope: !7152)
!7164 = !DILocation(line: 3290, column: 1, scope: !7152)
!7165 = distinct !DISubprogram(name: "float64_ne", scope: !3, file: !3, line: 3292, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3293, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7166 = !DILocalVariable(name: "a", arg: 1, scope: !7165, file: !3, line: 3292, type: !1130)
!7167 = !DILocation(line: 3292, column: 26, scope: !7165)
!7168 = !DILocalVariable(name: "b", arg: 2, scope: !7165, file: !3, line: 3292, type: !1130)
!7169 = !DILocation(line: 3292, column: 37, scope: !7165)
!7170 = !DILocation(line: 3294, column: 20, scope: !7165)
!7171 = !DILocation(line: 3294, column: 22, scope: !7165)
!7172 = !DILocation(line: 3294, column: 9, scope: !7165)
!7173 = !DILocation(line: 3294, column: 8, scope: !7165)
!7174 = !DILocation(line: 3294, column: 1, scope: !7165)
!7175 = distinct !DISubprogram(name: "float64_one_quiet", scope: !3, file: !3, line: 3297, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3298, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7176 = !DILocalVariable(name: "a", arg: 1, scope: !7175, file: !3, line: 3297, type: !1130)
!7177 = !DILocation(line: 3297, column: 33, scope: !7175)
!7178 = !DILocalVariable(name: "b", arg: 2, scope: !7175, file: !3, line: 3297, type: !1130)
!7179 = !DILocation(line: 3297, column: 44, scope: !7175)
!7180 = !DILocation(line: 3299, column: 26, scope: !7175)
!7181 = !DILocation(line: 3299, column: 28, scope: !7175)
!7182 = !DILocation(line: 3299, column: 8, scope: !7175)
!7183 = !DILocation(line: 3299, column: 30, scope: !7175)
!7184 = !DILocation(line: 3299, column: 43, scope: !7175)
!7185 = !DILocation(line: 3299, column: 45, scope: !7175)
!7186 = !DILocation(line: 3299, column: 32, scope: !7175)
!7187 = !DILocation(line: 3299, column: 1, scope: !7175)
!7188 = distinct !DISubprogram(name: "float64_ord_quiet", scope: !3, file: !3, line: 3301, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3302, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7189 = !DILocalVariable(name: "a", arg: 1, scope: !7188, file: !3, line: 3301, type: !1130)
!7190 = !DILocation(line: 3301, column: 33, scope: !7188)
!7191 = !DILocalVariable(name: "b", arg: 2, scope: !7188, file: !3, line: 3301, type: !1130)
!7192 = !DILocation(line: 3301, column: 44, scope: !7188)
!7193 = !DILocation(line: 3303, column: 24, scope: !7188)
!7194 = !DILocation(line: 3303, column: 9, scope: !7188)
!7195 = !DILocation(line: 3303, column: 26, scope: !7188)
!7196 = !DILocation(line: 3303, column: 44, scope: !7188)
!7197 = !DILocation(line: 3303, column: 29, scope: !7188)
!7198 = !DILocation(line: 3303, column: 28, scope: !7188)
!7199 = !DILocation(line: 3303, column: 1, scope: !7188)
!7200 = distinct !DISubprogram(name: "float64_eq_signaling", scope: !3, file: !3, line: 3316, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3317, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7201 = !DILocalVariable(name: "a", arg: 1, scope: !7200, file: !3, line: 3316, type: !1130)
!7202 = !DILocation(line: 3316, column: 36, scope: !7200)
!7203 = !DILocalVariable(name: "b", arg: 2, scope: !7200, file: !3, line: 3316, type: !1130)
!7204 = !DILocation(line: 3316, column: 47, scope: !7200)
!7205 = !DILocation(line: 3319, column: 32, scope: !7206)
!7206 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 3319, column: 9)
!7207 = !DILocation(line: 3319, column: 13, scope: !7206)
!7208 = !DILocation(line: 3319, column: 36, scope: !7206)
!7209 = !DILocation(line: 3319, column: 47, scope: !7206)
!7210 = !DILocation(line: 3319, column: 70, scope: !7206)
!7211 = !DILocation(line: 3319, column: 50, scope: !7206)
!7212 = !DILocation(line: 3320, column: 1, scope: !7206)
!7213 = !DILocation(line: 3320, column: 27, scope: !7206)
!7214 = !DILocation(line: 3320, column: 8, scope: !7206)
!7215 = !DILocation(line: 3320, column: 31, scope: !7206)
!7216 = !DILocation(line: 3320, column: 42, scope: !7206)
!7217 = !DILocation(line: 3320, column: 65, scope: !7206)
!7218 = !DILocation(line: 3320, column: 45, scope: !7206)
!7219 = !DILocation(line: 3319, column: 9, scope: !7200)
!7220 = !DILocation(line: 3322, column: 1, scope: !7221)
!7221 = distinct !DILexicalBlock(scope: !7206, file: !3, line: 3321, column: 3)
!7222 = !DILocation(line: 3323, column: 1, scope: !7221)
!7223 = !DILocation(line: 3325, column: 10, scope: !7200)
!7224 = !DILocation(line: 3325, column: 15, scope: !7200)
!7225 = !DILocation(line: 3325, column: 12, scope: !7200)
!7226 = !DILocation(line: 3325, column: 19, scope: !7200)
!7227 = !DILocation(line: 3325, column: 37, scope: !7200)
!7228 = !DILocation(line: 3325, column: 41, scope: !7200)
!7229 = !DILocation(line: 3325, column: 39, scope: !7200)
!7230 = !DILocation(line: 3325, column: 44, scope: !7200)
!7231 = !DILocation(line: 3325, column: 50, scope: !7200)
!7232 = !DILocation(line: 3325, column: 1, scope: !7200)
!7233 = !DILocation(line: 3327, column: 1, scope: !7200)
!7234 = distinct !DISubprogram(name: "float64_le_quiet", scope: !3, file: !3, line: 3336, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3337, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7235 = !DILocalVariable(name: "a", arg: 1, scope: !7234, file: !3, line: 3336, type: !1130)
!7236 = !DILocation(line: 3336, column: 32, scope: !7234)
!7237 = !DILocalVariable(name: "b", arg: 2, scope: !7234, file: !3, line: 3336, type: !1130)
!7238 = !DILocation(line: 3336, column: 43, scope: !7234)
!7239 = !DILocalVariable(name: "aSign", scope: !7234, file: !3, line: 3338, type: !1241)
!7240 = !DILocation(line: 3338, column: 6, scope: !7234)
!7241 = !DILocalVariable(name: "bSign", scope: !7234, file: !3, line: 3338, type: !1241)
!7242 = !DILocation(line: 3338, column: 13, scope: !7234)
!7243 = !DILocalVariable(name: "aExp", scope: !7234, file: !3, line: 3339, type: !60)
!7244 = !DILocation(line: 3339, column: 7, scope: !7234)
!7245 = !DILocalVariable(name: "bExp", scope: !7234, file: !3, line: 3339, type: !60)
!7246 = !DILocation(line: 3339, column: 13, scope: !7234)
!7247 = !DILocation(line: 3341, column: 32, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7234, file: !3, line: 3341, column: 9)
!7249 = !DILocation(line: 3341, column: 13, scope: !7248)
!7250 = !DILocation(line: 3341, column: 36, scope: !7248)
!7251 = !DILocation(line: 3341, column: 47, scope: !7248)
!7252 = !DILocation(line: 3341, column: 70, scope: !7248)
!7253 = !DILocation(line: 3341, column: 50, scope: !7248)
!7254 = !DILocation(line: 3342, column: 1, scope: !7248)
!7255 = !DILocation(line: 3342, column: 27, scope: !7248)
!7256 = !DILocation(line: 3342, column: 8, scope: !7248)
!7257 = !DILocation(line: 3342, column: 31, scope: !7248)
!7258 = !DILocation(line: 3342, column: 42, scope: !7248)
!7259 = !DILocation(line: 3342, column: 65, scope: !7248)
!7260 = !DILocation(line: 3342, column: 45, scope: !7248)
!7261 = !DILocation(line: 3341, column: 9, scope: !7234)
!7262 = !DILocation(line: 3344, column: 22, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7264, file: !3, line: 3344, column: 6)
!7264 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 3343, column: 3)
!7265 = !DILocation(line: 3344, column: 6, scope: !7263)
!7266 = !DILocation(line: 3344, column: 26, scope: !7263)
!7267 = !DILocation(line: 3344, column: 45, scope: !7263)
!7268 = !DILocation(line: 3344, column: 29, scope: !7263)
!7269 = !DILocation(line: 3344, column: 6, scope: !7264)
!7270 = !DILocation(line: 3345, column: 1, scope: !7271)
!7271 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 3344, column: 51)
!7272 = !DILocation(line: 3346, column: 1, scope: !7271)
!7273 = !DILocation(line: 3347, column: 1, scope: !7264)
!7274 = !DILocation(line: 3349, column: 29, scope: !7234)
!7275 = !DILocation(line: 3349, column: 9, scope: !7234)
!7276 = !DILocation(line: 3349, column: 7, scope: !7234)
!7277 = !DILocation(line: 3350, column: 29, scope: !7234)
!7278 = !DILocation(line: 3350, column: 9, scope: !7234)
!7279 = !DILocation(line: 3350, column: 7, scope: !7234)
!7280 = !DILocation(line: 3351, column: 6, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7234, file: !3, line: 3351, column: 6)
!7282 = !DILocation(line: 3351, column: 15, scope: !7281)
!7283 = !DILocation(line: 3351, column: 12, scope: !7281)
!7284 = !DILocation(line: 3351, column: 6, scope: !7234)
!7285 = !DILocation(line: 3351, column: 30, scope: !7281)
!7286 = !DILocation(line: 3351, column: 36, scope: !7281)
!7287 = !DILocation(line: 3351, column: 54, scope: !7281)
!7288 = !DILocation(line: 3351, column: 58, scope: !7281)
!7289 = !DILocation(line: 3351, column: 56, scope: !7281)
!7290 = !DILocation(line: 3351, column: 61, scope: !7281)
!7291 = !DILocation(line: 3351, column: 67, scope: !7281)
!7292 = !DILocation(line: 3351, column: 23, scope: !7281)
!7293 = !DILocation(line: 3352, column: 10, scope: !7234)
!7294 = !DILocation(line: 3352, column: 15, scope: !7234)
!7295 = !DILocation(line: 3352, column: 12, scope: !7234)
!7296 = !DILocation(line: 3352, column: 19, scope: !7234)
!7297 = !DILocation(line: 3352, column: 24, scope: !7234)
!7298 = !DILocation(line: 3352, column: 34, scope: !7234)
!7299 = !DILocation(line: 3352, column: 38, scope: !7234)
!7300 = !DILocation(line: 3352, column: 36, scope: !7234)
!7301 = !DILocation(line: 3352, column: 30, scope: !7234)
!7302 = !DILocation(line: 3352, column: 1, scope: !7234)
!7303 = !DILocation(line: 3354, column: 1, scope: !7234)
!7304 = distinct !DISubprogram(name: "float64_lt_quiet", scope: !3, file: !3, line: 3363, type: !6950, isLocal: false, isDefinition: true, scopeLine: 3364, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7305 = !DILocalVariable(name: "a", arg: 1, scope: !7304, file: !3, line: 3363, type: !1130)
!7306 = !DILocation(line: 3363, column: 32, scope: !7304)
!7307 = !DILocalVariable(name: "b", arg: 2, scope: !7304, file: !3, line: 3363, type: !1130)
!7308 = !DILocation(line: 3363, column: 43, scope: !7304)
!7309 = !DILocalVariable(name: "aSign", scope: !7304, file: !3, line: 3365, type: !1241)
!7310 = !DILocation(line: 3365, column: 6, scope: !7304)
!7311 = !DILocalVariable(name: "bSign", scope: !7304, file: !3, line: 3365, type: !1241)
!7312 = !DILocation(line: 3365, column: 13, scope: !7304)
!7313 = !DILocation(line: 3367, column: 32, scope: !7314)
!7314 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 3367, column: 9)
!7315 = !DILocation(line: 3367, column: 13, scope: !7314)
!7316 = !DILocation(line: 3367, column: 36, scope: !7314)
!7317 = !DILocation(line: 3367, column: 47, scope: !7314)
!7318 = !DILocation(line: 3367, column: 70, scope: !7314)
!7319 = !DILocation(line: 3367, column: 50, scope: !7314)
!7320 = !DILocation(line: 3368, column: 1, scope: !7314)
!7321 = !DILocation(line: 3368, column: 27, scope: !7314)
!7322 = !DILocation(line: 3368, column: 8, scope: !7314)
!7323 = !DILocation(line: 3368, column: 31, scope: !7314)
!7324 = !DILocation(line: 3368, column: 42, scope: !7314)
!7325 = !DILocation(line: 3368, column: 65, scope: !7314)
!7326 = !DILocation(line: 3368, column: 45, scope: !7314)
!7327 = !DILocation(line: 3367, column: 9, scope: !7304)
!7328 = !DILocation(line: 3370, column: 22, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 3370, column: 6)
!7330 = distinct !DILexicalBlock(scope: !7314, file: !3, line: 3369, column: 3)
!7331 = !DILocation(line: 3370, column: 6, scope: !7329)
!7332 = !DILocation(line: 3370, column: 26, scope: !7329)
!7333 = !DILocation(line: 3370, column: 45, scope: !7329)
!7334 = !DILocation(line: 3370, column: 29, scope: !7329)
!7335 = !DILocation(line: 3370, column: 6, scope: !7330)
!7336 = !DILocation(line: 3371, column: 1, scope: !7337)
!7337 = distinct !DILexicalBlock(scope: !7329, file: !3, line: 3370, column: 51)
!7338 = !DILocation(line: 3372, column: 1, scope: !7337)
!7339 = !DILocation(line: 3373, column: 1, scope: !7330)
!7340 = !DILocation(line: 3375, column: 29, scope: !7304)
!7341 = !DILocation(line: 3375, column: 9, scope: !7304)
!7342 = !DILocation(line: 3375, column: 7, scope: !7304)
!7343 = !DILocation(line: 3376, column: 29, scope: !7304)
!7344 = !DILocation(line: 3376, column: 9, scope: !7304)
!7345 = !DILocation(line: 3376, column: 7, scope: !7304)
!7346 = !DILocation(line: 3377, column: 6, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 3377, column: 6)
!7348 = !DILocation(line: 3377, column: 15, scope: !7347)
!7349 = !DILocation(line: 3377, column: 12, scope: !7347)
!7350 = !DILocation(line: 3377, column: 6, scope: !7304)
!7351 = !DILocation(line: 3377, column: 30, scope: !7347)
!7352 = !DILocation(line: 3377, column: 36, scope: !7347)
!7353 = !DILocation(line: 3377, column: 54, scope: !7347)
!7354 = !DILocation(line: 3377, column: 58, scope: !7347)
!7355 = !DILocation(line: 3377, column: 56, scope: !7347)
!7356 = !DILocation(line: 3377, column: 61, scope: !7347)
!7357 = !DILocation(line: 3377, column: 67, scope: !7347)
!7358 = !DILocation(line: 3377, column: 23, scope: !7347)
!7359 = !DILocation(line: 3378, column: 10, scope: !7304)
!7360 = !DILocation(line: 3378, column: 15, scope: !7304)
!7361 = !DILocation(line: 3378, column: 12, scope: !7304)
!7362 = !DILocation(line: 3378, column: 19, scope: !7304)
!7363 = !DILocation(line: 3378, column: 24, scope: !7304)
!7364 = !DILocation(line: 3378, column: 34, scope: !7304)
!7365 = !DILocation(line: 3378, column: 38, scope: !7304)
!7366 = !DILocation(line: 3378, column: 36, scope: !7304)
!7367 = !DILocation(line: 3378, column: 30, scope: !7304)
!7368 = !DILocation(line: 3378, column: 1, scope: !7304)
!7369 = !DILocation(line: 3380, column: 1, scope: !7304)
!7370 = distinct !DISubprogram(name: "floatx80_to_int32", scope: !3, file: !3, line: 3394, type: !7371, isLocal: false, isDefinition: true, scopeLine: 3395, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7371 = !DISubroutineType(types: !7372)
!7372 = !{!32, !1151}
!7373 = !DILocalVariable(name: "a", arg: 1, scope: !7370, file: !3, line: 3394, type: !1151)
!7374 = !DILocation(line: 3394, column: 35, scope: !7370)
!7375 = !DILocalVariable(name: "aSign", scope: !7370, file: !3, line: 3396, type: !1241)
!7376 = !DILocation(line: 3396, column: 10, scope: !7370)
!7377 = !DILocalVariable(name: "aExp", scope: !7370, file: !3, line: 3397, type: !1319)
!7378 = !DILocation(line: 3397, column: 11, scope: !7370)
!7379 = !DILocalVariable(name: "shiftCount", scope: !7370, file: !3, line: 3397, type: !1319)
!7380 = !DILocation(line: 3397, column: 17, scope: !7370)
!7381 = !DILocalVariable(name: "aSig", scope: !7370, file: !3, line: 3398, type: !24)
!7382 = !DILocation(line: 3398, column: 12, scope: !7370)
!7383 = !DILocation(line: 3400, column: 12, scope: !7370)
!7384 = !DILocation(line: 3400, column: 10, scope: !7370)
!7385 = !DILocation(line: 3401, column: 12, scope: !7370)
!7386 = !DILocation(line: 3401, column: 10, scope: !7370)
!7387 = !DILocation(line: 3402, column: 13, scope: !7370)
!7388 = !DILocation(line: 3402, column: 11, scope: !7370)
!7389 = !DILocation(line: 3403, column: 12, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 3403, column: 10)
!7391 = !DILocation(line: 3403, column: 17, scope: !7390)
!7392 = !DILocation(line: 3403, column: 29, scope: !7390)
!7393 = !DILocation(line: 3403, column: 43, scope: !7390)
!7394 = !DILocation(line: 3403, column: 47, scope: !7390)
!7395 = !DILocation(line: 3403, column: 32, scope: !7390)
!7396 = !DILocation(line: 3403, column: 10, scope: !7370)
!7397 = !DILocation(line: 3403, column: 61, scope: !7390)
!7398 = !DILocation(line: 3403, column: 55, scope: !7390)
!7399 = !DILocation(line: 3404, column: 27, scope: !7370)
!7400 = !DILocation(line: 3404, column: 25, scope: !7370)
!7401 = !DILocation(line: 3404, column: 16, scope: !7370)
!7402 = !DILocation(line: 3405, column: 10, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 3405, column: 10)
!7404 = !DILocation(line: 3405, column: 21, scope: !7403)
!7405 = !DILocation(line: 3405, column: 10, scope: !7370)
!7406 = !DILocation(line: 3405, column: 39, scope: !7403)
!7407 = !DILocation(line: 3405, column: 28, scope: !7403)
!7408 = !DILocation(line: 3406, column: 26, scope: !7370)
!7409 = !DILocation(line: 3406, column: 32, scope: !7370)
!7410 = !DILocation(line: 3406, column: 5, scope: !7370)
!7411 = !DILocation(line: 3407, column: 31, scope: !7370)
!7412 = !DILocation(line: 3407, column: 38, scope: !7370)
!7413 = !DILocation(line: 3407, column: 12, scope: !7370)
!7414 = !DILocation(line: 3407, column: 5, scope: !7370)
!7415 = distinct !DISubprogram(name: "floatx80_to_int32_round_to_zero", scope: !3, file: !3, line: 3421, type: !7371, isLocal: false, isDefinition: true, scopeLine: 3422, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7416 = !DILocalVariable(name: "a", arg: 1, scope: !7415, file: !3, line: 3421, type: !1151)
!7417 = !DILocation(line: 3421, column: 49, scope: !7415)
!7418 = !DILocalVariable(name: "aSign", scope: !7415, file: !3, line: 3423, type: !1241)
!7419 = !DILocation(line: 3423, column: 10, scope: !7415)
!7420 = !DILocalVariable(name: "aExp", scope: !7415, file: !3, line: 3424, type: !1319)
!7421 = !DILocation(line: 3424, column: 11, scope: !7415)
!7422 = !DILocalVariable(name: "shiftCount", scope: !7415, file: !3, line: 3424, type: !1319)
!7423 = !DILocation(line: 3424, column: 17, scope: !7415)
!7424 = !DILocalVariable(name: "aSig", scope: !7415, file: !3, line: 3425, type: !24)
!7425 = !DILocation(line: 3425, column: 12, scope: !7415)
!7426 = !DILocalVariable(name: "savedASig", scope: !7415, file: !3, line: 3425, type: !24)
!7427 = !DILocation(line: 3425, column: 18, scope: !7415)
!7428 = !DILocalVariable(name: "z", scope: !7415, file: !3, line: 3426, type: !1319)
!7429 = !DILocation(line: 3426, column: 11, scope: !7415)
!7430 = !DILocation(line: 3428, column: 12, scope: !7415)
!7431 = !DILocation(line: 3428, column: 10, scope: !7415)
!7432 = !DILocation(line: 3429, column: 12, scope: !7415)
!7433 = !DILocation(line: 3429, column: 10, scope: !7415)
!7434 = !DILocation(line: 3430, column: 13, scope: !7415)
!7435 = !DILocation(line: 3430, column: 11, scope: !7415)
!7436 = !DILocation(line: 3431, column: 19, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 3431, column: 10)
!7438 = !DILocation(line: 3431, column: 17, scope: !7437)
!7439 = !DILocation(line: 3431, column: 10, scope: !7415)
!7440 = !DILocation(line: 3432, column: 16, scope: !7441)
!7441 = distinct !DILexicalBlock(scope: !7442, file: !3, line: 3432, column: 14)
!7442 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 3431, column: 26)
!7443 = !DILocation(line: 3432, column: 21, scope: !7441)
!7444 = !DILocation(line: 3432, column: 33, scope: !7441)
!7445 = !DILocation(line: 3432, column: 47, scope: !7441)
!7446 = !DILocation(line: 3432, column: 51, scope: !7441)
!7447 = !DILocation(line: 3432, column: 36, scope: !7441)
!7448 = !DILocation(line: 3432, column: 14, scope: !7442)
!7449 = !DILocation(line: 3432, column: 65, scope: !7441)
!7450 = !DILocation(line: 3432, column: 59, scope: !7441)
!7451 = !DILocation(line: 3433, column: 9, scope: !7442)
!7452 = !DILocation(line: 3435, column: 15, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 3435, column: 15)
!7454 = !DILocation(line: 3435, column: 20, scope: !7453)
!7455 = !DILocation(line: 3435, column: 15, scope: !7437)
!7456 = !DILocation(line: 3436, column: 14, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 3436, column: 14)
!7458 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 3435, column: 31)
!7459 = !DILocation(line: 3436, column: 19, scope: !7457)
!7460 = !DILocation(line: 3436, column: 22, scope: !7457)
!7461 = !DILocation(line: 3436, column: 14, scope: !7458)
!7462 = !DILocation(line: 3436, column: 51, scope: !7457)
!7463 = !DILocation(line: 3436, column: 29, scope: !7457)
!7464 = !DILocation(line: 3437, column: 9, scope: !7458)
!7465 = !DILocation(line: 3439, column: 27, scope: !7415)
!7466 = !DILocation(line: 3439, column: 25, scope: !7415)
!7467 = !DILocation(line: 3439, column: 16, scope: !7415)
!7468 = !DILocation(line: 3440, column: 17, scope: !7415)
!7469 = !DILocation(line: 3440, column: 15, scope: !7415)
!7470 = !DILocation(line: 3441, column: 14, scope: !7415)
!7471 = !DILocation(line: 3441, column: 10, scope: !7415)
!7472 = !DILocation(line: 3442, column: 9, scope: !7415)
!7473 = !DILocation(line: 3442, column: 7, scope: !7415)
!7474 = !DILocation(line: 3443, column: 10, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 3443, column: 10)
!7476 = !DILocation(line: 3443, column: 10, scope: !7415)
!7477 = !DILocation(line: 3443, column: 24, scope: !7475)
!7478 = !DILocation(line: 3443, column: 22, scope: !7475)
!7479 = !DILocation(line: 3443, column: 20, scope: !7475)
!7480 = !DILocation(line: 3443, column: 18, scope: !7475)
!7481 = !DILocation(line: 3444, column: 12, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 3444, column: 10)
!7483 = !DILocation(line: 3444, column: 14, scope: !7482)
!7484 = !DILocation(line: 3444, column: 22, scope: !7482)
!7485 = !DILocation(line: 3444, column: 20, scope: !7482)
!7486 = !DILocation(line: 3444, column: 10, scope: !7415)
!7487 = !DILocation(line: 3444, column: 30, scope: !7482)
!7488 = !DILocation(line: 3446, column: 9, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 3444, column: 30)
!7490 = !DILocation(line: 3447, column: 16, scope: !7489)
!7491 = !DILocation(line: 3447, column: 9, scope: !7489)
!7492 = !DILocation(line: 3449, column: 12, scope: !7493)
!7493 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 3449, column: 10)
!7494 = !DILocation(line: 3449, column: 18, scope: !7493)
!7495 = !DILocation(line: 3449, column: 16, scope: !7493)
!7496 = !DILocation(line: 3449, column: 34, scope: !7493)
!7497 = !DILocation(line: 3449, column: 31, scope: !7493)
!7498 = !DILocation(line: 3449, column: 10, scope: !7415)
!7499 = !DILocation(line: 3450, column: 31, scope: !7500)
!7500 = distinct !DILexicalBlock(scope: !7493, file: !3, line: 3449, column: 46)
!7501 = !DILocation(line: 3451, column: 5, scope: !7500)
!7502 = !DILocation(line: 3452, column: 12, scope: !7415)
!7503 = !DILocation(line: 3452, column: 5, scope: !7415)
!7504 = !DILocation(line: 3454, column: 1, scope: !7415)
!7505 = distinct !DISubprogram(name: "floatx80_to_int64", scope: !3, file: !3, line: 3466, type: !7506, isLocal: false, isDefinition: true, scopeLine: 3467, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7506 = !DISubroutineType(types: !7507)
!7507 = !{!34, !1151}
!7508 = !DILocalVariable(name: "a", arg: 1, scope: !7505, file: !3, line: 3466, type: !1151)
!7509 = !DILocation(line: 3466, column: 35, scope: !7505)
!7510 = !DILocalVariable(name: "aSign", scope: !7505, file: !3, line: 3468, type: !1241)
!7511 = !DILocation(line: 3468, column: 10, scope: !7505)
!7512 = !DILocalVariable(name: "aExp", scope: !7505, file: !3, line: 3469, type: !1319)
!7513 = !DILocation(line: 3469, column: 11, scope: !7505)
!7514 = !DILocalVariable(name: "shiftCount", scope: !7505, file: !3, line: 3469, type: !1319)
!7515 = !DILocation(line: 3469, column: 17, scope: !7505)
!7516 = !DILocalVariable(name: "aSig", scope: !7505, file: !3, line: 3470, type: !24)
!7517 = !DILocation(line: 3470, column: 12, scope: !7505)
!7518 = !DILocalVariable(name: "aSigExtra", scope: !7505, file: !3, line: 3470, type: !24)
!7519 = !DILocation(line: 3470, column: 18, scope: !7505)
!7520 = !DILocation(line: 3472, column: 12, scope: !7505)
!7521 = !DILocation(line: 3472, column: 10, scope: !7505)
!7522 = !DILocation(line: 3473, column: 12, scope: !7505)
!7523 = !DILocation(line: 3473, column: 10, scope: !7505)
!7524 = !DILocation(line: 3474, column: 13, scope: !7505)
!7525 = !DILocation(line: 3474, column: 11, scope: !7505)
!7526 = !DILocation(line: 3475, column: 27, scope: !7505)
!7527 = !DILocation(line: 3475, column: 25, scope: !7505)
!7528 = !DILocation(line: 3475, column: 16, scope: !7505)
!7529 = !DILocation(line: 3476, column: 10, scope: !7530)
!7530 = distinct !DILexicalBlock(scope: !7505, file: !3, line: 3476, column: 10)
!7531 = !DILocation(line: 3476, column: 21, scope: !7530)
!7532 = !DILocation(line: 3476, column: 10, scope: !7505)
!7533 = !DILocation(line: 3477, column: 14, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 3477, column: 14)
!7535 = distinct !DILexicalBlock(scope: !7530, file: !3, line: 3476, column: 28)
!7536 = !DILocation(line: 3477, column: 14, scope: !7535)
!7537 = !DILocation(line: 3478, column: 13, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 3477, column: 27)
!7539 = !DILocation(line: 3479, column: 23, scope: !7540)
!7540 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 3479, column: 21)
!7541 = !DILocation(line: 3480, column: 18, scope: !7540)
!7542 = !DILocation(line: 3480, column: 28, scope: !7540)
!7543 = !DILocation(line: 3480, column: 33, scope: !7540)
!7544 = !DILocation(line: 3481, column: 23, scope: !7540)
!7545 = !DILocation(line: 3481, column: 28, scope: !7540)
!7546 = !DILocation(line: 3481, column: 33, scope: !7540)
!7547 = !DILocation(line: 3479, column: 21, scope: !7538)
!7548 = !DILocation(line: 3483, column: 17, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7540, file: !3, line: 3482, column: 18)
!7550 = !DILocation(line: 3485, column: 13, scope: !7538)
!7551 = !DILocation(line: 3487, column: 19, scope: !7535)
!7552 = !DILocation(line: 3488, column: 5, scope: !7535)
!7553 = !DILocation(line: 3490, column: 35, scope: !7554)
!7554 = distinct !DILexicalBlock(scope: !7530, file: !3, line: 3489, column: 10)
!7555 = !DILocation(line: 3490, column: 44, scope: !7554)
!7556 = !DILocation(line: 3490, column: 9, scope: !7554)
!7557 = !DILocation(line: 3492, column: 31, scope: !7505)
!7558 = !DILocation(line: 3492, column: 38, scope: !7505)
!7559 = !DILocation(line: 3492, column: 44, scope: !7505)
!7560 = !DILocation(line: 3492, column: 12, scope: !7505)
!7561 = !DILocation(line: 3492, column: 5, scope: !7505)
!7562 = !DILocation(line: 3494, column: 1, scope: !7505)
!7563 = distinct !DISubprogram(name: "floatx80_to_int64_round_to_zero", scope: !3, file: !3, line: 3506, type: !7506, isLocal: false, isDefinition: true, scopeLine: 3507, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7564 = !DILocalVariable(name: "a", arg: 1, scope: !7563, file: !3, line: 3506, type: !1151)
!7565 = !DILocation(line: 3506, column: 49, scope: !7563)
!7566 = !DILocalVariable(name: "aSign", scope: !7563, file: !3, line: 3508, type: !1241)
!7567 = !DILocation(line: 3508, column: 10, scope: !7563)
!7568 = !DILocalVariable(name: "aExp", scope: !7563, file: !3, line: 3509, type: !1319)
!7569 = !DILocation(line: 3509, column: 11, scope: !7563)
!7570 = !DILocalVariable(name: "shiftCount", scope: !7563, file: !3, line: 3509, type: !1319)
!7571 = !DILocation(line: 3509, column: 17, scope: !7563)
!7572 = !DILocalVariable(name: "aSig", scope: !7563, file: !3, line: 3510, type: !24)
!7573 = !DILocation(line: 3510, column: 12, scope: !7563)
!7574 = !DILocalVariable(name: "z", scope: !7563, file: !3, line: 3511, type: !1628)
!7575 = !DILocation(line: 3511, column: 11, scope: !7563)
!7576 = !DILocation(line: 3513, column: 12, scope: !7563)
!7577 = !DILocation(line: 3513, column: 10, scope: !7563)
!7578 = !DILocation(line: 3514, column: 12, scope: !7563)
!7579 = !DILocation(line: 3514, column: 10, scope: !7563)
!7580 = !DILocation(line: 3515, column: 13, scope: !7563)
!7581 = !DILocation(line: 3515, column: 11, scope: !7563)
!7582 = !DILocation(line: 3516, column: 18, scope: !7563)
!7583 = !DILocation(line: 3516, column: 23, scope: !7563)
!7584 = !DILocation(line: 3516, column: 16, scope: !7563)
!7585 = !DILocation(line: 3517, column: 15, scope: !7586)
!7586 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3517, column: 10)
!7587 = !DILocation(line: 3517, column: 12, scope: !7586)
!7588 = !DILocation(line: 3517, column: 10, scope: !7563)
!7589 = !DILocation(line: 3518, column: 14, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 3517, column: 28)
!7591 = !DILocation(line: 3519, column: 18, scope: !7592)
!7592 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 3519, column: 14)
!7593 = !DILocation(line: 3519, column: 16, scope: !7592)
!7594 = !DILocation(line: 3519, column: 23, scope: !7592)
!7595 = !DILocation(line: 3519, column: 35, scope: !7592)
!7596 = !DILocation(line: 3519, column: 38, scope: !7592)
!7597 = !DILocation(line: 3519, column: 14, scope: !7590)
!7598 = !DILocation(line: 3520, column: 13, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 3519, column: 45)
!7600 = !DILocation(line: 3521, column: 20, scope: !7601)
!7601 = distinct !DILexicalBlock(scope: !7599, file: !3, line: 3521, column: 18)
!7602 = !DILocation(line: 3521, column: 26, scope: !7601)
!7603 = !DILocation(line: 3521, column: 33, scope: !7601)
!7604 = !DILocation(line: 3521, column: 38, scope: !7601)
!7605 = !DILocation(line: 3521, column: 50, scope: !7601)
!7606 = !DILocation(line: 3521, column: 53, scope: !7601)
!7607 = !DILocation(line: 3521, column: 18, scope: !7599)
!7608 = !DILocation(line: 3522, column: 17, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7601, file: !3, line: 3521, column: 62)
!7610 = !DILocation(line: 3524, column: 9, scope: !7599)
!7611 = !DILocation(line: 3525, column: 9, scope: !7590)
!7612 = !DILocation(line: 3527, column: 15, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 3527, column: 15)
!7614 = !DILocation(line: 3527, column: 20, scope: !7613)
!7615 = !DILocation(line: 3527, column: 15, scope: !7586)
!7616 = !DILocation(line: 3528, column: 14, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 3528, column: 14)
!7618 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 3527, column: 31)
!7619 = !DILocation(line: 3528, column: 21, scope: !7617)
!7620 = !DILocation(line: 3528, column: 19, scope: !7617)
!7621 = !DILocation(line: 3528, column: 14, scope: !7618)
!7622 = !DILocation(line: 3528, column: 50, scope: !7617)
!7623 = !DILocation(line: 3528, column: 28, scope: !7617)
!7624 = !DILocation(line: 3529, column: 9, scope: !7618)
!7625 = !DILocation(line: 3531, column: 9, scope: !7563)
!7626 = !DILocation(line: 3531, column: 19, scope: !7563)
!7627 = !DILocation(line: 3531, column: 17, scope: !7563)
!7628 = !DILocation(line: 3531, column: 13, scope: !7563)
!7629 = !DILocation(line: 3531, column: 7, scope: !7563)
!7630 = !DILocation(line: 3532, column: 21, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3532, column: 10)
!7632 = !DILocation(line: 3532, column: 29, scope: !7631)
!7633 = !DILocation(line: 3532, column: 40, scope: !7631)
!7634 = !DILocation(line: 3532, column: 25, scope: !7631)
!7635 = !DILocation(line: 3532, column: 10, scope: !7631)
!7636 = !DILocation(line: 3532, column: 10, scope: !7563)
!7637 = !DILocation(line: 3533, column: 31, scope: !7638)
!7638 = distinct !DILexicalBlock(scope: !7631, file: !3, line: 3532, column: 51)
!7639 = !DILocation(line: 3534, column: 5, scope: !7638)
!7640 = !DILocation(line: 3535, column: 10, scope: !7641)
!7641 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3535, column: 10)
!7642 = !DILocation(line: 3535, column: 10, scope: !7563)
!7643 = !DILocation(line: 3535, column: 24, scope: !7641)
!7644 = !DILocation(line: 3535, column: 22, scope: !7641)
!7645 = !DILocation(line: 3535, column: 20, scope: !7641)
!7646 = !DILocation(line: 3535, column: 18, scope: !7641)
!7647 = !DILocation(line: 3536, column: 12, scope: !7563)
!7648 = !DILocation(line: 3536, column: 5, scope: !7563)
!7649 = !DILocation(line: 3538, column: 1, scope: !7563)
!7650 = distinct !DISubprogram(name: "floatx80_to_float32", scope: !3, file: !3, line: 3547, type: !7651, isLocal: false, isDefinition: true, scopeLine: 3548, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7651 = !DISubroutineType(types: !7652)
!7652 = !{!1109, !1151}
!7653 = !DILocalVariable(name: "a", arg: 1, scope: !7650, file: !3, line: 3547, type: !1151)
!7654 = !DILocation(line: 3547, column: 39, scope: !7650)
!7655 = !DILocalVariable(name: "aSign", scope: !7650, file: !3, line: 3549, type: !1241)
!7656 = !DILocation(line: 3549, column: 10, scope: !7650)
!7657 = !DILocalVariable(name: "aExp", scope: !7650, file: !3, line: 3550, type: !1319)
!7658 = !DILocation(line: 3550, column: 11, scope: !7650)
!7659 = !DILocalVariable(name: "aSig", scope: !7650, file: !3, line: 3551, type: !24)
!7660 = !DILocation(line: 3551, column: 12, scope: !7650)
!7661 = !DILocation(line: 3553, column: 12, scope: !7650)
!7662 = !DILocation(line: 3553, column: 10, scope: !7650)
!7663 = !DILocation(line: 3554, column: 12, scope: !7650)
!7664 = !DILocation(line: 3554, column: 10, scope: !7650)
!7665 = !DILocation(line: 3555, column: 13, scope: !7650)
!7666 = !DILocation(line: 3555, column: 11, scope: !7650)
!7667 = !DILocation(line: 3556, column: 10, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 3556, column: 10)
!7669 = !DILocation(line: 3556, column: 15, scope: !7668)
!7670 = !DILocation(line: 3556, column: 10, scope: !7650)
!7671 = !DILocation(line: 3557, column: 25, scope: !7672)
!7672 = distinct !DILexicalBlock(scope: !7673, file: !3, line: 3557, column: 14)
!7673 = distinct !DILexicalBlock(scope: !7668, file: !3, line: 3556, column: 27)
!7674 = !DILocation(line: 3557, column: 29, scope: !7672)
!7675 = !DILocation(line: 3557, column: 14, scope: !7672)
!7676 = !DILocation(line: 3557, column: 14, scope: !7673)
!7677 = !DILocation(line: 3558, column: 40, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7672, file: !3, line: 3557, column: 37)
!7679 = !DILocation(line: 3558, column: 20, scope: !7678)
!7680 = !DILocation(line: 3558, column: 13, scope: !7678)
!7681 = !DILocation(line: 3560, column: 29, scope: !7673)
!7682 = !DILocation(line: 3560, column: 16, scope: !7673)
!7683 = !DILocation(line: 3560, column: 9, scope: !7673)
!7684 = !DILocation(line: 3562, column: 26, scope: !7650)
!7685 = !DILocation(line: 3562, column: 5, scope: !7650)
!7686 = !DILocation(line: 3563, column: 10, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 3563, column: 10)
!7688 = !DILocation(line: 3563, column: 15, scope: !7687)
!7689 = !DILocation(line: 3563, column: 18, scope: !7687)
!7690 = !DILocation(line: 3563, column: 10, scope: !7650)
!7691 = !DILocation(line: 3563, column: 30, scope: !7687)
!7692 = !DILocation(line: 3563, column: 25, scope: !7687)
!7693 = !DILocation(line: 3564, column: 33, scope: !7650)
!7694 = !DILocation(line: 3564, column: 40, scope: !7650)
!7695 = !DILocation(line: 3564, column: 46, scope: !7650)
!7696 = !DILocation(line: 3564, column: 12, scope: !7650)
!7697 = !DILocation(line: 3564, column: 5, scope: !7650)
!7698 = !DILocation(line: 3566, column: 1, scope: !7650)
!7699 = distinct !DISubprogram(name: "floatx80ToCommonNaN", scope: !43, file: !43, line: 271, type: !7700, isLocal: true, isDefinition: true, scopeLine: 272, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7700 = !DISubroutineType(types: !7701)
!7701 = !{!2576, !1151}
!7702 = !DILocalVariable(name: "a", arg: 1, scope: !7699, file: !43, line: 271, type: !1151)
!7703 = !DILocation(line: 271, column: 49, scope: !7699)
!7704 = !DILocalVariable(name: "z", scope: !7699, file: !43, line: 273, type: !2576)
!7705 = !DILocation(line: 273, column: 16, scope: !7699)
!7706 = !DILocation(line: 275, column: 10, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7699, file: !43, line: 275, column: 10)
!7708 = !DILocation(line: 275, column: 10, scope: !7699)
!7709 = !DILocation(line: 275, column: 43, scope: !7707)
!7710 = !DILocation(line: 276, column: 16, scope: !7699)
!7711 = !DILocation(line: 276, column: 14, scope: !7699)
!7712 = !DILocation(line: 276, column: 20, scope: !7699)
!7713 = !DILocation(line: 276, column: 7, scope: !7699)
!7714 = !DILocation(line: 276, column: 12, scope: !7699)
!7715 = !DILocation(line: 277, column: 7, scope: !7699)
!7716 = !DILocation(line: 277, column: 11, scope: !7699)
!7717 = !DILocation(line: 278, column: 16, scope: !7699)
!7718 = !DILocation(line: 278, column: 19, scope: !7699)
!7719 = !DILocation(line: 278, column: 7, scope: !7699)
!7720 = !DILocation(line: 278, column: 12, scope: !7699)
!7721 = !DILocation(line: 279, column: 12, scope: !7699)
!7722 = !DILocation(line: 279, column: 5, scope: !7699)
!7723 = distinct !DISubprogram(name: "floatx80_to_float64", scope: !3, file: !3, line: 3575, type: !7724, isLocal: false, isDefinition: true, scopeLine: 3576, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7724 = !DISubroutineType(types: !7725)
!7725 = !{!1130, !1151}
!7726 = !DILocalVariable(name: "a", arg: 1, scope: !7723, file: !3, line: 3575, type: !1151)
!7727 = !DILocation(line: 3575, column: 39, scope: !7723)
!7728 = !DILocalVariable(name: "aSign", scope: !7723, file: !3, line: 3577, type: !1241)
!7729 = !DILocation(line: 3577, column: 10, scope: !7723)
!7730 = !DILocalVariable(name: "aExp", scope: !7723, file: !3, line: 3578, type: !1319)
!7731 = !DILocation(line: 3578, column: 11, scope: !7723)
!7732 = !DILocalVariable(name: "aSig", scope: !7723, file: !3, line: 3579, type: !24)
!7733 = !DILocation(line: 3579, column: 12, scope: !7723)
!7734 = !DILocalVariable(name: "zSig", scope: !7723, file: !3, line: 3579, type: !24)
!7735 = !DILocation(line: 3579, column: 18, scope: !7723)
!7736 = !DILocation(line: 3581, column: 12, scope: !7723)
!7737 = !DILocation(line: 3581, column: 10, scope: !7723)
!7738 = !DILocation(line: 3582, column: 12, scope: !7723)
!7739 = !DILocation(line: 3582, column: 10, scope: !7723)
!7740 = !DILocation(line: 3583, column: 13, scope: !7723)
!7741 = !DILocation(line: 3583, column: 11, scope: !7723)
!7742 = !DILocation(line: 3584, column: 10, scope: !7743)
!7743 = distinct !DILexicalBlock(scope: !7723, file: !3, line: 3584, column: 10)
!7744 = !DILocation(line: 3584, column: 15, scope: !7743)
!7745 = !DILocation(line: 3584, column: 10, scope: !7723)
!7746 = !DILocation(line: 3585, column: 25, scope: !7747)
!7747 = distinct !DILexicalBlock(scope: !7748, file: !3, line: 3585, column: 14)
!7748 = distinct !DILexicalBlock(scope: !7743, file: !3, line: 3584, column: 27)
!7749 = !DILocation(line: 3585, column: 29, scope: !7747)
!7750 = !DILocation(line: 3585, column: 14, scope: !7747)
!7751 = !DILocation(line: 3585, column: 14, scope: !7748)
!7752 = !DILocation(line: 3586, column: 40, scope: !7753)
!7753 = distinct !DILexicalBlock(scope: !7747, file: !3, line: 3585, column: 37)
!7754 = !DILocation(line: 3586, column: 20, scope: !7753)
!7755 = !DILocation(line: 3586, column: 13, scope: !7753)
!7756 = !DILocation(line: 3588, column: 29, scope: !7748)
!7757 = !DILocation(line: 3588, column: 16, scope: !7748)
!7758 = !DILocation(line: 3588, column: 9, scope: !7748)
!7759 = !DILocation(line: 3590, column: 26, scope: !7723)
!7760 = !DILocation(line: 3590, column: 5, scope: !7723)
!7761 = !DILocation(line: 3591, column: 10, scope: !7762)
!7762 = distinct !DILexicalBlock(scope: !7723, file: !3, line: 3591, column: 10)
!7763 = !DILocation(line: 3591, column: 15, scope: !7762)
!7764 = !DILocation(line: 3591, column: 18, scope: !7762)
!7765 = !DILocation(line: 3591, column: 10, scope: !7723)
!7766 = !DILocation(line: 3591, column: 30, scope: !7762)
!7767 = !DILocation(line: 3591, column: 25, scope: !7762)
!7768 = !DILocation(line: 3592, column: 33, scope: !7723)
!7769 = !DILocation(line: 3592, column: 40, scope: !7723)
!7770 = !DILocation(line: 3592, column: 46, scope: !7723)
!7771 = !DILocation(line: 3592, column: 12, scope: !7723)
!7772 = !DILocation(line: 3592, column: 5, scope: !7723)
!7773 = !DILocation(line: 3594, column: 1, scope: !7723)
!7774 = distinct !DISubprogram(name: "floatx80_to_float128", scope: !3, file: !3, line: 3605, type: !7775, isLocal: false, isDefinition: true, scopeLine: 3606, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7775 = !DISubroutineType(types: !7776)
!7776 = !{!1190, !1151}
!7777 = !DILocalVariable(name: "a", arg: 1, scope: !7774, file: !3, line: 3605, type: !1151)
!7778 = !DILocation(line: 3605, column: 41, scope: !7774)
!7779 = !DILocalVariable(name: "aSign", scope: !7774, file: !3, line: 3607, type: !1241)
!7780 = !DILocation(line: 3607, column: 10, scope: !7774)
!7781 = !DILocalVariable(name: "aExp", scope: !7774, file: !3, line: 3608, type: !60)
!7782 = !DILocation(line: 3608, column: 11, scope: !7774)
!7783 = !DILocalVariable(name: "aSig", scope: !7774, file: !3, line: 3609, type: !24)
!7784 = !DILocation(line: 3609, column: 12, scope: !7774)
!7785 = !DILocalVariable(name: "zSig0", scope: !7774, file: !3, line: 3609, type: !24)
!7786 = !DILocation(line: 3609, column: 18, scope: !7774)
!7787 = !DILocalVariable(name: "zSig1", scope: !7774, file: !3, line: 3609, type: !24)
!7788 = !DILocation(line: 3609, column: 25, scope: !7774)
!7789 = !DILocation(line: 3611, column: 12, scope: !7774)
!7790 = !DILocation(line: 3611, column: 10, scope: !7774)
!7791 = !DILocation(line: 3612, column: 12, scope: !7774)
!7792 = !DILocation(line: 3612, column: 10, scope: !7774)
!7793 = !DILocation(line: 3613, column: 13, scope: !7774)
!7794 = !DILocation(line: 3613, column: 11, scope: !7774)
!7795 = !DILocation(line: 3614, column: 12, scope: !7796)
!7796 = distinct !DILexicalBlock(scope: !7774, file: !3, line: 3614, column: 10)
!7797 = !DILocation(line: 3614, column: 17, scope: !7796)
!7798 = !DILocation(line: 3614, column: 29, scope: !7796)
!7799 = !DILocation(line: 3614, column: 43, scope: !7796)
!7800 = !DILocation(line: 3614, column: 47, scope: !7796)
!7801 = !DILocation(line: 3614, column: 32, scope: !7796)
!7802 = !DILocation(line: 3614, column: 10, scope: !7774)
!7803 = !DILocation(line: 3615, column: 37, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7796, file: !3, line: 3614, column: 55)
!7805 = !DILocation(line: 3615, column: 16, scope: !7804)
!7806 = !DILocation(line: 3615, column: 9, scope: !7804)
!7807 = !DILocation(line: 3617, column: 20, scope: !7774)
!7808 = !DILocation(line: 3617, column: 24, scope: !7774)
!7809 = !DILocation(line: 3617, column: 5, scope: !7774)
!7810 = !DILocation(line: 3618, column: 26, scope: !7774)
!7811 = !DILocation(line: 3618, column: 33, scope: !7774)
!7812 = !DILocation(line: 3618, column: 39, scope: !7774)
!7813 = !DILocation(line: 3618, column: 46, scope: !7774)
!7814 = !DILocation(line: 3618, column: 12, scope: !7774)
!7815 = !DILocation(line: 3618, column: 5, scope: !7774)
!7816 = !DILocation(line: 3620, column: 1, scope: !7774)
!7817 = distinct !DISubprogram(name: "floatx80_round_to_int", scope: !3, file: !3, line: 3631, type: !7818, isLocal: false, isDefinition: true, scopeLine: 3632, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7818 = !DISubroutineType(types: !7819)
!7819 = !{!1151, !1151}
!7820 = !DILocalVariable(name: "a", arg: 1, scope: !7817, file: !3, line: 3631, type: !1151)
!7821 = !DILocation(line: 3631, column: 42, scope: !7817)
!7822 = !DILocalVariable(name: "aSign", scope: !7817, file: !3, line: 3633, type: !1241)
!7823 = !DILocation(line: 3633, column: 10, scope: !7817)
!7824 = !DILocalVariable(name: "aExp", scope: !7817, file: !3, line: 3634, type: !1319)
!7825 = !DILocation(line: 3634, column: 11, scope: !7817)
!7826 = !DILocalVariable(name: "lastBitMask", scope: !7817, file: !3, line: 3635, type: !24)
!7827 = !DILocation(line: 3635, column: 12, scope: !7817)
!7828 = !DILocalVariable(name: "roundBitsMask", scope: !7817, file: !3, line: 3635, type: !24)
!7829 = !DILocation(line: 3635, column: 25, scope: !7817)
!7830 = !DILocalVariable(name: "roundingMode", scope: !7817, file: !3, line: 3636, type: !38)
!7831 = !DILocation(line: 3636, column: 10, scope: !7817)
!7832 = !DILocalVariable(name: "z", scope: !7817, file: !3, line: 3637, type: !1151)
!7833 = !DILocation(line: 3637, column: 14, scope: !7817)
!7834 = !DILocation(line: 3639, column: 12, scope: !7817)
!7835 = !DILocation(line: 3639, column: 10, scope: !7817)
!7836 = !DILocation(line: 3640, column: 20, scope: !7837)
!7837 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 3640, column: 10)
!7838 = !DILocation(line: 3640, column: 17, scope: !7837)
!7839 = !DILocation(line: 3640, column: 10, scope: !7817)
!7840 = !DILocation(line: 3641, column: 16, scope: !7841)
!7841 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 3641, column: 14)
!7842 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 3640, column: 27)
!7843 = !DILocation(line: 3641, column: 21, scope: !7841)
!7844 = !DILocation(line: 3641, column: 33, scope: !7841)
!7845 = !DILocation(line: 3641, column: 47, scope: !7841)
!7846 = !DILocation(line: 3641, column: 71, scope: !7841)
!7847 = !DILocation(line: 3641, column: 36, scope: !7841)
!7848 = !DILocation(line: 3641, column: 14, scope: !7842)
!7849 = !DILocation(line: 3642, column: 20, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7841, file: !3, line: 3641, column: 79)
!7851 = !DILocation(line: 3642, column: 13, scope: !7850)
!7852 = !DILocation(line: 3644, column: 16, scope: !7842)
!7853 = !DILocation(line: 3644, column: 9, scope: !7842)
!7854 = !DILocation(line: 3646, column: 10, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 3646, column: 10)
!7856 = !DILocation(line: 3646, column: 15, scope: !7855)
!7857 = !DILocation(line: 3646, column: 10, scope: !7817)
!7858 = !DILocation(line: 3647, column: 19, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 3647, column: 17)
!7860 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 3646, column: 26)
!7861 = !DILocation(line: 3647, column: 24, scope: !7859)
!7862 = !DILocation(line: 3648, column: 14, scope: !7859)
!7863 = !DILocation(line: 3648, column: 30, scope: !7859)
!7864 = !DILocation(line: 3648, column: 54, scope: !7859)
!7865 = !DILocation(line: 3648, column: 60, scope: !7859)
!7866 = !DILocation(line: 3647, column: 17, scope: !7860)
!7867 = !DILocation(line: 3649, column: 20, scope: !7868)
!7868 = distinct !DILexicalBlock(scope: !7859, file: !3, line: 3648, column: 69)
!7869 = !DILocation(line: 3649, column: 13, scope: !7868)
!7870 = !DILocation(line: 3651, column: 31, scope: !7860)
!7871 = !DILocation(line: 3652, column: 17, scope: !7860)
!7872 = !DILocation(line: 3652, column: 15, scope: !7860)
!7873 = !DILocation(line: 3653, column: 18, scope: !7860)
!7874 = !DILocation(line: 3653, column: 9, scope: !7860)
!7875 = !DILocation(line: 3655, column: 20, scope: !7876)
!7876 = distinct !DILexicalBlock(scope: !7877, file: !3, line: 3655, column: 18)
!7877 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 3653, column: 40)
!7878 = !DILocation(line: 3655, column: 25, scope: !7876)
!7879 = !DILocation(line: 3655, column: 37, scope: !7876)
!7880 = !DILocation(line: 3655, column: 51, scope: !7876)
!7881 = !DILocation(line: 3655, column: 75, scope: !7876)
!7882 = !DILocation(line: 3655, column: 40, scope: !7876)
!7883 = !DILocation(line: 3655, column: 18, scope: !7877)
!7884 = !DILocation(line: 3658, column: 35, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 3656, column: 18)
!7886 = !DILocation(line: 3658, column: 21, scope: !7885)
!7887 = !DILocation(line: 3657, column: 17, scope: !7885)
!7888 = !DILocation(line: 3660, column: 13, scope: !7877)
!7889 = !DILocation(line: 3663, column: 19, scope: !7877)
!7890 = !DILocation(line: 3664, column: 23, scope: !7877)
!7891 = !DILocation(line: 3665, column: 19, scope: !7877)
!7892 = !DILocation(line: 3662, column: 13, scope: !7877)
!7893 = !DILocation(line: 3668, column: 19, scope: !7877)
!7894 = !DILocation(line: 3668, column: 27, scope: !7877)
!7895 = !DILocation(line: 3669, column: 19, scope: !7877)
!7896 = !DILocation(line: 3667, column: 13, scope: !7877)
!7897 = !DILocation(line: 3671, column: 30, scope: !7860)
!7898 = !DILocation(line: 3671, column: 16, scope: !7860)
!7899 = !DILocation(line: 3671, column: 9, scope: !7860)
!7900 = !DILocation(line: 3673, column: 17, scope: !7817)
!7901 = !DILocation(line: 3674, column: 30, scope: !7817)
!7902 = !DILocation(line: 3674, column: 28, scope: !7817)
!7903 = !DILocation(line: 3674, column: 17, scope: !7817)
!7904 = !DILocation(line: 3675, column: 21, scope: !7817)
!7905 = !DILocation(line: 3675, column: 33, scope: !7817)
!7906 = !DILocation(line: 3675, column: 19, scope: !7817)
!7907 = !DILocation(line: 3676, column: 9, scope: !7817)
!7908 = !DILocation(line: 3677, column: 20, scope: !7817)
!7909 = !DILocation(line: 3677, column: 18, scope: !7817)
!7910 = !DILocation(line: 3678, column: 10, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 3678, column: 10)
!7912 = !DILocation(line: 3678, column: 23, scope: !7911)
!7913 = !DILocation(line: 3678, column: 10, scope: !7817)
!7914 = !DILocation(line: 3679, column: 18, scope: !7915)
!7915 = distinct !DILexicalBlock(scope: !7911, file: !3, line: 3678, column: 53)
!7916 = !DILocation(line: 3679, column: 29, scope: !7915)
!7917 = !DILocation(line: 3679, column: 11, scope: !7915)
!7918 = !DILocation(line: 3679, column: 15, scope: !7915)
!7919 = !DILocation(line: 3680, column: 18, scope: !7920)
!7920 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 3680, column: 14)
!7921 = !DILocation(line: 3680, column: 24, scope: !7920)
!7922 = !DILocation(line: 3680, column: 22, scope: !7920)
!7923 = !DILocation(line: 3680, column: 40, scope: !7920)
!7924 = !DILocation(line: 3680, column: 14, scope: !7915)
!7925 = !DILocation(line: 3680, column: 58, scope: !7920)
!7926 = !DILocation(line: 3680, column: 56, scope: !7920)
!7927 = !DILocation(line: 3680, column: 49, scope: !7920)
!7928 = !DILocation(line: 3680, column: 53, scope: !7920)
!7929 = !DILocation(line: 3680, column: 47, scope: !7920)
!7930 = !DILocation(line: 3681, column: 5, scope: !7915)
!7931 = !DILocation(line: 3682, column: 15, scope: !7932)
!7932 = distinct !DILexicalBlock(scope: !7911, file: !3, line: 3682, column: 15)
!7933 = !DILocation(line: 3682, column: 28, scope: !7932)
!7934 = !DILocation(line: 3682, column: 15, scope: !7911)
!7935 = !DILocation(line: 3683, column: 14, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7937, file: !3, line: 3683, column: 14)
!7937 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 3682, column: 53)
!7938 = !DILocation(line: 3683, column: 43, scope: !7936)
!7939 = !DILocation(line: 3683, column: 56, scope: !7936)
!7940 = !DILocation(line: 3683, column: 39, scope: !7936)
!7941 = !DILocation(line: 3683, column: 14, scope: !7937)
!7942 = !DILocation(line: 3684, column: 22, scope: !7943)
!7943 = distinct !DILexicalBlock(scope: !7936, file: !3, line: 3683, column: 78)
!7944 = !DILocation(line: 3684, column: 15, scope: !7943)
!7945 = !DILocation(line: 3684, column: 19, scope: !7943)
!7946 = !DILocation(line: 3685, column: 9, scope: !7943)
!7947 = !DILocation(line: 3686, column: 5, scope: !7937)
!7948 = !DILocation(line: 3687, column: 16, scope: !7817)
!7949 = !DILocation(line: 3687, column: 14, scope: !7817)
!7950 = !DILocation(line: 3687, column: 7, scope: !7817)
!7951 = !DILocation(line: 3687, column: 11, scope: !7817)
!7952 = !DILocation(line: 3688, column: 12, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 3688, column: 10)
!7954 = !DILocation(line: 3688, column: 16, scope: !7953)
!7955 = !DILocation(line: 3688, column: 10, scope: !7817)
!7956 = !DILocation(line: 3689, column: 13, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3688, column: 23)
!7958 = !DILocation(line: 3689, column: 9, scope: !7957)
!7959 = !DILocation(line: 3690, column: 11, scope: !7957)
!7960 = !DILocation(line: 3690, column: 15, scope: !7957)
!7961 = !DILocation(line: 3691, column: 5, scope: !7957)
!7962 = !DILocation(line: 3692, column: 12, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 3692, column: 10)
!7964 = !DILocation(line: 3692, column: 21, scope: !7963)
!7965 = !DILocation(line: 3692, column: 16, scope: !7963)
!7966 = !DILocation(line: 3692, column: 10, scope: !7817)
!7967 = !DILocation(line: 3692, column: 49, scope: !7963)
!7968 = !DILocation(line: 3692, column: 27, scope: !7963)
!7969 = !DILocation(line: 3693, column: 12, scope: !7817)
!7970 = !DILocation(line: 3693, column: 5, scope: !7817)
!7971 = !DILocation(line: 3695, column: 1, scope: !7817)
!7972 = distinct !DISubprogram(name: "propagateFloatx80NaN", scope: !43, file: !43, line: 304, type: !7973, isLocal: true, isDefinition: true, scopeLine: 305, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!7973 = !DISubroutineType(types: !7974)
!7974 = !{!1151, !1151, !1151}
!7975 = !DILocalVariable(name: "a", arg: 1, scope: !7972, file: !43, line: 304, type: !1151)
!7976 = !DILocation(line: 304, column: 48, scope: !7972)
!7977 = !DILocalVariable(name: "b", arg: 2, scope: !7972, file: !43, line: 304, type: !1151)
!7978 = !DILocation(line: 304, column: 60, scope: !7972)
!7979 = !DILocalVariable(name: "aIsNaN", scope: !7972, file: !43, line: 306, type: !1241)
!7980 = !DILocation(line: 306, column: 10, scope: !7972)
!7981 = !DILocalVariable(name: "aIsSignalingNaN", scope: !7972, file: !43, line: 306, type: !1241)
!7982 = !DILocation(line: 306, column: 18, scope: !7972)
!7983 = !DILocalVariable(name: "bIsNaN", scope: !7972, file: !43, line: 306, type: !1241)
!7984 = !DILocation(line: 306, column: 35, scope: !7972)
!7985 = !DILocalVariable(name: "bIsSignalingNaN", scope: !7972, file: !43, line: 306, type: !1241)
!7986 = !DILocation(line: 306, column: 43, scope: !7972)
!7987 = !DILocation(line: 308, column: 14, scope: !7972)
!7988 = !DILocation(line: 308, column: 12, scope: !7972)
!7989 = !DILocation(line: 309, column: 23, scope: !7972)
!7990 = !DILocation(line: 309, column: 21, scope: !7972)
!7991 = !DILocation(line: 310, column: 14, scope: !7972)
!7992 = !DILocation(line: 310, column: 12, scope: !7972)
!7993 = !DILocation(line: 311, column: 23, scope: !7972)
!7994 = !DILocation(line: 311, column: 21, scope: !7972)
!7995 = !DILocation(line: 312, column: 7, scope: !7972)
!7996 = !DILocation(line: 312, column: 11, scope: !7972)
!7997 = !DILocation(line: 313, column: 7, scope: !7972)
!7998 = !DILocation(line: 313, column: 11, scope: !7972)
!7999 = !DILocation(line: 314, column: 10, scope: !8000)
!8000 = distinct !DILexicalBlock(scope: !7972, file: !43, line: 314, column: 10)
!8001 = !DILocation(line: 314, column: 28, scope: !8000)
!8002 = !DILocation(line: 314, column: 26, scope: !8000)
!8003 = !DILocation(line: 314, column: 10, scope: !7972)
!8004 = !DILocation(line: 314, column: 46, scope: !8000)
!8005 = !DILocation(line: 315, column: 12, scope: !7972)
!8006 = !DILocation(line: 315, column: 30, scope: !7972)
!8007 = !DILocation(line: 315, column: 34, scope: !7972)
!8008 = !DILocation(line: 315, column: 52, scope: !7972)
!8009 = !DILocation(line: 315, column: 56, scope: !7972)
!8010 = !DILocation(line: 315, column: 65, scope: !7972)
!8011 = !DILocation(line: 315, column: 69, scope: !7972)
!8012 = !DILocation(line: 315, column: 5, scope: !7972)
!8013 = distinct !DISubprogram(name: "floatx80_add", scope: !3, file: !3, line: 3837, type: !7973, isLocal: false, isDefinition: true, scopeLine: 3838, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8014 = !DILocalVariable(name: "a", arg: 1, scope: !8013, file: !3, line: 3837, type: !1151)
!8015 = !DILocation(line: 3837, column: 33, scope: !8013)
!8016 = !DILocalVariable(name: "b", arg: 2, scope: !8013, file: !3, line: 3837, type: !1151)
!8017 = !DILocation(line: 3837, column: 45, scope: !8013)
!8018 = !DILocalVariable(name: "aSign", scope: !8013, file: !3, line: 3839, type: !1241)
!8019 = !DILocation(line: 3839, column: 10, scope: !8013)
!8020 = !DILocalVariable(name: "bSign", scope: !8013, file: !3, line: 3839, type: !1241)
!8021 = !DILocation(line: 3839, column: 17, scope: !8013)
!8022 = !DILocation(line: 3841, column: 13, scope: !8013)
!8023 = !DILocation(line: 3841, column: 11, scope: !8013)
!8024 = !DILocation(line: 3842, column: 13, scope: !8013)
!8025 = !DILocation(line: 3842, column: 11, scope: !8013)
!8026 = !DILocation(line: 3843, column: 10, scope: !8027)
!8027 = distinct !DILexicalBlock(scope: !8013, file: !3, line: 3843, column: 10)
!8028 = !DILocation(line: 3843, column: 19, scope: !8027)
!8029 = !DILocation(line: 3843, column: 16, scope: !8027)
!8030 = !DILocation(line: 3843, column: 10, scope: !8013)
!8031 = !DILocation(line: 3844, column: 39, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8027, file: !3, line: 3843, column: 27)
!8033 = !DILocation(line: 3844, column: 16, scope: !8032)
!8034 = !DILocation(line: 3844, column: 9, scope: !8032)
!8035 = !DILocation(line: 3847, column: 39, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8027, file: !3, line: 3846, column: 10)
!8037 = !DILocation(line: 3847, column: 16, scope: !8036)
!8038 = !DILocation(line: 3847, column: 9, scope: !8036)
!8039 = !DILocation(line: 3850, column: 1, scope: !8013)
!8040 = distinct !DISubprogram(name: "addFloatx80Sigs", scope: !3, file: !3, line: 3705, type: !8041, isLocal: true, isDefinition: true, scopeLine: 3706, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8041 = !DISubroutineType(types: !8042)
!8042 = !{!1151, !1151, !1151, !1241}
!8043 = !DILocalVariable(name: "a", arg: 1, scope: !8040, file: !3, line: 3705, type: !1151)
!8044 = !DILocation(line: 3705, column: 43, scope: !8040)
!8045 = !DILocalVariable(name: "b", arg: 2, scope: !8040, file: !3, line: 3705, type: !1151)
!8046 = !DILocation(line: 3705, column: 55, scope: !8040)
!8047 = !DILocalVariable(name: "zSign", arg: 3, scope: !8040, file: !3, line: 3705, type: !1241)
!8048 = !DILocation(line: 3705, column: 63, scope: !8040)
!8049 = !DILocalVariable(name: "aExp", scope: !8040, file: !3, line: 3707, type: !1319)
!8050 = !DILocation(line: 3707, column: 11, scope: !8040)
!8051 = !DILocalVariable(name: "bExp", scope: !8040, file: !3, line: 3707, type: !1319)
!8052 = !DILocation(line: 3707, column: 17, scope: !8040)
!8053 = !DILocalVariable(name: "zExp", scope: !8040, file: !3, line: 3707, type: !1319)
!8054 = !DILocation(line: 3707, column: 23, scope: !8040)
!8055 = !DILocalVariable(name: "aSig", scope: !8040, file: !3, line: 3708, type: !24)
!8056 = !DILocation(line: 3708, column: 12, scope: !8040)
!8057 = !DILocalVariable(name: "bSig", scope: !8040, file: !3, line: 3708, type: !24)
!8058 = !DILocation(line: 3708, column: 18, scope: !8040)
!8059 = !DILocalVariable(name: "zSig0", scope: !8040, file: !3, line: 3708, type: !24)
!8060 = !DILocation(line: 3708, column: 24, scope: !8040)
!8061 = !DILocalVariable(name: "zSig1", scope: !8040, file: !3, line: 3708, type: !24)
!8062 = !DILocation(line: 3708, column: 31, scope: !8040)
!8063 = !DILocalVariable(name: "expDiff", scope: !8040, file: !3, line: 3709, type: !1319)
!8064 = !DILocation(line: 3709, column: 11, scope: !8040)
!8065 = !DILocation(line: 3711, column: 12, scope: !8040)
!8066 = !DILocation(line: 3711, column: 10, scope: !8040)
!8067 = !DILocation(line: 3712, column: 12, scope: !8040)
!8068 = !DILocation(line: 3712, column: 10, scope: !8040)
!8069 = !DILocation(line: 3713, column: 12, scope: !8040)
!8070 = !DILocation(line: 3713, column: 10, scope: !8040)
!8071 = !DILocation(line: 3714, column: 12, scope: !8040)
!8072 = !DILocation(line: 3714, column: 10, scope: !8040)
!8073 = !DILocation(line: 3715, column: 15, scope: !8040)
!8074 = !DILocation(line: 3715, column: 22, scope: !8040)
!8075 = !DILocation(line: 3715, column: 20, scope: !8040)
!8076 = !DILocation(line: 3715, column: 13, scope: !8040)
!8077 = !DILocation(line: 3716, column: 14, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 3716, column: 10)
!8079 = !DILocation(line: 3716, column: 12, scope: !8078)
!8080 = !DILocation(line: 3716, column: 10, scope: !8040)
!8081 = !DILocation(line: 3717, column: 14, scope: !8082)
!8082 = distinct !DILexicalBlock(scope: !8083, file: !3, line: 3717, column: 14)
!8083 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 3716, column: 24)
!8084 = !DILocation(line: 3717, column: 19, scope: !8082)
!8085 = !DILocation(line: 3717, column: 14, scope: !8083)
!8086 = !DILocation(line: 3718, column: 29, scope: !8087)
!8087 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 3718, column: 18)
!8088 = distinct !DILexicalBlock(scope: !8082, file: !3, line: 3717, column: 31)
!8089 = !DILocation(line: 3718, column: 33, scope: !8087)
!8090 = !DILocation(line: 3718, column: 18, scope: !8087)
!8091 = !DILocation(line: 3718, column: 18, scope: !8088)
!8092 = !DILocation(line: 3718, column: 48, scope: !8087)
!8093 = !DILocation(line: 3718, column: 41, scope: !8087)
!8094 = !DILocation(line: 3719, column: 20, scope: !8088)
!8095 = !DILocation(line: 3719, column: 13, scope: !8088)
!8096 = !DILocation(line: 3721, column: 14, scope: !8097)
!8097 = distinct !DILexicalBlock(scope: !8083, file: !3, line: 3721, column: 14)
!8098 = !DILocation(line: 3721, column: 19, scope: !8097)
!8099 = !DILocation(line: 3721, column: 14, scope: !8083)
!8100 = !DILocation(line: 3721, column: 26, scope: !8097)
!8101 = !DILocation(line: 3722, column: 35, scope: !8083)
!8102 = !DILocation(line: 3722, column: 44, scope: !8083)
!8103 = !DILocation(line: 3722, column: 9, scope: !8083)
!8104 = !DILocation(line: 3723, column: 16, scope: !8083)
!8105 = !DILocation(line: 3723, column: 14, scope: !8083)
!8106 = !DILocation(line: 3724, column: 5, scope: !8083)
!8107 = !DILocation(line: 3725, column: 15, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 3725, column: 15)
!8109 = !DILocation(line: 3725, column: 23, scope: !8108)
!8110 = !DILocation(line: 3725, column: 15, scope: !8078)
!8111 = !DILocation(line: 3726, column: 14, scope: !8112)
!8112 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 3726, column: 14)
!8113 = distinct !DILexicalBlock(scope: !8108, file: !3, line: 3725, column: 29)
!8114 = !DILocation(line: 3726, column: 19, scope: !8112)
!8115 = !DILocation(line: 3726, column: 14, scope: !8113)
!8116 = !DILocation(line: 3727, column: 29, scope: !8117)
!8117 = distinct !DILexicalBlock(scope: !8118, file: !3, line: 3727, column: 18)
!8118 = distinct !DILexicalBlock(scope: !8112, file: !3, line: 3726, column: 31)
!8119 = !DILocation(line: 3727, column: 33, scope: !8117)
!8120 = !DILocation(line: 3727, column: 18, scope: !8117)
!8121 = !DILocation(line: 3727, column: 18, scope: !8118)
!8122 = !DILocation(line: 3727, column: 48, scope: !8117)
!8123 = !DILocation(line: 3727, column: 41, scope: !8117)
!8124 = !DILocation(line: 3728, column: 34, scope: !8118)
!8125 = !DILocation(line: 3728, column: 20, scope: !8118)
!8126 = !DILocation(line: 3728, column: 13, scope: !8118)
!8127 = !DILocation(line: 3730, column: 14, scope: !8128)
!8128 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 3730, column: 14)
!8129 = !DILocation(line: 3730, column: 19, scope: !8128)
!8130 = !DILocation(line: 3730, column: 14, scope: !8113)
!8131 = !DILocation(line: 3730, column: 26, scope: !8128)
!8132 = !DILocation(line: 3731, column: 35, scope: !8113)
!8133 = !DILocation(line: 3731, column: 46, scope: !8113)
!8134 = !DILocation(line: 3731, column: 44, scope: !8113)
!8135 = !DILocation(line: 3731, column: 9, scope: !8113)
!8136 = !DILocation(line: 3732, column: 16, scope: !8113)
!8137 = !DILocation(line: 3732, column: 14, scope: !8113)
!8138 = !DILocation(line: 3733, column: 5, scope: !8113)
!8139 = !DILocation(line: 3735, column: 14, scope: !8140)
!8140 = distinct !DILexicalBlock(scope: !8141, file: !3, line: 3735, column: 14)
!8141 = distinct !DILexicalBlock(scope: !8108, file: !3, line: 3734, column: 10)
!8142 = !DILocation(line: 3735, column: 19, scope: !8140)
!8143 = !DILocation(line: 3735, column: 14, scope: !8141)
!8144 = !DILocation(line: 3736, column: 31, scope: !8145)
!8145 = distinct !DILexicalBlock(scope: !8146, file: !3, line: 3736, column: 18)
!8146 = distinct !DILexicalBlock(scope: !8140, file: !3, line: 3735, column: 31)
!8147 = !DILocation(line: 3736, column: 38, scope: !8145)
!8148 = !DILocation(line: 3736, column: 36, scope: !8145)
!8149 = !DILocation(line: 3736, column: 44, scope: !8145)
!8150 = !DILocation(line: 3736, column: 18, scope: !8145)
!8151 = !DILocation(line: 3736, column: 18, scope: !8146)
!8152 = !DILocation(line: 3737, column: 24, scope: !8153)
!8153 = distinct !DILexicalBlock(scope: !8145, file: !3, line: 3736, column: 52)
!8154 = !DILocation(line: 3737, column: 17, scope: !8153)
!8155 = !DILocation(line: 3739, column: 20, scope: !8146)
!8156 = !DILocation(line: 3739, column: 13, scope: !8146)
!8157 = !DILocation(line: 3741, column: 15, scope: !8141)
!8158 = !DILocation(line: 3742, column: 17, scope: !8141)
!8159 = !DILocation(line: 3742, column: 24, scope: !8141)
!8160 = !DILocation(line: 3742, column: 22, scope: !8141)
!8161 = !DILocation(line: 3742, column: 15, scope: !8141)
!8162 = !DILocation(line: 3743, column: 14, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8141, file: !3, line: 3743, column: 14)
!8164 = !DILocation(line: 3743, column: 19, scope: !8163)
!8165 = !DILocation(line: 3743, column: 14, scope: !8141)
!8166 = !DILocation(line: 3744, column: 41, scope: !8167)
!8167 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 3743, column: 26)
!8168 = !DILocation(line: 3744, column: 13, scope: !8167)
!8169 = !DILocation(line: 3745, column: 13, scope: !8167)
!8170 = !DILocation(line: 3747, column: 16, scope: !8141)
!8171 = !DILocation(line: 3747, column: 14, scope: !8141)
!8172 = !DILocation(line: 3748, column: 9, scope: !8141)
!8173 = !DILocation(line: 3750, column: 13, scope: !8040)
!8174 = !DILocation(line: 3750, column: 20, scope: !8040)
!8175 = !DILocation(line: 3750, column: 18, scope: !8040)
!8176 = !DILocation(line: 3750, column: 11, scope: !8040)
!8177 = !DILocation(line: 3751, column: 20, scope: !8178)
!8178 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 3751, column: 10)
!8179 = !DILocation(line: 3751, column: 26, scope: !8178)
!8180 = !DILocation(line: 3751, column: 10, scope: !8040)
!8181 = !DILocation(line: 3751, column: 32, scope: !8178)
!8182 = !DILocation(line: 3751, column: 28, scope: !8178)
!8183 = !DILocation(line: 3753, column: 31, scope: !8040)
!8184 = !DILocation(line: 3753, column: 38, scope: !8040)
!8185 = !DILocation(line: 3753, column: 5, scope: !8040)
!8186 = !DILocation(line: 3754, column: 11, scope: !8040)
!8187 = !DILocation(line: 3755, column: 5, scope: !8040)
!8188 = !DILocation(line: 3759, column: 13, scope: !8040)
!8189 = !DILocation(line: 3759, column: 42, scope: !8040)
!8190 = !DILocation(line: 3759, column: 49, scope: !8040)
!8191 = !DILocation(line: 3759, column: 55, scope: !8040)
!8192 = !DILocation(line: 3759, column: 62, scope: !8040)
!8193 = !DILocation(line: 3758, column: 9, scope: !8040)
!8194 = !DILocation(line: 3757, column: 5, scope: !8040)
!8195 = !DILocation(line: 3761, column: 1, scope: !8040)
!8196 = distinct !DISubprogram(name: "subFloatx80Sigs", scope: !3, file: !3, line: 3771, type: !8041, isLocal: true, isDefinition: true, scopeLine: 3772, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8197 = !DILocalVariable(name: "a", arg: 1, scope: !8196, file: !3, line: 3771, type: !1151)
!8198 = !DILocation(line: 3771, column: 43, scope: !8196)
!8199 = !DILocalVariable(name: "b", arg: 2, scope: !8196, file: !3, line: 3771, type: !1151)
!8200 = !DILocation(line: 3771, column: 55, scope: !8196)
!8201 = !DILocalVariable(name: "zSign", arg: 3, scope: !8196, file: !3, line: 3771, type: !1241)
!8202 = !DILocation(line: 3771, column: 63, scope: !8196)
!8203 = !DILocalVariable(name: "aExp", scope: !8196, file: !3, line: 3773, type: !1319)
!8204 = !DILocation(line: 3773, column: 11, scope: !8196)
!8205 = !DILocalVariable(name: "bExp", scope: !8196, file: !3, line: 3773, type: !1319)
!8206 = !DILocation(line: 3773, column: 17, scope: !8196)
!8207 = !DILocalVariable(name: "zExp", scope: !8196, file: !3, line: 3773, type: !1319)
!8208 = !DILocation(line: 3773, column: 23, scope: !8196)
!8209 = !DILocalVariable(name: "aSig", scope: !8196, file: !3, line: 3774, type: !24)
!8210 = !DILocation(line: 3774, column: 12, scope: !8196)
!8211 = !DILocalVariable(name: "bSig", scope: !8196, file: !3, line: 3774, type: !24)
!8212 = !DILocation(line: 3774, column: 18, scope: !8196)
!8213 = !DILocalVariable(name: "zSig0", scope: !8196, file: !3, line: 3774, type: !24)
!8214 = !DILocation(line: 3774, column: 24, scope: !8196)
!8215 = !DILocalVariable(name: "zSig1", scope: !8196, file: !3, line: 3774, type: !24)
!8216 = !DILocation(line: 3774, column: 31, scope: !8196)
!8217 = !DILocalVariable(name: "expDiff", scope: !8196, file: !3, line: 3775, type: !1319)
!8218 = !DILocation(line: 3775, column: 11, scope: !8196)
!8219 = !DILocalVariable(name: "z", scope: !8196, file: !3, line: 3776, type: !1151)
!8220 = !DILocation(line: 3776, column: 14, scope: !8196)
!8221 = !DILocation(line: 3778, column: 12, scope: !8196)
!8222 = !DILocation(line: 3778, column: 10, scope: !8196)
!8223 = !DILocation(line: 3779, column: 12, scope: !8196)
!8224 = !DILocation(line: 3779, column: 10, scope: !8196)
!8225 = !DILocation(line: 3780, column: 12, scope: !8196)
!8226 = !DILocation(line: 3780, column: 10, scope: !8196)
!8227 = !DILocation(line: 3781, column: 12, scope: !8196)
!8228 = !DILocation(line: 3781, column: 10, scope: !8196)
!8229 = !DILocation(line: 3782, column: 15, scope: !8196)
!8230 = !DILocation(line: 3782, column: 22, scope: !8196)
!8231 = !DILocation(line: 3782, column: 20, scope: !8196)
!8232 = !DILocation(line: 3782, column: 13, scope: !8196)
!8233 = !DILocation(line: 3783, column: 14, scope: !8234)
!8234 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3783, column: 10)
!8235 = !DILocation(line: 3783, column: 12, scope: !8234)
!8236 = !DILocation(line: 3783, column: 10, scope: !8196)
!8237 = !DILocation(line: 3783, column: 24, scope: !8234)
!8238 = !DILocation(line: 3784, column: 10, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3784, column: 10)
!8240 = !DILocation(line: 3784, column: 18, scope: !8239)
!8241 = !DILocation(line: 3784, column: 10, scope: !8196)
!8242 = !DILocation(line: 3784, column: 24, scope: !8239)
!8243 = !DILocation(line: 3785, column: 10, scope: !8244)
!8244 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3785, column: 10)
!8245 = !DILocation(line: 3785, column: 15, scope: !8244)
!8246 = !DILocation(line: 3785, column: 10, scope: !8196)
!8247 = !DILocation(line: 3786, column: 27, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8249, file: !3, line: 3786, column: 14)
!8249 = distinct !DILexicalBlock(scope: !8244, file: !3, line: 3785, column: 27)
!8250 = !DILocation(line: 3786, column: 34, scope: !8248)
!8251 = !DILocation(line: 3786, column: 32, scope: !8248)
!8252 = !DILocation(line: 3786, column: 40, scope: !8248)
!8253 = !DILocation(line: 3786, column: 14, scope: !8248)
!8254 = !DILocation(line: 3786, column: 14, scope: !8249)
!8255 = !DILocation(line: 3787, column: 20, scope: !8256)
!8256 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 3786, column: 48)
!8257 = !DILocation(line: 3787, column: 13, scope: !8256)
!8258 = !DILocation(line: 3789, column: 9, scope: !8249)
!8259 = !DILocation(line: 3790, column: 11, scope: !8249)
!8260 = !DILocation(line: 3790, column: 15, scope: !8249)
!8261 = !DILocation(line: 3791, column: 11, scope: !8249)
!8262 = !DILocation(line: 3791, column: 16, scope: !8249)
!8263 = !DILocation(line: 3792, column: 16, scope: !8249)
!8264 = !DILocation(line: 3792, column: 9, scope: !8249)
!8265 = !DILocation(line: 3794, column: 10, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3794, column: 10)
!8267 = !DILocation(line: 3794, column: 15, scope: !8266)
!8268 = !DILocation(line: 3794, column: 10, scope: !8196)
!8269 = !DILocation(line: 3795, column: 14, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8266, file: !3, line: 3794, column: 22)
!8271 = !DILocation(line: 3796, column: 14, scope: !8270)
!8272 = !DILocation(line: 3797, column: 5, scope: !8270)
!8273 = !DILocation(line: 3798, column: 11, scope: !8196)
!8274 = !DILocation(line: 3799, column: 10, scope: !8275)
!8275 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3799, column: 10)
!8276 = !DILocation(line: 3799, column: 17, scope: !8275)
!8277 = !DILocation(line: 3799, column: 15, scope: !8275)
!8278 = !DILocation(line: 3799, column: 10, scope: !8196)
!8279 = !DILocation(line: 3799, column: 24, scope: !8275)
!8280 = !DILocation(line: 3800, column: 10, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3800, column: 10)
!8282 = !DILocation(line: 3800, column: 17, scope: !8281)
!8283 = !DILocation(line: 3800, column: 15, scope: !8281)
!8284 = !DILocation(line: 3800, column: 10, scope: !8196)
!8285 = !DILocation(line: 3800, column: 24, scope: !8281)
!8286 = !DILocation(line: 3801, column: 26, scope: !8196)
!8287 = !DILocation(line: 3801, column: 46, scope: !8196)
!8288 = !DILocation(line: 3801, column: 12, scope: !8196)
!8289 = !DILocation(line: 3801, column: 5, scope: !8196)
!8290 = !DILocation(line: 3803, column: 10, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3803, column: 10)
!8292 = !DILocation(line: 3803, column: 15, scope: !8291)
!8293 = !DILocation(line: 3803, column: 10, scope: !8196)
!8294 = !DILocation(line: 3804, column: 25, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8296, file: !3, line: 3804, column: 14)
!8296 = distinct !DILexicalBlock(scope: !8291, file: !3, line: 3803, column: 27)
!8297 = !DILocation(line: 3804, column: 29, scope: !8295)
!8298 = !DILocation(line: 3804, column: 14, scope: !8295)
!8299 = !DILocation(line: 3804, column: 14, scope: !8296)
!8300 = !DILocation(line: 3804, column: 44, scope: !8295)
!8301 = !DILocation(line: 3804, column: 37, scope: !8295)
!8302 = !DILocation(line: 3805, column: 30, scope: !8296)
!8303 = !DILocation(line: 3805, column: 36, scope: !8296)
!8304 = !DILocation(line: 3805, column: 16, scope: !8296)
!8305 = !DILocation(line: 3805, column: 9, scope: !8296)
!8306 = !DILocation(line: 3807, column: 10, scope: !8307)
!8307 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3807, column: 10)
!8308 = !DILocation(line: 3807, column: 15, scope: !8307)
!8309 = !DILocation(line: 3807, column: 10, scope: !8196)
!8310 = !DILocation(line: 3807, column: 22, scope: !8307)
!8311 = !DILocation(line: 3808, column: 27, scope: !8196)
!8312 = !DILocation(line: 3808, column: 38, scope: !8196)
!8313 = !DILocation(line: 3808, column: 36, scope: !8196)
!8314 = !DILocation(line: 3808, column: 5, scope: !8196)
!8315 = !DILocation(line: 3810, column: 13, scope: !8196)
!8316 = !DILocation(line: 3810, column: 22, scope: !8196)
!8317 = !DILocation(line: 3810, column: 28, scope: !8196)
!8318 = !DILocation(line: 3810, column: 5, scope: !8196)
!8319 = !DILocation(line: 3811, column: 12, scope: !8196)
!8320 = !DILocation(line: 3811, column: 10, scope: !8196)
!8321 = !DILocation(line: 3812, column: 11, scope: !8196)
!8322 = !DILocation(line: 3813, column: 5, scope: !8196)
!8323 = !DILocation(line: 3815, column: 10, scope: !8324)
!8324 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3815, column: 10)
!8325 = !DILocation(line: 3815, column: 15, scope: !8324)
!8326 = !DILocation(line: 3815, column: 10, scope: !8196)
!8327 = !DILocation(line: 3816, column: 25, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8329, file: !3, line: 3816, column: 14)
!8329 = distinct !DILexicalBlock(scope: !8324, file: !3, line: 3815, column: 27)
!8330 = !DILocation(line: 3816, column: 29, scope: !8328)
!8331 = !DILocation(line: 3816, column: 14, scope: !8328)
!8332 = !DILocation(line: 3816, column: 14, scope: !8329)
!8333 = !DILocation(line: 3816, column: 44, scope: !8328)
!8334 = !DILocation(line: 3816, column: 37, scope: !8328)
!8335 = !DILocation(line: 3817, column: 16, scope: !8329)
!8336 = !DILocation(line: 3817, column: 9, scope: !8329)
!8337 = !DILocation(line: 3819, column: 10, scope: !8338)
!8338 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 3819, column: 10)
!8339 = !DILocation(line: 3819, column: 15, scope: !8338)
!8340 = !DILocation(line: 3819, column: 10, scope: !8196)
!8341 = !DILocation(line: 3819, column: 22, scope: !8338)
!8342 = !DILocation(line: 3820, column: 27, scope: !8196)
!8343 = !DILocation(line: 3820, column: 36, scope: !8196)
!8344 = !DILocation(line: 3820, column: 5, scope: !8196)
!8345 = !DILocation(line: 3822, column: 13, scope: !8196)
!8346 = !DILocation(line: 3822, column: 22, scope: !8196)
!8347 = !DILocation(line: 3822, column: 28, scope: !8196)
!8348 = !DILocation(line: 3822, column: 5, scope: !8196)
!8349 = !DILocation(line: 3823, column: 12, scope: !8196)
!8350 = !DILocation(line: 3823, column: 10, scope: !8196)
!8351 = !DILocation(line: 3823, column: 5, scope: !8196)
!8352 = !DILocation(line: 3827, column: 13, scope: !8196)
!8353 = !DILocation(line: 3827, column: 42, scope: !8196)
!8354 = !DILocation(line: 3827, column: 49, scope: !8196)
!8355 = !DILocation(line: 3827, column: 55, scope: !8196)
!8356 = !DILocation(line: 3827, column: 62, scope: !8196)
!8357 = !DILocation(line: 3826, column: 9, scope: !8196)
!8358 = !DILocation(line: 3825, column: 5, scope: !8196)
!8359 = !DILocation(line: 3829, column: 1, scope: !8196)
!8360 = distinct !DISubprogram(name: "floatx80_sub", scope: !3, file: !3, line: 3858, type: !7973, isLocal: false, isDefinition: true, scopeLine: 3859, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8361 = !DILocalVariable(name: "a", arg: 1, scope: !8360, file: !3, line: 3858, type: !1151)
!8362 = !DILocation(line: 3858, column: 33, scope: !8360)
!8363 = !DILocalVariable(name: "b", arg: 2, scope: !8360, file: !3, line: 3858, type: !1151)
!8364 = !DILocation(line: 3858, column: 45, scope: !8360)
!8365 = !DILocalVariable(name: "aSign", scope: !8360, file: !3, line: 3860, type: !1241)
!8366 = !DILocation(line: 3860, column: 10, scope: !8360)
!8367 = !DILocalVariable(name: "bSign", scope: !8360, file: !3, line: 3860, type: !1241)
!8368 = !DILocation(line: 3860, column: 17, scope: !8360)
!8369 = !DILocation(line: 3862, column: 13, scope: !8360)
!8370 = !DILocation(line: 3862, column: 11, scope: !8360)
!8371 = !DILocation(line: 3863, column: 13, scope: !8360)
!8372 = !DILocation(line: 3863, column: 11, scope: !8360)
!8373 = !DILocation(line: 3864, column: 10, scope: !8374)
!8374 = distinct !DILexicalBlock(scope: !8360, file: !3, line: 3864, column: 10)
!8375 = !DILocation(line: 3864, column: 19, scope: !8374)
!8376 = !DILocation(line: 3864, column: 16, scope: !8374)
!8377 = !DILocation(line: 3864, column: 10, scope: !8360)
!8378 = !DILocation(line: 3865, column: 39, scope: !8379)
!8379 = distinct !DILexicalBlock(scope: !8374, file: !3, line: 3864, column: 27)
!8380 = !DILocation(line: 3865, column: 16, scope: !8379)
!8381 = !DILocation(line: 3865, column: 9, scope: !8379)
!8382 = !DILocation(line: 3868, column: 39, scope: !8383)
!8383 = distinct !DILexicalBlock(scope: !8374, file: !3, line: 3867, column: 10)
!8384 = !DILocation(line: 3868, column: 16, scope: !8383)
!8385 = !DILocation(line: 3868, column: 9, scope: !8383)
!8386 = !DILocation(line: 3871, column: 1, scope: !8360)
!8387 = distinct !DISubprogram(name: "floatx80_mul", scope: !3, file: !3, line: 3879, type: !7973, isLocal: false, isDefinition: true, scopeLine: 3880, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8388 = !DILocalVariable(name: "a", arg: 1, scope: !8387, file: !3, line: 3879, type: !1151)
!8389 = !DILocation(line: 3879, column: 33, scope: !8387)
!8390 = !DILocalVariable(name: "b", arg: 2, scope: !8387, file: !3, line: 3879, type: !1151)
!8391 = !DILocation(line: 3879, column: 45, scope: !8387)
!8392 = !DILocalVariable(name: "aSign", scope: !8387, file: !3, line: 3881, type: !1241)
!8393 = !DILocation(line: 3881, column: 10, scope: !8387)
!8394 = !DILocalVariable(name: "bSign", scope: !8387, file: !3, line: 3881, type: !1241)
!8395 = !DILocation(line: 3881, column: 17, scope: !8387)
!8396 = !DILocalVariable(name: "zSign", scope: !8387, file: !3, line: 3881, type: !1241)
!8397 = !DILocation(line: 3881, column: 24, scope: !8387)
!8398 = !DILocalVariable(name: "aExp", scope: !8387, file: !3, line: 3882, type: !1319)
!8399 = !DILocation(line: 3882, column: 11, scope: !8387)
!8400 = !DILocalVariable(name: "bExp", scope: !8387, file: !3, line: 3882, type: !1319)
!8401 = !DILocation(line: 3882, column: 17, scope: !8387)
!8402 = !DILocalVariable(name: "zExp", scope: !8387, file: !3, line: 3882, type: !1319)
!8403 = !DILocation(line: 3882, column: 23, scope: !8387)
!8404 = !DILocalVariable(name: "aSig", scope: !8387, file: !3, line: 3883, type: !24)
!8405 = !DILocation(line: 3883, column: 12, scope: !8387)
!8406 = !DILocalVariable(name: "bSig", scope: !8387, file: !3, line: 3883, type: !24)
!8407 = !DILocation(line: 3883, column: 18, scope: !8387)
!8408 = !DILocalVariable(name: "zSig0", scope: !8387, file: !3, line: 3883, type: !24)
!8409 = !DILocation(line: 3883, column: 24, scope: !8387)
!8410 = !DILocalVariable(name: "zSig1", scope: !8387, file: !3, line: 3883, type: !24)
!8411 = !DILocation(line: 3883, column: 31, scope: !8387)
!8412 = !DILocalVariable(name: "z", scope: !8387, file: !3, line: 3884, type: !1151)
!8413 = !DILocation(line: 3884, column: 14, scope: !8387)
!8414 = !DILocation(line: 3886, column: 12, scope: !8387)
!8415 = !DILocation(line: 3886, column: 10, scope: !8387)
!8416 = !DILocation(line: 3887, column: 12, scope: !8387)
!8417 = !DILocation(line: 3887, column: 10, scope: !8387)
!8418 = !DILocation(line: 3888, column: 13, scope: !8387)
!8419 = !DILocation(line: 3888, column: 11, scope: !8387)
!8420 = !DILocation(line: 3889, column: 12, scope: !8387)
!8421 = !DILocation(line: 3889, column: 10, scope: !8387)
!8422 = !DILocation(line: 3890, column: 12, scope: !8387)
!8423 = !DILocation(line: 3890, column: 10, scope: !8387)
!8424 = !DILocation(line: 3891, column: 13, scope: !8387)
!8425 = !DILocation(line: 3891, column: 11, scope: !8387)
!8426 = !DILocation(line: 3892, column: 13, scope: !8387)
!8427 = !DILocation(line: 3892, column: 21, scope: !8387)
!8428 = !DILocation(line: 3892, column: 19, scope: !8387)
!8429 = !DILocation(line: 3892, column: 11, scope: !8387)
!8430 = !DILocation(line: 3893, column: 10, scope: !8431)
!8431 = distinct !DILexicalBlock(scope: !8387, file: !3, line: 3893, column: 10)
!8432 = !DILocation(line: 3893, column: 15, scope: !8431)
!8433 = !DILocation(line: 3893, column: 10, scope: !8387)
!8434 = !DILocation(line: 3894, column: 28, scope: !8435)
!8435 = distinct !DILexicalBlock(scope: !8436, file: !3, line: 3894, column: 17)
!8436 = distinct !DILexicalBlock(scope: !8431, file: !3, line: 3893, column: 27)
!8437 = !DILocation(line: 3894, column: 32, scope: !8435)
!8438 = !DILocation(line: 3894, column: 17, scope: !8435)
!8439 = !DILocation(line: 3895, column: 14, scope: !8435)
!8440 = !DILocation(line: 3895, column: 21, scope: !8435)
!8441 = !DILocation(line: 3895, column: 26, scope: !8435)
!8442 = !DILocation(line: 3895, column: 38, scope: !8435)
!8443 = !DILocation(line: 3895, column: 52, scope: !8435)
!8444 = !DILocation(line: 3895, column: 56, scope: !8435)
!8445 = !DILocation(line: 3895, column: 41, scope: !8435)
!8446 = !DILocation(line: 3894, column: 17, scope: !8436)
!8447 = !DILocation(line: 3896, column: 20, scope: !8448)
!8448 = distinct !DILexicalBlock(scope: !8435, file: !3, line: 3895, column: 66)
!8449 = !DILocation(line: 3896, column: 13, scope: !8448)
!8450 = !DILocation(line: 3898, column: 16, scope: !8451)
!8451 = distinct !DILexicalBlock(scope: !8436, file: !3, line: 3898, column: 14)
!8452 = !DILocation(line: 3898, column: 23, scope: !8451)
!8453 = !DILocation(line: 3898, column: 21, scope: !8451)
!8454 = !DILocation(line: 3898, column: 30, scope: !8451)
!8455 = !DILocation(line: 3898, column: 14, scope: !8436)
!8456 = !DILocation(line: 3898, column: 37, scope: !8451)
!8457 = !DILocation(line: 3899, column: 30, scope: !8436)
!8458 = !DILocation(line: 3899, column: 16, scope: !8436)
!8459 = !DILocation(line: 3899, column: 9, scope: !8436)
!8460 = !DILocation(line: 3901, column: 10, scope: !8461)
!8461 = distinct !DILexicalBlock(scope: !8387, file: !3, line: 3901, column: 10)
!8462 = !DILocation(line: 3901, column: 15, scope: !8461)
!8463 = !DILocation(line: 3901, column: 10, scope: !8387)
!8464 = !DILocation(line: 3902, column: 25, scope: !8465)
!8465 = distinct !DILexicalBlock(scope: !8466, file: !3, line: 3902, column: 14)
!8466 = distinct !DILexicalBlock(scope: !8461, file: !3, line: 3901, column: 27)
!8467 = !DILocation(line: 3902, column: 29, scope: !8465)
!8468 = !DILocation(line: 3902, column: 14, scope: !8465)
!8469 = !DILocation(line: 3902, column: 14, scope: !8466)
!8470 = !DILocation(line: 3902, column: 44, scope: !8465)
!8471 = !DILocation(line: 3902, column: 37, scope: !8465)
!8472 = !DILocation(line: 3903, column: 16, scope: !8473)
!8473 = distinct !DILexicalBlock(scope: !8466, file: !3, line: 3903, column: 14)
!8474 = !DILocation(line: 3903, column: 23, scope: !8473)
!8475 = !DILocation(line: 3903, column: 21, scope: !8473)
!8476 = !DILocation(line: 3903, column: 30, scope: !8473)
!8477 = !DILocation(line: 3903, column: 14, scope: !8466)
!8478 = !DILocation(line: 3903, column: 37, scope: !8473)
!8479 = !DILocation(line: 3905, column: 13, scope: !8480)
!8480 = distinct !DILexicalBlock(scope: !8473, file: !3, line: 3903, column: 37)
!8481 = !DILocation(line: 3906, column: 15, scope: !8480)
!8482 = !DILocation(line: 3906, column: 19, scope: !8480)
!8483 = !DILocation(line: 3907, column: 15, scope: !8480)
!8484 = !DILocation(line: 3907, column: 20, scope: !8480)
!8485 = !DILocation(line: 3908, column: 20, scope: !8480)
!8486 = !DILocation(line: 3908, column: 13, scope: !8480)
!8487 = !DILocation(line: 3910, column: 30, scope: !8466)
!8488 = !DILocation(line: 3910, column: 16, scope: !8466)
!8489 = !DILocation(line: 3910, column: 9, scope: !8466)
!8490 = !DILocation(line: 3912, column: 10, scope: !8491)
!8491 = distinct !DILexicalBlock(scope: !8387, file: !3, line: 3912, column: 10)
!8492 = !DILocation(line: 3912, column: 15, scope: !8491)
!8493 = !DILocation(line: 3912, column: 10, scope: !8387)
!8494 = !DILocation(line: 3913, column: 14, scope: !8495)
!8495 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 3913, column: 14)
!8496 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3912, column: 22)
!8497 = !DILocation(line: 3913, column: 19, scope: !8495)
!8498 = !DILocation(line: 3913, column: 14, scope: !8496)
!8499 = !DILocation(line: 3913, column: 47, scope: !8495)
!8500 = !DILocation(line: 3913, column: 33, scope: !8495)
!8501 = !DILocation(line: 3913, column: 26, scope: !8495)
!8502 = !DILocation(line: 3914, column: 37, scope: !8496)
!8503 = !DILocation(line: 3914, column: 9, scope: !8496)
!8504 = !DILocation(line: 3915, column: 5, scope: !8496)
!8505 = !DILocation(line: 3916, column: 10, scope: !8506)
!8506 = distinct !DILexicalBlock(scope: !8387, file: !3, line: 3916, column: 10)
!8507 = !DILocation(line: 3916, column: 15, scope: !8506)
!8508 = !DILocation(line: 3916, column: 10, scope: !8387)
!8509 = !DILocation(line: 3917, column: 14, scope: !8510)
!8510 = distinct !DILexicalBlock(scope: !8511, file: !3, line: 3917, column: 14)
!8511 = distinct !DILexicalBlock(scope: !8506, file: !3, line: 3916, column: 22)
!8512 = !DILocation(line: 3917, column: 19, scope: !8510)
!8513 = !DILocation(line: 3917, column: 14, scope: !8511)
!8514 = !DILocation(line: 3917, column: 47, scope: !8510)
!8515 = !DILocation(line: 3917, column: 33, scope: !8510)
!8516 = !DILocation(line: 3917, column: 26, scope: !8510)
!8517 = !DILocation(line: 3918, column: 37, scope: !8511)
!8518 = !DILocation(line: 3918, column: 9, scope: !8511)
!8519 = !DILocation(line: 3919, column: 5, scope: !8511)
!8520 = !DILocation(line: 3920, column: 12, scope: !8387)
!8521 = !DILocation(line: 3920, column: 19, scope: !8387)
!8522 = !DILocation(line: 3920, column: 17, scope: !8387)
!8523 = !DILocation(line: 3920, column: 24, scope: !8387)
!8524 = !DILocation(line: 3920, column: 10, scope: !8387)
!8525 = !DILocation(line: 3921, column: 17, scope: !8387)
!8526 = !DILocation(line: 3921, column: 23, scope: !8387)
!8527 = !DILocation(line: 3921, column: 5, scope: !8387)
!8528 = !DILocation(line: 3922, column: 24, scope: !8529)
!8529 = distinct !DILexicalBlock(scope: !8387, file: !3, line: 3922, column: 10)
!8530 = !DILocation(line: 3922, column: 12, scope: !8529)
!8531 = !DILocation(line: 3922, column: 10, scope: !8387)
!8532 = !DILocation(line: 3923, column: 28, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 3922, column: 32)
!8534 = !DILocation(line: 3923, column: 35, scope: !8533)
!8535 = !DILocation(line: 3923, column: 9, scope: !8533)
!8536 = !DILocation(line: 3924, column: 9, scope: !8533)
!8537 = !DILocation(line: 3925, column: 5, scope: !8533)
!8538 = !DILocation(line: 3928, column: 13, scope: !8387)
!8539 = !DILocation(line: 3928, column: 42, scope: !8387)
!8540 = !DILocation(line: 3928, column: 49, scope: !8387)
!8541 = !DILocation(line: 3928, column: 55, scope: !8387)
!8542 = !DILocation(line: 3928, column: 62, scope: !8387)
!8543 = !DILocation(line: 3927, column: 9, scope: !8387)
!8544 = !DILocation(line: 3926, column: 5, scope: !8387)
!8545 = !DILocation(line: 3930, column: 1, scope: !8387)
!8546 = distinct !DISubprogram(name: "normalizeFloatx80Subnormal", scope: !3, file: !3, line: 535, type: !8547, isLocal: true, isDefinition: true, scopeLine: 536, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8547 = !DISubroutineType(types: !8548)
!8548 = !{null, !24, !8549, !119}
!8549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1319, size: 64)
!8550 = !DILocalVariable(name: "aSig", arg: 1, scope: !8546, file: !3, line: 535, type: !24)
!8551 = !DILocation(line: 535, column: 37, scope: !8546)
!8552 = !DILocalVariable(name: "zExpPtr", arg: 2, scope: !8546, file: !3, line: 535, type: !8549)
!8553 = !DILocation(line: 535, column: 50, scope: !8546)
!8554 = !DILocalVariable(name: "zSigPtr", arg: 3, scope: !8546, file: !3, line: 535, type: !119)
!8555 = !DILocation(line: 535, column: 67, scope: !8546)
!8556 = !DILocalVariable(name: "shiftCount", scope: !8546, file: !3, line: 537, type: !38)
!8557 = !DILocation(line: 537, column: 10, scope: !8546)
!8558 = !DILocation(line: 539, column: 39, scope: !8546)
!8559 = !DILocation(line: 539, column: 18, scope: !8546)
!8560 = !DILocation(line: 539, column: 16, scope: !8546)
!8561 = !DILocation(line: 540, column: 16, scope: !8546)
!8562 = !DILocation(line: 540, column: 22, scope: !8546)
!8563 = !DILocation(line: 540, column: 20, scope: !8546)
!8564 = !DILocation(line: 540, column: 6, scope: !8546)
!8565 = !DILocation(line: 540, column: 14, scope: !8546)
!8566 = !DILocation(line: 541, column: 20, scope: !8546)
!8567 = !DILocation(line: 541, column: 18, scope: !8546)
!8568 = !DILocation(line: 541, column: 6, scope: !8546)
!8569 = !DILocation(line: 541, column: 14, scope: !8546)
!8570 = !DILocation(line: 543, column: 1, scope: !8546)
!8571 = distinct !DISubprogram(name: "roundAndPackFloatx80", scope: !3, file: !3, line: 585, type: !8572, isLocal: true, isDefinition: true, scopeLine: 588, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!8572 = !DISubroutineType(types: !8573)
!8573 = !{!1151, !38, !1241, !1319, !24, !24}
!8574 = !DILocalVariable(name: "roundingPrecision", arg: 1, scope: !8571, file: !3, line: 586, type: !38)
!8575 = !DILocation(line: 586, column: 11, scope: !8571)
!8576 = !DILocalVariable(name: "zSign", arg: 2, scope: !8571, file: !3, line: 586, type: !1241)
!8577 = !DILocation(line: 586, column: 35, scope: !8571)
!8578 = !DILocalVariable(name: "zExp", arg: 3, scope: !8571, file: !3, line: 586, type: !1319)
!8579 = !DILocation(line: 586, column: 48, scope: !8571)
!8580 = !DILocalVariable(name: "zSig0", arg: 4, scope: !8571, file: !3, line: 586, type: !24)
!8581 = !DILocation(line: 586, column: 61, scope: !8571)
!8582 = !DILocalVariable(name: "zSig1", arg: 5, scope: !8571, file: !3, line: 586, type: !24)
!8583 = !DILocation(line: 586, column: 75, scope: !8571)
!8584 = !DILocalVariable(name: "roundingMode", scope: !8571, file: !3, line: 589, type: !38)
!8585 = !DILocation(line: 589, column: 10, scope: !8571)
!8586 = !DILocalVariable(name: "roundNearestEven", scope: !8571, file: !3, line: 590, type: !1241)
!8587 = !DILocation(line: 590, column: 10, scope: !8571)
!8588 = !DILocalVariable(name: "increment", scope: !8571, file: !3, line: 590, type: !1241)
!8589 = !DILocation(line: 590, column: 28, scope: !8571)
!8590 = !DILocalVariable(name: "isTiny", scope: !8571, file: !3, line: 590, type: !1241)
!8591 = !DILocation(line: 590, column: 39, scope: !8571)
!8592 = !DILocalVariable(name: "roundIncrement", scope: !8571, file: !3, line: 591, type: !1628)
!8593 = !DILocation(line: 591, column: 11, scope: !8571)
!8594 = !DILocalVariable(name: "roundMask", scope: !8571, file: !3, line: 591, type: !1628)
!8595 = !DILocation(line: 591, column: 27, scope: !8571)
!8596 = !DILocalVariable(name: "roundBits", scope: !8571, file: !3, line: 591, type: !1628)
!8597 = !DILocation(line: 591, column: 38, scope: !8571)
!8598 = !DILocation(line: 593, column: 20, scope: !8571)
!8599 = !DILocation(line: 593, column: 18, scope: !8571)
!8600 = !DILocation(line: 594, column: 26, scope: !8571)
!8601 = !DILocation(line: 594, column: 39, scope: !8571)
!8602 = !DILocation(line: 594, column: 22, scope: !8571)
!8603 = !DILocation(line: 595, column: 10, scope: !8604)
!8604 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 595, column: 10)
!8605 = !DILocation(line: 595, column: 28, scope: !8604)
!8606 = !DILocation(line: 595, column: 10, scope: !8571)
!8607 = !DILocation(line: 595, column: 36, scope: !8604)
!8608 = !DILocation(line: 596, column: 10, scope: !8609)
!8609 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 596, column: 10)
!8610 = !DILocation(line: 596, column: 28, scope: !8609)
!8611 = !DILocation(line: 596, column: 10, scope: !8571)
!8612 = !DILocation(line: 597, column: 24, scope: !8613)
!8613 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 596, column: 36)
!8614 = !DILocation(line: 598, column: 19, scope: !8613)
!8615 = !DILocation(line: 599, column: 5, scope: !8613)
!8616 = !DILocation(line: 600, column: 15, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 600, column: 15)
!8618 = !DILocation(line: 600, column: 33, scope: !8617)
!8619 = !DILocation(line: 600, column: 15, scope: !8609)
!8620 = !DILocation(line: 601, column: 24, scope: !8621)
!8621 = distinct !DILexicalBlock(scope: !8617, file: !3, line: 600, column: 41)
!8622 = !DILocation(line: 602, column: 19, scope: !8621)
!8623 = !DILocation(line: 603, column: 5, scope: !8621)
!8624 = !DILocation(line: 605, column: 9, scope: !8625)
!8625 = distinct !DILexicalBlock(scope: !8617, file: !3, line: 604, column: 10)
!8626 = !DILocation(line: 607, column: 16, scope: !8571)
!8627 = !DILocation(line: 607, column: 22, scope: !8571)
!8628 = !DILocation(line: 607, column: 14, scope: !8571)
!8629 = !DILocation(line: 607, column: 11, scope: !8571)
!8630 = !DILocation(line: 608, column: 12, scope: !8631)
!8631 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 608, column: 10)
!8632 = !DILocation(line: 608, column: 10, scope: !8571)
!8633 = !DILocation(line: 609, column: 14, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8635, file: !3, line: 609, column: 14)
!8635 = distinct !DILexicalBlock(scope: !8631, file: !3, line: 608, column: 31)
!8636 = !DILocation(line: 609, column: 27, scope: !8634)
!8637 = !DILocation(line: 609, column: 14, scope: !8635)
!8638 = !DILocation(line: 610, column: 28, scope: !8639)
!8639 = distinct !DILexicalBlock(scope: !8634, file: !3, line: 609, column: 52)
!8640 = !DILocation(line: 611, column: 9, scope: !8639)
!8641 = !DILocation(line: 613, column: 30, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8634, file: !3, line: 612, column: 14)
!8643 = !DILocation(line: 613, column: 28, scope: !8642)
!8644 = !DILocation(line: 614, column: 18, scope: !8645)
!8645 = distinct !DILexicalBlock(scope: !8642, file: !3, line: 614, column: 18)
!8646 = !DILocation(line: 614, column: 18, scope: !8642)
!8647 = !DILocation(line: 615, column: 22, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !8649, file: !3, line: 615, column: 22)
!8649 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 614, column: 26)
!8650 = !DILocation(line: 615, column: 35, scope: !8648)
!8651 = !DILocation(line: 615, column: 22, scope: !8649)
!8652 = !DILocation(line: 615, column: 70, scope: !8648)
!8653 = !DILocation(line: 615, column: 55, scope: !8648)
!8654 = !DILocation(line: 616, column: 13, scope: !8649)
!8655 = !DILocation(line: 618, column: 22, scope: !8656)
!8656 = distinct !DILexicalBlock(scope: !8657, file: !3, line: 618, column: 22)
!8657 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 617, column: 18)
!8658 = !DILocation(line: 618, column: 35, scope: !8656)
!8659 = !DILocation(line: 618, column: 22, scope: !8657)
!8660 = !DILocation(line: 618, column: 72, scope: !8656)
!8661 = !DILocation(line: 618, column: 57, scope: !8656)
!8662 = !DILocation(line: 621, column: 5, scope: !8635)
!8663 = !DILocation(line: 622, column: 17, scope: !8571)
!8664 = !DILocation(line: 622, column: 25, scope: !8571)
!8665 = !DILocation(line: 622, column: 23, scope: !8571)
!8666 = !DILocation(line: 622, column: 15, scope: !8571)
!8667 = !DILocation(line: 623, column: 31, scope: !8668)
!8668 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 623, column: 10)
!8669 = !DILocation(line: 623, column: 36, scope: !8668)
!8670 = !DILocation(line: 623, column: 17, scope: !8668)
!8671 = !DILocation(line: 623, column: 10, scope: !8571)
!8672 = !DILocation(line: 624, column: 28, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8674, file: !3, line: 624, column: 17)
!8674 = distinct !DILexicalBlock(scope: !8668, file: !3, line: 623, column: 44)
!8675 = !DILocation(line: 624, column: 26, scope: !8673)
!8676 = !DILocation(line: 625, column: 14, scope: !8673)
!8677 = !DILocation(line: 625, column: 21, scope: !8673)
!8678 = !DILocation(line: 625, column: 26, scope: !8673)
!8679 = !DILocation(line: 625, column: 38, scope: !8673)
!8680 = !DILocation(line: 625, column: 43, scope: !8673)
!8681 = !DILocation(line: 625, column: 51, scope: !8673)
!8682 = !DILocation(line: 625, column: 49, scope: !8673)
!8683 = !DILocation(line: 625, column: 68, scope: !8673)
!8684 = !DILocation(line: 625, column: 66, scope: !8673)
!8685 = !DILocation(line: 624, column: 17, scope: !8674)
!8686 = !DILocation(line: 627, column: 13, scope: !8687)
!8687 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 626, column: 14)
!8688 = !DILocation(line: 629, column: 14, scope: !8689)
!8689 = distinct !DILexicalBlock(scope: !8674, file: !3, line: 629, column: 14)
!8690 = !DILocation(line: 629, column: 19, scope: !8689)
!8691 = !DILocation(line: 629, column: 14, scope: !8674)
!8692 = !DILocation(line: 631, column: 22, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8689, file: !3, line: 629, column: 26)
!8694 = !DILocation(line: 631, column: 44, scope: !8693)
!8695 = !DILocation(line: 632, column: 17, scope: !8693)
!8696 = !DILocation(line: 632, column: 22, scope: !8693)
!8697 = !DILocation(line: 632, column: 27, scope: !8693)
!8698 = !DILocation(line: 633, column: 17, scope: !8693)
!8699 = !DILocation(line: 633, column: 22, scope: !8693)
!8700 = !DILocation(line: 633, column: 31, scope: !8693)
!8701 = !DILocation(line: 633, column: 39, scope: !8693)
!8702 = !DILocation(line: 633, column: 37, scope: !8693)
!8703 = !DILocation(line: 633, column: 28, scope: !8693)
!8704 = !DILocation(line: 630, column: 20, scope: !8693)
!8705 = !DILocation(line: 634, column: 34, scope: !8693)
!8706 = !DILocation(line: 634, column: 45, scope: !8693)
!8707 = !DILocation(line: 634, column: 43, scope: !8693)
!8708 = !DILocation(line: 634, column: 13, scope: !8693)
!8709 = !DILocation(line: 635, column: 18, scope: !8693)
!8710 = !DILocation(line: 636, column: 25, scope: !8693)
!8711 = !DILocation(line: 636, column: 33, scope: !8693)
!8712 = !DILocation(line: 636, column: 31, scope: !8693)
!8713 = !DILocation(line: 636, column: 23, scope: !8693)
!8714 = !DILocation(line: 637, column: 18, scope: !8715)
!8715 = distinct !DILexicalBlock(scope: !8693, file: !3, line: 637, column: 18)
!8716 = !DILocation(line: 637, column: 25, scope: !8715)
!8717 = !DILocation(line: 637, column: 28, scope: !8715)
!8718 = !DILocation(line: 637, column: 18, scope: !8693)
!8719 = !DILocation(line: 637, column: 40, scope: !8715)
!8720 = !DILocation(line: 638, column: 18, scope: !8721)
!8721 = distinct !DILexicalBlock(scope: !8693, file: !3, line: 638, column: 18)
!8722 = !DILocation(line: 638, column: 18, scope: !8693)
!8723 = !DILocation(line: 638, column: 52, scope: !8721)
!8724 = !DILocation(line: 638, column: 30, scope: !8721)
!8725 = !DILocation(line: 639, column: 22, scope: !8693)
!8726 = !DILocation(line: 639, column: 19, scope: !8693)
!8727 = !DILocation(line: 640, column: 28, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8693, file: !3, line: 640, column: 18)
!8729 = !DILocation(line: 640, column: 34, scope: !8728)
!8730 = !DILocation(line: 640, column: 18, scope: !8693)
!8731 = !DILocation(line: 640, column: 45, scope: !8728)
!8732 = !DILocation(line: 640, column: 40, scope: !8728)
!8733 = !DILocation(line: 641, column: 30, scope: !8693)
!8734 = !DILocation(line: 641, column: 40, scope: !8693)
!8735 = !DILocation(line: 641, column: 28, scope: !8693)
!8736 = !DILocation(line: 642, column: 18, scope: !8737)
!8737 = distinct !DILexicalBlock(scope: !8693, file: !3, line: 642, column: 18)
!8738 = !DILocation(line: 642, column: 35, scope: !8737)
!8739 = !DILocation(line: 642, column: 40, scope: !8737)
!8740 = !DILocation(line: 642, column: 49, scope: !8737)
!8741 = !DILocation(line: 642, column: 56, scope: !8737)
!8742 = !DILocation(line: 642, column: 53, scope: !8737)
!8743 = !DILocation(line: 642, column: 18, scope: !8693)
!8744 = !DILocation(line: 643, column: 30, scope: !8745)
!8745 = distinct !DILexicalBlock(scope: !8737, file: !3, line: 642, column: 75)
!8746 = !DILocation(line: 643, column: 27, scope: !8745)
!8747 = !DILocation(line: 644, column: 13, scope: !8745)
!8748 = !DILocation(line: 645, column: 24, scope: !8693)
!8749 = !DILocation(line: 645, column: 22, scope: !8693)
!8750 = !DILocation(line: 645, column: 19, scope: !8693)
!8751 = !DILocation(line: 646, column: 34, scope: !8693)
!8752 = !DILocation(line: 646, column: 41, scope: !8693)
!8753 = !DILocation(line: 646, column: 47, scope: !8693)
!8754 = !DILocation(line: 646, column: 20, scope: !8693)
!8755 = !DILocation(line: 646, column: 13, scope: !8693)
!8756 = !DILocation(line: 648, column: 5, scope: !8674)
!8757 = !DILocation(line: 649, column: 10, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 649, column: 10)
!8759 = !DILocation(line: 649, column: 10, scope: !8571)
!8760 = !DILocation(line: 649, column: 44, scope: !8758)
!8761 = !DILocation(line: 649, column: 22, scope: !8758)
!8762 = !DILocation(line: 650, column: 14, scope: !8571)
!8763 = !DILocation(line: 650, column: 11, scope: !8571)
!8764 = !DILocation(line: 651, column: 10, scope: !8765)
!8765 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 651, column: 10)
!8766 = !DILocation(line: 651, column: 18, scope: !8765)
!8767 = !DILocation(line: 651, column: 16, scope: !8765)
!8768 = !DILocation(line: 651, column: 10, scope: !8571)
!8769 = !DILocation(line: 652, column: 9, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8765, file: !3, line: 651, column: 35)
!8771 = !DILocation(line: 653, column: 15, scope: !8770)
!8772 = !DILocation(line: 654, column: 5, scope: !8770)
!8773 = !DILocation(line: 655, column: 22, scope: !8571)
!8774 = !DILocation(line: 655, column: 32, scope: !8571)
!8775 = !DILocation(line: 655, column: 20, scope: !8571)
!8776 = !DILocation(line: 656, column: 10, scope: !8777)
!8777 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 656, column: 10)
!8778 = !DILocation(line: 656, column: 27, scope: !8777)
!8779 = !DILocation(line: 656, column: 32, scope: !8777)
!8780 = !DILocation(line: 656, column: 41, scope: !8777)
!8781 = !DILocation(line: 656, column: 48, scope: !8777)
!8782 = !DILocation(line: 656, column: 45, scope: !8777)
!8783 = !DILocation(line: 656, column: 10, scope: !8571)
!8784 = !DILocation(line: 657, column: 22, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8777, file: !3, line: 656, column: 67)
!8786 = !DILocation(line: 657, column: 19, scope: !8785)
!8787 = !DILocation(line: 658, column: 5, scope: !8785)
!8788 = !DILocation(line: 659, column: 16, scope: !8571)
!8789 = !DILocation(line: 659, column: 14, scope: !8571)
!8790 = !DILocation(line: 659, column: 11, scope: !8571)
!8791 = !DILocation(line: 660, column: 10, scope: !8792)
!8792 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 660, column: 10)
!8793 = !DILocation(line: 660, column: 16, scope: !8792)
!8794 = !DILocation(line: 660, column: 10, scope: !8571)
!8795 = !DILocation(line: 660, column: 28, scope: !8792)
!8796 = !DILocation(line: 660, column: 23, scope: !8792)
!8797 = !DILocation(line: 661, column: 26, scope: !8571)
!8798 = !DILocation(line: 661, column: 33, scope: !8571)
!8799 = !DILocation(line: 661, column: 39, scope: !8571)
!8800 = !DILocation(line: 661, column: 12, scope: !8571)
!8801 = !DILocation(line: 661, column: 5, scope: !8571)
!8802 = !DILocation(line: 663, column: 29, scope: !8571)
!8803 = !DILocation(line: 663, column: 35, scope: !8571)
!8804 = !DILocation(line: 663, column: 15, scope: !8571)
!8805 = !DILocation(line: 664, column: 12, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 664, column: 10)
!8807 = !DILocation(line: 664, column: 10, scope: !8571)
!8808 = !DILocation(line: 665, column: 14, scope: !8809)
!8809 = distinct !DILexicalBlock(scope: !8810, file: !3, line: 665, column: 14)
!8810 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 664, column: 31)
!8811 = !DILocation(line: 665, column: 27, scope: !8809)
!8812 = !DILocation(line: 665, column: 14, scope: !8810)
!8813 = !DILocation(line: 666, column: 23, scope: !8814)
!8814 = distinct !DILexicalBlock(scope: !8809, file: !3, line: 665, column: 52)
!8815 = !DILocation(line: 667, column: 9, scope: !8814)
!8816 = !DILocation(line: 669, column: 18, scope: !8817)
!8817 = distinct !DILexicalBlock(scope: !8818, file: !3, line: 669, column: 18)
!8818 = distinct !DILexicalBlock(scope: !8809, file: !3, line: 668, column: 14)
!8819 = !DILocation(line: 669, column: 18, scope: !8818)
!8820 = !DILocation(line: 670, column: 31, scope: !8821)
!8821 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 669, column: 26)
!8822 = !DILocation(line: 670, column: 44, scope: !8821)
!8823 = !DILocation(line: 670, column: 66, scope: !8821)
!8824 = !DILocation(line: 670, column: 69, scope: !8821)
!8825 = !DILocation(line: 670, column: 27, scope: !8821)
!8826 = !DILocation(line: 671, column: 13, scope: !8821)
!8827 = !DILocation(line: 673, column: 31, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 672, column: 18)
!8829 = !DILocation(line: 673, column: 44, scope: !8828)
!8830 = !DILocation(line: 673, column: 64, scope: !8828)
!8831 = !DILocation(line: 673, column: 67, scope: !8828)
!8832 = !DILocation(line: 673, column: 27, scope: !8828)
!8833 = !DILocation(line: 676, column: 5, scope: !8810)
!8834 = !DILocation(line: 677, column: 31, scope: !8835)
!8835 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 677, column: 10)
!8836 = !DILocation(line: 677, column: 36, scope: !8835)
!8837 = !DILocation(line: 677, column: 17, scope: !8835)
!8838 = !DILocation(line: 677, column: 10, scope: !8571)
!8839 = !DILocation(line: 678, column: 28, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 678, column: 17)
!8841 = distinct !DILexicalBlock(scope: !8835, file: !3, line: 677, column: 44)
!8842 = !DILocation(line: 678, column: 26, scope: !8840)
!8843 = !DILocation(line: 679, column: 14, scope: !8840)
!8844 = !DILocation(line: 679, column: 24, scope: !8840)
!8845 = !DILocation(line: 679, column: 29, scope: !8840)
!8846 = !DILocation(line: 680, column: 19, scope: !8840)
!8847 = !DILocation(line: 680, column: 24, scope: !8840)
!8848 = !DILocation(line: 680, column: 30, scope: !8840)
!8849 = !DILocation(line: 681, column: 19, scope: !8840)
!8850 = !DILocation(line: 681, column: 22, scope: !8840)
!8851 = !DILocation(line: 678, column: 17, scope: !8841)
!8852 = !DILocation(line: 684, column: 23, scope: !8853)
!8853 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 683, column: 14)
!8854 = !DILocation(line: 684, column: 13, scope: !8853)
!8855 = !DILocation(line: 686, column: 13, scope: !8853)
!8856 = !DILocation(line: 687, column: 23, scope: !8857)
!8857 = distinct !DILexicalBlock(scope: !8853, file: !3, line: 687, column: 21)
!8858 = !DILocation(line: 687, column: 36, scope: !8857)
!8859 = !DILocation(line: 688, column: 18, scope: !8857)
!8860 = !DILocation(line: 688, column: 23, scope: !8857)
!8861 = !DILocation(line: 688, column: 29, scope: !8857)
!8862 = !DILocation(line: 688, column: 34, scope: !8857)
!8863 = !DILocation(line: 688, column: 47, scope: !8857)
!8864 = !DILocation(line: 689, column: 18, scope: !8857)
!8865 = !DILocation(line: 689, column: 25, scope: !8857)
!8866 = !DILocation(line: 689, column: 31, scope: !8857)
!8867 = !DILocation(line: 689, column: 36, scope: !8857)
!8868 = !DILocation(line: 689, column: 49, scope: !8857)
!8869 = !DILocation(line: 687, column: 21, scope: !8853)
!8870 = !DILocation(line: 691, column: 38, scope: !8871)
!8871 = distinct !DILexicalBlock(scope: !8857, file: !3, line: 690, column: 18)
!8872 = !DILocation(line: 691, column: 55, scope: !8871)
!8873 = !DILocation(line: 691, column: 53, scope: !8871)
!8874 = !DILocation(line: 691, column: 24, scope: !8871)
!8875 = !DILocation(line: 691, column: 17, scope: !8871)
!8876 = !DILocation(line: 693, column: 34, scope: !8853)
!8877 = !DILocation(line: 693, column: 20, scope: !8853)
!8878 = !DILocation(line: 693, column: 13, scope: !8853)
!8879 = !DILocation(line: 695, column: 14, scope: !8880)
!8880 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 695, column: 14)
!8881 = !DILocation(line: 695, column: 19, scope: !8880)
!8882 = !DILocation(line: 695, column: 14, scope: !8841)
!8883 = !DILocation(line: 697, column: 22, scope: !8884)
!8884 = distinct !DILexicalBlock(scope: !8880, file: !3, line: 695, column: 26)
!8885 = !DILocation(line: 697, column: 44, scope: !8884)
!8886 = !DILocation(line: 698, column: 17, scope: !8884)
!8887 = !DILocation(line: 698, column: 22, scope: !8884)
!8888 = !DILocation(line: 698, column: 27, scope: !8884)
!8889 = !DILocation(line: 699, column: 17, scope: !8884)
!8890 = !DILocation(line: 699, column: 22, scope: !8884)
!8891 = !DILocation(line: 700, column: 17, scope: !8884)
!8892 = !DILocation(line: 700, column: 22, scope: !8884)
!8893 = !DILocation(line: 700, column: 28, scope: !8884)
!8894 = !DILocation(line: 696, column: 20, scope: !8884)
!8895 = !DILocation(line: 701, column: 39, scope: !8884)
!8896 = !DILocation(line: 701, column: 46, scope: !8884)
!8897 = !DILocation(line: 701, column: 57, scope: !8884)
!8898 = !DILocation(line: 701, column: 55, scope: !8884)
!8899 = !DILocation(line: 701, column: 13, scope: !8884)
!8900 = !DILocation(line: 702, column: 18, scope: !8884)
!8901 = !DILocation(line: 703, column: 18, scope: !8902)
!8902 = distinct !DILexicalBlock(scope: !8884, file: !3, line: 703, column: 18)
!8903 = !DILocation(line: 703, column: 25, scope: !8902)
!8904 = !DILocation(line: 703, column: 28, scope: !8902)
!8905 = !DILocation(line: 703, column: 18, scope: !8884)
!8906 = !DILocation(line: 703, column: 36, scope: !8902)
!8907 = !DILocation(line: 704, column: 18, scope: !8908)
!8908 = distinct !DILexicalBlock(scope: !8884, file: !3, line: 704, column: 18)
!8909 = !DILocation(line: 704, column: 18, scope: !8884)
!8910 = !DILocation(line: 704, column: 48, scope: !8908)
!8911 = !DILocation(line: 704, column: 26, scope: !8908)
!8912 = !DILocation(line: 705, column: 18, scope: !8913)
!8913 = distinct !DILexicalBlock(scope: !8884, file: !3, line: 705, column: 18)
!8914 = !DILocation(line: 705, column: 18, scope: !8884)
!8915 = !DILocation(line: 706, column: 41, scope: !8916)
!8916 = distinct !DILexicalBlock(scope: !8913, file: !3, line: 705, column: 37)
!8917 = !DILocation(line: 706, column: 47, scope: !8916)
!8918 = !DILocation(line: 706, column: 27, scope: !8916)
!8919 = !DILocation(line: 707, column: 13, scope: !8916)
!8920 = !DILocation(line: 709, column: 22, scope: !8921)
!8921 = distinct !DILexicalBlock(scope: !8922, file: !3, line: 709, column: 22)
!8922 = distinct !DILexicalBlock(scope: !8913, file: !3, line: 708, column: 18)
!8923 = !DILocation(line: 709, column: 22, scope: !8922)
!8924 = !DILocation(line: 710, column: 35, scope: !8925)
!8925 = distinct !DILexicalBlock(scope: !8921, file: !3, line: 709, column: 30)
!8926 = !DILocation(line: 710, column: 48, scope: !8925)
!8927 = !DILocation(line: 710, column: 70, scope: !8925)
!8928 = !DILocation(line: 710, column: 73, scope: !8925)
!8929 = !DILocation(line: 710, column: 31, scope: !8925)
!8930 = !DILocation(line: 711, column: 17, scope: !8925)
!8931 = !DILocation(line: 713, column: 35, scope: !8932)
!8932 = distinct !DILexicalBlock(scope: !8921, file: !3, line: 712, column: 22)
!8933 = !DILocation(line: 713, column: 48, scope: !8932)
!8934 = !DILocation(line: 713, column: 68, scope: !8932)
!8935 = !DILocation(line: 713, column: 71, scope: !8932)
!8936 = !DILocation(line: 713, column: 31, scope: !8932)
!8937 = !DILocation(line: 716, column: 18, scope: !8938)
!8938 = distinct !DILexicalBlock(scope: !8884, file: !3, line: 716, column: 18)
!8939 = !DILocation(line: 716, column: 18, scope: !8884)
!8940 = !DILocation(line: 717, column: 17, scope: !8941)
!8941 = distinct !DILexicalBlock(scope: !8938, file: !3, line: 716, column: 30)
!8942 = !DILocation(line: 719, column: 38, scope: !8941)
!8943 = !DILocation(line: 719, column: 43, scope: !8941)
!8944 = !DILocation(line: 719, column: 49, scope: !8941)
!8945 = !DILocation(line: 719, column: 58, scope: !8941)
!8946 = !DILocation(line: 719, column: 56, scope: !8941)
!8947 = !DILocation(line: 719, column: 21, scope: !8941)
!8948 = !DILocation(line: 718, column: 23, scope: !8941)
!8949 = !DILocation(line: 720, column: 32, scope: !8950)
!8950 = distinct !DILexicalBlock(scope: !8941, file: !3, line: 720, column: 22)
!8951 = !DILocation(line: 720, column: 38, scope: !8950)
!8952 = !DILocation(line: 720, column: 22, scope: !8941)
!8953 = !DILocation(line: 720, column: 49, scope: !8950)
!8954 = !DILocation(line: 720, column: 44, scope: !8950)
!8955 = !DILocation(line: 721, column: 13, scope: !8941)
!8956 = !DILocation(line: 722, column: 34, scope: !8884)
!8957 = !DILocation(line: 722, column: 41, scope: !8884)
!8958 = !DILocation(line: 722, column: 47, scope: !8884)
!8959 = !DILocation(line: 722, column: 20, scope: !8884)
!8960 = !DILocation(line: 722, column: 13, scope: !8884)
!8961 = !DILocation(line: 724, column: 5, scope: !8841)
!8962 = !DILocation(line: 725, column: 10, scope: !8963)
!8963 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 725, column: 10)
!8964 = !DILocation(line: 725, column: 10, scope: !8571)
!8965 = !DILocation(line: 725, column: 40, scope: !8963)
!8966 = !DILocation(line: 725, column: 18, scope: !8963)
!8967 = !DILocation(line: 726, column: 10, scope: !8968)
!8968 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 726, column: 10)
!8969 = !DILocation(line: 726, column: 10, scope: !8571)
!8970 = !DILocation(line: 727, column: 9, scope: !8971)
!8971 = distinct !DILexicalBlock(scope: !8968, file: !3, line: 726, column: 22)
!8972 = !DILocation(line: 728, column: 14, scope: !8973)
!8973 = distinct !DILexicalBlock(scope: !8971, file: !3, line: 728, column: 14)
!8974 = !DILocation(line: 728, column: 20, scope: !8973)
!8975 = !DILocation(line: 728, column: 14, scope: !8971)
!8976 = !DILocation(line: 729, column: 13, scope: !8977)
!8977 = distinct !DILexicalBlock(scope: !8973, file: !3, line: 728, column: 27)
!8978 = !DILocation(line: 730, column: 19, scope: !8977)
!8979 = !DILocation(line: 731, column: 9, scope: !8977)
!8980 = !DILocation(line: 733, column: 39, scope: !8981)
!8981 = distinct !DILexicalBlock(scope: !8973, file: !3, line: 732, column: 14)
!8982 = !DILocation(line: 733, column: 44, scope: !8981)
!8983 = !DILocation(line: 733, column: 50, scope: !8981)
!8984 = !DILocation(line: 733, column: 59, scope: !8981)
!8985 = !DILocation(line: 733, column: 57, scope: !8981)
!8986 = !DILocation(line: 733, column: 22, scope: !8981)
!8987 = !DILocation(line: 733, column: 19, scope: !8981)
!8988 = !DILocation(line: 735, column: 5, scope: !8971)
!8989 = !DILocation(line: 737, column: 14, scope: !8990)
!8990 = distinct !DILexicalBlock(scope: !8991, file: !3, line: 737, column: 14)
!8991 = distinct !DILexicalBlock(scope: !8968, file: !3, line: 736, column: 10)
!8992 = !DILocation(line: 737, column: 20, scope: !8990)
!8993 = !DILocation(line: 737, column: 14, scope: !8991)
!8994 = !DILocation(line: 737, column: 32, scope: !8990)
!8995 = !DILocation(line: 737, column: 27, scope: !8990)
!8996 = !DILocation(line: 739, column: 26, scope: !8571)
!8997 = !DILocation(line: 739, column: 33, scope: !8571)
!8998 = !DILocation(line: 739, column: 39, scope: !8571)
!8999 = !DILocation(line: 739, column: 12, scope: !8571)
!9000 = !DILocation(line: 739, column: 5, scope: !8571)
!9001 = !DILocation(line: 741, column: 1, scope: !8571)
!9002 = distinct !DISubprogram(name: "floatx80_div", scope: !3, file: !3, line: 3938, type: !7973, isLocal: false, isDefinition: true, scopeLine: 3939, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9003 = !DILocalVariable(name: "a", arg: 1, scope: !9002, file: !3, line: 3938, type: !1151)
!9004 = !DILocation(line: 3938, column: 33, scope: !9002)
!9005 = !DILocalVariable(name: "b", arg: 2, scope: !9002, file: !3, line: 3938, type: !1151)
!9006 = !DILocation(line: 3938, column: 45, scope: !9002)
!9007 = !DILocalVariable(name: "aSign", scope: !9002, file: !3, line: 3940, type: !1241)
!9008 = !DILocation(line: 3940, column: 10, scope: !9002)
!9009 = !DILocalVariable(name: "bSign", scope: !9002, file: !3, line: 3940, type: !1241)
!9010 = !DILocation(line: 3940, column: 17, scope: !9002)
!9011 = !DILocalVariable(name: "zSign", scope: !9002, file: !3, line: 3940, type: !1241)
!9012 = !DILocation(line: 3940, column: 24, scope: !9002)
!9013 = !DILocalVariable(name: "aExp", scope: !9002, file: !3, line: 3941, type: !1319)
!9014 = !DILocation(line: 3941, column: 11, scope: !9002)
!9015 = !DILocalVariable(name: "bExp", scope: !9002, file: !3, line: 3941, type: !1319)
!9016 = !DILocation(line: 3941, column: 17, scope: !9002)
!9017 = !DILocalVariable(name: "zExp", scope: !9002, file: !3, line: 3941, type: !1319)
!9018 = !DILocation(line: 3941, column: 23, scope: !9002)
!9019 = !DILocalVariable(name: "aSig", scope: !9002, file: !3, line: 3942, type: !24)
!9020 = !DILocation(line: 3942, column: 12, scope: !9002)
!9021 = !DILocalVariable(name: "bSig", scope: !9002, file: !3, line: 3942, type: !24)
!9022 = !DILocation(line: 3942, column: 18, scope: !9002)
!9023 = !DILocalVariable(name: "zSig0", scope: !9002, file: !3, line: 3942, type: !24)
!9024 = !DILocation(line: 3942, column: 24, scope: !9002)
!9025 = !DILocalVariable(name: "zSig1", scope: !9002, file: !3, line: 3942, type: !24)
!9026 = !DILocation(line: 3942, column: 31, scope: !9002)
!9027 = !DILocalVariable(name: "rem0", scope: !9002, file: !3, line: 3943, type: !24)
!9028 = !DILocation(line: 3943, column: 12, scope: !9002)
!9029 = !DILocalVariable(name: "rem1", scope: !9002, file: !3, line: 3943, type: !24)
!9030 = !DILocation(line: 3943, column: 18, scope: !9002)
!9031 = !DILocalVariable(name: "rem2", scope: !9002, file: !3, line: 3943, type: !24)
!9032 = !DILocation(line: 3943, column: 24, scope: !9002)
!9033 = !DILocalVariable(name: "term0", scope: !9002, file: !3, line: 3943, type: !24)
!9034 = !DILocation(line: 3943, column: 30, scope: !9002)
!9035 = !DILocalVariable(name: "term1", scope: !9002, file: !3, line: 3943, type: !24)
!9036 = !DILocation(line: 3943, column: 37, scope: !9002)
!9037 = !DILocalVariable(name: "term2", scope: !9002, file: !3, line: 3943, type: !24)
!9038 = !DILocation(line: 3943, column: 44, scope: !9002)
!9039 = !DILocalVariable(name: "z", scope: !9002, file: !3, line: 3944, type: !1151)
!9040 = !DILocation(line: 3944, column: 14, scope: !9002)
!9041 = !DILocation(line: 3946, column: 12, scope: !9002)
!9042 = !DILocation(line: 3946, column: 10, scope: !9002)
!9043 = !DILocation(line: 3947, column: 12, scope: !9002)
!9044 = !DILocation(line: 3947, column: 10, scope: !9002)
!9045 = !DILocation(line: 3948, column: 13, scope: !9002)
!9046 = !DILocation(line: 3948, column: 11, scope: !9002)
!9047 = !DILocation(line: 3949, column: 12, scope: !9002)
!9048 = !DILocation(line: 3949, column: 10, scope: !9002)
!9049 = !DILocation(line: 3950, column: 12, scope: !9002)
!9050 = !DILocation(line: 3950, column: 10, scope: !9002)
!9051 = !DILocation(line: 3951, column: 13, scope: !9002)
!9052 = !DILocation(line: 3951, column: 11, scope: !9002)
!9053 = !DILocation(line: 3952, column: 13, scope: !9002)
!9054 = !DILocation(line: 3952, column: 21, scope: !9002)
!9055 = !DILocation(line: 3952, column: 19, scope: !9002)
!9056 = !DILocation(line: 3952, column: 11, scope: !9002)
!9057 = !DILocation(line: 3953, column: 10, scope: !9058)
!9058 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3953, column: 10)
!9059 = !DILocation(line: 3953, column: 15, scope: !9058)
!9060 = !DILocation(line: 3953, column: 10, scope: !9002)
!9061 = !DILocation(line: 3954, column: 25, scope: !9062)
!9062 = distinct !DILexicalBlock(scope: !9063, file: !3, line: 3954, column: 14)
!9063 = distinct !DILexicalBlock(scope: !9058, file: !3, line: 3953, column: 27)
!9064 = !DILocation(line: 3954, column: 29, scope: !9062)
!9065 = !DILocation(line: 3954, column: 14, scope: !9062)
!9066 = !DILocation(line: 3954, column: 14, scope: !9063)
!9067 = !DILocation(line: 3954, column: 44, scope: !9062)
!9068 = !DILocation(line: 3954, column: 37, scope: !9062)
!9069 = !DILocation(line: 3955, column: 14, scope: !9070)
!9070 = distinct !DILexicalBlock(scope: !9063, file: !3, line: 3955, column: 14)
!9071 = !DILocation(line: 3955, column: 19, scope: !9070)
!9072 = !DILocation(line: 3955, column: 14, scope: !9063)
!9073 = !DILocation(line: 3956, column: 29, scope: !9074)
!9074 = distinct !DILexicalBlock(scope: !9075, file: !3, line: 3956, column: 18)
!9075 = distinct !DILexicalBlock(scope: !9070, file: !3, line: 3955, column: 31)
!9076 = !DILocation(line: 3956, column: 33, scope: !9074)
!9077 = !DILocation(line: 3956, column: 18, scope: !9074)
!9078 = !DILocation(line: 3956, column: 18, scope: !9075)
!9079 = !DILocation(line: 3956, column: 48, scope: !9074)
!9080 = !DILocation(line: 3956, column: 41, scope: !9074)
!9081 = !DILocation(line: 3957, column: 13, scope: !9075)
!9082 = !DILocation(line: 3959, column: 30, scope: !9063)
!9083 = !DILocation(line: 3959, column: 16, scope: !9063)
!9084 = !DILocation(line: 3959, column: 9, scope: !9063)
!9085 = !DILocation(line: 3961, column: 10, scope: !9086)
!9086 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3961, column: 10)
!9087 = !DILocation(line: 3961, column: 15, scope: !9086)
!9088 = !DILocation(line: 3961, column: 10, scope: !9002)
!9089 = !DILocation(line: 3962, column: 25, scope: !9090)
!9090 = distinct !DILexicalBlock(scope: !9091, file: !3, line: 3962, column: 14)
!9091 = distinct !DILexicalBlock(scope: !9086, file: !3, line: 3961, column: 27)
!9092 = !DILocation(line: 3962, column: 29, scope: !9090)
!9093 = !DILocation(line: 3962, column: 14, scope: !9090)
!9094 = !DILocation(line: 3962, column: 14, scope: !9091)
!9095 = !DILocation(line: 3962, column: 44, scope: !9090)
!9096 = !DILocation(line: 3962, column: 37, scope: !9090)
!9097 = !DILocation(line: 3963, column: 30, scope: !9091)
!9098 = !DILocation(line: 3963, column: 16, scope: !9091)
!9099 = !DILocation(line: 3963, column: 9, scope: !9091)
!9100 = !DILocation(line: 3965, column: 10, scope: !9101)
!9101 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3965, column: 10)
!9102 = !DILocation(line: 3965, column: 15, scope: !9101)
!9103 = !DILocation(line: 3965, column: 10, scope: !9002)
!9104 = !DILocation(line: 3966, column: 14, scope: !9105)
!9105 = distinct !DILexicalBlock(scope: !9106, file: !3, line: 3966, column: 14)
!9106 = distinct !DILexicalBlock(scope: !9101, file: !3, line: 3965, column: 22)
!9107 = !DILocation(line: 3966, column: 19, scope: !9105)
!9108 = !DILocation(line: 3966, column: 14, scope: !9106)
!9109 = !DILocation(line: 3967, column: 20, scope: !9110)
!9110 = distinct !DILexicalBlock(scope: !9111, file: !3, line: 3967, column: 18)
!9111 = distinct !DILexicalBlock(scope: !9105, file: !3, line: 3966, column: 26)
!9112 = !DILocation(line: 3967, column: 27, scope: !9110)
!9113 = !DILocation(line: 3967, column: 25, scope: !9110)
!9114 = !DILocation(line: 3967, column: 34, scope: !9110)
!9115 = !DILocation(line: 3967, column: 18, scope: !9111)
!9116 = !DILocation(line: 3967, column: 41, scope: !9110)
!9117 = !DILocation(line: 3969, column: 17, scope: !9118)
!9118 = distinct !DILexicalBlock(scope: !9110, file: !3, line: 3967, column: 41)
!9119 = !DILocation(line: 3970, column: 19, scope: !9118)
!9120 = !DILocation(line: 3970, column: 23, scope: !9118)
!9121 = !DILocation(line: 3971, column: 19, scope: !9118)
!9122 = !DILocation(line: 3971, column: 24, scope: !9118)
!9123 = !DILocation(line: 3972, column: 24, scope: !9118)
!9124 = !DILocation(line: 3972, column: 17, scope: !9118)
!9125 = !DILocation(line: 3974, column: 13, scope: !9111)
!9126 = !DILocation(line: 3975, column: 34, scope: !9111)
!9127 = !DILocation(line: 3975, column: 20, scope: !9111)
!9128 = !DILocation(line: 3975, column: 13, scope: !9111)
!9129 = !DILocation(line: 3977, column: 37, scope: !9106)
!9130 = !DILocation(line: 3977, column: 9, scope: !9106)
!9131 = !DILocation(line: 3978, column: 5, scope: !9106)
!9132 = !DILocation(line: 3979, column: 10, scope: !9133)
!9133 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3979, column: 10)
!9134 = !DILocation(line: 3979, column: 15, scope: !9133)
!9135 = !DILocation(line: 3979, column: 10, scope: !9002)
!9136 = !DILocation(line: 3980, column: 14, scope: !9137)
!9137 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 3980, column: 14)
!9138 = distinct !DILexicalBlock(scope: !9133, file: !3, line: 3979, column: 22)
!9139 = !DILocation(line: 3980, column: 19, scope: !9137)
!9140 = !DILocation(line: 3980, column: 14, scope: !9138)
!9141 = !DILocation(line: 3980, column: 47, scope: !9137)
!9142 = !DILocation(line: 3980, column: 33, scope: !9137)
!9143 = !DILocation(line: 3980, column: 26, scope: !9137)
!9144 = !DILocation(line: 3981, column: 37, scope: !9138)
!9145 = !DILocation(line: 3981, column: 9, scope: !9138)
!9146 = !DILocation(line: 3982, column: 5, scope: !9138)
!9147 = !DILocation(line: 3983, column: 12, scope: !9002)
!9148 = !DILocation(line: 3983, column: 19, scope: !9002)
!9149 = !DILocation(line: 3983, column: 17, scope: !9002)
!9150 = !DILocation(line: 3983, column: 24, scope: !9002)
!9151 = !DILocation(line: 3983, column: 10, scope: !9002)
!9152 = !DILocation(line: 3984, column: 10, scope: !9002)
!9153 = !DILocation(line: 3985, column: 10, scope: !9154)
!9154 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3985, column: 10)
!9155 = !DILocation(line: 3985, column: 18, scope: !9154)
!9156 = !DILocation(line: 3985, column: 15, scope: !9154)
!9157 = !DILocation(line: 3985, column: 10, scope: !9002)
!9158 = !DILocation(line: 3986, column: 24, scope: !9159)
!9159 = distinct !DILexicalBlock(scope: !9154, file: !3, line: 3985, column: 25)
!9160 = !DILocation(line: 3986, column: 9, scope: !9159)
!9161 = !DILocation(line: 3987, column: 9, scope: !9159)
!9162 = !DILocation(line: 3988, column: 5, scope: !9159)
!9163 = !DILocation(line: 3989, column: 33, scope: !9002)
!9164 = !DILocation(line: 3989, column: 39, scope: !9002)
!9165 = !DILocation(line: 3989, column: 45, scope: !9002)
!9166 = !DILocation(line: 3989, column: 13, scope: !9002)
!9167 = !DILocation(line: 3989, column: 11, scope: !9002)
!9168 = !DILocation(line: 3990, column: 17, scope: !9002)
!9169 = !DILocation(line: 3990, column: 23, scope: !9002)
!9170 = !DILocation(line: 3990, column: 5, scope: !9002)
!9171 = !DILocation(line: 3991, column: 13, scope: !9002)
!9172 = !DILocation(line: 3991, column: 19, scope: !9002)
!9173 = !DILocation(line: 3991, column: 25, scope: !9002)
!9174 = !DILocation(line: 3991, column: 32, scope: !9002)
!9175 = !DILocation(line: 3991, column: 5, scope: !9002)
!9176 = !DILocation(line: 3992, column: 5, scope: !9002)
!9177 = !DILocation(line: 3992, column: 23, scope: !9002)
!9178 = !DILocation(line: 3992, column: 28, scope: !9002)
!9179 = !DILocation(line: 3993, column: 9, scope: !9180)
!9180 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3992, column: 34)
!9181 = !DILocation(line: 3994, column: 17, scope: !9180)
!9182 = !DILocation(line: 3994, column: 23, scope: !9180)
!9183 = !DILocation(line: 3994, column: 32, scope: !9180)
!9184 = !DILocation(line: 3994, column: 9, scope: !9180)
!9185 = distinct !{!9185, !9176, !9186}
!9186 = !DILocation(line: 3995, column: 5, scope: !9002)
!9187 = !DILocation(line: 3996, column: 33, scope: !9002)
!9188 = !DILocation(line: 3996, column: 42, scope: !9002)
!9189 = !DILocation(line: 3996, column: 13, scope: !9002)
!9190 = !DILocation(line: 3996, column: 11, scope: !9002)
!9191 = !DILocation(line: 3997, column: 21, scope: !9192)
!9192 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 3997, column: 10)
!9193 = !DILocation(line: 3997, column: 26, scope: !9192)
!9194 = !DILocation(line: 3997, column: 32, scope: !9192)
!9195 = !DILocation(line: 3997, column: 10, scope: !9002)
!9196 = !DILocation(line: 3998, column: 21, scope: !9197)
!9197 = distinct !DILexicalBlock(scope: !9192, file: !3, line: 3997, column: 39)
!9198 = !DILocation(line: 3998, column: 27, scope: !9197)
!9199 = !DILocation(line: 3998, column: 9, scope: !9197)
!9200 = !DILocation(line: 3999, column: 17, scope: !9197)
!9201 = !DILocation(line: 3999, column: 26, scope: !9197)
!9202 = !DILocation(line: 3999, column: 33, scope: !9197)
!9203 = !DILocation(line: 3999, column: 9, scope: !9197)
!9204 = !DILocation(line: 4000, column: 9, scope: !9197)
!9205 = !DILocation(line: 4000, column: 27, scope: !9197)
!9206 = !DILocation(line: 4000, column: 32, scope: !9197)
!9207 = !DILocation(line: 4001, column: 13, scope: !9208)
!9208 = distinct !DILexicalBlock(scope: !9197, file: !3, line: 4000, column: 38)
!9209 = !DILocation(line: 4002, column: 21, scope: !9208)
!9210 = !DILocation(line: 4002, column: 27, scope: !9208)
!9211 = !DILocation(line: 4002, column: 36, scope: !9208)
!9212 = !DILocation(line: 4002, column: 13, scope: !9208)
!9213 = distinct !{!9213, !9204, !9214}
!9214 = !DILocation(line: 4003, column: 9, scope: !9197)
!9215 = !DILocation(line: 4004, column: 22, scope: !9197)
!9216 = !DILocation(line: 4004, column: 29, scope: !9197)
!9217 = !DILocation(line: 4004, column: 27, scope: !9197)
!9218 = !DILocation(line: 4004, column: 36, scope: !9197)
!9219 = !DILocation(line: 4004, column: 18, scope: !9197)
!9220 = !DILocation(line: 4004, column: 15, scope: !9197)
!9221 = !DILocation(line: 4005, column: 5, scope: !9197)
!9222 = !DILocation(line: 4008, column: 13, scope: !9002)
!9223 = !DILocation(line: 4008, column: 42, scope: !9002)
!9224 = !DILocation(line: 4008, column: 49, scope: !9002)
!9225 = !DILocation(line: 4008, column: 55, scope: !9002)
!9226 = !DILocation(line: 4008, column: 62, scope: !9002)
!9227 = !DILocation(line: 4007, column: 9, scope: !9002)
!9228 = !DILocation(line: 4006, column: 5, scope: !9002)
!9229 = !DILocation(line: 4010, column: 1, scope: !9002)
!9230 = distinct !DISubprogram(name: "floatx80_rem", scope: !3, file: !3, line: 4018, type: !7973, isLocal: false, isDefinition: true, scopeLine: 4019, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9231 = !DILocalVariable(name: "a", arg: 1, scope: !9230, file: !3, line: 4018, type: !1151)
!9232 = !DILocation(line: 4018, column: 33, scope: !9230)
!9233 = !DILocalVariable(name: "b", arg: 2, scope: !9230, file: !3, line: 4018, type: !1151)
!9234 = !DILocation(line: 4018, column: 45, scope: !9230)
!9235 = !DILocalVariable(name: "aSign", scope: !9230, file: !3, line: 4020, type: !1241)
!9236 = !DILocation(line: 4020, column: 10, scope: !9230)
!9237 = !DILocalVariable(name: "bSign", scope: !9230, file: !3, line: 4020, type: !1241)
!9238 = !DILocation(line: 4020, column: 17, scope: !9230)
!9239 = !DILocalVariable(name: "zSign", scope: !9230, file: !3, line: 4020, type: !1241)
!9240 = !DILocation(line: 4020, column: 24, scope: !9230)
!9241 = !DILocalVariable(name: "aExp", scope: !9230, file: !3, line: 4021, type: !1319)
!9242 = !DILocation(line: 4021, column: 11, scope: !9230)
!9243 = !DILocalVariable(name: "bExp", scope: !9230, file: !3, line: 4021, type: !1319)
!9244 = !DILocation(line: 4021, column: 17, scope: !9230)
!9245 = !DILocalVariable(name: "expDiff", scope: !9230, file: !3, line: 4021, type: !1319)
!9246 = !DILocation(line: 4021, column: 23, scope: !9230)
!9247 = !DILocalVariable(name: "aSig0", scope: !9230, file: !3, line: 4022, type: !24)
!9248 = !DILocation(line: 4022, column: 12, scope: !9230)
!9249 = !DILocalVariable(name: "aSig1", scope: !9230, file: !3, line: 4022, type: !24)
!9250 = !DILocation(line: 4022, column: 19, scope: !9230)
!9251 = !DILocalVariable(name: "bSig", scope: !9230, file: !3, line: 4022, type: !24)
!9252 = !DILocation(line: 4022, column: 26, scope: !9230)
!9253 = !DILocalVariable(name: "q", scope: !9230, file: !3, line: 4023, type: !24)
!9254 = !DILocation(line: 4023, column: 12, scope: !9230)
!9255 = !DILocalVariable(name: "term0", scope: !9230, file: !3, line: 4023, type: !24)
!9256 = !DILocation(line: 4023, column: 15, scope: !9230)
!9257 = !DILocalVariable(name: "term1", scope: !9230, file: !3, line: 4023, type: !24)
!9258 = !DILocation(line: 4023, column: 22, scope: !9230)
!9259 = !DILocalVariable(name: "alternateASig0", scope: !9230, file: !3, line: 4023, type: !24)
!9260 = !DILocation(line: 4023, column: 29, scope: !9230)
!9261 = !DILocalVariable(name: "alternateASig1", scope: !9230, file: !3, line: 4023, type: !24)
!9262 = !DILocation(line: 4023, column: 45, scope: !9230)
!9263 = !DILocalVariable(name: "z", scope: !9230, file: !3, line: 4024, type: !1151)
!9264 = !DILocation(line: 4024, column: 14, scope: !9230)
!9265 = !DILocation(line: 4026, column: 13, scope: !9230)
!9266 = !DILocation(line: 4026, column: 11, scope: !9230)
!9267 = !DILocation(line: 4027, column: 12, scope: !9230)
!9268 = !DILocation(line: 4027, column: 10, scope: !9230)
!9269 = !DILocation(line: 4028, column: 13, scope: !9230)
!9270 = !DILocation(line: 4028, column: 11, scope: !9230)
!9271 = !DILocation(line: 4029, column: 12, scope: !9230)
!9272 = !DILocation(line: 4029, column: 10, scope: !9230)
!9273 = !DILocation(line: 4030, column: 12, scope: !9230)
!9274 = !DILocation(line: 4030, column: 10, scope: !9230)
!9275 = !DILocation(line: 4031, column: 13, scope: !9230)
!9276 = !DILocation(line: 4031, column: 11, scope: !9230)
!9277 = !DILocation(line: 4032, column: 10, scope: !9278)
!9278 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4032, column: 10)
!9279 = !DILocation(line: 4032, column: 15, scope: !9278)
!9280 = !DILocation(line: 4032, column: 10, scope: !9230)
!9281 = !DILocation(line: 4033, column: 28, scope: !9282)
!9282 = distinct !DILexicalBlock(scope: !9283, file: !3, line: 4033, column: 17)
!9283 = distinct !DILexicalBlock(scope: !9278, file: !3, line: 4032, column: 27)
!9284 = !DILocation(line: 4033, column: 33, scope: !9282)
!9285 = !DILocation(line: 4033, column: 17, scope: !9282)
!9286 = !DILocation(line: 4034, column: 14, scope: !9282)
!9287 = !DILocation(line: 4034, column: 21, scope: !9282)
!9288 = !DILocation(line: 4034, column: 26, scope: !9282)
!9289 = !DILocation(line: 4034, column: 38, scope: !9282)
!9290 = !DILocation(line: 4034, column: 52, scope: !9282)
!9291 = !DILocation(line: 4034, column: 56, scope: !9282)
!9292 = !DILocation(line: 4034, column: 41, scope: !9282)
!9293 = !DILocation(line: 4033, column: 17, scope: !9283)
!9294 = !DILocation(line: 4035, column: 20, scope: !9295)
!9295 = distinct !DILexicalBlock(scope: !9282, file: !3, line: 4034, column: 66)
!9296 = !DILocation(line: 4035, column: 13, scope: !9295)
!9297 = !DILocation(line: 4037, column: 9, scope: !9283)
!9298 = !DILocation(line: 4039, column: 10, scope: !9299)
!9299 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4039, column: 10)
!9300 = !DILocation(line: 4039, column: 15, scope: !9299)
!9301 = !DILocation(line: 4039, column: 10, scope: !9230)
!9302 = !DILocation(line: 4040, column: 25, scope: !9303)
!9303 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 4040, column: 14)
!9304 = distinct !DILexicalBlock(scope: !9299, file: !3, line: 4039, column: 27)
!9305 = !DILocation(line: 4040, column: 29, scope: !9303)
!9306 = !DILocation(line: 4040, column: 14, scope: !9303)
!9307 = !DILocation(line: 4040, column: 14, scope: !9304)
!9308 = !DILocation(line: 4040, column: 44, scope: !9303)
!9309 = !DILocation(line: 4040, column: 37, scope: !9303)
!9310 = !DILocation(line: 4041, column: 16, scope: !9304)
!9311 = !DILocation(line: 4041, column: 9, scope: !9304)
!9312 = !DILocation(line: 4043, column: 10, scope: !9313)
!9313 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4043, column: 10)
!9314 = !DILocation(line: 4043, column: 15, scope: !9313)
!9315 = !DILocation(line: 4043, column: 10, scope: !9230)
!9316 = !DILocation(line: 4044, column: 14, scope: !9317)
!9317 = distinct !DILexicalBlock(scope: !9318, file: !3, line: 4044, column: 14)
!9318 = distinct !DILexicalBlock(scope: !9313, file: !3, line: 4043, column: 22)
!9319 = !DILocation(line: 4044, column: 19, scope: !9317)
!9320 = !DILocation(line: 4044, column: 14, scope: !9318)
!9321 = !DILocation(line: 4044, column: 26, scope: !9317)
!9322 = !DILocation(line: 4046, column: 13, scope: !9323)
!9323 = distinct !DILexicalBlock(scope: !9317, file: !3, line: 4044, column: 26)
!9324 = !DILocation(line: 4047, column: 15, scope: !9323)
!9325 = !DILocation(line: 4047, column: 19, scope: !9323)
!9326 = !DILocation(line: 4048, column: 15, scope: !9323)
!9327 = !DILocation(line: 4048, column: 20, scope: !9323)
!9328 = !DILocation(line: 4049, column: 20, scope: !9323)
!9329 = !DILocation(line: 4049, column: 13, scope: !9323)
!9330 = !DILocation(line: 4051, column: 37, scope: !9318)
!9331 = !DILocation(line: 4051, column: 9, scope: !9318)
!9332 = !DILocation(line: 4052, column: 5, scope: !9318)
!9333 = !DILocation(line: 4053, column: 10, scope: !9334)
!9334 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4053, column: 10)
!9335 = !DILocation(line: 4053, column: 15, scope: !9334)
!9336 = !DILocation(line: 4053, column: 10, scope: !9230)
!9337 = !DILocation(line: 4054, column: 25, scope: !9338)
!9338 = distinct !DILexicalBlock(scope: !9339, file: !3, line: 4054, column: 14)
!9339 = distinct !DILexicalBlock(scope: !9334, file: !3, line: 4053, column: 22)
!9340 = !DILocation(line: 4054, column: 30, scope: !9338)
!9341 = !DILocation(line: 4054, column: 36, scope: !9338)
!9342 = !DILocation(line: 4054, column: 14, scope: !9339)
!9343 = !DILocation(line: 4054, column: 50, scope: !9338)
!9344 = !DILocation(line: 4054, column: 43, scope: !9338)
!9345 = !DILocation(line: 4055, column: 37, scope: !9339)
!9346 = !DILocation(line: 4055, column: 9, scope: !9339)
!9347 = !DILocation(line: 4056, column: 5, scope: !9339)
!9348 = !DILocation(line: 4057, column: 10, scope: !9230)
!9349 = !DILocation(line: 4058, column: 13, scope: !9230)
!9350 = !DILocation(line: 4058, column: 11, scope: !9230)
!9351 = !DILocation(line: 4059, column: 15, scope: !9230)
!9352 = !DILocation(line: 4059, column: 22, scope: !9230)
!9353 = !DILocation(line: 4059, column: 20, scope: !9230)
!9354 = !DILocation(line: 4059, column: 13, scope: !9230)
!9355 = !DILocation(line: 4060, column: 11, scope: !9230)
!9356 = !DILocation(line: 4061, column: 10, scope: !9357)
!9357 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4061, column: 10)
!9358 = !DILocation(line: 4061, column: 18, scope: !9357)
!9359 = !DILocation(line: 4061, column: 10, scope: !9230)
!9360 = !DILocation(line: 4062, column: 14, scope: !9361)
!9361 = distinct !DILexicalBlock(scope: !9362, file: !3, line: 4062, column: 14)
!9362 = distinct !DILexicalBlock(scope: !9357, file: !3, line: 4061, column: 24)
!9363 = !DILocation(line: 4062, column: 22, scope: !9361)
!9364 = !DILocation(line: 4062, column: 14, scope: !9362)
!9365 = !DILocation(line: 4062, column: 36, scope: !9361)
!9366 = !DILocation(line: 4062, column: 29, scope: !9361)
!9367 = !DILocation(line: 4063, column: 24, scope: !9362)
!9368 = !DILocation(line: 4063, column: 9, scope: !9362)
!9369 = !DILocation(line: 4064, column: 17, scope: !9362)
!9370 = !DILocation(line: 4065, column: 5, scope: !9362)
!9371 = !DILocation(line: 4066, column: 11, scope: !9230)
!9372 = !DILocation(line: 4066, column: 19, scope: !9230)
!9373 = !DILocation(line: 4066, column: 16, scope: !9230)
!9374 = !DILocation(line: 4066, column: 9, scope: !9230)
!9375 = !DILocation(line: 4066, column: 7, scope: !9230)
!9376 = !DILocation(line: 4067, column: 10, scope: !9377)
!9377 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4067, column: 10)
!9378 = !DILocation(line: 4067, column: 10, scope: !9230)
!9379 = !DILocation(line: 4067, column: 23, scope: !9377)
!9380 = !DILocation(line: 4067, column: 20, scope: !9377)
!9381 = !DILocation(line: 4067, column: 14, scope: !9377)
!9382 = !DILocation(line: 4068, column: 13, scope: !9230)
!9383 = !DILocation(line: 4069, column: 5, scope: !9230)
!9384 = !DILocation(line: 4069, column: 17, scope: !9230)
!9385 = !DILocation(line: 4069, column: 15, scope: !9230)
!9386 = !DILocation(line: 4070, column: 33, scope: !9387)
!9387 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4069, column: 27)
!9388 = !DILocation(line: 4070, column: 40, scope: !9387)
!9389 = !DILocation(line: 4070, column: 47, scope: !9387)
!9390 = !DILocation(line: 4070, column: 13, scope: !9387)
!9391 = !DILocation(line: 4070, column: 11, scope: !9387)
!9392 = !DILocation(line: 4071, column: 19, scope: !9387)
!9393 = !DILocation(line: 4071, column: 17, scope: !9387)
!9394 = !DILocation(line: 4071, column: 13, scope: !9387)
!9395 = !DILocation(line: 4071, column: 25, scope: !9387)
!9396 = !DILocation(line: 4071, column: 27, scope: !9387)
!9397 = !DILocation(line: 4071, column: 11, scope: !9387)
!9398 = !DILocation(line: 4072, column: 21, scope: !9387)
!9399 = !DILocation(line: 4072, column: 27, scope: !9387)
!9400 = !DILocation(line: 4072, column: 9, scope: !9387)
!9401 = !DILocation(line: 4073, column: 17, scope: !9387)
!9402 = !DILocation(line: 4073, column: 24, scope: !9387)
!9403 = !DILocation(line: 4073, column: 31, scope: !9387)
!9404 = !DILocation(line: 4073, column: 38, scope: !9387)
!9405 = !DILocation(line: 4073, column: 9, scope: !9387)
!9406 = !DILocation(line: 4074, column: 28, scope: !9387)
!9407 = !DILocation(line: 4074, column: 35, scope: !9387)
!9408 = !DILocation(line: 4074, column: 9, scope: !9387)
!9409 = !DILocation(line: 4075, column: 17, scope: !9387)
!9410 = distinct !{!9410, !9383, !9411}
!9411 = !DILocation(line: 4076, column: 5, scope: !9230)
!9412 = !DILocation(line: 4077, column: 13, scope: !9230)
!9413 = !DILocation(line: 4078, column: 14, scope: !9414)
!9414 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4078, column: 10)
!9415 = !DILocation(line: 4078, column: 12, scope: !9414)
!9416 = !DILocation(line: 4078, column: 10, scope: !9230)
!9417 = !DILocation(line: 4079, column: 33, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 4078, column: 24)
!9419 = !DILocation(line: 4079, column: 40, scope: !9418)
!9420 = !DILocation(line: 4079, column: 47, scope: !9418)
!9421 = !DILocation(line: 4079, column: 13, scope: !9418)
!9422 = !DILocation(line: 4079, column: 11, scope: !9418)
!9423 = !DILocation(line: 4080, column: 19, scope: !9418)
!9424 = !DILocation(line: 4080, column: 17, scope: !9418)
!9425 = !DILocation(line: 4080, column: 13, scope: !9418)
!9426 = !DILocation(line: 4080, column: 25, scope: !9418)
!9427 = !DILocation(line: 4080, column: 27, scope: !9418)
!9428 = !DILocation(line: 4080, column: 11, scope: !9418)
!9429 = !DILocation(line: 4081, column: 20, scope: !9418)
!9430 = !DILocation(line: 4081, column: 18, scope: !9418)
!9431 = !DILocation(line: 4081, column: 11, scope: !9418)
!9432 = !DILocation(line: 4082, column: 21, scope: !9418)
!9433 = !DILocation(line: 4082, column: 27, scope: !9418)
!9434 = !DILocation(line: 4082, column: 37, scope: !9418)
!9435 = !DILocation(line: 4082, column: 35, scope: !9418)
!9436 = !DILocation(line: 4082, column: 28, scope: !9418)
!9437 = !DILocation(line: 4082, column: 9, scope: !9418)
!9438 = !DILocation(line: 4083, column: 17, scope: !9418)
!9439 = !DILocation(line: 4083, column: 24, scope: !9418)
!9440 = !DILocation(line: 4083, column: 31, scope: !9418)
!9441 = !DILocation(line: 4083, column: 38, scope: !9418)
!9442 = !DILocation(line: 4083, column: 9, scope: !9418)
!9443 = !DILocation(line: 4084, column: 31, scope: !9418)
!9444 = !DILocation(line: 4084, column: 42, scope: !9418)
!9445 = !DILocation(line: 4084, column: 40, scope: !9418)
!9446 = !DILocation(line: 4084, column: 9, scope: !9418)
!9447 = !DILocation(line: 4085, column: 9, scope: !9418)
!9448 = !DILocation(line: 4085, column: 24, scope: !9418)
!9449 = !DILocation(line: 4085, column: 31, scope: !9418)
!9450 = !DILocation(line: 4085, column: 38, scope: !9418)
!9451 = !DILocation(line: 4085, column: 45, scope: !9418)
!9452 = !DILocation(line: 4085, column: 17, scope: !9418)
!9453 = !DILocation(line: 4086, column: 13, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9418, file: !3, line: 4085, column: 55)
!9455 = !DILocation(line: 4087, column: 21, scope: !9454)
!9456 = !DILocation(line: 4087, column: 28, scope: !9454)
!9457 = !DILocation(line: 4087, column: 35, scope: !9454)
!9458 = !DILocation(line: 4087, column: 42, scope: !9454)
!9459 = !DILocation(line: 4087, column: 13, scope: !9454)
!9460 = distinct !{!9460, !9447, !9461}
!9461 = !DILocation(line: 4088, column: 9, scope: !9418)
!9462 = !DILocation(line: 4089, column: 5, scope: !9418)
!9463 = !DILocation(line: 4091, column: 15, scope: !9464)
!9464 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 4090, column: 10)
!9465 = !DILocation(line: 4092, column: 17, scope: !9464)
!9466 = !DILocation(line: 4092, column: 15, scope: !9464)
!9467 = !DILocation(line: 4094, column: 13, scope: !9230)
!9468 = !DILocation(line: 4094, column: 20, scope: !9230)
!9469 = !DILocation(line: 4094, column: 27, scope: !9230)
!9470 = !DILocation(line: 4094, column: 34, scope: !9230)
!9471 = !DILocation(line: 4094, column: 5, scope: !9230)
!9472 = !DILocation(line: 4095, column: 20, scope: !9473)
!9473 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 4095, column: 13)
!9474 = !DILocation(line: 4095, column: 36, scope: !9473)
!9475 = !DILocation(line: 4095, column: 52, scope: !9473)
!9476 = !DILocation(line: 4095, column: 59, scope: !9473)
!9477 = !DILocation(line: 4095, column: 13, scope: !9473)
!9478 = !DILocation(line: 4096, column: 10, scope: !9473)
!9479 = !DILocation(line: 4096, column: 25, scope: !9473)
!9480 = !DILocation(line: 4096, column: 41, scope: !9473)
!9481 = !DILocation(line: 4096, column: 57, scope: !9473)
!9482 = !DILocation(line: 4096, column: 64, scope: !9473)
!9483 = !DILocation(line: 4096, column: 18, scope: !9473)
!9484 = !DILocation(line: 4097, column: 15, scope: !9473)
!9485 = !DILocation(line: 4097, column: 20, scope: !9473)
!9486 = !DILocation(line: 4097, column: 22, scope: !9473)
!9487 = !DILocation(line: 4095, column: 13, scope: !9230)
!9488 = !DILocation(line: 4099, column: 17, scope: !9489)
!9489 = distinct !DILexicalBlock(scope: !9473, file: !3, line: 4098, column: 10)
!9490 = !DILocation(line: 4099, column: 15, scope: !9489)
!9491 = !DILocation(line: 4100, column: 17, scope: !9489)
!9492 = !DILocation(line: 4100, column: 15, scope: !9489)
!9493 = !DILocation(line: 4101, column: 19, scope: !9489)
!9494 = !DILocation(line: 4101, column: 17, scope: !9489)
!9495 = !DILocation(line: 4101, column: 15, scope: !9489)
!9496 = !DILocation(line: 4102, column: 5, scope: !9489)
!9497 = !DILocation(line: 4105, column: 17, scope: !9230)
!9498 = !DILocation(line: 4105, column: 24, scope: !9230)
!9499 = !DILocation(line: 4105, column: 31, scope: !9230)
!9500 = !DILocation(line: 4105, column: 29, scope: !9230)
!9501 = !DILocation(line: 4105, column: 40, scope: !9230)
!9502 = !DILocation(line: 4105, column: 47, scope: !9230)
!9503 = !DILocation(line: 4104, column: 9, scope: !9230)
!9504 = !DILocation(line: 4103, column: 5, scope: !9230)
!9505 = !DILocation(line: 4107, column: 1, scope: !9230)
!9506 = distinct !DISubprogram(name: "normalizeRoundAndPackFloatx80", scope: !3, file: !3, line: 753, type: !8572, isLocal: true, isDefinition: true, scopeLine: 756, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9507 = !DILocalVariable(name: "roundingPrecision", arg: 1, scope: !9506, file: !3, line: 754, type: !38)
!9508 = !DILocation(line: 754, column: 11, scope: !9506)
!9509 = !DILocalVariable(name: "zSign", arg: 2, scope: !9506, file: !3, line: 754, type: !1241)
!9510 = !DILocation(line: 754, column: 35, scope: !9506)
!9511 = !DILocalVariable(name: "zExp", arg: 3, scope: !9506, file: !3, line: 754, type: !1319)
!9512 = !DILocation(line: 754, column: 48, scope: !9506)
!9513 = !DILocalVariable(name: "zSig0", arg: 4, scope: !9506, file: !3, line: 754, type: !24)
!9514 = !DILocation(line: 754, column: 61, scope: !9506)
!9515 = !DILocalVariable(name: "zSig1", arg: 5, scope: !9506, file: !3, line: 754, type: !24)
!9516 = !DILocation(line: 754, column: 75, scope: !9506)
!9517 = !DILocalVariable(name: "shiftCount", scope: !9506, file: !3, line: 757, type: !38)
!9518 = !DILocation(line: 757, column: 10, scope: !9506)
!9519 = !DILocation(line: 759, column: 10, scope: !9520)
!9520 = distinct !DILexicalBlock(scope: !9506, file: !3, line: 759, column: 10)
!9521 = !DILocation(line: 759, column: 16, scope: !9520)
!9522 = !DILocation(line: 759, column: 10, scope: !9506)
!9523 = !DILocation(line: 760, column: 17, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9520, file: !3, line: 759, column: 23)
!9525 = !DILocation(line: 760, column: 15, scope: !9524)
!9526 = !DILocation(line: 761, column: 15, scope: !9524)
!9527 = !DILocation(line: 762, column: 14, scope: !9524)
!9528 = !DILocation(line: 763, column: 5, scope: !9524)
!9529 = !DILocation(line: 764, column: 39, scope: !9506)
!9530 = !DILocation(line: 764, column: 18, scope: !9506)
!9531 = !DILocation(line: 764, column: 16, scope: !9506)
!9532 = !DILocation(line: 765, column: 24, scope: !9506)
!9533 = !DILocation(line: 765, column: 31, scope: !9506)
!9534 = !DILocation(line: 765, column: 38, scope: !9506)
!9535 = !DILocation(line: 765, column: 5, scope: !9506)
!9536 = !DILocation(line: 766, column: 13, scope: !9506)
!9537 = !DILocation(line: 766, column: 10, scope: !9506)
!9538 = !DILocation(line: 768, column: 31, scope: !9506)
!9539 = !DILocation(line: 768, column: 50, scope: !9506)
!9540 = !DILocation(line: 768, column: 57, scope: !9506)
!9541 = !DILocation(line: 768, column: 63, scope: !9506)
!9542 = !DILocation(line: 768, column: 70, scope: !9506)
!9543 = !DILocation(line: 768, column: 9, scope: !9506)
!9544 = !DILocation(line: 767, column: 5, scope: !9506)
!9545 = distinct !DISubprogram(name: "floatx80_sqrt", scope: !3, file: !3, line: 4115, type: !7818, isLocal: false, isDefinition: true, scopeLine: 4116, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9546 = !DILocalVariable(name: "a", arg: 1, scope: !9545, file: !3, line: 4115, type: !1151)
!9547 = !DILocation(line: 4115, column: 34, scope: !9545)
!9548 = !DILocalVariable(name: "aSign", scope: !9545, file: !3, line: 4117, type: !1241)
!9549 = !DILocation(line: 4117, column: 10, scope: !9545)
!9550 = !DILocalVariable(name: "aExp", scope: !9545, file: !3, line: 4118, type: !1319)
!9551 = !DILocation(line: 4118, column: 11, scope: !9545)
!9552 = !DILocalVariable(name: "zExp", scope: !9545, file: !3, line: 4118, type: !1319)
!9553 = !DILocation(line: 4118, column: 17, scope: !9545)
!9554 = !DILocalVariable(name: "aSig0", scope: !9545, file: !3, line: 4119, type: !24)
!9555 = !DILocation(line: 4119, column: 12, scope: !9545)
!9556 = !DILocalVariable(name: "aSig1", scope: !9545, file: !3, line: 4119, type: !24)
!9557 = !DILocation(line: 4119, column: 19, scope: !9545)
!9558 = !DILocalVariable(name: "zSig0", scope: !9545, file: !3, line: 4119, type: !24)
!9559 = !DILocation(line: 4119, column: 26, scope: !9545)
!9560 = !DILocalVariable(name: "zSig1", scope: !9545, file: !3, line: 4119, type: !24)
!9561 = !DILocation(line: 4119, column: 33, scope: !9545)
!9562 = !DILocalVariable(name: "doubleZSig0", scope: !9545, file: !3, line: 4119, type: !24)
!9563 = !DILocation(line: 4119, column: 40, scope: !9545)
!9564 = !DILocalVariable(name: "rem0", scope: !9545, file: !3, line: 4120, type: !24)
!9565 = !DILocation(line: 4120, column: 12, scope: !9545)
!9566 = !DILocalVariable(name: "rem1", scope: !9545, file: !3, line: 4120, type: !24)
!9567 = !DILocation(line: 4120, column: 18, scope: !9545)
!9568 = !DILocalVariable(name: "rem2", scope: !9545, file: !3, line: 4120, type: !24)
!9569 = !DILocation(line: 4120, column: 24, scope: !9545)
!9570 = !DILocalVariable(name: "rem3", scope: !9545, file: !3, line: 4120, type: !24)
!9571 = !DILocation(line: 4120, column: 30, scope: !9545)
!9572 = !DILocalVariable(name: "term0", scope: !9545, file: !3, line: 4120, type: !24)
!9573 = !DILocation(line: 4120, column: 36, scope: !9545)
!9574 = !DILocalVariable(name: "term1", scope: !9545, file: !3, line: 4120, type: !24)
!9575 = !DILocation(line: 4120, column: 43, scope: !9545)
!9576 = !DILocalVariable(name: "term2", scope: !9545, file: !3, line: 4120, type: !24)
!9577 = !DILocation(line: 4120, column: 50, scope: !9545)
!9578 = !DILocalVariable(name: "term3", scope: !9545, file: !3, line: 4120, type: !24)
!9579 = !DILocation(line: 4120, column: 57, scope: !9545)
!9580 = !DILocalVariable(name: "z", scope: !9545, file: !3, line: 4121, type: !1151)
!9581 = !DILocation(line: 4121, column: 14, scope: !9545)
!9582 = !DILocation(line: 4123, column: 13, scope: !9545)
!9583 = !DILocation(line: 4123, column: 11, scope: !9545)
!9584 = !DILocation(line: 4124, column: 12, scope: !9545)
!9585 = !DILocation(line: 4124, column: 10, scope: !9545)
!9586 = !DILocation(line: 4125, column: 13, scope: !9545)
!9587 = !DILocation(line: 4125, column: 11, scope: !9545)
!9588 = !DILocation(line: 4126, column: 10, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9545, file: !3, line: 4126, column: 10)
!9590 = !DILocation(line: 4126, column: 15, scope: !9589)
!9591 = !DILocation(line: 4126, column: 10, scope: !9545)
!9592 = !DILocation(line: 4127, column: 25, scope: !9593)
!9593 = distinct !DILexicalBlock(scope: !9594, file: !3, line: 4127, column: 14)
!9594 = distinct !DILexicalBlock(scope: !9589, file: !3, line: 4126, column: 27)
!9595 = !DILocation(line: 4127, column: 30, scope: !9593)
!9596 = !DILocation(line: 4127, column: 14, scope: !9593)
!9597 = !DILocation(line: 4127, column: 14, scope: !9594)
!9598 = !DILocation(line: 4127, column: 45, scope: !9593)
!9599 = !DILocation(line: 4127, column: 38, scope: !9593)
!9600 = !DILocation(line: 4128, column: 16, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9594, file: !3, line: 4128, column: 14)
!9602 = !DILocation(line: 4128, column: 14, scope: !9594)
!9603 = !DILocation(line: 4128, column: 31, scope: !9601)
!9604 = !DILocation(line: 4128, column: 24, scope: !9601)
!9605 = !DILocation(line: 4129, column: 9, scope: !9594)
!9606 = !DILocation(line: 4131, column: 10, scope: !9607)
!9607 = distinct !DILexicalBlock(scope: !9545, file: !3, line: 4131, column: 10)
!9608 = !DILocation(line: 4131, column: 10, scope: !9545)
!9609 = !DILocation(line: 4132, column: 16, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !9611, file: !3, line: 4132, column: 14)
!9611 = distinct !DILexicalBlock(scope: !9607, file: !3, line: 4131, column: 18)
!9612 = !DILocation(line: 4132, column: 23, scope: !9610)
!9613 = !DILocation(line: 4132, column: 21, scope: !9610)
!9614 = !DILocation(line: 4132, column: 31, scope: !9610)
!9615 = !DILocation(line: 4132, column: 14, scope: !9611)
!9616 = !DILocation(line: 4132, column: 45, scope: !9610)
!9617 = !DILocation(line: 4132, column: 38, scope: !9610)
!9618 = !DILocation(line: 4132, column: 34, scope: !9610)
!9619 = !DILocation(line: 4134, column: 9, scope: !9611)
!9620 = !DILocation(line: 4135, column: 11, scope: !9611)
!9621 = !DILocation(line: 4135, column: 15, scope: !9611)
!9622 = !DILocation(line: 4136, column: 11, scope: !9611)
!9623 = !DILocation(line: 4136, column: 16, scope: !9611)
!9624 = !DILocation(line: 4137, column: 16, scope: !9611)
!9625 = !DILocation(line: 4137, column: 9, scope: !9611)
!9626 = !DILocation(line: 4139, column: 10, scope: !9627)
!9627 = distinct !DILexicalBlock(scope: !9545, file: !3, line: 4139, column: 10)
!9628 = !DILocation(line: 4139, column: 15, scope: !9627)
!9629 = !DILocation(line: 4139, column: 10, scope: !9545)
!9630 = !DILocation(line: 4140, column: 14, scope: !9631)
!9631 = distinct !DILexicalBlock(scope: !9632, file: !3, line: 4140, column: 14)
!9632 = distinct !DILexicalBlock(scope: !9627, file: !3, line: 4139, column: 22)
!9633 = !DILocation(line: 4140, column: 20, scope: !9631)
!9634 = !DILocation(line: 4140, column: 14, scope: !9632)
!9635 = !DILocation(line: 4140, column: 34, scope: !9631)
!9636 = !DILocation(line: 4140, column: 27, scope: !9631)
!9637 = !DILocation(line: 4141, column: 37, scope: !9632)
!9638 = !DILocation(line: 4141, column: 9, scope: !9632)
!9639 = !DILocation(line: 4142, column: 5, scope: !9632)
!9640 = !DILocation(line: 4143, column: 16, scope: !9545)
!9641 = !DILocation(line: 4143, column: 21, scope: !9545)
!9642 = !DILocation(line: 4143, column: 31, scope: !9545)
!9643 = !DILocation(line: 4143, column: 37, scope: !9545)
!9644 = !DILocation(line: 4143, column: 10, scope: !9545)
!9645 = !DILocation(line: 4144, column: 29, scope: !9545)
!9646 = !DILocation(line: 4144, column: 35, scope: !9545)
!9647 = !DILocation(line: 4144, column: 40, scope: !9545)
!9648 = !DILocation(line: 4144, column: 13, scope: !9545)
!9649 = !DILocation(line: 4144, column: 11, scope: !9545)
!9650 = !DILocation(line: 4145, column: 20, scope: !9545)
!9651 = !DILocation(line: 4145, column: 36, scope: !9545)
!9652 = !DILocation(line: 4145, column: 41, scope: !9545)
!9653 = !DILocation(line: 4145, column: 32, scope: !9545)
!9654 = !DILocation(line: 4145, column: 5, scope: !9545)
!9655 = !DILocation(line: 4146, column: 33, scope: !9545)
!9656 = !DILocation(line: 4146, column: 40, scope: !9545)
!9657 = !DILocation(line: 4146, column: 47, scope: !9545)
!9658 = !DILocation(line: 4146, column: 52, scope: !9545)
!9659 = !DILocation(line: 4146, column: 13, scope: !9545)
!9660 = !DILocation(line: 4146, column: 63, scope: !9545)
!9661 = !DILocation(line: 4146, column: 68, scope: !9545)
!9662 = !DILocation(line: 4146, column: 59, scope: !9545)
!9663 = !DILocation(line: 4146, column: 11, scope: !9545)
!9664 = !DILocation(line: 4147, column: 19, scope: !9545)
!9665 = !DILocation(line: 4147, column: 24, scope: !9545)
!9666 = !DILocation(line: 4147, column: 17, scope: !9545)
!9667 = !DILocation(line: 4148, column: 17, scope: !9545)
!9668 = !DILocation(line: 4148, column: 24, scope: !9545)
!9669 = !DILocation(line: 4148, column: 5, scope: !9545)
!9670 = !DILocation(line: 4149, column: 13, scope: !9545)
!9671 = !DILocation(line: 4149, column: 20, scope: !9545)
!9672 = !DILocation(line: 4149, column: 27, scope: !9545)
!9673 = !DILocation(line: 4149, column: 34, scope: !9545)
!9674 = !DILocation(line: 4149, column: 5, scope: !9545)
!9675 = !DILocation(line: 4150, column: 5, scope: !9545)
!9676 = !DILocation(line: 4150, column: 23, scope: !9545)
!9677 = !DILocation(line: 4150, column: 28, scope: !9545)
!9678 = !DILocation(line: 4151, column: 9, scope: !9679)
!9679 = distinct !DILexicalBlock(scope: !9545, file: !3, line: 4150, column: 34)
!9680 = !DILocation(line: 4152, column: 21, scope: !9679)
!9681 = !DILocation(line: 4153, column: 17, scope: !9679)
!9682 = !DILocation(line: 4153, column: 23, scope: !9679)
!9683 = !DILocation(line: 4153, column: 29, scope: !9679)
!9684 = !DILocation(line: 4153, column: 34, scope: !9679)
!9685 = !DILocation(line: 4153, column: 40, scope: !9679)
!9686 = !DILocation(line: 4153, column: 52, scope: !9679)
!9687 = !DILocation(line: 4153, column: 9, scope: !9679)
!9688 = distinct !{!9688, !9675, !9689}
!9689 = !DILocation(line: 4154, column: 5, scope: !9545)
!9690 = !DILocation(line: 4155, column: 33, scope: !9545)
!9691 = !DILocation(line: 4155, column: 42, scope: !9545)
!9692 = !DILocation(line: 4155, column: 13, scope: !9545)
!9693 = !DILocation(line: 4155, column: 11, scope: !9545)
!9694 = !DILocation(line: 4156, column: 12, scope: !9695)
!9695 = distinct !DILexicalBlock(scope: !9545, file: !3, line: 4156, column: 10)
!9696 = !DILocation(line: 4156, column: 18, scope: !9695)
!9697 = !DILocation(line: 4156, column: 50, scope: !9695)
!9698 = !DILocation(line: 4156, column: 10, scope: !9545)
!9699 = !DILocation(line: 4157, column: 14, scope: !9700)
!9700 = distinct !DILexicalBlock(scope: !9701, file: !3, line: 4157, column: 14)
!9701 = distinct !DILexicalBlock(scope: !9695, file: !3, line: 4156, column: 57)
!9702 = !DILocation(line: 4157, column: 20, scope: !9700)
!9703 = !DILocation(line: 4157, column: 14, scope: !9701)
!9704 = !DILocation(line: 4157, column: 33, scope: !9700)
!9705 = !DILocation(line: 4157, column: 27, scope: !9700)
!9706 = !DILocation(line: 4158, column: 21, scope: !9701)
!9707 = !DILocation(line: 4158, column: 34, scope: !9701)
!9708 = !DILocation(line: 4158, column: 9, scope: !9701)
!9709 = !DILocation(line: 4159, column: 17, scope: !9701)
!9710 = !DILocation(line: 4159, column: 26, scope: !9701)
!9711 = !DILocation(line: 4159, column: 33, scope: !9701)
!9712 = !DILocation(line: 4159, column: 9, scope: !9701)
!9713 = !DILocation(line: 4160, column: 21, scope: !9701)
!9714 = !DILocation(line: 4160, column: 28, scope: !9701)
!9715 = !DILocation(line: 4160, column: 9, scope: !9701)
!9716 = !DILocation(line: 4161, column: 17, scope: !9701)
!9717 = !DILocation(line: 4161, column: 23, scope: !9701)
!9718 = !DILocation(line: 4161, column: 35, scope: !9701)
!9719 = !DILocation(line: 4161, column: 42, scope: !9701)
!9720 = !DILocation(line: 4161, column: 9, scope: !9701)
!9721 = !DILocation(line: 4162, column: 9, scope: !9701)
!9722 = !DILocation(line: 4162, column: 27, scope: !9701)
!9723 = !DILocation(line: 4162, column: 32, scope: !9701)
!9724 = !DILocation(line: 4163, column: 13, scope: !9725)
!9725 = distinct !DILexicalBlock(scope: !9701, file: !3, line: 4162, column: 38)
!9726 = !DILocation(line: 4164, column: 35, scope: !9725)
!9727 = !DILocation(line: 4164, column: 13, scope: !9725)
!9728 = !DILocation(line: 4165, column: 19, scope: !9725)
!9729 = !DILocation(line: 4166, column: 22, scope: !9725)
!9730 = !DILocation(line: 4166, column: 19, scope: !9725)
!9731 = !DILocation(line: 4167, column: 21, scope: !9725)
!9732 = !DILocation(line: 4167, column: 27, scope: !9725)
!9733 = !DILocation(line: 4167, column: 33, scope: !9725)
!9734 = !DILocation(line: 4167, column: 42, scope: !9725)
!9735 = !DILocation(line: 4167, column: 49, scope: !9725)
!9736 = !DILocation(line: 4167, column: 13, scope: !9725)
!9737 = distinct !{!9737, !9721, !9738}
!9738 = !DILocation(line: 4168, column: 9, scope: !9701)
!9739 = !DILocation(line: 4169, column: 22, scope: !9701)
!9740 = !DILocation(line: 4169, column: 29, scope: !9701)
!9741 = !DILocation(line: 4169, column: 27, scope: !9701)
!9742 = !DILocation(line: 4169, column: 36, scope: !9701)
!9743 = !DILocation(line: 4169, column: 34, scope: !9701)
!9744 = !DILocation(line: 4169, column: 43, scope: !9701)
!9745 = !DILocation(line: 4169, column: 18, scope: !9701)
!9746 = !DILocation(line: 4169, column: 15, scope: !9701)
!9747 = !DILocation(line: 4170, column: 5, scope: !9701)
!9748 = !DILocation(line: 4171, column: 27, scope: !9545)
!9749 = !DILocation(line: 4171, column: 5, scope: !9545)
!9750 = !DILocation(line: 4172, column: 14, scope: !9545)
!9751 = !DILocation(line: 4172, column: 11, scope: !9545)
!9752 = !DILocation(line: 4175, column: 13, scope: !9545)
!9753 = !DILocation(line: 4175, column: 45, scope: !9545)
!9754 = !DILocation(line: 4175, column: 51, scope: !9545)
!9755 = !DILocation(line: 4175, column: 58, scope: !9545)
!9756 = !DILocation(line: 4174, column: 9, scope: !9545)
!9757 = !DILocation(line: 4173, column: 5, scope: !9545)
!9758 = !DILocation(line: 4177, column: 1, scope: !9545)
!9759 = distinct !DISubprogram(name: "floatx80_eq", scope: !3, file: !3, line: 4186, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4187, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9760 = !DISubroutineType(types: !9761)
!9761 = !{!1022, !1151, !1151}
!9762 = !DILocalVariable(name: "a", arg: 1, scope: !9759, file: !3, line: 4186, type: !1151)
!9763 = !DILocation(line: 4186, column: 28, scope: !9759)
!9764 = !DILocalVariable(name: "b", arg: 2, scope: !9759, file: !3, line: 4186, type: !1151)
!9765 = !DILocation(line: 4186, column: 40, scope: !9759)
!9766 = !DILocation(line: 4189, column: 20, scope: !9767)
!9767 = distinct !DILexicalBlock(scope: !9759, file: !3, line: 4189, column: 13)
!9768 = !DILocation(line: 4189, column: 44, scope: !9767)
!9769 = !DILocation(line: 4190, column: 15, scope: !9767)
!9770 = !DILocation(line: 4190, column: 29, scope: !9767)
!9771 = !DILocation(line: 4190, column: 53, scope: !9767)
!9772 = !DILocation(line: 4190, column: 18, scope: !9767)
!9773 = !DILocation(line: 4191, column: 10, scope: !9767)
!9774 = !DILocation(line: 4191, column: 20, scope: !9767)
!9775 = !DILocation(line: 4191, column: 44, scope: !9767)
!9776 = !DILocation(line: 4192, column: 15, scope: !9767)
!9777 = !DILocation(line: 4192, column: 29, scope: !9767)
!9778 = !DILocation(line: 4192, column: 53, scope: !9767)
!9779 = !DILocation(line: 4192, column: 18, scope: !9767)
!9780 = !DILocation(line: 4189, column: 13, scope: !9759)
!9781 = !DILocation(line: 4194, column: 17, scope: !9782)
!9782 = distinct !DILexicalBlock(scope: !9783, file: !3, line: 4194, column: 17)
!9783 = distinct !DILexicalBlock(scope: !9767, file: !3, line: 4193, column: 10)
!9784 = !DILocation(line: 4195, column: 14, scope: !9782)
!9785 = !DILocation(line: 4195, column: 17, scope: !9782)
!9786 = !DILocation(line: 4194, column: 17, scope: !9783)
!9787 = !DILocation(line: 4196, column: 13, scope: !9788)
!9788 = distinct !DILexicalBlock(scope: !9782, file: !3, line: 4195, column: 40)
!9789 = !DILocation(line: 4197, column: 9, scope: !9788)
!9790 = !DILocation(line: 4198, column: 9, scope: !9783)
!9791 = !DILocation(line: 4201, column: 16, scope: !9759)
!9792 = !DILocation(line: 4201, column: 25, scope: !9759)
!9793 = !DILocation(line: 4201, column: 20, scope: !9759)
!9794 = !DILocation(line: 4202, column: 9, scope: !9759)
!9795 = !DILocation(line: 4202, column: 21, scope: !9759)
!9796 = !DILocation(line: 4202, column: 19, scope: !9759)
!9797 = !DILocation(line: 4202, column: 31, scope: !9759)
!9798 = !DILocation(line: 4202, column: 29, scope: !9759)
!9799 = !DILocation(line: 4202, column: 26, scope: !9759)
!9800 = !DILocation(line: 4203, column: 14, scope: !9759)
!9801 = !DILocation(line: 4203, column: 26, scope: !9759)
!9802 = !DILocation(line: 4203, column: 30, scope: !9759)
!9803 = !DILocation(line: 4204, column: 19, scope: !9759)
!9804 = !DILocation(line: 4204, column: 39, scope: !9759)
!9805 = !DILocation(line: 4204, column: 37, scope: !9759)
!9806 = !DILocation(line: 4204, column: 48, scope: !9759)
!9807 = !DILocation(line: 4204, column: 46, scope: !9759)
!9808 = !DILocation(line: 4204, column: 44, scope: !9759)
!9809 = !DILocation(line: 4204, column: 54, scope: !9759)
!9810 = !DILocation(line: 4204, column: 24, scope: !9759)
!9811 = !DILocation(line: 4204, column: 60, scope: !9759)
!9812 = !DILocation(line: 4200, column: 5, scope: !9759)
!9813 = !DILocation(line: 4207, column: 1, scope: !9759)
!9814 = distinct !DISubprogram(name: "floatx80_le", scope: !3, file: !3, line: 4216, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4217, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9815 = !DILocalVariable(name: "a", arg: 1, scope: !9814, file: !3, line: 4216, type: !1151)
!9816 = !DILocation(line: 4216, column: 28, scope: !9814)
!9817 = !DILocalVariable(name: "b", arg: 2, scope: !9814, file: !3, line: 4216, type: !1151)
!9818 = !DILocation(line: 4216, column: 40, scope: !9814)
!9819 = !DILocalVariable(name: "aSign", scope: !9814, file: !3, line: 4218, type: !1241)
!9820 = !DILocation(line: 4218, column: 10, scope: !9814)
!9821 = !DILocalVariable(name: "bSign", scope: !9814, file: !3, line: 4218, type: !1241)
!9822 = !DILocation(line: 4218, column: 17, scope: !9814)
!9823 = !DILocation(line: 4220, column: 20, scope: !9824)
!9824 = distinct !DILexicalBlock(scope: !9814, file: !3, line: 4220, column: 13)
!9825 = !DILocation(line: 4220, column: 44, scope: !9824)
!9826 = !DILocation(line: 4221, column: 15, scope: !9824)
!9827 = !DILocation(line: 4221, column: 29, scope: !9824)
!9828 = !DILocation(line: 4221, column: 53, scope: !9824)
!9829 = !DILocation(line: 4221, column: 18, scope: !9824)
!9830 = !DILocation(line: 4222, column: 10, scope: !9824)
!9831 = !DILocation(line: 4222, column: 20, scope: !9824)
!9832 = !DILocation(line: 4222, column: 44, scope: !9824)
!9833 = !DILocation(line: 4223, column: 15, scope: !9824)
!9834 = !DILocation(line: 4223, column: 29, scope: !9824)
!9835 = !DILocation(line: 4223, column: 53, scope: !9824)
!9836 = !DILocation(line: 4223, column: 18, scope: !9824)
!9837 = !DILocation(line: 4220, column: 13, scope: !9814)
!9838 = !DILocation(line: 4225, column: 9, scope: !9839)
!9839 = distinct !DILexicalBlock(scope: !9824, file: !3, line: 4224, column: 10)
!9840 = !DILocation(line: 4226, column: 9, scope: !9839)
!9841 = !DILocation(line: 4228, column: 13, scope: !9814)
!9842 = !DILocation(line: 4228, column: 11, scope: !9814)
!9843 = !DILocation(line: 4229, column: 13, scope: !9814)
!9844 = !DILocation(line: 4229, column: 11, scope: !9814)
!9845 = !DILocation(line: 4230, column: 10, scope: !9846)
!9846 = distinct !DILexicalBlock(scope: !9814, file: !3, line: 4230, column: 10)
!9847 = !DILocation(line: 4230, column: 19, scope: !9846)
!9848 = !DILocation(line: 4230, column: 16, scope: !9846)
!9849 = !DILocation(line: 4230, column: 10, scope: !9814)
!9850 = !DILocation(line: 4232, column: 16, scope: !9851)
!9851 = distinct !DILexicalBlock(scope: !9846, file: !3, line: 4230, column: 27)
!9852 = !DILocation(line: 4233, column: 13, scope: !9851)
!9853 = !DILocation(line: 4233, column: 40, scope: !9851)
!9854 = !DILocation(line: 4233, column: 38, scope: !9851)
!9855 = !DILocation(line: 4233, column: 49, scope: !9851)
!9856 = !DILocation(line: 4233, column: 47, scope: !9851)
!9857 = !DILocation(line: 4233, column: 45, scope: !9851)
!9858 = !DILocation(line: 4233, column: 55, scope: !9851)
!9859 = !DILocation(line: 4233, column: 25, scope: !9851)
!9860 = !DILocation(line: 4233, column: 23, scope: !9851)
!9861 = !DILocation(line: 4233, column: 67, scope: !9851)
!9862 = !DILocation(line: 4233, column: 63, scope: !9851)
!9863 = !DILocation(line: 4233, column: 75, scope: !9851)
!9864 = !DILocation(line: 4233, column: 71, scope: !9851)
!9865 = !DILocation(line: 4234, column: 18, scope: !9851)
!9866 = !DILocation(line: 4231, column: 9, scope: !9851)
!9867 = !DILocation(line: 4237, column: 11, scope: !9814)
!9868 = !DILocation(line: 4237, column: 28, scope: !9814)
!9869 = !DILocation(line: 4237, column: 26, scope: !9814)
!9870 = !DILocation(line: 4237, column: 36, scope: !9814)
!9871 = !DILocation(line: 4237, column: 43, scope: !9814)
!9872 = !DILocation(line: 4237, column: 41, scope: !9814)
!9873 = !DILocation(line: 4237, column: 51, scope: !9814)
!9874 = !DILocation(line: 4237, column: 19, scope: !9814)
!9875 = !DILocation(line: 4238, column: 20, scope: !9814)
!9876 = !DILocation(line: 4238, column: 18, scope: !9814)
!9877 = !DILocation(line: 4238, column: 28, scope: !9814)
!9878 = !DILocation(line: 4238, column: 35, scope: !9814)
!9879 = !DILocation(line: 4238, column: 33, scope: !9814)
!9880 = !DILocation(line: 4238, column: 43, scope: !9814)
!9881 = !DILocation(line: 4238, column: 11, scope: !9814)
!9882 = !DILocation(line: 4236, column: 5, scope: !9814)
!9883 = !DILocation(line: 4240, column: 1, scope: !9814)
!9884 = distinct !DISubprogram(name: "floatx80_lt", scope: !3, file: !3, line: 4249, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4250, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9885 = !DILocalVariable(name: "a", arg: 1, scope: !9884, file: !3, line: 4249, type: !1151)
!9886 = !DILocation(line: 4249, column: 28, scope: !9884)
!9887 = !DILocalVariable(name: "b", arg: 2, scope: !9884, file: !3, line: 4249, type: !1151)
!9888 = !DILocation(line: 4249, column: 40, scope: !9884)
!9889 = !DILocalVariable(name: "aSign", scope: !9884, file: !3, line: 4251, type: !1241)
!9890 = !DILocation(line: 4251, column: 10, scope: !9884)
!9891 = !DILocalVariable(name: "bSign", scope: !9884, file: !3, line: 4251, type: !1241)
!9892 = !DILocation(line: 4251, column: 17, scope: !9884)
!9893 = !DILocation(line: 4253, column: 20, scope: !9894)
!9894 = distinct !DILexicalBlock(scope: !9884, file: !3, line: 4253, column: 13)
!9895 = !DILocation(line: 4253, column: 44, scope: !9894)
!9896 = !DILocation(line: 4254, column: 15, scope: !9894)
!9897 = !DILocation(line: 4254, column: 29, scope: !9894)
!9898 = !DILocation(line: 4254, column: 53, scope: !9894)
!9899 = !DILocation(line: 4254, column: 18, scope: !9894)
!9900 = !DILocation(line: 4255, column: 10, scope: !9894)
!9901 = !DILocation(line: 4255, column: 20, scope: !9894)
!9902 = !DILocation(line: 4255, column: 44, scope: !9894)
!9903 = !DILocation(line: 4256, column: 15, scope: !9894)
!9904 = !DILocation(line: 4256, column: 29, scope: !9894)
!9905 = !DILocation(line: 4256, column: 53, scope: !9894)
!9906 = !DILocation(line: 4256, column: 18, scope: !9894)
!9907 = !DILocation(line: 4253, column: 13, scope: !9884)
!9908 = !DILocation(line: 4258, column: 9, scope: !9909)
!9909 = distinct !DILexicalBlock(scope: !9894, file: !3, line: 4257, column: 10)
!9910 = !DILocation(line: 4259, column: 9, scope: !9909)
!9911 = !DILocation(line: 4261, column: 13, scope: !9884)
!9912 = !DILocation(line: 4261, column: 11, scope: !9884)
!9913 = !DILocation(line: 4262, column: 13, scope: !9884)
!9914 = !DILocation(line: 4262, column: 11, scope: !9884)
!9915 = !DILocation(line: 4263, column: 10, scope: !9916)
!9916 = distinct !DILexicalBlock(scope: !9884, file: !3, line: 4263, column: 10)
!9917 = !DILocation(line: 4263, column: 19, scope: !9916)
!9918 = !DILocation(line: 4263, column: 16, scope: !9916)
!9919 = !DILocation(line: 4263, column: 10, scope: !9884)
!9920 = !DILocation(line: 4265, column: 16, scope: !9921)
!9921 = distinct !DILexicalBlock(scope: !9916, file: !3, line: 4263, column: 27)
!9922 = !DILocation(line: 4266, column: 13, scope: !9921)
!9923 = !DILocation(line: 4266, column: 40, scope: !9921)
!9924 = !DILocation(line: 4266, column: 38, scope: !9921)
!9925 = !DILocation(line: 4266, column: 49, scope: !9921)
!9926 = !DILocation(line: 4266, column: 47, scope: !9921)
!9927 = !DILocation(line: 4266, column: 45, scope: !9921)
!9928 = !DILocation(line: 4266, column: 55, scope: !9921)
!9929 = !DILocation(line: 4266, column: 25, scope: !9921)
!9930 = !DILocation(line: 4266, column: 23, scope: !9921)
!9931 = !DILocation(line: 4266, column: 67, scope: !9921)
!9932 = !DILocation(line: 4266, column: 63, scope: !9921)
!9933 = !DILocation(line: 4266, column: 75, scope: !9921)
!9934 = !DILocation(line: 4266, column: 71, scope: !9921)
!9935 = !DILocation(line: 4267, column: 18, scope: !9921)
!9936 = !DILocation(line: 4264, column: 9, scope: !9921)
!9937 = !DILocation(line: 4270, column: 11, scope: !9884)
!9938 = !DILocation(line: 4270, column: 28, scope: !9884)
!9939 = !DILocation(line: 4270, column: 26, scope: !9884)
!9940 = !DILocation(line: 4270, column: 36, scope: !9884)
!9941 = !DILocation(line: 4270, column: 43, scope: !9884)
!9942 = !DILocation(line: 4270, column: 41, scope: !9884)
!9943 = !DILocation(line: 4270, column: 51, scope: !9884)
!9944 = !DILocation(line: 4270, column: 19, scope: !9884)
!9945 = !DILocation(line: 4271, column: 20, scope: !9884)
!9946 = !DILocation(line: 4271, column: 18, scope: !9884)
!9947 = !DILocation(line: 4271, column: 28, scope: !9884)
!9948 = !DILocation(line: 4271, column: 35, scope: !9884)
!9949 = !DILocation(line: 4271, column: 33, scope: !9884)
!9950 = !DILocation(line: 4271, column: 43, scope: !9884)
!9951 = !DILocation(line: 4271, column: 11, scope: !9884)
!9952 = !DILocation(line: 4269, column: 5, scope: !9884)
!9953 = !DILocation(line: 4273, column: 1, scope: !9884)
!9954 = distinct !DISubprogram(name: "floatx80_ge", scope: !3, file: !3, line: 4274, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4275, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9955 = !DILocalVariable(name: "a", arg: 1, scope: !9954, file: !3, line: 4274, type: !1151)
!9956 = !DILocation(line: 4274, column: 28, scope: !9954)
!9957 = !DILocalVariable(name: "b", arg: 2, scope: !9954, file: !3, line: 4274, type: !1151)
!9958 = !DILocation(line: 4274, column: 40, scope: !9954)
!9959 = !DILocation(line: 4276, column: 13, scope: !9954)
!9960 = !DILocation(line: 4276, column: 12, scope: !9954)
!9961 = !DILocation(line: 4276, column: 5, scope: !9954)
!9962 = distinct !DISubprogram(name: "floatx80_gt", scope: !3, file: !3, line: 4279, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4280, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9963 = !DILocalVariable(name: "a", arg: 1, scope: !9962, file: !3, line: 4279, type: !1151)
!9964 = !DILocation(line: 4279, column: 28, scope: !9962)
!9965 = !DILocalVariable(name: "b", arg: 2, scope: !9962, file: !3, line: 4279, type: !1151)
!9966 = !DILocation(line: 4279, column: 40, scope: !9962)
!9967 = !DILocation(line: 4281, column: 10, scope: !9962)
!9968 = !DILocation(line: 4281, column: 9, scope: !9962)
!9969 = !DILocation(line: 4281, column: 2, scope: !9962)
!9970 = distinct !DISubprogram(name: "floatx80_ge_quiet", scope: !3, file: !3, line: 4284, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4285, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9971 = !DILocalVariable(name: "a", arg: 1, scope: !9970, file: !3, line: 4284, type: !1151)
!9972 = !DILocation(line: 4284, column: 34, scope: !9970)
!9973 = !DILocalVariable(name: "b", arg: 2, scope: !9970, file: !3, line: 4284, type: !1151)
!9974 = !DILocation(line: 4284, column: 46, scope: !9970)
!9975 = !DILocation(line: 4286, column: 9, scope: !9970)
!9976 = !DILocation(line: 4286, column: 32, scope: !9970)
!9977 = !DILocation(line: 4286, column: 34, scope: !9970)
!9978 = !DILocation(line: 4286, column: 2, scope: !9970)
!9979 = distinct !DISubprogram(name: "floatx80_uno_quiet", scope: !3, file: !3, line: 4305, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4306, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9980 = !DILocalVariable(name: "a", arg: 1, scope: !9979, file: !3, line: 4305, type: !1151)
!9981 = !DILocation(line: 4305, column: 35, scope: !9979)
!9982 = !DILocalVariable(name: "b", arg: 2, scope: !9979, file: !3, line: 4305, type: !1151)
!9983 = !DILocation(line: 4305, column: 47, scope: !9979)
!9984 = !DILocation(line: 4307, column: 9, scope: !9979)
!9985 = !DILocation(line: 4307, column: 27, scope: !9979)
!9986 = !DILocation(line: 4307, column: 29, scope: !9979)
!9987 = !DILocation(line: 4307, column: 2, scope: !9979)
!9988 = distinct !DISubprogram(name: "floatx80_gt_quiet", scope: !3, file: !3, line: 4288, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4289, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9989 = !DILocalVariable(name: "a", arg: 1, scope: !9988, file: !3, line: 4288, type: !1151)
!9990 = !DILocation(line: 4288, column: 34, scope: !9988)
!9991 = !DILocalVariable(name: "b", arg: 2, scope: !9988, file: !3, line: 4288, type: !1151)
!9992 = !DILocation(line: 4288, column: 46, scope: !9988)
!9993 = !DILocation(line: 4290, column: 9, scope: !9988)
!9994 = !DILocation(line: 4290, column: 32, scope: !9988)
!9995 = !DILocation(line: 4290, column: 34, scope: !9988)
!9996 = !DILocation(line: 4290, column: 2, scope: !9988)
!9997 = distinct !DISubprogram(name: "floatx80_ne", scope: !3, file: !3, line: 4292, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4293, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!9998 = !DILocalVariable(name: "a", arg: 1, scope: !9997, file: !3, line: 4292, type: !1151)
!9999 = !DILocation(line: 4292, column: 28, scope: !9997)
!10000 = !DILocalVariable(name: "b", arg: 2, scope: !9997, file: !3, line: 4292, type: !1151)
!10001 = !DILocation(line: 4292, column: 40, scope: !9997)
!10002 = !DILocation(line: 4294, column: 10, scope: !9997)
!10003 = !DILocation(line: 4294, column: 9, scope: !9997)
!10004 = !DILocation(line: 4294, column: 2, scope: !9997)
!10005 = distinct !DISubprogram(name: "floatx80_one_quiet", scope: !3, file: !3, line: 4297, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4298, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10006 = !DILocalVariable(name: "a", arg: 1, scope: !10005, file: !3, line: 4297, type: !1151)
!10007 = !DILocation(line: 4297, column: 35, scope: !10005)
!10008 = !DILocalVariable(name: "b", arg: 2, scope: !10005, file: !3, line: 4297, type: !1151)
!10009 = !DILocation(line: 4297, column: 47, scope: !10005)
!10010 = !DILocation(line: 4299, column: 9, scope: !10005)
!10011 = !DILocation(line: 4299, column: 32, scope: !10005)
!10012 = !DILocation(line: 4299, column: 34, scope: !10005)
!10013 = !DILocation(line: 4299, column: 2, scope: !10005)
!10014 = distinct !DISubprogram(name: "floatx80_ord_quiet", scope: !3, file: !3, line: 4301, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4302, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10015 = !DILocalVariable(name: "a", arg: 1, scope: !10014, file: !3, line: 4301, type: !1151)
!10016 = !DILocation(line: 4301, column: 35, scope: !10014)
!10017 = !DILocalVariable(name: "b", arg: 2, scope: !10014, file: !3, line: 4301, type: !1151)
!10018 = !DILocation(line: 4301, column: 47, scope: !10014)
!10019 = !DILocation(line: 4303, column: 10, scope: !10014)
!10020 = !DILocation(line: 4303, column: 28, scope: !10014)
!10021 = !DILocation(line: 4303, column: 31, scope: !10014)
!10022 = !DILocation(line: 4303, column: 30, scope: !10014)
!10023 = !DILocation(line: 4303, column: 2, scope: !10014)
!10024 = distinct !DISubprogram(name: "floatx80_eq_signaling", scope: !3, file: !3, line: 4316, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4317, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10025 = !DILocalVariable(name: "a", arg: 1, scope: !10024, file: !3, line: 4316, type: !1151)
!10026 = !DILocation(line: 4316, column: 38, scope: !10024)
!10027 = !DILocalVariable(name: "b", arg: 2, scope: !10024, file: !3, line: 4316, type: !1151)
!10028 = !DILocation(line: 4316, column: 50, scope: !10024)
!10029 = !DILocation(line: 4319, column: 20, scope: !10030)
!10030 = distinct !DILexicalBlock(scope: !10024, file: !3, line: 4319, column: 13)
!10031 = !DILocation(line: 4319, column: 44, scope: !10030)
!10032 = !DILocation(line: 4320, column: 15, scope: !10030)
!10033 = !DILocation(line: 4320, column: 29, scope: !10030)
!10034 = !DILocation(line: 4320, column: 53, scope: !10030)
!10035 = !DILocation(line: 4320, column: 18, scope: !10030)
!10036 = !DILocation(line: 4321, column: 10, scope: !10030)
!10037 = !DILocation(line: 4321, column: 20, scope: !10030)
!10038 = !DILocation(line: 4321, column: 44, scope: !10030)
!10039 = !DILocation(line: 4322, column: 15, scope: !10030)
!10040 = !DILocation(line: 4322, column: 29, scope: !10030)
!10041 = !DILocation(line: 4322, column: 53, scope: !10030)
!10042 = !DILocation(line: 4322, column: 18, scope: !10030)
!10043 = !DILocation(line: 4319, column: 13, scope: !10024)
!10044 = !DILocation(line: 4324, column: 9, scope: !10045)
!10045 = distinct !DILexicalBlock(scope: !10030, file: !3, line: 4323, column: 10)
!10046 = !DILocation(line: 4325, column: 9, scope: !10045)
!10047 = !DILocation(line: 4328, column: 16, scope: !10024)
!10048 = !DILocation(line: 4328, column: 25, scope: !10024)
!10049 = !DILocation(line: 4328, column: 20, scope: !10024)
!10050 = !DILocation(line: 4329, column: 9, scope: !10024)
!10051 = !DILocation(line: 4329, column: 21, scope: !10024)
!10052 = !DILocation(line: 4329, column: 19, scope: !10024)
!10053 = !DILocation(line: 4329, column: 31, scope: !10024)
!10054 = !DILocation(line: 4329, column: 29, scope: !10024)
!10055 = !DILocation(line: 4329, column: 26, scope: !10024)
!10056 = !DILocation(line: 4330, column: 14, scope: !10024)
!10057 = !DILocation(line: 4330, column: 26, scope: !10024)
!10058 = !DILocation(line: 4330, column: 30, scope: !10024)
!10059 = !DILocation(line: 4331, column: 19, scope: !10024)
!10060 = !DILocation(line: 4331, column: 39, scope: !10024)
!10061 = !DILocation(line: 4331, column: 37, scope: !10024)
!10062 = !DILocation(line: 4331, column: 48, scope: !10024)
!10063 = !DILocation(line: 4331, column: 46, scope: !10024)
!10064 = !DILocation(line: 4331, column: 44, scope: !10024)
!10065 = !DILocation(line: 4331, column: 54, scope: !10024)
!10066 = !DILocation(line: 4331, column: 24, scope: !10024)
!10067 = !DILocation(line: 4331, column: 60, scope: !10024)
!10068 = !DILocation(line: 4327, column: 5, scope: !10024)
!10069 = !DILocation(line: 4334, column: 1, scope: !10024)
!10070 = distinct !DISubprogram(name: "floatx80_le_quiet", scope: !3, file: !3, line: 4343, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4344, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10071 = !DILocalVariable(name: "a", arg: 1, scope: !10070, file: !3, line: 4343, type: !1151)
!10072 = !DILocation(line: 4343, column: 34, scope: !10070)
!10073 = !DILocalVariable(name: "b", arg: 2, scope: !10070, file: !3, line: 4343, type: !1151)
!10074 = !DILocation(line: 4343, column: 46, scope: !10070)
!10075 = !DILocalVariable(name: "aSign", scope: !10070, file: !3, line: 4345, type: !1241)
!10076 = !DILocation(line: 4345, column: 10, scope: !10070)
!10077 = !DILocalVariable(name: "bSign", scope: !10070, file: !3, line: 4345, type: !1241)
!10078 = !DILocation(line: 4345, column: 17, scope: !10070)
!10079 = !DILocation(line: 4347, column: 20, scope: !10080)
!10080 = distinct !DILexicalBlock(scope: !10070, file: !3, line: 4347, column: 13)
!10081 = !DILocation(line: 4347, column: 44, scope: !10080)
!10082 = !DILocation(line: 4348, column: 15, scope: !10080)
!10083 = !DILocation(line: 4348, column: 29, scope: !10080)
!10084 = !DILocation(line: 4348, column: 53, scope: !10080)
!10085 = !DILocation(line: 4348, column: 18, scope: !10080)
!10086 = !DILocation(line: 4349, column: 10, scope: !10080)
!10087 = !DILocation(line: 4349, column: 20, scope: !10080)
!10088 = !DILocation(line: 4349, column: 44, scope: !10080)
!10089 = !DILocation(line: 4350, column: 15, scope: !10080)
!10090 = !DILocation(line: 4350, column: 29, scope: !10080)
!10091 = !DILocation(line: 4350, column: 53, scope: !10080)
!10092 = !DILocation(line: 4350, column: 18, scope: !10080)
!10093 = !DILocation(line: 4347, column: 13, scope: !10070)
!10094 = !DILocation(line: 4352, column: 17, scope: !10095)
!10095 = distinct !DILexicalBlock(scope: !10096, file: !3, line: 4352, column: 17)
!10096 = distinct !DILexicalBlock(scope: !10080, file: !3, line: 4351, column: 10)
!10097 = !DILocation(line: 4353, column: 14, scope: !10095)
!10098 = !DILocation(line: 4353, column: 17, scope: !10095)
!10099 = !DILocation(line: 4352, column: 17, scope: !10096)
!10100 = !DILocation(line: 4354, column: 13, scope: !10101)
!10101 = distinct !DILexicalBlock(scope: !10095, file: !3, line: 4353, column: 40)
!10102 = !DILocation(line: 4355, column: 9, scope: !10101)
!10103 = !DILocation(line: 4356, column: 9, scope: !10096)
!10104 = !DILocation(line: 4358, column: 13, scope: !10070)
!10105 = !DILocation(line: 4358, column: 11, scope: !10070)
!10106 = !DILocation(line: 4359, column: 13, scope: !10070)
!10107 = !DILocation(line: 4359, column: 11, scope: !10070)
!10108 = !DILocation(line: 4360, column: 10, scope: !10109)
!10109 = distinct !DILexicalBlock(scope: !10070, file: !3, line: 4360, column: 10)
!10110 = !DILocation(line: 4360, column: 19, scope: !10109)
!10111 = !DILocation(line: 4360, column: 16, scope: !10109)
!10112 = !DILocation(line: 4360, column: 10, scope: !10070)
!10113 = !DILocation(line: 4362, column: 16, scope: !10114)
!10114 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 4360, column: 27)
!10115 = !DILocation(line: 4363, column: 13, scope: !10114)
!10116 = !DILocation(line: 4363, column: 40, scope: !10114)
!10117 = !DILocation(line: 4363, column: 38, scope: !10114)
!10118 = !DILocation(line: 4363, column: 49, scope: !10114)
!10119 = !DILocation(line: 4363, column: 47, scope: !10114)
!10120 = !DILocation(line: 4363, column: 45, scope: !10114)
!10121 = !DILocation(line: 4363, column: 55, scope: !10114)
!10122 = !DILocation(line: 4363, column: 25, scope: !10114)
!10123 = !DILocation(line: 4363, column: 23, scope: !10114)
!10124 = !DILocation(line: 4363, column: 67, scope: !10114)
!10125 = !DILocation(line: 4363, column: 63, scope: !10114)
!10126 = !DILocation(line: 4363, column: 75, scope: !10114)
!10127 = !DILocation(line: 4363, column: 71, scope: !10114)
!10128 = !DILocation(line: 4364, column: 18, scope: !10114)
!10129 = !DILocation(line: 4361, column: 9, scope: !10114)
!10130 = !DILocation(line: 4367, column: 11, scope: !10070)
!10131 = !DILocation(line: 4367, column: 28, scope: !10070)
!10132 = !DILocation(line: 4367, column: 26, scope: !10070)
!10133 = !DILocation(line: 4367, column: 36, scope: !10070)
!10134 = !DILocation(line: 4367, column: 43, scope: !10070)
!10135 = !DILocation(line: 4367, column: 41, scope: !10070)
!10136 = !DILocation(line: 4367, column: 51, scope: !10070)
!10137 = !DILocation(line: 4367, column: 19, scope: !10070)
!10138 = !DILocation(line: 4368, column: 20, scope: !10070)
!10139 = !DILocation(line: 4368, column: 18, scope: !10070)
!10140 = !DILocation(line: 4368, column: 28, scope: !10070)
!10141 = !DILocation(line: 4368, column: 35, scope: !10070)
!10142 = !DILocation(line: 4368, column: 33, scope: !10070)
!10143 = !DILocation(line: 4368, column: 43, scope: !10070)
!10144 = !DILocation(line: 4368, column: 11, scope: !10070)
!10145 = !DILocation(line: 4366, column: 5, scope: !10070)
!10146 = !DILocation(line: 4370, column: 1, scope: !10070)
!10147 = distinct !DISubprogram(name: "floatx80_lt_quiet", scope: !3, file: !3, line: 4379, type: !9760, isLocal: false, isDefinition: true, scopeLine: 4380, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10148 = !DILocalVariable(name: "a", arg: 1, scope: !10147, file: !3, line: 4379, type: !1151)
!10149 = !DILocation(line: 4379, column: 34, scope: !10147)
!10150 = !DILocalVariable(name: "b", arg: 2, scope: !10147, file: !3, line: 4379, type: !1151)
!10151 = !DILocation(line: 4379, column: 46, scope: !10147)
!10152 = !DILocalVariable(name: "aSign", scope: !10147, file: !3, line: 4381, type: !1241)
!10153 = !DILocation(line: 4381, column: 10, scope: !10147)
!10154 = !DILocalVariable(name: "bSign", scope: !10147, file: !3, line: 4381, type: !1241)
!10155 = !DILocation(line: 4381, column: 17, scope: !10147)
!10156 = !DILocation(line: 4383, column: 20, scope: !10157)
!10157 = distinct !DILexicalBlock(scope: !10147, file: !3, line: 4383, column: 13)
!10158 = !DILocation(line: 4383, column: 44, scope: !10157)
!10159 = !DILocation(line: 4384, column: 15, scope: !10157)
!10160 = !DILocation(line: 4384, column: 29, scope: !10157)
!10161 = !DILocation(line: 4384, column: 53, scope: !10157)
!10162 = !DILocation(line: 4384, column: 18, scope: !10157)
!10163 = !DILocation(line: 4385, column: 10, scope: !10157)
!10164 = !DILocation(line: 4385, column: 20, scope: !10157)
!10165 = !DILocation(line: 4385, column: 44, scope: !10157)
!10166 = !DILocation(line: 4386, column: 15, scope: !10157)
!10167 = !DILocation(line: 4386, column: 29, scope: !10157)
!10168 = !DILocation(line: 4386, column: 53, scope: !10157)
!10169 = !DILocation(line: 4386, column: 18, scope: !10157)
!10170 = !DILocation(line: 4383, column: 13, scope: !10147)
!10171 = !DILocation(line: 4388, column: 17, scope: !10172)
!10172 = distinct !DILexicalBlock(scope: !10173, file: !3, line: 4388, column: 17)
!10173 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 4387, column: 10)
!10174 = !DILocation(line: 4389, column: 14, scope: !10172)
!10175 = !DILocation(line: 4389, column: 17, scope: !10172)
!10176 = !DILocation(line: 4388, column: 17, scope: !10173)
!10177 = !DILocation(line: 4390, column: 13, scope: !10178)
!10178 = distinct !DILexicalBlock(scope: !10172, file: !3, line: 4389, column: 40)
!10179 = !DILocation(line: 4391, column: 9, scope: !10178)
!10180 = !DILocation(line: 4392, column: 9, scope: !10173)
!10181 = !DILocation(line: 4394, column: 13, scope: !10147)
!10182 = !DILocation(line: 4394, column: 11, scope: !10147)
!10183 = !DILocation(line: 4395, column: 13, scope: !10147)
!10184 = !DILocation(line: 4395, column: 11, scope: !10147)
!10185 = !DILocation(line: 4396, column: 10, scope: !10186)
!10186 = distinct !DILexicalBlock(scope: !10147, file: !3, line: 4396, column: 10)
!10187 = !DILocation(line: 4396, column: 19, scope: !10186)
!10188 = !DILocation(line: 4396, column: 16, scope: !10186)
!10189 = !DILocation(line: 4396, column: 10, scope: !10147)
!10190 = !DILocation(line: 4398, column: 16, scope: !10191)
!10191 = distinct !DILexicalBlock(scope: !10186, file: !3, line: 4396, column: 27)
!10192 = !DILocation(line: 4399, column: 13, scope: !10191)
!10193 = !DILocation(line: 4399, column: 40, scope: !10191)
!10194 = !DILocation(line: 4399, column: 38, scope: !10191)
!10195 = !DILocation(line: 4399, column: 49, scope: !10191)
!10196 = !DILocation(line: 4399, column: 47, scope: !10191)
!10197 = !DILocation(line: 4399, column: 45, scope: !10191)
!10198 = !DILocation(line: 4399, column: 55, scope: !10191)
!10199 = !DILocation(line: 4399, column: 25, scope: !10191)
!10200 = !DILocation(line: 4399, column: 23, scope: !10191)
!10201 = !DILocation(line: 4399, column: 67, scope: !10191)
!10202 = !DILocation(line: 4399, column: 63, scope: !10191)
!10203 = !DILocation(line: 4399, column: 75, scope: !10191)
!10204 = !DILocation(line: 4399, column: 71, scope: !10191)
!10205 = !DILocation(line: 4400, column: 18, scope: !10191)
!10206 = !DILocation(line: 4397, column: 9, scope: !10191)
!10207 = !DILocation(line: 4403, column: 11, scope: !10147)
!10208 = !DILocation(line: 4403, column: 28, scope: !10147)
!10209 = !DILocation(line: 4403, column: 26, scope: !10147)
!10210 = !DILocation(line: 4403, column: 36, scope: !10147)
!10211 = !DILocation(line: 4403, column: 43, scope: !10147)
!10212 = !DILocation(line: 4403, column: 41, scope: !10147)
!10213 = !DILocation(line: 4403, column: 51, scope: !10147)
!10214 = !DILocation(line: 4403, column: 19, scope: !10147)
!10215 = !DILocation(line: 4404, column: 20, scope: !10147)
!10216 = !DILocation(line: 4404, column: 18, scope: !10147)
!10217 = !DILocation(line: 4404, column: 28, scope: !10147)
!10218 = !DILocation(line: 4404, column: 35, scope: !10147)
!10219 = !DILocation(line: 4404, column: 33, scope: !10147)
!10220 = !DILocation(line: 4404, column: 43, scope: !10147)
!10221 = !DILocation(line: 4404, column: 11, scope: !10147)
!10222 = !DILocation(line: 4402, column: 5, scope: !10147)
!10223 = !DILocation(line: 4406, column: 1, scope: !10147)
!10224 = distinct !DISubprogram(name: "float128_to_int32", scope: !3, file: !3, line: 4422, type: !10225, isLocal: false, isDefinition: true, scopeLine: 4423, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10225 = !DISubroutineType(types: !10226)
!10226 = !{!32, !1190}
!10227 = !DILocalVariable(name: "a", arg: 1, scope: !10224, file: !3, line: 4422, type: !1190)
!10228 = !DILocation(line: 4422, column: 35, scope: !10224)
!10229 = !DILocalVariable(name: "aSign", scope: !10224, file: !3, line: 4424, type: !1241)
!10230 = !DILocation(line: 4424, column: 10, scope: !10224)
!10231 = !DILocalVariable(name: "aExp", scope: !10224, file: !3, line: 4425, type: !1319)
!10232 = !DILocation(line: 4425, column: 11, scope: !10224)
!10233 = !DILocalVariable(name: "shiftCount", scope: !10224, file: !3, line: 4425, type: !1319)
!10234 = !DILocation(line: 4425, column: 17, scope: !10224)
!10235 = !DILocalVariable(name: "aSig0", scope: !10224, file: !3, line: 4426, type: !24)
!10236 = !DILocation(line: 4426, column: 12, scope: !10224)
!10237 = !DILocalVariable(name: "aSig1", scope: !10224, file: !3, line: 4426, type: !24)
!10238 = !DILocation(line: 4426, column: 19, scope: !10224)
!10239 = !DILocation(line: 4428, column: 13, scope: !10224)
!10240 = !DILocation(line: 4428, column: 11, scope: !10224)
!10241 = !DILocation(line: 4429, column: 13, scope: !10224)
!10242 = !DILocation(line: 4429, column: 11, scope: !10224)
!10243 = !DILocation(line: 4430, column: 12, scope: !10224)
!10244 = !DILocation(line: 4430, column: 10, scope: !10224)
!10245 = !DILocation(line: 4431, column: 13, scope: !10224)
!10246 = !DILocation(line: 4431, column: 11, scope: !10224)
!10247 = !DILocation(line: 4432, column: 12, scope: !10248)
!10248 = distinct !DILexicalBlock(scope: !10224, file: !3, line: 4432, column: 10)
!10249 = !DILocation(line: 4432, column: 17, scope: !10248)
!10250 = !DILocation(line: 4432, column: 29, scope: !10248)
!10251 = !DILocation(line: 4432, column: 34, scope: !10248)
!10252 = !DILocation(line: 4432, column: 42, scope: !10248)
!10253 = !DILocation(line: 4432, column: 40, scope: !10248)
!10254 = !DILocation(line: 4432, column: 10, scope: !10224)
!10255 = !DILocation(line: 4432, column: 58, scope: !10248)
!10256 = !DILocation(line: 4432, column: 52, scope: !10248)
!10257 = !DILocation(line: 4433, column: 10, scope: !10258)
!10258 = distinct !DILexicalBlock(scope: !10224, file: !3, line: 4433, column: 10)
!10259 = !DILocation(line: 4433, column: 10, scope: !10224)
!10260 = !DILocation(line: 4433, column: 23, scope: !10258)
!10261 = !DILocation(line: 4433, column: 17, scope: !10258)
!10262 = !DILocation(line: 4434, column: 16, scope: !10224)
!10263 = !DILocation(line: 4434, column: 22, scope: !10224)
!10264 = !DILocation(line: 4434, column: 14, scope: !10224)
!10265 = !DILocation(line: 4434, column: 11, scope: !10224)
!10266 = !DILocation(line: 4435, column: 27, scope: !10224)
!10267 = !DILocation(line: 4435, column: 25, scope: !10224)
!10268 = !DILocation(line: 4435, column: 16, scope: !10224)
!10269 = !DILocation(line: 4436, column: 14, scope: !10270)
!10270 = distinct !DILexicalBlock(scope: !10224, file: !3, line: 4436, column: 10)
!10271 = !DILocation(line: 4436, column: 12, scope: !10270)
!10272 = !DILocation(line: 4436, column: 10, scope: !10224)
!10273 = !DILocation(line: 4436, column: 48, scope: !10270)
!10274 = !DILocation(line: 4436, column: 55, scope: !10270)
!10275 = !DILocation(line: 4436, column: 27, scope: !10270)
!10276 = !DILocation(line: 4437, column: 31, scope: !10224)
!10277 = !DILocation(line: 4437, column: 38, scope: !10224)
!10278 = !DILocation(line: 4437, column: 12, scope: !10224)
!10279 = !DILocation(line: 4437, column: 5, scope: !10224)
!10280 = distinct !DISubprogram(name: "float128_to_int32_round_to_zero", scope: !3, file: !3, line: 4451, type: !10225, isLocal: false, isDefinition: true, scopeLine: 4452, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10281 = !DILocalVariable(name: "a", arg: 1, scope: !10280, file: !3, line: 4451, type: !1190)
!10282 = !DILocation(line: 4451, column: 49, scope: !10280)
!10283 = !DILocalVariable(name: "aSign", scope: !10280, file: !3, line: 4453, type: !1241)
!10284 = !DILocation(line: 4453, column: 10, scope: !10280)
!10285 = !DILocalVariable(name: "aExp", scope: !10280, file: !3, line: 4454, type: !1319)
!10286 = !DILocation(line: 4454, column: 11, scope: !10280)
!10287 = !DILocalVariable(name: "shiftCount", scope: !10280, file: !3, line: 4454, type: !1319)
!10288 = !DILocation(line: 4454, column: 17, scope: !10280)
!10289 = !DILocalVariable(name: "aSig0", scope: !10280, file: !3, line: 4455, type: !24)
!10290 = !DILocation(line: 4455, column: 12, scope: !10280)
!10291 = !DILocalVariable(name: "aSig1", scope: !10280, file: !3, line: 4455, type: !24)
!10292 = !DILocation(line: 4455, column: 19, scope: !10280)
!10293 = !DILocalVariable(name: "savedASig", scope: !10280, file: !3, line: 4455, type: !24)
!10294 = !DILocation(line: 4455, column: 26, scope: !10280)
!10295 = !DILocalVariable(name: "z", scope: !10280, file: !3, line: 4456, type: !1319)
!10296 = !DILocation(line: 4456, column: 11, scope: !10280)
!10297 = !DILocation(line: 4458, column: 13, scope: !10280)
!10298 = !DILocation(line: 4458, column: 11, scope: !10280)
!10299 = !DILocation(line: 4459, column: 13, scope: !10280)
!10300 = !DILocation(line: 4459, column: 11, scope: !10280)
!10301 = !DILocation(line: 4460, column: 12, scope: !10280)
!10302 = !DILocation(line: 4460, column: 10, scope: !10280)
!10303 = !DILocation(line: 4461, column: 13, scope: !10280)
!10304 = !DILocation(line: 4461, column: 11, scope: !10280)
!10305 = !DILocation(line: 4462, column: 16, scope: !10280)
!10306 = !DILocation(line: 4462, column: 22, scope: !10280)
!10307 = !DILocation(line: 4462, column: 14, scope: !10280)
!10308 = !DILocation(line: 4462, column: 11, scope: !10280)
!10309 = !DILocation(line: 4463, column: 19, scope: !10310)
!10310 = distinct !DILexicalBlock(scope: !10280, file: !3, line: 4463, column: 10)
!10311 = !DILocation(line: 4463, column: 17, scope: !10310)
!10312 = !DILocation(line: 4463, column: 10, scope: !10280)
!10313 = !DILocation(line: 4464, column: 16, scope: !10314)
!10314 = distinct !DILexicalBlock(scope: !10315, file: !3, line: 4464, column: 14)
!10315 = distinct !DILexicalBlock(scope: !10310, file: !3, line: 4463, column: 26)
!10316 = !DILocation(line: 4464, column: 21, scope: !10314)
!10317 = !DILocation(line: 4464, column: 33, scope: !10314)
!10318 = !DILocation(line: 4464, column: 36, scope: !10314)
!10319 = !DILocation(line: 4464, column: 14, scope: !10315)
!10320 = !DILocation(line: 4464, column: 50, scope: !10314)
!10321 = !DILocation(line: 4464, column: 44, scope: !10314)
!10322 = !DILocation(line: 4465, column: 9, scope: !10315)
!10323 = !DILocation(line: 4467, column: 15, scope: !10324)
!10324 = distinct !DILexicalBlock(scope: !10310, file: !3, line: 4467, column: 15)
!10325 = !DILocation(line: 4467, column: 20, scope: !10324)
!10326 = !DILocation(line: 4467, column: 15, scope: !10310)
!10327 = !DILocation(line: 4468, column: 14, scope: !10328)
!10328 = distinct !DILexicalBlock(scope: !10329, file: !3, line: 4468, column: 14)
!10329 = distinct !DILexicalBlock(scope: !10324, file: !3, line: 4467, column: 31)
!10330 = !DILocation(line: 4468, column: 19, scope: !10328)
!10331 = !DILocation(line: 4468, column: 22, scope: !10328)
!10332 = !DILocation(line: 4468, column: 14, scope: !10329)
!10333 = !DILocation(line: 4468, column: 52, scope: !10328)
!10334 = !DILocation(line: 4468, column: 30, scope: !10328)
!10335 = !DILocation(line: 4469, column: 9, scope: !10329)
!10336 = !DILocation(line: 4471, column: 11, scope: !10280)
!10337 = !DILocation(line: 4472, column: 27, scope: !10280)
!10338 = !DILocation(line: 4472, column: 25, scope: !10280)
!10339 = !DILocation(line: 4472, column: 16, scope: !10280)
!10340 = !DILocation(line: 4473, column: 17, scope: !10280)
!10341 = !DILocation(line: 4473, column: 15, scope: !10280)
!10342 = !DILocation(line: 4474, column: 15, scope: !10280)
!10343 = !DILocation(line: 4474, column: 11, scope: !10280)
!10344 = !DILocation(line: 4475, column: 9, scope: !10280)
!10345 = !DILocation(line: 4475, column: 7, scope: !10280)
!10346 = !DILocation(line: 4476, column: 10, scope: !10347)
!10347 = distinct !DILexicalBlock(scope: !10280, file: !3, line: 4476, column: 10)
!10348 = !DILocation(line: 4476, column: 10, scope: !10280)
!10349 = !DILocation(line: 4476, column: 24, scope: !10347)
!10350 = !DILocation(line: 4476, column: 22, scope: !10347)
!10351 = !DILocation(line: 4476, column: 20, scope: !10347)
!10352 = !DILocation(line: 4476, column: 18, scope: !10347)
!10353 = !DILocation(line: 4477, column: 12, scope: !10354)
!10354 = distinct !DILexicalBlock(scope: !10280, file: !3, line: 4477, column: 10)
!10355 = !DILocation(line: 4477, column: 14, scope: !10354)
!10356 = !DILocation(line: 4477, column: 22, scope: !10354)
!10357 = !DILocation(line: 4477, column: 20, scope: !10354)
!10358 = !DILocation(line: 4477, column: 10, scope: !10280)
!10359 = !DILocation(line: 4477, column: 30, scope: !10354)
!10360 = !DILocation(line: 4479, column: 9, scope: !10361)
!10361 = distinct !DILexicalBlock(scope: !10354, file: !3, line: 4477, column: 30)
!10362 = !DILocation(line: 4480, column: 16, scope: !10361)
!10363 = !DILocation(line: 4480, column: 9, scope: !10361)
!10364 = !DILocation(line: 4482, column: 12, scope: !10365)
!10365 = distinct !DILexicalBlock(scope: !10280, file: !3, line: 4482, column: 10)
!10366 = !DILocation(line: 4482, column: 19, scope: !10365)
!10367 = !DILocation(line: 4482, column: 17, scope: !10365)
!10368 = !DILocation(line: 4482, column: 35, scope: !10365)
!10369 = !DILocation(line: 4482, column: 32, scope: !10365)
!10370 = !DILocation(line: 4482, column: 10, scope: !10280)
!10371 = !DILocation(line: 4483, column: 31, scope: !10372)
!10372 = distinct !DILexicalBlock(scope: !10365, file: !3, line: 4482, column: 47)
!10373 = !DILocation(line: 4484, column: 5, scope: !10372)
!10374 = !DILocation(line: 4485, column: 12, scope: !10280)
!10375 = !DILocation(line: 4485, column: 5, scope: !10280)
!10376 = !DILocation(line: 4487, column: 1, scope: !10280)
!10377 = distinct !DISubprogram(name: "float128_to_int64", scope: !3, file: !3, line: 4499, type: !10378, isLocal: false, isDefinition: true, scopeLine: 4500, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10378 = !DISubroutineType(types: !10379)
!10379 = !{!34, !1190}
!10380 = !DILocalVariable(name: "a", arg: 1, scope: !10377, file: !3, line: 4499, type: !1190)
!10381 = !DILocation(line: 4499, column: 35, scope: !10377)
!10382 = !DILocalVariable(name: "aSign", scope: !10377, file: !3, line: 4501, type: !1241)
!10383 = !DILocation(line: 4501, column: 10, scope: !10377)
!10384 = !DILocalVariable(name: "aExp", scope: !10377, file: !3, line: 4502, type: !1319)
!10385 = !DILocation(line: 4502, column: 11, scope: !10377)
!10386 = !DILocalVariable(name: "shiftCount", scope: !10377, file: !3, line: 4502, type: !1319)
!10387 = !DILocation(line: 4502, column: 17, scope: !10377)
!10388 = !DILocalVariable(name: "aSig0", scope: !10377, file: !3, line: 4503, type: !24)
!10389 = !DILocation(line: 4503, column: 12, scope: !10377)
!10390 = !DILocalVariable(name: "aSig1", scope: !10377, file: !3, line: 4503, type: !24)
!10391 = !DILocation(line: 4503, column: 19, scope: !10377)
!10392 = !DILocation(line: 4505, column: 13, scope: !10377)
!10393 = !DILocation(line: 4505, column: 11, scope: !10377)
!10394 = !DILocation(line: 4506, column: 13, scope: !10377)
!10395 = !DILocation(line: 4506, column: 11, scope: !10377)
!10396 = !DILocation(line: 4507, column: 12, scope: !10377)
!10397 = !DILocation(line: 4507, column: 10, scope: !10377)
!10398 = !DILocation(line: 4508, column: 13, scope: !10377)
!10399 = !DILocation(line: 4508, column: 11, scope: !10377)
!10400 = !DILocation(line: 4509, column: 10, scope: !10401)
!10401 = distinct !DILexicalBlock(scope: !10377, file: !3, line: 4509, column: 10)
!10402 = !DILocation(line: 4509, column: 10, scope: !10377)
!10403 = !DILocation(line: 4509, column: 23, scope: !10401)
!10404 = !DILocation(line: 4509, column: 17, scope: !10401)
!10405 = !DILocation(line: 4510, column: 27, scope: !10377)
!10406 = !DILocation(line: 4510, column: 25, scope: !10377)
!10407 = !DILocation(line: 4510, column: 16, scope: !10377)
!10408 = !DILocation(line: 4511, column: 10, scope: !10409)
!10409 = distinct !DILexicalBlock(scope: !10377, file: !3, line: 4511, column: 10)
!10410 = !DILocation(line: 4511, column: 21, scope: !10409)
!10411 = !DILocation(line: 4511, column: 10, scope: !10377)
!10412 = !DILocation(line: 4512, column: 23, scope: !10413)
!10413 = distinct !DILexicalBlock(scope: !10414, file: !3, line: 4512, column: 14)
!10414 = distinct !DILexicalBlock(scope: !10409, file: !3, line: 4511, column: 28)
!10415 = !DILocation(line: 4512, column: 21, scope: !10413)
!10416 = !DILocation(line: 4512, column: 14, scope: !10414)
!10417 = !DILocation(line: 4513, column: 13, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10413, file: !3, line: 4512, column: 30)
!10419 = !DILocation(line: 4514, column: 23, scope: !10420)
!10420 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 4514, column: 21)
!10421 = !DILocation(line: 4515, column: 18, scope: !10420)
!10422 = !DILocation(line: 4515, column: 28, scope: !10420)
!10423 = !DILocation(line: 4515, column: 33, scope: !10420)
!10424 = !DILocation(line: 4516, column: 23, scope: !10420)
!10425 = !DILocation(line: 4516, column: 28, scope: !10420)
!10426 = !DILocation(line: 4516, column: 34, scope: !10420)
!10427 = !DILocation(line: 4516, column: 39, scope: !10420)
!10428 = !DILocation(line: 4516, column: 45, scope: !10420)
!10429 = !DILocation(line: 4514, column: 21, scope: !10418)
!10430 = !DILocation(line: 4519, column: 17, scope: !10431)
!10431 = distinct !DILexicalBlock(scope: !10420, file: !3, line: 4518, column: 18)
!10432 = !DILocation(line: 4521, column: 13, scope: !10418)
!10433 = !DILocation(line: 4523, column: 28, scope: !10414)
!10434 = !DILocation(line: 4523, column: 35, scope: !10414)
!10435 = !DILocation(line: 4523, column: 44, scope: !10414)
!10436 = !DILocation(line: 4523, column: 42, scope: !10414)
!10437 = !DILocation(line: 4523, column: 9, scope: !10414)
!10438 = !DILocation(line: 4524, column: 5, scope: !10414)
!10439 = !DILocation(line: 4526, column: 35, scope: !10440)
!10440 = distinct !DILexicalBlock(scope: !10409, file: !3, line: 4525, column: 10)
!10441 = !DILocation(line: 4526, column: 42, scope: !10440)
!10442 = !DILocation(line: 4526, column: 49, scope: !10440)
!10443 = !DILocation(line: 4526, column: 9, scope: !10440)
!10444 = !DILocation(line: 4528, column: 31, scope: !10377)
!10445 = !DILocation(line: 4528, column: 38, scope: !10377)
!10446 = !DILocation(line: 4528, column: 45, scope: !10377)
!10447 = !DILocation(line: 4528, column: 12, scope: !10377)
!10448 = !DILocation(line: 4528, column: 5, scope: !10377)
!10449 = !DILocation(line: 4530, column: 1, scope: !10377)
!10450 = distinct !DISubprogram(name: "float128_to_int64_round_to_zero", scope: !3, file: !3, line: 4542, type: !10378, isLocal: false, isDefinition: true, scopeLine: 4543, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10451 = !DILocalVariable(name: "a", arg: 1, scope: !10450, file: !3, line: 4542, type: !1190)
!10452 = !DILocation(line: 4542, column: 49, scope: !10450)
!10453 = !DILocalVariable(name: "aSign", scope: !10450, file: !3, line: 4544, type: !1241)
!10454 = !DILocation(line: 4544, column: 10, scope: !10450)
!10455 = !DILocalVariable(name: "aExp", scope: !10450, file: !3, line: 4545, type: !1319)
!10456 = !DILocation(line: 4545, column: 11, scope: !10450)
!10457 = !DILocalVariable(name: "shiftCount", scope: !10450, file: !3, line: 4545, type: !1319)
!10458 = !DILocation(line: 4545, column: 17, scope: !10450)
!10459 = !DILocalVariable(name: "aSig0", scope: !10450, file: !3, line: 4546, type: !24)
!10460 = !DILocation(line: 4546, column: 12, scope: !10450)
!10461 = !DILocalVariable(name: "aSig1", scope: !10450, file: !3, line: 4546, type: !24)
!10462 = !DILocation(line: 4546, column: 19, scope: !10450)
!10463 = !DILocalVariable(name: "z", scope: !10450, file: !3, line: 4547, type: !1628)
!10464 = !DILocation(line: 4547, column: 11, scope: !10450)
!10465 = !DILocation(line: 4549, column: 13, scope: !10450)
!10466 = !DILocation(line: 4549, column: 11, scope: !10450)
!10467 = !DILocation(line: 4550, column: 13, scope: !10450)
!10468 = !DILocation(line: 4550, column: 11, scope: !10450)
!10469 = !DILocation(line: 4551, column: 12, scope: !10450)
!10470 = !DILocation(line: 4551, column: 10, scope: !10450)
!10471 = !DILocation(line: 4552, column: 13, scope: !10450)
!10472 = !DILocation(line: 4552, column: 11, scope: !10450)
!10473 = !DILocation(line: 4553, column: 10, scope: !10474)
!10474 = distinct !DILexicalBlock(scope: !10450, file: !3, line: 4553, column: 10)
!10475 = !DILocation(line: 4553, column: 10, scope: !10450)
!10476 = !DILocation(line: 4553, column: 23, scope: !10474)
!10477 = !DILocation(line: 4553, column: 17, scope: !10474)
!10478 = !DILocation(line: 4554, column: 18, scope: !10450)
!10479 = !DILocation(line: 4554, column: 23, scope: !10450)
!10480 = !DILocation(line: 4554, column: 16, scope: !10450)
!10481 = !DILocation(line: 4555, column: 14, scope: !10482)
!10482 = distinct !DILexicalBlock(scope: !10450, file: !3, line: 4555, column: 10)
!10483 = !DILocation(line: 4555, column: 12, scope: !10482)
!10484 = !DILocation(line: 4555, column: 10, scope: !10450)
!10485 = !DILocation(line: 4556, column: 24, scope: !10486)
!10486 = distinct !DILexicalBlock(scope: !10487, file: !3, line: 4556, column: 14)
!10487 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 4555, column: 27)
!10488 = !DILocation(line: 4556, column: 21, scope: !10486)
!10489 = !DILocation(line: 4556, column: 14, scope: !10487)
!10490 = !DILocation(line: 4557, column: 19, scope: !10491)
!10491 = distinct !DILexicalBlock(scope: !10486, file: !3, line: 4556, column: 31)
!10492 = !DILocation(line: 4558, column: 25, scope: !10493)
!10493 = distinct !DILexicalBlock(scope: !10491, file: !3, line: 4558, column: 21)
!10494 = !DILocation(line: 4558, column: 30, scope: !10493)
!10495 = !DILocation(line: 4559, column: 18, scope: !10493)
!10496 = !DILocation(line: 4559, column: 23, scope: !10493)
!10497 = !DILocation(line: 4559, column: 29, scope: !10493)
!10498 = !DILocation(line: 4558, column: 21, scope: !10491)
!10499 = !DILocation(line: 4560, column: 22, scope: !10500)
!10500 = distinct !DILexicalBlock(scope: !10501, file: !3, line: 4560, column: 22)
!10501 = distinct !DILexicalBlock(scope: !10493, file: !3, line: 4559, column: 63)
!10502 = !DILocation(line: 4560, column: 22, scope: !10501)
!10503 = !DILocation(line: 4560, column: 52, scope: !10500)
!10504 = !DILocation(line: 4560, column: 30, scope: !10500)
!10505 = !DILocation(line: 4561, column: 13, scope: !10501)
!10506 = !DILocation(line: 4563, column: 17, scope: !10507)
!10507 = distinct !DILexicalBlock(scope: !10493, file: !3, line: 4562, column: 18)
!10508 = !DILocation(line: 4564, column: 24, scope: !10509)
!10509 = distinct !DILexicalBlock(scope: !10507, file: !3, line: 4564, column: 22)
!10510 = !DILocation(line: 4564, column: 30, scope: !10509)
!10511 = !DILocation(line: 4564, column: 37, scope: !10509)
!10512 = !DILocation(line: 4564, column: 42, scope: !10509)
!10513 = !DILocation(line: 4564, column: 54, scope: !10509)
!10514 = !DILocation(line: 4564, column: 59, scope: !10509)
!10515 = !DILocation(line: 4564, column: 67, scope: !10509)
!10516 = !DILocation(line: 4564, column: 65, scope: !10509)
!10517 = !DILocation(line: 4564, column: 22, scope: !10507)
!10518 = !DILocation(line: 4565, column: 21, scope: !10519)
!10519 = distinct !DILexicalBlock(scope: !10509, file: !3, line: 4564, column: 79)
!10520 = !DILocation(line: 4568, column: 13, scope: !10491)
!10521 = !DILocation(line: 4570, column: 15, scope: !10487)
!10522 = !DILocation(line: 4570, column: 22, scope: !10487)
!10523 = !DILocation(line: 4570, column: 20, scope: !10487)
!10524 = !DILocation(line: 4570, column: 39, scope: !10487)
!10525 = !DILocation(line: 4570, column: 52, scope: !10487)
!10526 = !DILocation(line: 4570, column: 50, scope: !10487)
!10527 = !DILocation(line: 4570, column: 65, scope: !10487)
!10528 = !DILocation(line: 4570, column: 44, scope: !10487)
!10529 = !DILocation(line: 4570, column: 35, scope: !10487)
!10530 = !DILocation(line: 4570, column: 11, scope: !10487)
!10531 = !DILocation(line: 4571, column: 25, scope: !10532)
!10532 = distinct !DILexicalBlock(scope: !10487, file: !3, line: 4571, column: 14)
!10533 = !DILocation(line: 4571, column: 32, scope: !10532)
!10534 = !DILocation(line: 4571, column: 30, scope: !10532)
!10535 = !DILocation(line: 4571, column: 14, scope: !10532)
!10536 = !DILocation(line: 4571, column: 14, scope: !10487)
!10537 = !DILocation(line: 4572, column: 35, scope: !10538)
!10538 = distinct !DILexicalBlock(scope: !10532, file: !3, line: 4571, column: 47)
!10539 = !DILocation(line: 4573, column: 9, scope: !10538)
!10540 = !DILocation(line: 4574, column: 5, scope: !10487)
!10541 = !DILocation(line: 4576, column: 14, scope: !10542)
!10542 = distinct !DILexicalBlock(scope: !10543, file: !3, line: 4576, column: 14)
!10543 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 4575, column: 10)
!10544 = !DILocation(line: 4576, column: 19, scope: !10542)
!10545 = !DILocation(line: 4576, column: 14, scope: !10543)
!10546 = !DILocation(line: 4577, column: 18, scope: !10547)
!10547 = distinct !DILexicalBlock(scope: !10548, file: !3, line: 4577, column: 18)
!10548 = distinct !DILexicalBlock(scope: !10542, file: !3, line: 4576, column: 30)
!10549 = !DILocation(line: 4577, column: 25, scope: !10547)
!10550 = !DILocation(line: 4577, column: 23, scope: !10547)
!10551 = !DILocation(line: 4577, column: 33, scope: !10547)
!10552 = !DILocation(line: 4577, column: 31, scope: !10547)
!10553 = !DILocation(line: 4577, column: 18, scope: !10548)
!10554 = !DILocation(line: 4578, column: 39, scope: !10555)
!10555 = distinct !DILexicalBlock(scope: !10547, file: !3, line: 4577, column: 41)
!10556 = !DILocation(line: 4579, column: 13, scope: !10555)
!10557 = !DILocation(line: 4580, column: 13, scope: !10548)
!10558 = !DILocation(line: 4582, column: 13, scope: !10543)
!10559 = !DILocation(line: 4582, column: 24, scope: !10543)
!10560 = !DILocation(line: 4582, column: 22, scope: !10543)
!10561 = !DILocation(line: 4582, column: 18, scope: !10543)
!10562 = !DILocation(line: 4582, column: 11, scope: !10543)
!10563 = !DILocation(line: 4583, column: 17, scope: !10564)
!10564 = distinct !DILexicalBlock(scope: !10543, file: !3, line: 4583, column: 17)
!10565 = !DILocation(line: 4584, column: 14, scope: !10564)
!10566 = !DILocation(line: 4584, column: 19, scope: !10564)
!10567 = !DILocation(line: 4584, column: 30, scope: !10564)
!10568 = !DILocation(line: 4584, column: 44, scope: !10564)
!10569 = !DILocation(line: 4584, column: 53, scope: !10564)
!10570 = !DILocation(line: 4584, column: 64, scope: !10564)
!10571 = !DILocation(line: 4584, column: 49, scope: !10564)
!10572 = !DILocation(line: 4584, column: 33, scope: !10564)
!10573 = !DILocation(line: 4583, column: 17, scope: !10543)
!10574 = !DILocation(line: 4585, column: 35, scope: !10575)
!10575 = distinct !DILexicalBlock(scope: !10564, file: !3, line: 4584, column: 77)
!10576 = !DILocation(line: 4586, column: 9, scope: !10575)
!10577 = !DILocation(line: 4588, column: 10, scope: !10578)
!10578 = distinct !DILexicalBlock(scope: !10450, file: !3, line: 4588, column: 10)
!10579 = !DILocation(line: 4588, column: 10, scope: !10450)
!10580 = !DILocation(line: 4588, column: 24, scope: !10578)
!10581 = !DILocation(line: 4588, column: 22, scope: !10578)
!10582 = !DILocation(line: 4588, column: 20, scope: !10578)
!10583 = !DILocation(line: 4588, column: 18, scope: !10578)
!10584 = !DILocation(line: 4589, column: 12, scope: !10450)
!10585 = !DILocation(line: 4589, column: 5, scope: !10450)
!10586 = !DILocation(line: 4591, column: 1, scope: !10450)
!10587 = distinct !DISubprogram(name: "float128_to_float32", scope: !3, file: !3, line: 4600, type: !10588, isLocal: false, isDefinition: true, scopeLine: 4601, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10588 = !DISubroutineType(types: !10589)
!10589 = !{!1109, !1190}
!10590 = !DILocalVariable(name: "a", arg: 1, scope: !10587, file: !3, line: 4600, type: !1190)
!10591 = !DILocation(line: 4600, column: 39, scope: !10587)
!10592 = !DILocalVariable(name: "aSign", scope: !10587, file: !3, line: 4602, type: !1241)
!10593 = !DILocation(line: 4602, column: 10, scope: !10587)
!10594 = !DILocalVariable(name: "aExp", scope: !10587, file: !3, line: 4603, type: !1319)
!10595 = !DILocation(line: 4603, column: 11, scope: !10587)
!10596 = !DILocalVariable(name: "aSig0", scope: !10587, file: !3, line: 4604, type: !24)
!10597 = !DILocation(line: 4604, column: 12, scope: !10587)
!10598 = !DILocalVariable(name: "aSig1", scope: !10587, file: !3, line: 4604, type: !24)
!10599 = !DILocation(line: 4604, column: 19, scope: !10587)
!10600 = !DILocalVariable(name: "zSig", scope: !10587, file: !3, line: 4605, type: !27)
!10601 = !DILocation(line: 4605, column: 12, scope: !10587)
!10602 = !DILocation(line: 4607, column: 13, scope: !10587)
!10603 = !DILocation(line: 4607, column: 11, scope: !10587)
!10604 = !DILocation(line: 4608, column: 13, scope: !10587)
!10605 = !DILocation(line: 4608, column: 11, scope: !10587)
!10606 = !DILocation(line: 4609, column: 12, scope: !10587)
!10607 = !DILocation(line: 4609, column: 10, scope: !10587)
!10608 = !DILocation(line: 4610, column: 13, scope: !10587)
!10609 = !DILocation(line: 4610, column: 11, scope: !10587)
!10610 = !DILocation(line: 4611, column: 10, scope: !10611)
!10611 = distinct !DILexicalBlock(scope: !10587, file: !3, line: 4611, column: 10)
!10612 = !DILocation(line: 4611, column: 15, scope: !10611)
!10613 = !DILocation(line: 4611, column: 10, scope: !10587)
!10614 = !DILocation(line: 4612, column: 14, scope: !10615)
!10615 = distinct !DILexicalBlock(scope: !10616, file: !3, line: 4612, column: 14)
!10616 = distinct !DILexicalBlock(scope: !10611, file: !3, line: 4611, column: 27)
!10617 = !DILocation(line: 4612, column: 22, scope: !10615)
!10618 = !DILocation(line: 4612, column: 20, scope: !10615)
!10619 = !DILocation(line: 4612, column: 14, scope: !10616)
!10620 = !DILocation(line: 4613, column: 40, scope: !10621)
!10621 = distinct !DILexicalBlock(scope: !10615, file: !3, line: 4612, column: 30)
!10622 = !DILocation(line: 4613, column: 20, scope: !10621)
!10623 = !DILocation(line: 4613, column: 13, scope: !10621)
!10624 = !DILocation(line: 4615, column: 29, scope: !10616)
!10625 = !DILocation(line: 4615, column: 16, scope: !10616)
!10626 = !DILocation(line: 4615, column: 9, scope: !10616)
!10627 = !DILocation(line: 4617, column: 16, scope: !10587)
!10628 = !DILocation(line: 4617, column: 22, scope: !10587)
!10629 = !DILocation(line: 4617, column: 14, scope: !10587)
!10630 = !DILocation(line: 4617, column: 11, scope: !10587)
!10631 = !DILocation(line: 4618, column: 26, scope: !10587)
!10632 = !DILocation(line: 4618, column: 5, scope: !10587)
!10633 = !DILocation(line: 4619, column: 12, scope: !10587)
!10634 = !DILocation(line: 4619, column: 10, scope: !10587)
!10635 = !DILocation(line: 4620, column: 10, scope: !10636)
!10636 = distinct !DILexicalBlock(scope: !10587, file: !3, line: 4620, column: 10)
!10637 = !DILocation(line: 4620, column: 15, scope: !10636)
!10638 = !DILocation(line: 4620, column: 18, scope: !10636)
!10639 = !DILocation(line: 4620, column: 10, scope: !10587)
!10640 = !DILocation(line: 4621, column: 14, scope: !10641)
!10641 = distinct !DILexicalBlock(scope: !10636, file: !3, line: 4620, column: 25)
!10642 = !DILocation(line: 4622, column: 14, scope: !10641)
!10643 = !DILocation(line: 4623, column: 5, scope: !10641)
!10644 = !DILocation(line: 4624, column: 33, scope: !10587)
!10645 = !DILocation(line: 4624, column: 40, scope: !10587)
!10646 = !DILocation(line: 4624, column: 46, scope: !10587)
!10647 = !DILocation(line: 4624, column: 12, scope: !10587)
!10648 = !DILocation(line: 4624, column: 5, scope: !10587)
!10649 = !DILocation(line: 4626, column: 1, scope: !10587)
!10650 = distinct !DISubprogram(name: "float128ToCommonNaN", scope: !43, file: !43, line: 364, type: !10651, isLocal: true, isDefinition: true, scopeLine: 365, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10651 = !DISubroutineType(types: !10652)
!10652 = !{!2576, !1190}
!10653 = !DILocalVariable(name: "a", arg: 1, scope: !10650, file: !43, line: 364, type: !1190)
!10654 = !DILocation(line: 364, column: 49, scope: !10650)
!10655 = !DILocalVariable(name: "z", scope: !10650, file: !43, line: 366, type: !2576)
!10656 = !DILocation(line: 366, column: 16, scope: !10650)
!10657 = !DILocation(line: 368, column: 10, scope: !10658)
!10658 = distinct !DILexicalBlock(scope: !10650, file: !43, line: 368, column: 10)
!10659 = !DILocation(line: 368, column: 10, scope: !10650)
!10660 = !DILocation(line: 368, column: 43, scope: !10658)
!10661 = !DILocation(line: 369, column: 16, scope: !10650)
!10662 = !DILocation(line: 369, column: 20, scope: !10650)
!10663 = !DILocation(line: 369, column: 14, scope: !10650)
!10664 = !DILocation(line: 369, column: 7, scope: !10650)
!10665 = !DILocation(line: 369, column: 12, scope: !10650)
!10666 = !DILocation(line: 370, column: 26, scope: !10650)
!10667 = !DILocation(line: 370, column: 34, scope: !10650)
!10668 = !DILocation(line: 370, column: 46, scope: !10650)
!10669 = !DILocation(line: 370, column: 55, scope: !10650)
!10670 = !DILocation(line: 370, column: 5, scope: !10650)
!10671 = !DILocation(line: 371, column: 12, scope: !10650)
!10672 = !DILocation(line: 371, column: 5, scope: !10650)
!10673 = distinct !DISubprogram(name: "float128_to_float64", scope: !3, file: !3, line: 4635, type: !10674, isLocal: false, isDefinition: true, scopeLine: 4636, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10674 = !DISubroutineType(types: !10675)
!10675 = !{!1130, !1190}
!10676 = !DILocalVariable(name: "a", arg: 1, scope: !10673, file: !3, line: 4635, type: !1190)
!10677 = !DILocation(line: 4635, column: 39, scope: !10673)
!10678 = !DILocalVariable(name: "aSign", scope: !10673, file: !3, line: 4637, type: !1241)
!10679 = !DILocation(line: 4637, column: 10, scope: !10673)
!10680 = !DILocalVariable(name: "aExp", scope: !10673, file: !3, line: 4638, type: !1319)
!10681 = !DILocation(line: 4638, column: 11, scope: !10673)
!10682 = !DILocalVariable(name: "aSig0", scope: !10673, file: !3, line: 4639, type: !24)
!10683 = !DILocation(line: 4639, column: 12, scope: !10673)
!10684 = !DILocalVariable(name: "aSig1", scope: !10673, file: !3, line: 4639, type: !24)
!10685 = !DILocation(line: 4639, column: 19, scope: !10673)
!10686 = !DILocation(line: 4641, column: 13, scope: !10673)
!10687 = !DILocation(line: 4641, column: 11, scope: !10673)
!10688 = !DILocation(line: 4642, column: 13, scope: !10673)
!10689 = !DILocation(line: 4642, column: 11, scope: !10673)
!10690 = !DILocation(line: 4643, column: 12, scope: !10673)
!10691 = !DILocation(line: 4643, column: 10, scope: !10673)
!10692 = !DILocation(line: 4644, column: 13, scope: !10673)
!10693 = !DILocation(line: 4644, column: 11, scope: !10673)
!10694 = !DILocation(line: 4645, column: 10, scope: !10695)
!10695 = distinct !DILexicalBlock(scope: !10673, file: !3, line: 4645, column: 10)
!10696 = !DILocation(line: 4645, column: 15, scope: !10695)
!10697 = !DILocation(line: 4645, column: 10, scope: !10673)
!10698 = !DILocation(line: 4646, column: 14, scope: !10699)
!10699 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 4646, column: 14)
!10700 = distinct !DILexicalBlock(scope: !10695, file: !3, line: 4645, column: 27)
!10701 = !DILocation(line: 4646, column: 22, scope: !10699)
!10702 = !DILocation(line: 4646, column: 20, scope: !10699)
!10703 = !DILocation(line: 4646, column: 14, scope: !10700)
!10704 = !DILocation(line: 4647, column: 40, scope: !10705)
!10705 = distinct !DILexicalBlock(scope: !10699, file: !3, line: 4646, column: 30)
!10706 = !DILocation(line: 4647, column: 20, scope: !10705)
!10707 = !DILocation(line: 4647, column: 13, scope: !10705)
!10708 = !DILocation(line: 4649, column: 29, scope: !10700)
!10709 = !DILocation(line: 4649, column: 16, scope: !10700)
!10710 = !DILocation(line: 4649, column: 9, scope: !10700)
!10711 = !DILocation(line: 4651, column: 24, scope: !10673)
!10712 = !DILocation(line: 4651, column: 31, scope: !10673)
!10713 = !DILocation(line: 4651, column: 5, scope: !10673)
!10714 = !DILocation(line: 4652, column: 16, scope: !10673)
!10715 = !DILocation(line: 4652, column: 22, scope: !10673)
!10716 = !DILocation(line: 4652, column: 14, scope: !10673)
!10717 = !DILocation(line: 4652, column: 11, scope: !10673)
!10718 = !DILocation(line: 4653, column: 10, scope: !10719)
!10719 = distinct !DILexicalBlock(scope: !10673, file: !3, line: 4653, column: 10)
!10720 = !DILocation(line: 4653, column: 15, scope: !10719)
!10721 = !DILocation(line: 4653, column: 18, scope: !10719)
!10722 = !DILocation(line: 4653, column: 10, scope: !10673)
!10723 = !DILocation(line: 4654, column: 15, scope: !10724)
!10724 = distinct !DILexicalBlock(scope: !10719, file: !3, line: 4653, column: 26)
!10725 = !DILocation(line: 4655, column: 14, scope: !10724)
!10726 = !DILocation(line: 4656, column: 5, scope: !10724)
!10727 = !DILocation(line: 4657, column: 33, scope: !10673)
!10728 = !DILocation(line: 4657, column: 40, scope: !10673)
!10729 = !DILocation(line: 4657, column: 46, scope: !10673)
!10730 = !DILocation(line: 4657, column: 12, scope: !10673)
!10731 = !DILocation(line: 4657, column: 5, scope: !10673)
!10732 = !DILocation(line: 4659, column: 1, scope: !10673)
!10733 = distinct !DISubprogram(name: "float128_to_floatx80", scope: !3, file: !3, line: 4670, type: !10734, isLocal: false, isDefinition: true, scopeLine: 4671, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10734 = !DISubroutineType(types: !10735)
!10735 = !{!1151, !1190}
!10736 = !DILocalVariable(name: "a", arg: 1, scope: !10733, file: !3, line: 4670, type: !1190)
!10737 = !DILocation(line: 4670, column: 41, scope: !10733)
!10738 = !DILocalVariable(name: "aSign", scope: !10733, file: !3, line: 4672, type: !1241)
!10739 = !DILocation(line: 4672, column: 10, scope: !10733)
!10740 = !DILocalVariable(name: "aExp", scope: !10733, file: !3, line: 4673, type: !1319)
!10741 = !DILocation(line: 4673, column: 11, scope: !10733)
!10742 = !DILocalVariable(name: "aSig0", scope: !10733, file: !3, line: 4674, type: !24)
!10743 = !DILocation(line: 4674, column: 12, scope: !10733)
!10744 = !DILocalVariable(name: "aSig1", scope: !10733, file: !3, line: 4674, type: !24)
!10745 = !DILocation(line: 4674, column: 19, scope: !10733)
!10746 = !DILocation(line: 4676, column: 13, scope: !10733)
!10747 = !DILocation(line: 4676, column: 11, scope: !10733)
!10748 = !DILocation(line: 4677, column: 13, scope: !10733)
!10749 = !DILocation(line: 4677, column: 11, scope: !10733)
!10750 = !DILocation(line: 4678, column: 12, scope: !10733)
!10751 = !DILocation(line: 4678, column: 10, scope: !10733)
!10752 = !DILocation(line: 4679, column: 13, scope: !10733)
!10753 = !DILocation(line: 4679, column: 11, scope: !10733)
!10754 = !DILocation(line: 4680, column: 10, scope: !10755)
!10755 = distinct !DILexicalBlock(scope: !10733, file: !3, line: 4680, column: 10)
!10756 = !DILocation(line: 4680, column: 15, scope: !10755)
!10757 = !DILocation(line: 4680, column: 10, scope: !10733)
!10758 = !DILocation(line: 4681, column: 14, scope: !10759)
!10759 = distinct !DILexicalBlock(scope: !10760, file: !3, line: 4681, column: 14)
!10760 = distinct !DILexicalBlock(scope: !10755, file: !3, line: 4680, column: 27)
!10761 = !DILocation(line: 4681, column: 22, scope: !10759)
!10762 = !DILocation(line: 4681, column: 20, scope: !10759)
!10763 = !DILocation(line: 4681, column: 14, scope: !10760)
!10764 = !DILocation(line: 4682, column: 41, scope: !10765)
!10765 = distinct !DILexicalBlock(scope: !10759, file: !3, line: 4681, column: 30)
!10766 = !DILocation(line: 4682, column: 20, scope: !10765)
!10767 = !DILocation(line: 4682, column: 13, scope: !10765)
!10768 = !DILocation(line: 4684, column: 30, scope: !10760)
!10769 = !DILocation(line: 4684, column: 16, scope: !10760)
!10770 = !DILocation(line: 4684, column: 9, scope: !10760)
!10771 = !DILocation(line: 4686, column: 10, scope: !10772)
!10772 = distinct !DILexicalBlock(scope: !10733, file: !3, line: 4686, column: 10)
!10773 = !DILocation(line: 4686, column: 15, scope: !10772)
!10774 = !DILocation(line: 4686, column: 10, scope: !10733)
!10775 = !DILocation(line: 4687, column: 16, scope: !10776)
!10776 = distinct !DILexicalBlock(scope: !10777, file: !3, line: 4687, column: 14)
!10777 = distinct !DILexicalBlock(scope: !10772, file: !3, line: 4686, column: 22)
!10778 = !DILocation(line: 4687, column: 24, scope: !10776)
!10779 = !DILocation(line: 4687, column: 22, scope: !10776)
!10780 = !DILocation(line: 4687, column: 32, scope: !10776)
!10781 = !DILocation(line: 4687, column: 14, scope: !10777)
!10782 = !DILocation(line: 4687, column: 60, scope: !10776)
!10783 = !DILocation(line: 4687, column: 46, scope: !10776)
!10784 = !DILocation(line: 4687, column: 39, scope: !10776)
!10785 = !DILocation(line: 4688, column: 37, scope: !10777)
!10786 = !DILocation(line: 4688, column: 44, scope: !10777)
!10787 = !DILocation(line: 4688, column: 9, scope: !10777)
!10788 = !DILocation(line: 4689, column: 5, scope: !10777)
!10789 = !DILocation(line: 4691, column: 15, scope: !10790)
!10790 = distinct !DILexicalBlock(scope: !10772, file: !3, line: 4690, column: 10)
!10791 = !DILocation(line: 4693, column: 24, scope: !10733)
!10792 = !DILocation(line: 4693, column: 31, scope: !10733)
!10793 = !DILocation(line: 4693, column: 5, scope: !10733)
!10794 = !DILocation(line: 4694, column: 38, scope: !10733)
!10795 = !DILocation(line: 4694, column: 45, scope: !10733)
!10796 = !DILocation(line: 4694, column: 51, scope: !10733)
!10797 = !DILocation(line: 4694, column: 58, scope: !10733)
!10798 = !DILocation(line: 4694, column: 12, scope: !10733)
!10799 = !DILocation(line: 4694, column: 5, scope: !10733)
!10800 = !DILocation(line: 4696, column: 1, scope: !10733)
!10801 = distinct !DISubprogram(name: "normalizeFloat128Subnormal", scope: !3, file: !3, line: 834, type: !10802, isLocal: true, isDefinition: true, scopeLine: 841, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10802 = !DISubroutineType(types: !10803)
!10803 = !{null, !24, !24, !8549, !119, !119}
!10804 = !DILocalVariable(name: "aSig0", arg: 1, scope: !10801, file: !3, line: 835, type: !24)
!10805 = !DILocation(line: 835, column: 13, scope: !10801)
!10806 = !DILocalVariable(name: "aSig1", arg: 2, scope: !10801, file: !3, line: 836, type: !24)
!10807 = !DILocation(line: 836, column: 13, scope: !10801)
!10808 = !DILocalVariable(name: "zExpPtr", arg: 3, scope: !10801, file: !3, line: 837, type: !8549)
!10809 = !DILocation(line: 837, column: 13, scope: !10801)
!10810 = !DILocalVariable(name: "zSig0Ptr", arg: 4, scope: !10801, file: !3, line: 838, type: !119)
!10811 = !DILocation(line: 838, column: 14, scope: !10801)
!10812 = !DILocalVariable(name: "zSig1Ptr", arg: 5, scope: !10801, file: !3, line: 839, type: !119)
!10813 = !DILocation(line: 839, column: 14, scope: !10801)
!10814 = !DILocalVariable(name: "shiftCount", scope: !10801, file: !3, line: 842, type: !38)
!10815 = !DILocation(line: 842, column: 10, scope: !10801)
!10816 = !DILocation(line: 844, column: 10, scope: !10817)
!10817 = distinct !DILexicalBlock(scope: !10801, file: !3, line: 844, column: 10)
!10818 = !DILocation(line: 844, column: 16, scope: !10817)
!10819 = !DILocation(line: 844, column: 10, scope: !10801)
!10820 = !DILocation(line: 845, column: 43, scope: !10821)
!10821 = distinct !DILexicalBlock(scope: !10817, file: !3, line: 844, column: 23)
!10822 = !DILocation(line: 845, column: 22, scope: !10821)
!10823 = !DILocation(line: 845, column: 51, scope: !10821)
!10824 = !DILocation(line: 845, column: 20, scope: !10821)
!10825 = !DILocation(line: 846, column: 14, scope: !10826)
!10826 = distinct !DILexicalBlock(scope: !10821, file: !3, line: 846, column: 14)
!10827 = !DILocation(line: 846, column: 25, scope: !10826)
!10828 = !DILocation(line: 846, column: 14, scope: !10821)
!10829 = !DILocation(line: 847, column: 25, scope: !10830)
!10830 = distinct !DILexicalBlock(scope: !10826, file: !3, line: 846, column: 31)
!10831 = !DILocation(line: 847, column: 36, scope: !10830)
!10832 = !DILocation(line: 847, column: 34, scope: !10830)
!10833 = !DILocation(line: 847, column: 30, scope: !10830)
!10834 = !DILocation(line: 847, column: 14, scope: !10830)
!10835 = !DILocation(line: 847, column: 23, scope: !10830)
!10836 = !DILocation(line: 848, column: 25, scope: !10830)
!10837 = !DILocation(line: 848, column: 34, scope: !10830)
!10838 = !DILocation(line: 848, column: 45, scope: !10830)
!10839 = !DILocation(line: 848, column: 30, scope: !10830)
!10840 = !DILocation(line: 848, column: 14, scope: !10830)
!10841 = !DILocation(line: 848, column: 23, scope: !10830)
!10842 = !DILocation(line: 849, column: 9, scope: !10830)
!10843 = !DILocation(line: 851, column: 25, scope: !10844)
!10844 = distinct !DILexicalBlock(scope: !10826, file: !3, line: 850, column: 14)
!10845 = !DILocation(line: 851, column: 32, scope: !10844)
!10846 = !DILocation(line: 851, column: 30, scope: !10844)
!10847 = !DILocation(line: 851, column: 14, scope: !10844)
!10848 = !DILocation(line: 851, column: 23, scope: !10844)
!10849 = !DILocation(line: 852, column: 14, scope: !10844)
!10850 = !DILocation(line: 852, column: 23, scope: !10844)
!10851 = !DILocation(line: 854, column: 22, scope: !10821)
!10852 = !DILocation(line: 854, column: 20, scope: !10821)
!10853 = !DILocation(line: 854, column: 33, scope: !10821)
!10854 = !DILocation(line: 854, column: 10, scope: !10821)
!10855 = !DILocation(line: 854, column: 18, scope: !10821)
!10856 = !DILocation(line: 855, column: 5, scope: !10821)
!10857 = !DILocation(line: 857, column: 43, scope: !10858)
!10858 = distinct !DILexicalBlock(scope: !10817, file: !3, line: 856, column: 10)
!10859 = !DILocation(line: 857, column: 22, scope: !10858)
!10860 = !DILocation(line: 857, column: 51, scope: !10858)
!10861 = !DILocation(line: 857, column: 20, scope: !10858)
!10862 = !DILocation(line: 858, column: 28, scope: !10858)
!10863 = !DILocation(line: 858, column: 35, scope: !10858)
!10864 = !DILocation(line: 858, column: 42, scope: !10858)
!10865 = !DILocation(line: 858, column: 54, scope: !10858)
!10866 = !DILocation(line: 858, column: 64, scope: !10858)
!10867 = !DILocation(line: 858, column: 9, scope: !10858)
!10868 = !DILocation(line: 859, column: 24, scope: !10858)
!10869 = !DILocation(line: 859, column: 22, scope: !10858)
!10870 = !DILocation(line: 859, column: 10, scope: !10858)
!10871 = !DILocation(line: 859, column: 18, scope: !10858)
!10872 = !DILocation(line: 862, column: 1, scope: !10801)
!10873 = distinct !DISubprogram(name: "float128_round_to_int", scope: !3, file: !3, line: 4707, type: !10874, isLocal: false, isDefinition: true, scopeLine: 4708, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!10874 = !DISubroutineType(types: !10875)
!10875 = !{!1190, !1190}
!10876 = !DILocalVariable(name: "a", arg: 1, scope: !10873, file: !3, line: 4707, type: !1190)
!10877 = !DILocation(line: 4707, column: 42, scope: !10873)
!10878 = !DILocalVariable(name: "aSign", scope: !10873, file: !3, line: 4709, type: !1241)
!10879 = !DILocation(line: 4709, column: 10, scope: !10873)
!10880 = !DILocalVariable(name: "aExp", scope: !10873, file: !3, line: 4710, type: !1319)
!10881 = !DILocation(line: 4710, column: 11, scope: !10873)
!10882 = !DILocalVariable(name: "lastBitMask", scope: !10873, file: !3, line: 4711, type: !24)
!10883 = !DILocation(line: 4711, column: 12, scope: !10873)
!10884 = !DILocalVariable(name: "roundBitsMask", scope: !10873, file: !3, line: 4711, type: !24)
!10885 = !DILocation(line: 4711, column: 25, scope: !10873)
!10886 = !DILocalVariable(name: "roundingMode", scope: !10873, file: !3, line: 4712, type: !38)
!10887 = !DILocation(line: 4712, column: 10, scope: !10873)
!10888 = !DILocalVariable(name: "z", scope: !10873, file: !3, line: 4713, type: !1190)
!10889 = !DILocation(line: 4713, column: 14, scope: !10873)
!10890 = !DILocation(line: 4715, column: 12, scope: !10873)
!10891 = !DILocation(line: 4715, column: 10, scope: !10873)
!10892 = !DILocation(line: 4716, column: 20, scope: !10893)
!10893 = distinct !DILexicalBlock(scope: !10873, file: !3, line: 4716, column: 10)
!10894 = !DILocation(line: 4716, column: 17, scope: !10893)
!10895 = !DILocation(line: 4716, column: 10, scope: !10873)
!10896 = !DILocation(line: 4717, column: 24, scope: !10897)
!10897 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 4717, column: 14)
!10898 = distinct !DILexicalBlock(scope: !10893, file: !3, line: 4716, column: 27)
!10899 = !DILocation(line: 4717, column: 21, scope: !10897)
!10900 = !DILocation(line: 4717, column: 14, scope: !10898)
!10901 = !DILocation(line: 4718, column: 23, scope: !10902)
!10902 = distinct !DILexicalBlock(scope: !10903, file: !3, line: 4718, column: 21)
!10903 = distinct !DILexicalBlock(scope: !10897, file: !3, line: 4717, column: 31)
!10904 = !DILocation(line: 4718, column: 28, scope: !10902)
!10905 = !DILocation(line: 4719, column: 18, scope: !10902)
!10906 = !DILocation(line: 4719, column: 23, scope: !10902)
!10907 = !DILocation(line: 4719, column: 51, scope: !10902)
!10908 = !DILocation(line: 4719, column: 49, scope: !10902)
!10909 = !DILocation(line: 4718, column: 21, scope: !10903)
!10910 = !DILocation(line: 4721, column: 24, scope: !10911)
!10911 = distinct !DILexicalBlock(scope: !10902, file: !3, line: 4720, column: 18)
!10912 = !DILocation(line: 4721, column: 17, scope: !10911)
!10913 = !DILocation(line: 4723, column: 20, scope: !10903)
!10914 = !DILocation(line: 4723, column: 13, scope: !10903)
!10915 = !DILocation(line: 4725, column: 21, scope: !10898)
!10916 = !DILocation(line: 4726, column: 25, scope: !10898)
!10917 = !DILocation(line: 4726, column: 49, scope: !10898)
!10918 = !DILocation(line: 4726, column: 47, scope: !10898)
!10919 = !DILocation(line: 4726, column: 36, scope: !10898)
!10920 = !DILocation(line: 4726, column: 57, scope: !10898)
!10921 = !DILocation(line: 4726, column: 21, scope: !10898)
!10922 = !DILocation(line: 4727, column: 25, scope: !10898)
!10923 = !DILocation(line: 4727, column: 37, scope: !10898)
!10924 = !DILocation(line: 4727, column: 23, scope: !10898)
!10925 = !DILocation(line: 4728, column: 13, scope: !10898)
!10926 = !DILocation(line: 4729, column: 24, scope: !10898)
!10927 = !DILocation(line: 4729, column: 22, scope: !10898)
!10928 = !DILocation(line: 4730, column: 14, scope: !10929)
!10929 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 4730, column: 14)
!10930 = !DILocation(line: 4730, column: 27, scope: !10929)
!10931 = !DILocation(line: 4730, column: 14, scope: !10898)
!10932 = !DILocation(line: 4731, column: 18, scope: !10933)
!10933 = distinct !DILexicalBlock(scope: !10934, file: !3, line: 4731, column: 18)
!10934 = distinct !DILexicalBlock(scope: !10929, file: !3, line: 4730, column: 57)
!10935 = !DILocation(line: 4731, column: 18, scope: !10934)
!10936 = !DILocation(line: 4732, column: 27, scope: !10937)
!10937 = distinct !DILexicalBlock(scope: !10933, file: !3, line: 4731, column: 32)
!10938 = !DILocation(line: 4732, column: 35, scope: !10937)
!10939 = !DILocation(line: 4732, column: 43, scope: !10937)
!10940 = !DILocation(line: 4732, column: 54, scope: !10937)
!10941 = !DILocation(line: 4732, column: 62, scope: !10937)
!10942 = !DILocation(line: 4732, column: 71, scope: !10937)
!10943 = !DILocation(line: 4732, column: 17, scope: !10937)
!10944 = !DILocation(line: 4733, column: 26, scope: !10945)
!10945 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 4733, column: 22)
!10946 = !DILocation(line: 4733, column: 32, scope: !10945)
!10947 = !DILocation(line: 4733, column: 30, scope: !10945)
!10948 = !DILocation(line: 4733, column: 48, scope: !10945)
!10949 = !DILocation(line: 4733, column: 22, scope: !10937)
!10950 = !DILocation(line: 4733, column: 66, scope: !10945)
!10951 = !DILocation(line: 4733, column: 64, scope: !10945)
!10952 = !DILocation(line: 4733, column: 57, scope: !10945)
!10953 = !DILocation(line: 4733, column: 61, scope: !10945)
!10954 = !DILocation(line: 4733, column: 55, scope: !10945)
!10955 = !DILocation(line: 4734, column: 13, scope: !10937)
!10956 = !DILocation(line: 4736, column: 34, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !10958, file: !3, line: 4736, column: 22)
!10958 = distinct !DILexicalBlock(scope: !10933, file: !3, line: 4735, column: 18)
!10959 = !DILocation(line: 4736, column: 38, scope: !10957)
!10960 = !DILocation(line: 4736, column: 22, scope: !10958)
!10961 = !DILocation(line: 4737, column: 25, scope: !10962)
!10962 = distinct !DILexicalBlock(scope: !10957, file: !3, line: 4736, column: 44)
!10963 = !DILocation(line: 4737, column: 21, scope: !10962)
!10964 = !DILocation(line: 4738, column: 39, scope: !10965)
!10965 = distinct !DILexicalBlock(scope: !10962, file: !3, line: 4738, column: 26)
!10966 = !DILocation(line: 4738, column: 42, scope: !10965)
!10967 = !DILocation(line: 4738, column: 48, scope: !10965)
!10968 = !DILocation(line: 4738, column: 26, scope: !10962)
!10969 = !DILocation(line: 4738, column: 57, scope: !10965)
!10970 = !DILocation(line: 4738, column: 62, scope: !10965)
!10971 = !DILocation(line: 4738, column: 55, scope: !10965)
!10972 = !DILocation(line: 4739, column: 17, scope: !10962)
!10973 = !DILocation(line: 4741, column: 9, scope: !10934)
!10974 = !DILocation(line: 4742, column: 19, scope: !10975)
!10975 = distinct !DILexicalBlock(scope: !10929, file: !3, line: 4742, column: 19)
!10976 = !DILocation(line: 4742, column: 32, scope: !10975)
!10977 = !DILocation(line: 4742, column: 19, scope: !10929)
!10978 = !DILocation(line: 4743, column: 20, scope: !10979)
!10979 = distinct !DILexicalBlock(scope: !10980, file: !3, line: 4743, column: 20)
!10980 = distinct !DILexicalBlock(scope: !10975, file: !3, line: 4742, column: 57)
!10981 = !DILocation(line: 4744, column: 22, scope: !10979)
!10982 = !DILocation(line: 4744, column: 35, scope: !10979)
!10983 = !DILocation(line: 4744, column: 18, scope: !10979)
!10984 = !DILocation(line: 4743, column: 20, scope: !10980)
!10985 = !DILocation(line: 4745, column: 27, scope: !10986)
!10986 = distinct !DILexicalBlock(scope: !10979, file: !3, line: 4744, column: 57)
!10987 = !DILocation(line: 4745, column: 35, scope: !10986)
!10988 = !DILocation(line: 4745, column: 43, scope: !10986)
!10989 = !DILocation(line: 4745, column: 61, scope: !10986)
!10990 = !DILocation(line: 4745, column: 70, scope: !10986)
!10991 = !DILocation(line: 4745, column: 17, scope: !10986)
!10992 = !DILocation(line: 4746, column: 13, scope: !10986)
!10993 = !DILocation(line: 4747, column: 9, scope: !10980)
!10994 = !DILocation(line: 4748, column: 20, scope: !10898)
!10995 = !DILocation(line: 4748, column: 18, scope: !10898)
!10996 = !DILocation(line: 4748, column: 11, scope: !10898)
!10997 = !DILocation(line: 4748, column: 15, scope: !10898)
!10998 = !DILocation(line: 4749, column: 5, scope: !10898)
!10999 = !DILocation(line: 4751, column: 14, scope: !11000)
!11000 = distinct !DILexicalBlock(scope: !11001, file: !3, line: 4751, column: 14)
!11001 = distinct !DILexicalBlock(scope: !10893, file: !3, line: 4750, column: 10)
!11002 = !DILocation(line: 4751, column: 19, scope: !11000)
!11003 = !DILocation(line: 4751, column: 14, scope: !11001)
!11004 = !DILocation(line: 4752, column: 35, scope: !11005)
!11005 = distinct !DILexicalBlock(scope: !11006, file: !3, line: 4752, column: 18)
!11006 = distinct !DILexicalBlock(scope: !11000, file: !3, line: 4751, column: 30)
!11007 = !DILocation(line: 4752, column: 39, scope: !11005)
!11008 = !DILocation(line: 4752, column: 51, scope: !11005)
!11009 = !DILocation(line: 4752, column: 47, scope: !11005)
!11010 = !DILocation(line: 4752, column: 57, scope: !11005)
!11011 = !DILocation(line: 4752, column: 18, scope: !11006)
!11012 = !DILocation(line: 4752, column: 71, scope: !11005)
!11013 = !DILocation(line: 4752, column: 64, scope: !11005)
!11014 = !DILocation(line: 4753, column: 35, scope: !11006)
!11015 = !DILocation(line: 4754, column: 21, scope: !11006)
!11016 = !DILocation(line: 4754, column: 19, scope: !11006)
!11017 = !DILocation(line: 4755, column: 22, scope: !11006)
!11018 = !DILocation(line: 4755, column: 13, scope: !11006)
!11019 = !DILocation(line: 4757, column: 27, scope: !11020)
!11020 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4757, column: 25)
!11021 = distinct !DILexicalBlock(scope: !11006, file: !3, line: 4755, column: 44)
!11022 = !DILocation(line: 4757, column: 32, scope: !11020)
!11023 = !DILocation(line: 4758, column: 22, scope: !11020)
!11024 = !DILocation(line: 4758, column: 29, scope: !11020)
!11025 = !DILocation(line: 4759, column: 29, scope: !11020)
!11026 = !DILocation(line: 4759, column: 27, scope: !11020)
!11027 = !DILocation(line: 4757, column: 25, scope: !11021)
!11028 = !DILocation(line: 4761, column: 42, scope: !11029)
!11029 = distinct !DILexicalBlock(scope: !11020, file: !3, line: 4760, column: 22)
!11030 = !DILocation(line: 4761, column: 28, scope: !11029)
!11031 = !DILocation(line: 4761, column: 21, scope: !11029)
!11032 = !DILocation(line: 4763, column: 17, scope: !11021)
!11033 = !DILocation(line: 4766, column: 23, scope: !11021)
!11034 = !DILocation(line: 4766, column: 31, scope: !11021)
!11035 = !DILocation(line: 4767, column: 23, scope: !11021)
!11036 = !DILocation(line: 4765, column: 17, scope: !11021)
!11037 = !DILocation(line: 4770, column: 23, scope: !11021)
!11038 = !DILocation(line: 4770, column: 31, scope: !11021)
!11039 = !DILocation(line: 4771, column: 23, scope: !11021)
!11040 = !DILocation(line: 4769, column: 17, scope: !11021)
!11041 = !DILocation(line: 4773, column: 34, scope: !11006)
!11042 = !DILocation(line: 4773, column: 20, scope: !11006)
!11043 = !DILocation(line: 4773, column: 13, scope: !11006)
!11044 = !DILocation(line: 4775, column: 21, scope: !11001)
!11045 = !DILocation(line: 4776, column: 34, scope: !11001)
!11046 = !DILocation(line: 4776, column: 32, scope: !11001)
!11047 = !DILocation(line: 4776, column: 21, scope: !11001)
!11048 = !DILocation(line: 4777, column: 25, scope: !11001)
!11049 = !DILocation(line: 4777, column: 37, scope: !11001)
!11050 = !DILocation(line: 4777, column: 23, scope: !11001)
!11051 = !DILocation(line: 4778, column: 11, scope: !11001)
!11052 = !DILocation(line: 4778, column: 15, scope: !11001)
!11053 = !DILocation(line: 4779, column: 20, scope: !11001)
!11054 = !DILocation(line: 4779, column: 11, scope: !11001)
!11055 = !DILocation(line: 4779, column: 16, scope: !11001)
!11056 = !DILocation(line: 4780, column: 24, scope: !11001)
!11057 = !DILocation(line: 4780, column: 22, scope: !11001)
!11058 = !DILocation(line: 4781, column: 14, scope: !11059)
!11059 = distinct !DILexicalBlock(scope: !11001, file: !3, line: 4781, column: 14)
!11060 = !DILocation(line: 4781, column: 27, scope: !11059)
!11061 = !DILocation(line: 4781, column: 14, scope: !11001)
!11062 = !DILocation(line: 4782, column: 23, scope: !11063)
!11063 = distinct !DILexicalBlock(scope: !11059, file: !3, line: 4781, column: 57)
!11064 = !DILocation(line: 4782, column: 34, scope: !11063)
!11065 = !DILocation(line: 4782, column: 15, scope: !11063)
!11066 = !DILocation(line: 4782, column: 20, scope: !11063)
!11067 = !DILocation(line: 4783, column: 24, scope: !11068)
!11068 = distinct !DILexicalBlock(scope: !11063, file: !3, line: 4783, column: 18)
!11069 = !DILocation(line: 4783, column: 31, scope: !11068)
!11070 = !DILocation(line: 4783, column: 29, scope: !11068)
!11071 = !DILocation(line: 4783, column: 51, scope: !11068)
!11072 = !DILocation(line: 4783, column: 47, scope: !11068)
!11073 = !DILocation(line: 4783, column: 57, scope: !11068)
!11074 = !DILocation(line: 4783, column: 18, scope: !11063)
!11075 = !DILocation(line: 4784, column: 29, scope: !11076)
!11076 = distinct !DILexicalBlock(scope: !11068, file: !3, line: 4783, column: 64)
!11077 = !DILocation(line: 4784, column: 27, scope: !11076)
!11078 = !DILocation(line: 4784, column: 19, scope: !11076)
!11079 = !DILocation(line: 4784, column: 24, scope: !11076)
!11080 = !DILocation(line: 4785, column: 13, scope: !11076)
!11081 = !DILocation(line: 4786, column: 9, scope: !11063)
!11082 = !DILocation(line: 4787, column: 19, scope: !11083)
!11083 = distinct !DILexicalBlock(scope: !11059, file: !3, line: 4787, column: 19)
!11084 = !DILocation(line: 4787, column: 32, scope: !11083)
!11085 = !DILocation(line: 4787, column: 19, scope: !11059)
!11086 = !DILocation(line: 4788, column: 20, scope: !11087)
!11087 = distinct !DILexicalBlock(scope: !11088, file: !3, line: 4788, column: 20)
!11088 = distinct !DILexicalBlock(scope: !11083, file: !3, line: 4787, column: 57)
!11089 = !DILocation(line: 4789, column: 22, scope: !11087)
!11090 = !DILocation(line: 4789, column: 35, scope: !11087)
!11091 = !DILocation(line: 4789, column: 18, scope: !11087)
!11092 = !DILocation(line: 4788, column: 20, scope: !11088)
!11093 = !DILocation(line: 4790, column: 31, scope: !11094)
!11094 = distinct !DILexicalBlock(scope: !11087, file: !3, line: 4789, column: 57)
!11095 = !DILocation(line: 4790, column: 35, scope: !11094)
!11096 = !DILocation(line: 4790, column: 27, scope: !11094)
!11097 = !DILocation(line: 4790, column: 19, scope: !11094)
!11098 = !DILocation(line: 4790, column: 24, scope: !11094)
!11099 = !DILocation(line: 4791, column: 27, scope: !11094)
!11100 = !DILocation(line: 4791, column: 19, scope: !11094)
!11101 = !DILocation(line: 4791, column: 24, scope: !11094)
!11102 = !DILocation(line: 4792, column: 13, scope: !11094)
!11103 = !DILocation(line: 4793, column: 9, scope: !11088)
!11104 = !DILocation(line: 4794, column: 21, scope: !11001)
!11105 = !DILocation(line: 4794, column: 19, scope: !11001)
!11106 = !DILocation(line: 4794, column: 11, scope: !11001)
!11107 = !DILocation(line: 4794, column: 16, scope: !11001)
!11108 = !DILocation(line: 4796, column: 14, scope: !11109)
!11109 = distinct !DILexicalBlock(scope: !10873, file: !3, line: 4796, column: 10)
!11110 = !DILocation(line: 4796, column: 23, scope: !11109)
!11111 = !DILocation(line: 4796, column: 18, scope: !11109)
!11112 = !DILocation(line: 4796, column: 29, scope: !11109)
!11113 = !DILocation(line: 4796, column: 36, scope: !11109)
!11114 = !DILocation(line: 4796, column: 46, scope: !11109)
!11115 = !DILocation(line: 4796, column: 41, scope: !11109)
!11116 = !DILocation(line: 4796, column: 10, scope: !10873)
!11117 = !DILocation(line: 4797, column: 31, scope: !11118)
!11118 = distinct !DILexicalBlock(scope: !11109, file: !3, line: 4796, column: 55)
!11119 = !DILocation(line: 4798, column: 5, scope: !11118)
!11120 = !DILocation(line: 4799, column: 12, scope: !10873)
!11121 = !DILocation(line: 4799, column: 5, scope: !10873)
!11122 = !DILocation(line: 4801, column: 1, scope: !10873)
!11123 = distinct !DISubprogram(name: "propagateFloat128NaN", scope: !43, file: !43, line: 396, type: !11124, isLocal: true, isDefinition: true, scopeLine: 397, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11124 = !DISubroutineType(types: !11125)
!11125 = !{!1190, !1190, !1190}
!11126 = !DILocalVariable(name: "a", arg: 1, scope: !11123, file: !43, line: 396, type: !1190)
!11127 = !DILocation(line: 396, column: 48, scope: !11123)
!11128 = !DILocalVariable(name: "b", arg: 2, scope: !11123, file: !43, line: 396, type: !1190)
!11129 = !DILocation(line: 396, column: 60, scope: !11123)
!11130 = !DILocalVariable(name: "aIsNaN", scope: !11123, file: !43, line: 398, type: !1241)
!11131 = !DILocation(line: 398, column: 10, scope: !11123)
!11132 = !DILocalVariable(name: "aIsSignalingNaN", scope: !11123, file: !43, line: 398, type: !1241)
!11133 = !DILocation(line: 398, column: 18, scope: !11123)
!11134 = !DILocalVariable(name: "bIsNaN", scope: !11123, file: !43, line: 398, type: !1241)
!11135 = !DILocation(line: 398, column: 35, scope: !11123)
!11136 = !DILocalVariable(name: "bIsSignalingNaN", scope: !11123, file: !43, line: 398, type: !1241)
!11137 = !DILocation(line: 398, column: 43, scope: !11123)
!11138 = !DILocation(line: 400, column: 14, scope: !11123)
!11139 = !DILocation(line: 400, column: 12, scope: !11123)
!11140 = !DILocation(line: 401, column: 23, scope: !11123)
!11141 = !DILocation(line: 401, column: 21, scope: !11123)
!11142 = !DILocation(line: 402, column: 14, scope: !11123)
!11143 = !DILocation(line: 402, column: 12, scope: !11123)
!11144 = !DILocation(line: 403, column: 23, scope: !11123)
!11145 = !DILocation(line: 403, column: 21, scope: !11123)
!11146 = !DILocation(line: 404, column: 7, scope: !11123)
!11147 = !DILocation(line: 404, column: 12, scope: !11123)
!11148 = !DILocation(line: 405, column: 7, scope: !11123)
!11149 = !DILocation(line: 405, column: 12, scope: !11123)
!11150 = !DILocation(line: 406, column: 10, scope: !11151)
!11151 = distinct !DILexicalBlock(scope: !11123, file: !43, line: 406, column: 10)
!11152 = !DILocation(line: 406, column: 28, scope: !11151)
!11153 = !DILocation(line: 406, column: 26, scope: !11151)
!11154 = !DILocation(line: 406, column: 10, scope: !11123)
!11155 = !DILocation(line: 406, column: 46, scope: !11151)
!11156 = !DILocation(line: 407, column: 12, scope: !11123)
!11157 = !DILocation(line: 407, column: 30, scope: !11123)
!11158 = !DILocation(line: 407, column: 34, scope: !11123)
!11159 = !DILocation(line: 407, column: 52, scope: !11123)
!11160 = !DILocation(line: 407, column: 56, scope: !11123)
!11161 = !DILocation(line: 407, column: 65, scope: !11123)
!11162 = !DILocation(line: 407, column: 69, scope: !11123)
!11163 = !DILocation(line: 407, column: 5, scope: !11123)
!11164 = distinct !DISubprogram(name: "float128_add", scope: !3, file: !3, line: 4971, type: !11124, isLocal: false, isDefinition: true, scopeLine: 4972, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11165 = !DILocalVariable(name: "a", arg: 1, scope: !11164, file: !3, line: 4971, type: !1190)
!11166 = !DILocation(line: 4971, column: 33, scope: !11164)
!11167 = !DILocalVariable(name: "b", arg: 2, scope: !11164, file: !3, line: 4971, type: !1190)
!11168 = !DILocation(line: 4971, column: 45, scope: !11164)
!11169 = !DILocalVariable(name: "aSign", scope: !11164, file: !3, line: 4973, type: !1241)
!11170 = !DILocation(line: 4973, column: 10, scope: !11164)
!11171 = !DILocalVariable(name: "bSign", scope: !11164, file: !3, line: 4973, type: !1241)
!11172 = !DILocation(line: 4973, column: 17, scope: !11164)
!11173 = !DILocation(line: 4975, column: 13, scope: !11164)
!11174 = !DILocation(line: 4975, column: 11, scope: !11164)
!11175 = !DILocation(line: 4976, column: 13, scope: !11164)
!11176 = !DILocation(line: 4976, column: 11, scope: !11164)
!11177 = !DILocation(line: 4977, column: 10, scope: !11178)
!11178 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 4977, column: 10)
!11179 = !DILocation(line: 4977, column: 19, scope: !11178)
!11180 = !DILocation(line: 4977, column: 16, scope: !11178)
!11181 = !DILocation(line: 4977, column: 10, scope: !11164)
!11182 = !DILocation(line: 4978, column: 39, scope: !11183)
!11183 = distinct !DILexicalBlock(scope: !11178, file: !3, line: 4977, column: 27)
!11184 = !DILocation(line: 4978, column: 16, scope: !11183)
!11185 = !DILocation(line: 4978, column: 9, scope: !11183)
!11186 = !DILocation(line: 4981, column: 39, scope: !11187)
!11187 = distinct !DILexicalBlock(scope: !11178, file: !3, line: 4980, column: 10)
!11188 = !DILocation(line: 4981, column: 16, scope: !11187)
!11189 = !DILocation(line: 4981, column: 9, scope: !11187)
!11190 = !DILocation(line: 4984, column: 1, scope: !11164)
!11191 = distinct !DISubprogram(name: "addFloat128Sigs", scope: !3, file: !3, line: 4811, type: !11192, isLocal: true, isDefinition: true, scopeLine: 4812, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11192 = !DISubroutineType(types: !11193)
!11193 = !{!1190, !1190, !1190, !1241}
!11194 = !DILocalVariable(name: "a", arg: 1, scope: !11191, file: !3, line: 4811, type: !1190)
!11195 = !DILocation(line: 4811, column: 43, scope: !11191)
!11196 = !DILocalVariable(name: "b", arg: 2, scope: !11191, file: !3, line: 4811, type: !1190)
!11197 = !DILocation(line: 4811, column: 55, scope: !11191)
!11198 = !DILocalVariable(name: "zSign", arg: 3, scope: !11191, file: !3, line: 4811, type: !1241)
!11199 = !DILocation(line: 4811, column: 63, scope: !11191)
!11200 = !DILocalVariable(name: "aExp", scope: !11191, file: !3, line: 4813, type: !1319)
!11201 = !DILocation(line: 4813, column: 11, scope: !11191)
!11202 = !DILocalVariable(name: "bExp", scope: !11191, file: !3, line: 4813, type: !1319)
!11203 = !DILocation(line: 4813, column: 17, scope: !11191)
!11204 = !DILocalVariable(name: "zExp", scope: !11191, file: !3, line: 4813, type: !1319)
!11205 = !DILocation(line: 4813, column: 23, scope: !11191)
!11206 = !DILocalVariable(name: "aSig0", scope: !11191, file: !3, line: 4814, type: !24)
!11207 = !DILocation(line: 4814, column: 12, scope: !11191)
!11208 = !DILocalVariable(name: "aSig1", scope: !11191, file: !3, line: 4814, type: !24)
!11209 = !DILocation(line: 4814, column: 19, scope: !11191)
!11210 = !DILocalVariable(name: "bSig0", scope: !11191, file: !3, line: 4814, type: !24)
!11211 = !DILocation(line: 4814, column: 26, scope: !11191)
!11212 = !DILocalVariable(name: "bSig1", scope: !11191, file: !3, line: 4814, type: !24)
!11213 = !DILocation(line: 4814, column: 33, scope: !11191)
!11214 = !DILocalVariable(name: "zSig0", scope: !11191, file: !3, line: 4814, type: !24)
!11215 = !DILocation(line: 4814, column: 40, scope: !11191)
!11216 = !DILocalVariable(name: "zSig1", scope: !11191, file: !3, line: 4814, type: !24)
!11217 = !DILocation(line: 4814, column: 47, scope: !11191)
!11218 = !DILocalVariable(name: "zSig2", scope: !11191, file: !3, line: 4814, type: !24)
!11219 = !DILocation(line: 4814, column: 54, scope: !11191)
!11220 = !DILocalVariable(name: "expDiff", scope: !11191, file: !3, line: 4815, type: !1319)
!11221 = !DILocation(line: 4815, column: 11, scope: !11191)
!11222 = !DILocation(line: 4817, column: 13, scope: !11191)
!11223 = !DILocation(line: 4817, column: 11, scope: !11191)
!11224 = !DILocation(line: 4818, column: 13, scope: !11191)
!11225 = !DILocation(line: 4818, column: 11, scope: !11191)
!11226 = !DILocation(line: 4819, column: 12, scope: !11191)
!11227 = !DILocation(line: 4819, column: 10, scope: !11191)
!11228 = !DILocation(line: 4820, column: 13, scope: !11191)
!11229 = !DILocation(line: 4820, column: 11, scope: !11191)
!11230 = !DILocation(line: 4821, column: 13, scope: !11191)
!11231 = !DILocation(line: 4821, column: 11, scope: !11191)
!11232 = !DILocation(line: 4822, column: 12, scope: !11191)
!11233 = !DILocation(line: 4822, column: 10, scope: !11191)
!11234 = !DILocation(line: 4823, column: 15, scope: !11191)
!11235 = !DILocation(line: 4823, column: 22, scope: !11191)
!11236 = !DILocation(line: 4823, column: 20, scope: !11191)
!11237 = !DILocation(line: 4823, column: 13, scope: !11191)
!11238 = !DILocation(line: 4824, column: 14, scope: !11239)
!11239 = distinct !DILexicalBlock(scope: !11191, file: !3, line: 4824, column: 10)
!11240 = !DILocation(line: 4824, column: 12, scope: !11239)
!11241 = !DILocation(line: 4824, column: 10, scope: !11191)
!11242 = !DILocation(line: 4825, column: 14, scope: !11243)
!11243 = distinct !DILexicalBlock(scope: !11244, file: !3, line: 4825, column: 14)
!11244 = distinct !DILexicalBlock(scope: !11239, file: !3, line: 4824, column: 24)
!11245 = !DILocation(line: 4825, column: 19, scope: !11243)
!11246 = !DILocation(line: 4825, column: 14, scope: !11244)
!11247 = !DILocation(line: 4826, column: 18, scope: !11248)
!11248 = distinct !DILexicalBlock(scope: !11249, file: !3, line: 4826, column: 18)
!11249 = distinct !DILexicalBlock(scope: !11243, file: !3, line: 4825, column: 31)
!11250 = !DILocation(line: 4826, column: 26, scope: !11248)
!11251 = !DILocation(line: 4826, column: 24, scope: !11248)
!11252 = !DILocation(line: 4826, column: 18, scope: !11249)
!11253 = !DILocation(line: 4826, column: 41, scope: !11248)
!11254 = !DILocation(line: 4826, column: 34, scope: !11248)
!11255 = !DILocation(line: 4827, column: 20, scope: !11249)
!11256 = !DILocation(line: 4827, column: 13, scope: !11249)
!11257 = !DILocation(line: 4829, column: 14, scope: !11258)
!11258 = distinct !DILexicalBlock(scope: !11244, file: !3, line: 4829, column: 14)
!11259 = !DILocation(line: 4829, column: 19, scope: !11258)
!11260 = !DILocation(line: 4829, column: 14, scope: !11244)
!11261 = !DILocation(line: 4830, column: 13, scope: !11262)
!11262 = distinct !DILexicalBlock(scope: !11258, file: !3, line: 4829, column: 26)
!11263 = !DILocation(line: 4831, column: 9, scope: !11262)
!11264 = !DILocation(line: 4833, column: 19, scope: !11265)
!11265 = distinct !DILexicalBlock(scope: !11258, file: !3, line: 4832, column: 14)
!11266 = !DILocation(line: 4836, column: 13, scope: !11244)
!11267 = !DILocation(line: 4836, column: 20, scope: !11244)
!11268 = !DILocation(line: 4836, column: 30, scope: !11244)
!11269 = !DILocation(line: 4835, column: 9, scope: !11244)
!11270 = !DILocation(line: 4837, column: 16, scope: !11244)
!11271 = !DILocation(line: 4837, column: 14, scope: !11244)
!11272 = !DILocation(line: 4838, column: 5, scope: !11244)
!11273 = !DILocation(line: 4839, column: 15, scope: !11274)
!11274 = distinct !DILexicalBlock(scope: !11239, file: !3, line: 4839, column: 15)
!11275 = !DILocation(line: 4839, column: 23, scope: !11274)
!11276 = !DILocation(line: 4839, column: 15, scope: !11239)
!11277 = !DILocation(line: 4840, column: 14, scope: !11278)
!11278 = distinct !DILexicalBlock(scope: !11279, file: !3, line: 4840, column: 14)
!11279 = distinct !DILexicalBlock(scope: !11274, file: !3, line: 4839, column: 29)
!11280 = !DILocation(line: 4840, column: 19, scope: !11278)
!11281 = !DILocation(line: 4840, column: 14, scope: !11279)
!11282 = !DILocation(line: 4841, column: 18, scope: !11283)
!11283 = distinct !DILexicalBlock(scope: !11284, file: !3, line: 4841, column: 18)
!11284 = distinct !DILexicalBlock(scope: !11278, file: !3, line: 4840, column: 31)
!11285 = !DILocation(line: 4841, column: 26, scope: !11283)
!11286 = !DILocation(line: 4841, column: 24, scope: !11283)
!11287 = !DILocation(line: 4841, column: 18, scope: !11284)
!11288 = !DILocation(line: 4841, column: 41, scope: !11283)
!11289 = !DILocation(line: 4841, column: 34, scope: !11283)
!11290 = !DILocation(line: 4842, column: 34, scope: !11284)
!11291 = !DILocation(line: 4842, column: 20, scope: !11284)
!11292 = !DILocation(line: 4842, column: 13, scope: !11284)
!11293 = !DILocation(line: 4844, column: 14, scope: !11294)
!11294 = distinct !DILexicalBlock(scope: !11279, file: !3, line: 4844, column: 14)
!11295 = !DILocation(line: 4844, column: 19, scope: !11294)
!11296 = !DILocation(line: 4844, column: 14, scope: !11279)
!11297 = !DILocation(line: 4845, column: 13, scope: !11298)
!11298 = distinct !DILexicalBlock(scope: !11294, file: !3, line: 4844, column: 26)
!11299 = !DILocation(line: 4846, column: 9, scope: !11298)
!11300 = !DILocation(line: 4848, column: 19, scope: !11301)
!11301 = distinct !DILexicalBlock(scope: !11294, file: !3, line: 4847, column: 14)
!11302 = !DILocation(line: 4851, column: 13, scope: !11279)
!11303 = !DILocation(line: 4851, column: 20, scope: !11279)
!11304 = !DILocation(line: 4851, column: 32, scope: !11279)
!11305 = !DILocation(line: 4851, column: 30, scope: !11279)
!11306 = !DILocation(line: 4850, column: 9, scope: !11279)
!11307 = !DILocation(line: 4852, column: 16, scope: !11279)
!11308 = !DILocation(line: 4852, column: 14, scope: !11279)
!11309 = !DILocation(line: 4853, column: 5, scope: !11279)
!11310 = !DILocation(line: 4855, column: 14, scope: !11311)
!11311 = distinct !DILexicalBlock(scope: !11312, file: !3, line: 4855, column: 14)
!11312 = distinct !DILexicalBlock(scope: !11274, file: !3, line: 4854, column: 10)
!11313 = !DILocation(line: 4855, column: 19, scope: !11311)
!11314 = !DILocation(line: 4855, column: 14, scope: !11312)
!11315 = !DILocation(line: 4856, column: 18, scope: !11316)
!11316 = distinct !DILexicalBlock(scope: !11317, file: !3, line: 4856, column: 18)
!11317 = distinct !DILexicalBlock(scope: !11311, file: !3, line: 4855, column: 31)
!11318 = !DILocation(line: 4856, column: 26, scope: !11316)
!11319 = !DILocation(line: 4856, column: 24, scope: !11316)
!11320 = !DILocation(line: 4856, column: 34, scope: !11316)
!11321 = !DILocation(line: 4856, column: 32, scope: !11316)
!11322 = !DILocation(line: 4856, column: 42, scope: !11316)
!11323 = !DILocation(line: 4856, column: 40, scope: !11316)
!11324 = !DILocation(line: 4856, column: 18, scope: !11317)
!11325 = !DILocation(line: 4857, column: 24, scope: !11326)
!11326 = distinct !DILexicalBlock(scope: !11316, file: !3, line: 4856, column: 50)
!11327 = !DILocation(line: 4857, column: 17, scope: !11326)
!11328 = !DILocation(line: 4859, column: 20, scope: !11317)
!11329 = !DILocation(line: 4859, column: 13, scope: !11317)
!11330 = !DILocation(line: 4861, column: 17, scope: !11312)
!11331 = !DILocation(line: 4861, column: 24, scope: !11312)
!11332 = !DILocation(line: 4861, column: 31, scope: !11312)
!11333 = !DILocation(line: 4861, column: 38, scope: !11312)
!11334 = !DILocation(line: 4861, column: 9, scope: !11312)
!11335 = !DILocation(line: 4862, column: 14, scope: !11336)
!11336 = distinct !DILexicalBlock(scope: !11312, file: !3, line: 4862, column: 14)
!11337 = !DILocation(line: 4862, column: 19, scope: !11336)
!11338 = !DILocation(line: 4862, column: 14, scope: !11312)
!11339 = !DILocation(line: 4862, column: 47, scope: !11336)
!11340 = !DILocation(line: 4862, column: 57, scope: !11336)
!11341 = !DILocation(line: 4862, column: 64, scope: !11336)
!11342 = !DILocation(line: 4862, column: 33, scope: !11336)
!11343 = !DILocation(line: 4862, column: 26, scope: !11336)
!11344 = !DILocation(line: 4863, column: 15, scope: !11312)
!11345 = !DILocation(line: 4864, column: 15, scope: !11312)
!11346 = !DILocation(line: 4865, column: 16, scope: !11312)
!11347 = !DILocation(line: 4865, column: 14, scope: !11312)
!11348 = !DILocation(line: 4866, column: 9, scope: !11312)
!11349 = !DILocation(line: 4868, column: 11, scope: !11191)
!11350 = !DILocation(line: 4869, column: 13, scope: !11191)
!11351 = !DILocation(line: 4869, column: 20, scope: !11191)
!11352 = !DILocation(line: 4869, column: 27, scope: !11191)
!11353 = !DILocation(line: 4869, column: 34, scope: !11191)
!11354 = !DILocation(line: 4869, column: 5, scope: !11191)
!11355 = !DILocation(line: 4870, column: 5, scope: !11191)
!11356 = !DILocation(line: 4871, column: 10, scope: !11357)
!11357 = distinct !DILexicalBlock(scope: !11191, file: !3, line: 4871, column: 10)
!11358 = !DILocation(line: 4871, column: 16, scope: !11357)
!11359 = !DILocation(line: 4871, column: 10, scope: !11191)
!11360 = !DILocation(line: 4871, column: 48, scope: !11357)
!11361 = !DILocation(line: 4872, column: 5, scope: !11191)
!11362 = !DILocation(line: 4875, column: 9, scope: !11191)
!11363 = !DILocation(line: 4875, column: 16, scope: !11191)
!11364 = !DILocation(line: 4875, column: 23, scope: !11191)
!11365 = !DILocation(line: 4874, column: 5, scope: !11191)
!11366 = !DILocation(line: 4877, column: 34, scope: !11191)
!11367 = !DILocation(line: 4877, column: 41, scope: !11191)
!11368 = !DILocation(line: 4877, column: 47, scope: !11191)
!11369 = !DILocation(line: 4877, column: 54, scope: !11191)
!11370 = !DILocation(line: 4877, column: 61, scope: !11191)
!11371 = !DILocation(line: 4877, column: 12, scope: !11191)
!11372 = !DILocation(line: 4877, column: 5, scope: !11191)
!11373 = !DILocation(line: 4879, column: 1, scope: !11191)
!11374 = distinct !DISubprogram(name: "subFloat128Sigs", scope: !3, file: !3, line: 4889, type: !11192, isLocal: true, isDefinition: true, scopeLine: 4890, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11375 = !DILocalVariable(name: "a", arg: 1, scope: !11374, file: !3, line: 4889, type: !1190)
!11376 = !DILocation(line: 4889, column: 43, scope: !11374)
!11377 = !DILocalVariable(name: "b", arg: 2, scope: !11374, file: !3, line: 4889, type: !1190)
!11378 = !DILocation(line: 4889, column: 55, scope: !11374)
!11379 = !DILocalVariable(name: "zSign", arg: 3, scope: !11374, file: !3, line: 4889, type: !1241)
!11380 = !DILocation(line: 4889, column: 63, scope: !11374)
!11381 = !DILocalVariable(name: "aExp", scope: !11374, file: !3, line: 4891, type: !1319)
!11382 = !DILocation(line: 4891, column: 11, scope: !11374)
!11383 = !DILocalVariable(name: "bExp", scope: !11374, file: !3, line: 4891, type: !1319)
!11384 = !DILocation(line: 4891, column: 17, scope: !11374)
!11385 = !DILocalVariable(name: "zExp", scope: !11374, file: !3, line: 4891, type: !1319)
!11386 = !DILocation(line: 4891, column: 23, scope: !11374)
!11387 = !DILocalVariable(name: "aSig0", scope: !11374, file: !3, line: 4892, type: !24)
!11388 = !DILocation(line: 4892, column: 12, scope: !11374)
!11389 = !DILocalVariable(name: "aSig1", scope: !11374, file: !3, line: 4892, type: !24)
!11390 = !DILocation(line: 4892, column: 19, scope: !11374)
!11391 = !DILocalVariable(name: "bSig0", scope: !11374, file: !3, line: 4892, type: !24)
!11392 = !DILocation(line: 4892, column: 26, scope: !11374)
!11393 = !DILocalVariable(name: "bSig1", scope: !11374, file: !3, line: 4892, type: !24)
!11394 = !DILocation(line: 4892, column: 33, scope: !11374)
!11395 = !DILocalVariable(name: "zSig0", scope: !11374, file: !3, line: 4892, type: !24)
!11396 = !DILocation(line: 4892, column: 40, scope: !11374)
!11397 = !DILocalVariable(name: "zSig1", scope: !11374, file: !3, line: 4892, type: !24)
!11398 = !DILocation(line: 4892, column: 47, scope: !11374)
!11399 = !DILocalVariable(name: "expDiff", scope: !11374, file: !3, line: 4893, type: !1319)
!11400 = !DILocation(line: 4893, column: 11, scope: !11374)
!11401 = !DILocalVariable(name: "z", scope: !11374, file: !3, line: 4894, type: !1190)
!11402 = !DILocation(line: 4894, column: 14, scope: !11374)
!11403 = !DILocation(line: 4896, column: 13, scope: !11374)
!11404 = !DILocation(line: 4896, column: 11, scope: !11374)
!11405 = !DILocation(line: 4897, column: 13, scope: !11374)
!11406 = !DILocation(line: 4897, column: 11, scope: !11374)
!11407 = !DILocation(line: 4898, column: 12, scope: !11374)
!11408 = !DILocation(line: 4898, column: 10, scope: !11374)
!11409 = !DILocation(line: 4899, column: 13, scope: !11374)
!11410 = !DILocation(line: 4899, column: 11, scope: !11374)
!11411 = !DILocation(line: 4900, column: 13, scope: !11374)
!11412 = !DILocation(line: 4900, column: 11, scope: !11374)
!11413 = !DILocation(line: 4901, column: 12, scope: !11374)
!11414 = !DILocation(line: 4901, column: 10, scope: !11374)
!11415 = !DILocation(line: 4902, column: 15, scope: !11374)
!11416 = !DILocation(line: 4902, column: 22, scope: !11374)
!11417 = !DILocation(line: 4902, column: 20, scope: !11374)
!11418 = !DILocation(line: 4902, column: 13, scope: !11374)
!11419 = !DILocation(line: 4903, column: 24, scope: !11374)
!11420 = !DILocation(line: 4903, column: 31, scope: !11374)
!11421 = !DILocation(line: 4903, column: 5, scope: !11374)
!11422 = !DILocation(line: 4904, column: 24, scope: !11374)
!11423 = !DILocation(line: 4904, column: 31, scope: !11374)
!11424 = !DILocation(line: 4904, column: 5, scope: !11374)
!11425 = !DILocation(line: 4905, column: 14, scope: !11426)
!11426 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4905, column: 10)
!11427 = !DILocation(line: 4905, column: 12, scope: !11426)
!11428 = !DILocation(line: 4905, column: 10, scope: !11374)
!11429 = !DILocation(line: 4905, column: 24, scope: !11426)
!11430 = !DILocation(line: 4906, column: 10, scope: !11431)
!11431 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4906, column: 10)
!11432 = !DILocation(line: 4906, column: 18, scope: !11431)
!11433 = !DILocation(line: 4906, column: 10, scope: !11374)
!11434 = !DILocation(line: 4906, column: 24, scope: !11431)
!11435 = !DILocation(line: 4907, column: 10, scope: !11436)
!11436 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4907, column: 10)
!11437 = !DILocation(line: 4907, column: 15, scope: !11436)
!11438 = !DILocation(line: 4907, column: 10, scope: !11374)
!11439 = !DILocation(line: 4908, column: 14, scope: !11440)
!11440 = distinct !DILexicalBlock(scope: !11441, file: !3, line: 4908, column: 14)
!11441 = distinct !DILexicalBlock(scope: !11436, file: !3, line: 4907, column: 27)
!11442 = !DILocation(line: 4908, column: 22, scope: !11440)
!11443 = !DILocation(line: 4908, column: 20, scope: !11440)
!11444 = !DILocation(line: 4908, column: 30, scope: !11440)
!11445 = !DILocation(line: 4908, column: 28, scope: !11440)
!11446 = !DILocation(line: 4908, column: 38, scope: !11440)
!11447 = !DILocation(line: 4908, column: 36, scope: !11440)
!11448 = !DILocation(line: 4908, column: 14, scope: !11441)
!11449 = !DILocation(line: 4909, column: 20, scope: !11450)
!11450 = distinct !DILexicalBlock(scope: !11440, file: !3, line: 4908, column: 46)
!11451 = !DILocation(line: 4909, column: 13, scope: !11450)
!11452 = !DILocation(line: 4911, column: 9, scope: !11441)
!11453 = !DILocation(line: 4912, column: 11, scope: !11441)
!11454 = !DILocation(line: 4912, column: 15, scope: !11441)
!11455 = !DILocation(line: 4913, column: 11, scope: !11441)
!11456 = !DILocation(line: 4913, column: 16, scope: !11441)
!11457 = !DILocation(line: 4914, column: 16, scope: !11441)
!11458 = !DILocation(line: 4914, column: 9, scope: !11441)
!11459 = !DILocation(line: 4916, column: 10, scope: !11460)
!11460 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4916, column: 10)
!11461 = !DILocation(line: 4916, column: 15, scope: !11460)
!11462 = !DILocation(line: 4916, column: 10, scope: !11374)
!11463 = !DILocation(line: 4917, column: 14, scope: !11464)
!11464 = distinct !DILexicalBlock(scope: !11460, file: !3, line: 4916, column: 22)
!11465 = !DILocation(line: 4918, column: 14, scope: !11464)
!11466 = !DILocation(line: 4919, column: 5, scope: !11464)
!11467 = !DILocation(line: 4920, column: 10, scope: !11468)
!11468 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4920, column: 10)
!11469 = !DILocation(line: 4920, column: 18, scope: !11468)
!11470 = !DILocation(line: 4920, column: 16, scope: !11468)
!11471 = !DILocation(line: 4920, column: 10, scope: !11374)
!11472 = !DILocation(line: 4920, column: 26, scope: !11468)
!11473 = !DILocation(line: 4921, column: 10, scope: !11474)
!11474 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4921, column: 10)
!11475 = !DILocation(line: 4921, column: 18, scope: !11474)
!11476 = !DILocation(line: 4921, column: 16, scope: !11474)
!11477 = !DILocation(line: 4921, column: 10, scope: !11374)
!11478 = !DILocation(line: 4921, column: 26, scope: !11474)
!11479 = !DILocation(line: 4922, column: 10, scope: !11480)
!11480 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4922, column: 10)
!11481 = !DILocation(line: 4922, column: 18, scope: !11480)
!11482 = !DILocation(line: 4922, column: 16, scope: !11480)
!11483 = !DILocation(line: 4922, column: 10, scope: !11374)
!11484 = !DILocation(line: 4922, column: 26, scope: !11480)
!11485 = !DILocation(line: 4923, column: 10, scope: !11486)
!11486 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4923, column: 10)
!11487 = !DILocation(line: 4923, column: 18, scope: !11486)
!11488 = !DILocation(line: 4923, column: 16, scope: !11486)
!11489 = !DILocation(line: 4923, column: 10, scope: !11374)
!11490 = !DILocation(line: 4923, column: 26, scope: !11486)
!11491 = !DILocation(line: 4924, column: 26, scope: !11374)
!11492 = !DILocation(line: 4924, column: 46, scope: !11374)
!11493 = !DILocation(line: 4924, column: 12, scope: !11374)
!11494 = !DILocation(line: 4924, column: 5, scope: !11374)
!11495 = !DILocation(line: 4926, column: 10, scope: !11496)
!11496 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4926, column: 10)
!11497 = !DILocation(line: 4926, column: 15, scope: !11496)
!11498 = !DILocation(line: 4926, column: 10, scope: !11374)
!11499 = !DILocation(line: 4927, column: 14, scope: !11500)
!11500 = distinct !DILexicalBlock(scope: !11501, file: !3, line: 4927, column: 14)
!11501 = distinct !DILexicalBlock(scope: !11496, file: !3, line: 4926, column: 27)
!11502 = !DILocation(line: 4927, column: 22, scope: !11500)
!11503 = !DILocation(line: 4927, column: 20, scope: !11500)
!11504 = !DILocation(line: 4927, column: 14, scope: !11501)
!11505 = !DILocation(line: 4927, column: 37, scope: !11500)
!11506 = !DILocation(line: 4927, column: 30, scope: !11500)
!11507 = !DILocation(line: 4928, column: 30, scope: !11501)
!11508 = !DILocation(line: 4928, column: 36, scope: !11501)
!11509 = !DILocation(line: 4928, column: 16, scope: !11501)
!11510 = !DILocation(line: 4928, column: 9, scope: !11501)
!11511 = !DILocation(line: 4930, column: 10, scope: !11512)
!11512 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4930, column: 10)
!11513 = !DILocation(line: 4930, column: 15, scope: !11512)
!11514 = !DILocation(line: 4930, column: 10, scope: !11374)
!11515 = !DILocation(line: 4931, column: 9, scope: !11516)
!11516 = distinct !DILexicalBlock(scope: !11512, file: !3, line: 4930, column: 22)
!11517 = !DILocation(line: 4932, column: 5, scope: !11516)
!11518 = !DILocation(line: 4934, column: 15, scope: !11519)
!11519 = distinct !DILexicalBlock(scope: !11512, file: !3, line: 4933, column: 10)
!11520 = !DILocation(line: 4936, column: 27, scope: !11374)
!11521 = !DILocation(line: 4936, column: 34, scope: !11374)
!11522 = !DILocation(line: 4936, column: 43, scope: !11374)
!11523 = !DILocation(line: 4936, column: 41, scope: !11374)
!11524 = !DILocation(line: 4936, column: 5, scope: !11374)
!11525 = !DILocation(line: 4937, column: 11, scope: !11374)
!11526 = !DILocation(line: 4937, column: 5, scope: !11374)
!11527 = !DILocation(line: 4939, column: 13, scope: !11374)
!11528 = !DILocation(line: 4939, column: 20, scope: !11374)
!11529 = !DILocation(line: 4939, column: 27, scope: !11374)
!11530 = !DILocation(line: 4939, column: 34, scope: !11374)
!11531 = !DILocation(line: 4939, column: 5, scope: !11374)
!11532 = !DILocation(line: 4940, column: 12, scope: !11374)
!11533 = !DILocation(line: 4940, column: 10, scope: !11374)
!11534 = !DILocation(line: 4941, column: 11, scope: !11374)
!11535 = !DILocation(line: 4942, column: 5, scope: !11374)
!11536 = !DILocation(line: 4944, column: 10, scope: !11537)
!11537 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4944, column: 10)
!11538 = !DILocation(line: 4944, column: 15, scope: !11537)
!11539 = !DILocation(line: 4944, column: 10, scope: !11374)
!11540 = !DILocation(line: 4945, column: 14, scope: !11541)
!11541 = distinct !DILexicalBlock(scope: !11542, file: !3, line: 4945, column: 14)
!11542 = distinct !DILexicalBlock(scope: !11537, file: !3, line: 4944, column: 27)
!11543 = !DILocation(line: 4945, column: 22, scope: !11541)
!11544 = !DILocation(line: 4945, column: 20, scope: !11541)
!11545 = !DILocation(line: 4945, column: 14, scope: !11542)
!11546 = !DILocation(line: 4945, column: 37, scope: !11541)
!11547 = !DILocation(line: 4945, column: 30, scope: !11541)
!11548 = !DILocation(line: 4946, column: 16, scope: !11542)
!11549 = !DILocation(line: 4946, column: 9, scope: !11542)
!11550 = !DILocation(line: 4948, column: 10, scope: !11551)
!11551 = distinct !DILexicalBlock(scope: !11374, file: !3, line: 4948, column: 10)
!11552 = !DILocation(line: 4948, column: 15, scope: !11551)
!11553 = !DILocation(line: 4948, column: 10, scope: !11374)
!11554 = !DILocation(line: 4949, column: 9, scope: !11555)
!11555 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 4948, column: 22)
!11556 = !DILocation(line: 4950, column: 5, scope: !11555)
!11557 = !DILocation(line: 4952, column: 15, scope: !11558)
!11558 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 4951, column: 10)
!11559 = !DILocation(line: 4954, column: 27, scope: !11374)
!11560 = !DILocation(line: 4954, column: 34, scope: !11374)
!11561 = !DILocation(line: 4954, column: 41, scope: !11374)
!11562 = !DILocation(line: 4954, column: 5, scope: !11374)
!11563 = !DILocation(line: 4955, column: 11, scope: !11374)
!11564 = !DILocation(line: 4955, column: 5, scope: !11374)
!11565 = !DILocation(line: 4957, column: 13, scope: !11374)
!11566 = !DILocation(line: 4957, column: 20, scope: !11374)
!11567 = !DILocation(line: 4957, column: 27, scope: !11374)
!11568 = !DILocation(line: 4957, column: 34, scope: !11374)
!11569 = !DILocation(line: 4957, column: 5, scope: !11374)
!11570 = !DILocation(line: 4958, column: 12, scope: !11374)
!11571 = !DILocation(line: 4958, column: 10, scope: !11374)
!11572 = !DILocation(line: 4958, column: 5, scope: !11374)
!11573 = !DILocation(line: 4960, column: 5, scope: !11374)
!11574 = !DILocation(line: 4961, column: 43, scope: !11374)
!11575 = !DILocation(line: 4961, column: 50, scope: !11374)
!11576 = !DILocation(line: 4961, column: 55, scope: !11374)
!11577 = !DILocation(line: 4961, column: 61, scope: !11374)
!11578 = !DILocation(line: 4961, column: 68, scope: !11374)
!11579 = !DILocation(line: 4961, column: 12, scope: !11374)
!11580 = !DILocation(line: 4961, column: 5, scope: !11374)
!11581 = !DILocation(line: 4963, column: 1, scope: !11374)
!11582 = distinct !DISubprogram(name: "float128_sub", scope: !3, file: !3, line: 4992, type: !11124, isLocal: false, isDefinition: true, scopeLine: 4993, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11583 = !DILocalVariable(name: "a", arg: 1, scope: !11582, file: !3, line: 4992, type: !1190)
!11584 = !DILocation(line: 4992, column: 33, scope: !11582)
!11585 = !DILocalVariable(name: "b", arg: 2, scope: !11582, file: !3, line: 4992, type: !1190)
!11586 = !DILocation(line: 4992, column: 45, scope: !11582)
!11587 = !DILocalVariable(name: "aSign", scope: !11582, file: !3, line: 4994, type: !1241)
!11588 = !DILocation(line: 4994, column: 10, scope: !11582)
!11589 = !DILocalVariable(name: "bSign", scope: !11582, file: !3, line: 4994, type: !1241)
!11590 = !DILocation(line: 4994, column: 17, scope: !11582)
!11591 = !DILocation(line: 4996, column: 13, scope: !11582)
!11592 = !DILocation(line: 4996, column: 11, scope: !11582)
!11593 = !DILocation(line: 4997, column: 13, scope: !11582)
!11594 = !DILocation(line: 4997, column: 11, scope: !11582)
!11595 = !DILocation(line: 4998, column: 10, scope: !11596)
!11596 = distinct !DILexicalBlock(scope: !11582, file: !3, line: 4998, column: 10)
!11597 = !DILocation(line: 4998, column: 19, scope: !11596)
!11598 = !DILocation(line: 4998, column: 16, scope: !11596)
!11599 = !DILocation(line: 4998, column: 10, scope: !11582)
!11600 = !DILocation(line: 4999, column: 39, scope: !11601)
!11601 = distinct !DILexicalBlock(scope: !11596, file: !3, line: 4998, column: 27)
!11602 = !DILocation(line: 4999, column: 16, scope: !11601)
!11603 = !DILocation(line: 4999, column: 9, scope: !11601)
!11604 = !DILocation(line: 5002, column: 39, scope: !11605)
!11605 = distinct !DILexicalBlock(scope: !11596, file: !3, line: 5001, column: 10)
!11606 = !DILocation(line: 5002, column: 16, scope: !11605)
!11607 = !DILocation(line: 5002, column: 9, scope: !11605)
!11608 = !DILocation(line: 5005, column: 1, scope: !11582)
!11609 = distinct !DISubprogram(name: "float128_mul", scope: !3, file: !3, line: 5013, type: !11124, isLocal: false, isDefinition: true, scopeLine: 5014, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11610 = !DILocalVariable(name: "a", arg: 1, scope: !11609, file: !3, line: 5013, type: !1190)
!11611 = !DILocation(line: 5013, column: 33, scope: !11609)
!11612 = !DILocalVariable(name: "b", arg: 2, scope: !11609, file: !3, line: 5013, type: !1190)
!11613 = !DILocation(line: 5013, column: 45, scope: !11609)
!11614 = !DILocalVariable(name: "aSign", scope: !11609, file: !3, line: 5015, type: !1241)
!11615 = !DILocation(line: 5015, column: 10, scope: !11609)
!11616 = !DILocalVariable(name: "bSign", scope: !11609, file: !3, line: 5015, type: !1241)
!11617 = !DILocation(line: 5015, column: 17, scope: !11609)
!11618 = !DILocalVariable(name: "zSign", scope: !11609, file: !3, line: 5015, type: !1241)
!11619 = !DILocation(line: 5015, column: 24, scope: !11609)
!11620 = !DILocalVariable(name: "aExp", scope: !11609, file: !3, line: 5016, type: !1319)
!11621 = !DILocation(line: 5016, column: 11, scope: !11609)
!11622 = !DILocalVariable(name: "bExp", scope: !11609, file: !3, line: 5016, type: !1319)
!11623 = !DILocation(line: 5016, column: 17, scope: !11609)
!11624 = !DILocalVariable(name: "zExp", scope: !11609, file: !3, line: 5016, type: !1319)
!11625 = !DILocation(line: 5016, column: 23, scope: !11609)
!11626 = !DILocalVariable(name: "aSig0", scope: !11609, file: !3, line: 5017, type: !24)
!11627 = !DILocation(line: 5017, column: 12, scope: !11609)
!11628 = !DILocalVariable(name: "aSig1", scope: !11609, file: !3, line: 5017, type: !24)
!11629 = !DILocation(line: 5017, column: 19, scope: !11609)
!11630 = !DILocalVariable(name: "bSig0", scope: !11609, file: !3, line: 5017, type: !24)
!11631 = !DILocation(line: 5017, column: 26, scope: !11609)
!11632 = !DILocalVariable(name: "bSig1", scope: !11609, file: !3, line: 5017, type: !24)
!11633 = !DILocation(line: 5017, column: 33, scope: !11609)
!11634 = !DILocalVariable(name: "zSig0", scope: !11609, file: !3, line: 5017, type: !24)
!11635 = !DILocation(line: 5017, column: 40, scope: !11609)
!11636 = !DILocalVariable(name: "zSig1", scope: !11609, file: !3, line: 5017, type: !24)
!11637 = !DILocation(line: 5017, column: 47, scope: !11609)
!11638 = !DILocalVariable(name: "zSig2", scope: !11609, file: !3, line: 5017, type: !24)
!11639 = !DILocation(line: 5017, column: 54, scope: !11609)
!11640 = !DILocalVariable(name: "zSig3", scope: !11609, file: !3, line: 5017, type: !24)
!11641 = !DILocation(line: 5017, column: 61, scope: !11609)
!11642 = !DILocalVariable(name: "z", scope: !11609, file: !3, line: 5018, type: !1190)
!11643 = !DILocation(line: 5018, column: 14, scope: !11609)
!11644 = !DILocation(line: 5020, column: 13, scope: !11609)
!11645 = !DILocation(line: 5020, column: 11, scope: !11609)
!11646 = !DILocation(line: 5021, column: 13, scope: !11609)
!11647 = !DILocation(line: 5021, column: 11, scope: !11609)
!11648 = !DILocation(line: 5022, column: 12, scope: !11609)
!11649 = !DILocation(line: 5022, column: 10, scope: !11609)
!11650 = !DILocation(line: 5023, column: 13, scope: !11609)
!11651 = !DILocation(line: 5023, column: 11, scope: !11609)
!11652 = !DILocation(line: 5024, column: 13, scope: !11609)
!11653 = !DILocation(line: 5024, column: 11, scope: !11609)
!11654 = !DILocation(line: 5025, column: 13, scope: !11609)
!11655 = !DILocation(line: 5025, column: 11, scope: !11609)
!11656 = !DILocation(line: 5026, column: 12, scope: !11609)
!11657 = !DILocation(line: 5026, column: 10, scope: !11609)
!11658 = !DILocation(line: 5027, column: 13, scope: !11609)
!11659 = !DILocation(line: 5027, column: 11, scope: !11609)
!11660 = !DILocation(line: 5028, column: 13, scope: !11609)
!11661 = !DILocation(line: 5028, column: 21, scope: !11609)
!11662 = !DILocation(line: 5028, column: 19, scope: !11609)
!11663 = !DILocation(line: 5028, column: 11, scope: !11609)
!11664 = !DILocation(line: 5029, column: 10, scope: !11665)
!11665 = distinct !DILexicalBlock(scope: !11609, file: !3, line: 5029, column: 10)
!11666 = !DILocation(line: 5029, column: 15, scope: !11665)
!11667 = !DILocation(line: 5029, column: 10, scope: !11609)
!11668 = !DILocation(line: 5030, column: 19, scope: !11669)
!11669 = distinct !DILexicalBlock(scope: !11670, file: !3, line: 5030, column: 17)
!11670 = distinct !DILexicalBlock(scope: !11665, file: !3, line: 5029, column: 27)
!11671 = !DILocation(line: 5030, column: 27, scope: !11669)
!11672 = !DILocation(line: 5030, column: 25, scope: !11669)
!11673 = !DILocation(line: 5031, column: 14, scope: !11669)
!11674 = !DILocation(line: 5031, column: 21, scope: !11669)
!11675 = !DILocation(line: 5031, column: 26, scope: !11669)
!11676 = !DILocation(line: 5031, column: 38, scope: !11669)
!11677 = !DILocation(line: 5031, column: 43, scope: !11669)
!11678 = !DILocation(line: 5031, column: 51, scope: !11669)
!11679 = !DILocation(line: 5031, column: 49, scope: !11669)
!11680 = !DILocation(line: 5030, column: 17, scope: !11670)
!11681 = !DILocation(line: 5032, column: 20, scope: !11682)
!11682 = distinct !DILexicalBlock(scope: !11669, file: !3, line: 5031, column: 63)
!11683 = !DILocation(line: 5032, column: 13, scope: !11682)
!11684 = !DILocation(line: 5034, column: 16, scope: !11685)
!11685 = distinct !DILexicalBlock(scope: !11670, file: !3, line: 5034, column: 14)
!11686 = !DILocation(line: 5034, column: 23, scope: !11685)
!11687 = !DILocation(line: 5034, column: 21, scope: !11685)
!11688 = !DILocation(line: 5034, column: 31, scope: !11685)
!11689 = !DILocation(line: 5034, column: 29, scope: !11685)
!11690 = !DILocation(line: 5034, column: 39, scope: !11685)
!11691 = !DILocation(line: 5034, column: 14, scope: !11670)
!11692 = !DILocation(line: 5034, column: 46, scope: !11685)
!11693 = !DILocation(line: 5035, column: 30, scope: !11670)
!11694 = !DILocation(line: 5035, column: 16, scope: !11670)
!11695 = !DILocation(line: 5035, column: 9, scope: !11670)
!11696 = !DILocation(line: 5037, column: 10, scope: !11697)
!11697 = distinct !DILexicalBlock(scope: !11609, file: !3, line: 5037, column: 10)
!11698 = !DILocation(line: 5037, column: 15, scope: !11697)
!11699 = !DILocation(line: 5037, column: 10, scope: !11609)
!11700 = !DILocation(line: 5038, column: 14, scope: !11701)
!11701 = distinct !DILexicalBlock(scope: !11702, file: !3, line: 5038, column: 14)
!11702 = distinct !DILexicalBlock(scope: !11697, file: !3, line: 5037, column: 27)
!11703 = !DILocation(line: 5038, column: 22, scope: !11701)
!11704 = !DILocation(line: 5038, column: 20, scope: !11701)
!11705 = !DILocation(line: 5038, column: 14, scope: !11702)
!11706 = !DILocation(line: 5038, column: 37, scope: !11701)
!11707 = !DILocation(line: 5038, column: 30, scope: !11701)
!11708 = !DILocation(line: 5039, column: 16, scope: !11709)
!11709 = distinct !DILexicalBlock(scope: !11702, file: !3, line: 5039, column: 14)
!11710 = !DILocation(line: 5039, column: 23, scope: !11709)
!11711 = !DILocation(line: 5039, column: 21, scope: !11709)
!11712 = !DILocation(line: 5039, column: 31, scope: !11709)
!11713 = !DILocation(line: 5039, column: 29, scope: !11709)
!11714 = !DILocation(line: 5039, column: 39, scope: !11709)
!11715 = !DILocation(line: 5039, column: 14, scope: !11702)
!11716 = !DILocation(line: 5039, column: 46, scope: !11709)
!11717 = !DILocation(line: 5041, column: 13, scope: !11718)
!11718 = distinct !DILexicalBlock(scope: !11709, file: !3, line: 5039, column: 46)
!11719 = !DILocation(line: 5042, column: 15, scope: !11718)
!11720 = !DILocation(line: 5042, column: 19, scope: !11718)
!11721 = !DILocation(line: 5043, column: 15, scope: !11718)
!11722 = !DILocation(line: 5043, column: 20, scope: !11718)
!11723 = !DILocation(line: 5044, column: 20, scope: !11718)
!11724 = !DILocation(line: 5044, column: 13, scope: !11718)
!11725 = !DILocation(line: 5046, column: 30, scope: !11702)
!11726 = !DILocation(line: 5046, column: 16, scope: !11702)
!11727 = !DILocation(line: 5046, column: 9, scope: !11702)
!11728 = !DILocation(line: 5048, column: 10, scope: !11729)
!11729 = distinct !DILexicalBlock(scope: !11609, file: !3, line: 5048, column: 10)
!11730 = !DILocation(line: 5048, column: 15, scope: !11729)
!11731 = !DILocation(line: 5048, column: 10, scope: !11609)
!11732 = !DILocation(line: 5049, column: 16, scope: !11733)
!11733 = distinct !DILexicalBlock(scope: !11734, file: !3, line: 5049, column: 14)
!11734 = distinct !DILexicalBlock(scope: !11729, file: !3, line: 5048, column: 22)
!11735 = !DILocation(line: 5049, column: 24, scope: !11733)
!11736 = !DILocation(line: 5049, column: 22, scope: !11733)
!11737 = !DILocation(line: 5049, column: 32, scope: !11733)
!11738 = !DILocation(line: 5049, column: 14, scope: !11734)
!11739 = !DILocation(line: 5049, column: 60, scope: !11733)
!11740 = !DILocation(line: 5049, column: 46, scope: !11733)
!11741 = !DILocation(line: 5049, column: 39, scope: !11733)
!11742 = !DILocation(line: 5050, column: 37, scope: !11734)
!11743 = !DILocation(line: 5050, column: 44, scope: !11734)
!11744 = !DILocation(line: 5050, column: 9, scope: !11734)
!11745 = !DILocation(line: 5051, column: 5, scope: !11734)
!11746 = !DILocation(line: 5052, column: 10, scope: !11747)
!11747 = distinct !DILexicalBlock(scope: !11609, file: !3, line: 5052, column: 10)
!11748 = !DILocation(line: 5052, column: 15, scope: !11747)
!11749 = !DILocation(line: 5052, column: 10, scope: !11609)
!11750 = !DILocation(line: 5053, column: 16, scope: !11751)
!11751 = distinct !DILexicalBlock(scope: !11752, file: !3, line: 5053, column: 14)
!11752 = distinct !DILexicalBlock(scope: !11747, file: !3, line: 5052, column: 22)
!11753 = !DILocation(line: 5053, column: 24, scope: !11751)
!11754 = !DILocation(line: 5053, column: 22, scope: !11751)
!11755 = !DILocation(line: 5053, column: 32, scope: !11751)
!11756 = !DILocation(line: 5053, column: 14, scope: !11752)
!11757 = !DILocation(line: 5053, column: 60, scope: !11751)
!11758 = !DILocation(line: 5053, column: 46, scope: !11751)
!11759 = !DILocation(line: 5053, column: 39, scope: !11751)
!11760 = !DILocation(line: 5054, column: 37, scope: !11752)
!11761 = !DILocation(line: 5054, column: 44, scope: !11752)
!11762 = !DILocation(line: 5054, column: 9, scope: !11752)
!11763 = !DILocation(line: 5055, column: 5, scope: !11752)
!11764 = !DILocation(line: 5056, column: 12, scope: !11609)
!11765 = !DILocation(line: 5056, column: 19, scope: !11609)
!11766 = !DILocation(line: 5056, column: 17, scope: !11609)
!11767 = !DILocation(line: 5056, column: 24, scope: !11609)
!11768 = !DILocation(line: 5056, column: 10, scope: !11609)
!11769 = !DILocation(line: 5057, column: 11, scope: !11609)
!11770 = !DILocation(line: 5058, column: 24, scope: !11609)
!11771 = !DILocation(line: 5058, column: 31, scope: !11609)
!11772 = !DILocation(line: 5058, column: 5, scope: !11609)
!11773 = !DILocation(line: 5059, column: 18, scope: !11609)
!11774 = !DILocation(line: 5059, column: 25, scope: !11609)
!11775 = !DILocation(line: 5059, column: 32, scope: !11609)
!11776 = !DILocation(line: 5059, column: 39, scope: !11609)
!11777 = !DILocation(line: 5059, column: 5, scope: !11609)
!11778 = !DILocation(line: 5060, column: 13, scope: !11609)
!11779 = !DILocation(line: 5060, column: 20, scope: !11609)
!11780 = !DILocation(line: 5060, column: 27, scope: !11609)
!11781 = !DILocation(line: 5060, column: 34, scope: !11609)
!11782 = !DILocation(line: 5060, column: 5, scope: !11609)
!11783 = !DILocation(line: 5061, column: 16, scope: !11609)
!11784 = !DILocation(line: 5061, column: 22, scope: !11609)
!11785 = !DILocation(line: 5061, column: 14, scope: !11609)
!11786 = !DILocation(line: 5061, column: 11, scope: !11609)
!11787 = !DILocation(line: 5062, column: 41, scope: !11788)
!11788 = distinct !DILexicalBlock(scope: !11609, file: !3, line: 5062, column: 10)
!11789 = !DILocation(line: 5062, column: 38, scope: !11788)
!11790 = !DILocation(line: 5062, column: 10, scope: !11609)
!11791 = !DILocation(line: 5064, column: 13, scope: !11792)
!11792 = distinct !DILexicalBlock(scope: !11788, file: !3, line: 5062, column: 49)
!11793 = !DILocation(line: 5064, column: 20, scope: !11792)
!11794 = !DILocation(line: 5064, column: 27, scope: !11792)
!11795 = !DILocation(line: 5063, column: 9, scope: !11792)
!11796 = !DILocation(line: 5065, column: 9, scope: !11792)
!11797 = !DILocation(line: 5066, column: 5, scope: !11792)
!11798 = !DILocation(line: 5067, column: 34, scope: !11609)
!11799 = !DILocation(line: 5067, column: 41, scope: !11609)
!11800 = !DILocation(line: 5067, column: 47, scope: !11609)
!11801 = !DILocation(line: 5067, column: 54, scope: !11609)
!11802 = !DILocation(line: 5067, column: 61, scope: !11609)
!11803 = !DILocation(line: 5067, column: 12, scope: !11609)
!11804 = !DILocation(line: 5067, column: 5, scope: !11609)
!11805 = !DILocation(line: 5069, column: 1, scope: !11609)
!11806 = distinct !DISubprogram(name: "roundAndPackFloat128", scope: !3, file: !3, line: 910, type: !11807, isLocal: true, isDefinition: true, scopeLine: 912, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!11807 = !DISubroutineType(types: !11808)
!11808 = !{!1190, !1241, !1319, !24, !24, !24}
!11809 = !DILocalVariable(name: "zSign", arg: 1, scope: !11806, file: !3, line: 911, type: !1241)
!11810 = !DILocation(line: 911, column: 11, scope: !11806)
!11811 = !DILocalVariable(name: "zExp", arg: 2, scope: !11806, file: !3, line: 911, type: !1319)
!11812 = !DILocation(line: 911, column: 24, scope: !11806)
!11813 = !DILocalVariable(name: "zSig0", arg: 3, scope: !11806, file: !3, line: 911, type: !24)
!11814 = !DILocation(line: 911, column: 37, scope: !11806)
!11815 = !DILocalVariable(name: "zSig1", arg: 4, scope: !11806, file: !3, line: 911, type: !24)
!11816 = !DILocation(line: 911, column: 51, scope: !11806)
!11817 = !DILocalVariable(name: "zSig2", arg: 5, scope: !11806, file: !3, line: 911, type: !24)
!11818 = !DILocation(line: 911, column: 65, scope: !11806)
!11819 = !DILocalVariable(name: "roundingMode", scope: !11806, file: !3, line: 913, type: !38)
!11820 = !DILocation(line: 913, column: 10, scope: !11806)
!11821 = !DILocalVariable(name: "roundNearestEven", scope: !11806, file: !3, line: 914, type: !1241)
!11822 = !DILocation(line: 914, column: 10, scope: !11806)
!11823 = !DILocalVariable(name: "increment", scope: !11806, file: !3, line: 914, type: !1241)
!11824 = !DILocation(line: 914, column: 28, scope: !11806)
!11825 = !DILocalVariable(name: "isTiny", scope: !11806, file: !3, line: 914, type: !1241)
!11826 = !DILocation(line: 914, column: 39, scope: !11806)
!11827 = !DILocation(line: 916, column: 20, scope: !11806)
!11828 = !DILocation(line: 916, column: 18, scope: !11806)
!11829 = !DILocation(line: 917, column: 26, scope: !11806)
!11830 = !DILocation(line: 917, column: 39, scope: !11806)
!11831 = !DILocation(line: 917, column: 22, scope: !11806)
!11832 = !DILocation(line: 918, column: 29, scope: !11806)
!11833 = !DILocation(line: 918, column: 35, scope: !11806)
!11834 = !DILocation(line: 918, column: 15, scope: !11806)
!11835 = !DILocation(line: 919, column: 12, scope: !11836)
!11836 = distinct !DILexicalBlock(scope: !11806, file: !3, line: 919, column: 10)
!11837 = !DILocation(line: 919, column: 10, scope: !11806)
!11838 = !DILocation(line: 920, column: 14, scope: !11839)
!11839 = distinct !DILexicalBlock(scope: !11840, file: !3, line: 920, column: 14)
!11840 = distinct !DILexicalBlock(scope: !11836, file: !3, line: 919, column: 31)
!11841 = !DILocation(line: 920, column: 27, scope: !11839)
!11842 = !DILocation(line: 920, column: 14, scope: !11840)
!11843 = !DILocation(line: 921, column: 23, scope: !11844)
!11844 = distinct !DILexicalBlock(scope: !11839, file: !3, line: 920, column: 52)
!11845 = !DILocation(line: 922, column: 9, scope: !11844)
!11846 = !DILocation(line: 924, column: 18, scope: !11847)
!11847 = distinct !DILexicalBlock(scope: !11848, file: !3, line: 924, column: 18)
!11848 = distinct !DILexicalBlock(scope: !11839, file: !3, line: 923, column: 14)
!11849 = !DILocation(line: 924, column: 18, scope: !11848)
!11850 = !DILocation(line: 925, column: 31, scope: !11851)
!11851 = distinct !DILexicalBlock(scope: !11847, file: !3, line: 924, column: 26)
!11852 = !DILocation(line: 925, column: 44, scope: !11851)
!11853 = !DILocation(line: 925, column: 66, scope: !11851)
!11854 = !DILocation(line: 925, column: 69, scope: !11851)
!11855 = !DILocation(line: 925, column: 27, scope: !11851)
!11856 = !DILocation(line: 926, column: 13, scope: !11851)
!11857 = !DILocation(line: 928, column: 31, scope: !11858)
!11858 = distinct !DILexicalBlock(scope: !11847, file: !3, line: 927, column: 18)
!11859 = !DILocation(line: 928, column: 44, scope: !11858)
!11860 = !DILocation(line: 928, column: 64, scope: !11858)
!11861 = !DILocation(line: 928, column: 67, scope: !11858)
!11862 = !DILocation(line: 928, column: 27, scope: !11858)
!11863 = !DILocation(line: 931, column: 5, scope: !11840)
!11864 = !DILocation(line: 932, column: 29, scope: !11865)
!11865 = distinct !DILexicalBlock(scope: !11806, file: !3, line: 932, column: 10)
!11866 = !DILocation(line: 932, column: 17, scope: !11865)
!11867 = !DILocation(line: 932, column: 10, scope: !11806)
!11868 = !DILocation(line: 933, column: 28, scope: !11869)
!11869 = distinct !DILexicalBlock(scope: !11870, file: !3, line: 933, column: 17)
!11870 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 932, column: 36)
!11871 = !DILocation(line: 933, column: 26, scope: !11869)
!11872 = !DILocation(line: 934, column: 14, scope: !11869)
!11873 = !DILocation(line: 934, column: 24, scope: !11869)
!11874 = !DILocation(line: 934, column: 29, scope: !11869)
!11875 = !DILocation(line: 935, column: 19, scope: !11869)
!11876 = !DILocation(line: 938, column: 26, scope: !11869)
!11877 = !DILocation(line: 939, column: 26, scope: !11869)
!11878 = !DILocation(line: 935, column: 22, scope: !11869)
!11879 = !DILocation(line: 941, column: 19, scope: !11869)
!11880 = !DILocation(line: 941, column: 22, scope: !11869)
!11881 = !DILocation(line: 933, column: 17, scope: !11870)
!11882 = !DILocation(line: 944, column: 13, scope: !11883)
!11883 = distinct !DILexicalBlock(scope: !11869, file: !3, line: 943, column: 14)
!11884 = !DILocation(line: 945, column: 23, scope: !11885)
!11885 = distinct !DILexicalBlock(scope: !11883, file: !3, line: 945, column: 21)
!11886 = !DILocation(line: 945, column: 36, scope: !11885)
!11887 = !DILocation(line: 946, column: 18, scope: !11885)
!11888 = !DILocation(line: 946, column: 23, scope: !11885)
!11889 = !DILocation(line: 946, column: 29, scope: !11885)
!11890 = !DILocation(line: 946, column: 34, scope: !11885)
!11891 = !DILocation(line: 946, column: 47, scope: !11885)
!11892 = !DILocation(line: 947, column: 18, scope: !11885)
!11893 = !DILocation(line: 947, column: 25, scope: !11885)
!11894 = !DILocation(line: 947, column: 31, scope: !11885)
!11895 = !DILocation(line: 947, column: 36, scope: !11885)
!11896 = !DILocation(line: 947, column: 49, scope: !11885)
!11897 = !DILocation(line: 945, column: 21, scope: !11883)
!11898 = !DILocation(line: 951, column: 25, scope: !11899)
!11899 = distinct !DILexicalBlock(scope: !11885, file: !3, line: 948, column: 18)
!11900 = !DILocation(line: 950, column: 21, scope: !11899)
!11901 = !DILocation(line: 949, column: 17, scope: !11899)
!11902 = !DILocation(line: 957, column: 34, scope: !11883)
!11903 = !DILocation(line: 957, column: 20, scope: !11883)
!11904 = !DILocation(line: 957, column: 13, scope: !11883)
!11905 = !DILocation(line: 959, column: 14, scope: !11906)
!11906 = distinct !DILexicalBlock(scope: !11870, file: !3, line: 959, column: 14)
!11907 = !DILocation(line: 959, column: 19, scope: !11906)
!11908 = !DILocation(line: 959, column: 14, scope: !11870)
!11909 = !DILocation(line: 961, column: 22, scope: !11910)
!11910 = distinct !DILexicalBlock(scope: !11906, file: !3, line: 959, column: 25)
!11911 = !DILocation(line: 961, column: 44, scope: !11910)
!11912 = !DILocation(line: 962, column: 17, scope: !11910)
!11913 = !DILocation(line: 962, column: 22, scope: !11910)
!11914 = !DILocation(line: 962, column: 27, scope: !11910)
!11915 = !DILocation(line: 963, column: 17, scope: !11910)
!11916 = !DILocation(line: 963, column: 22, scope: !11910)
!11917 = !DILocation(line: 964, column: 17, scope: !11910)
!11918 = !DILocation(line: 965, column: 24, scope: !11910)
!11919 = !DILocation(line: 966, column: 24, scope: !11910)
!11920 = !DILocation(line: 964, column: 20, scope: !11910)
!11921 = !DILocation(line: 960, column: 20, scope: !11910)
!11922 = !DILocation(line: 971, column: 17, scope: !11910)
!11923 = !DILocation(line: 971, column: 24, scope: !11910)
!11924 = !DILocation(line: 971, column: 31, scope: !11910)
!11925 = !DILocation(line: 971, column: 40, scope: !11910)
!11926 = !DILocation(line: 971, column: 38, scope: !11910)
!11927 = !DILocation(line: 970, column: 13, scope: !11910)
!11928 = !DILocation(line: 972, column: 18, scope: !11910)
!11929 = !DILocation(line: 973, column: 18, scope: !11930)
!11930 = distinct !DILexicalBlock(scope: !11910, file: !3, line: 973, column: 18)
!11931 = !DILocation(line: 973, column: 25, scope: !11930)
!11932 = !DILocation(line: 973, column: 28, scope: !11930)
!11933 = !DILocation(line: 973, column: 18, scope: !11910)
!11934 = !DILocation(line: 973, column: 36, scope: !11930)
!11935 = !DILocation(line: 974, column: 18, scope: !11936)
!11936 = distinct !DILexicalBlock(scope: !11910, file: !3, line: 974, column: 18)
!11937 = !DILocation(line: 974, column: 18, scope: !11910)
!11938 = !DILocation(line: 975, column: 41, scope: !11939)
!11939 = distinct !DILexicalBlock(scope: !11936, file: !3, line: 974, column: 37)
!11940 = !DILocation(line: 975, column: 47, scope: !11939)
!11941 = !DILocation(line: 975, column: 27, scope: !11939)
!11942 = !DILocation(line: 976, column: 13, scope: !11939)
!11943 = !DILocation(line: 978, column: 22, scope: !11944)
!11944 = distinct !DILexicalBlock(scope: !11945, file: !3, line: 978, column: 22)
!11945 = distinct !DILexicalBlock(scope: !11936, file: !3, line: 977, column: 18)
!11946 = !DILocation(line: 978, column: 22, scope: !11945)
!11947 = !DILocation(line: 979, column: 35, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11944, file: !3, line: 978, column: 30)
!11949 = !DILocation(line: 979, column: 48, scope: !11948)
!11950 = !DILocation(line: 979, column: 70, scope: !11948)
!11951 = !DILocation(line: 979, column: 73, scope: !11948)
!11952 = !DILocation(line: 979, column: 31, scope: !11948)
!11953 = !DILocation(line: 980, column: 17, scope: !11948)
!11954 = !DILocation(line: 982, column: 35, scope: !11955)
!11955 = distinct !DILexicalBlock(scope: !11944, file: !3, line: 981, column: 22)
!11956 = !DILocation(line: 982, column: 48, scope: !11955)
!11957 = !DILocation(line: 982, column: 68, scope: !11955)
!11958 = !DILocation(line: 982, column: 71, scope: !11955)
!11959 = !DILocation(line: 982, column: 31, scope: !11955)
!11960 = !DILocation(line: 985, column: 9, scope: !11910)
!11961 = !DILocation(line: 986, column: 5, scope: !11870)
!11962 = !DILocation(line: 987, column: 10, scope: !11963)
!11963 = distinct !DILexicalBlock(scope: !11806, file: !3, line: 987, column: 10)
!11964 = !DILocation(line: 987, column: 10, scope: !11806)
!11965 = !DILocation(line: 987, column: 40, scope: !11963)
!11966 = !DILocation(line: 987, column: 18, scope: !11963)
!11967 = !DILocation(line: 988, column: 10, scope: !11968)
!11968 = distinct !DILexicalBlock(scope: !11806, file: !3, line: 988, column: 10)
!11969 = !DILocation(line: 988, column: 10, scope: !11806)
!11970 = !DILocation(line: 989, column: 17, scope: !11971)
!11971 = distinct !DILexicalBlock(scope: !11968, file: !3, line: 988, column: 22)
!11972 = !DILocation(line: 989, column: 24, scope: !11971)
!11973 = !DILocation(line: 989, column: 9, scope: !11971)
!11974 = !DILocation(line: 990, column: 24, scope: !11971)
!11975 = !DILocation(line: 990, column: 32, scope: !11971)
!11976 = !DILocation(line: 990, column: 30, scope: !11971)
!11977 = !DILocation(line: 990, column: 38, scope: !11971)
!11978 = !DILocation(line: 990, column: 47, scope: !11971)
!11979 = !DILocation(line: 990, column: 45, scope: !11971)
!11980 = !DILocation(line: 990, column: 18, scope: !11971)
!11981 = !DILocation(line: 990, column: 15, scope: !11971)
!11982 = !DILocation(line: 991, column: 5, scope: !11971)
!11983 = !DILocation(line: 993, column: 16, scope: !11984)
!11984 = distinct !DILexicalBlock(scope: !11985, file: !3, line: 993, column: 14)
!11985 = distinct !DILexicalBlock(scope: !11968, file: !3, line: 992, column: 10)
!11986 = !DILocation(line: 993, column: 24, scope: !11984)
!11987 = !DILocation(line: 993, column: 22, scope: !11984)
!11988 = !DILocation(line: 993, column: 32, scope: !11984)
!11989 = !DILocation(line: 993, column: 14, scope: !11985)
!11990 = !DILocation(line: 993, column: 44, scope: !11984)
!11991 = !DILocation(line: 993, column: 39, scope: !11984)
!11992 = !DILocation(line: 995, column: 26, scope: !11806)
!11993 = !DILocation(line: 995, column: 33, scope: !11806)
!11994 = !DILocation(line: 995, column: 39, scope: !11806)
!11995 = !DILocation(line: 995, column: 46, scope: !11806)
!11996 = !DILocation(line: 995, column: 12, scope: !11806)
!11997 = !DILocation(line: 995, column: 5, scope: !11806)
!11998 = !DILocation(line: 997, column: 1, scope: !11806)
!11999 = distinct !DISubprogram(name: "float128_div", scope: !3, file: !3, line: 5077, type: !11124, isLocal: false, isDefinition: true, scopeLine: 5078, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12000 = !DILocalVariable(name: "a", arg: 1, scope: !11999, file: !3, line: 5077, type: !1190)
!12001 = !DILocation(line: 5077, column: 33, scope: !11999)
!12002 = !DILocalVariable(name: "b", arg: 2, scope: !11999, file: !3, line: 5077, type: !1190)
!12003 = !DILocation(line: 5077, column: 45, scope: !11999)
!12004 = !DILocalVariable(name: "aSign", scope: !11999, file: !3, line: 5079, type: !1241)
!12005 = !DILocation(line: 5079, column: 10, scope: !11999)
!12006 = !DILocalVariable(name: "bSign", scope: !11999, file: !3, line: 5079, type: !1241)
!12007 = !DILocation(line: 5079, column: 17, scope: !11999)
!12008 = !DILocalVariable(name: "zSign", scope: !11999, file: !3, line: 5079, type: !1241)
!12009 = !DILocation(line: 5079, column: 24, scope: !11999)
!12010 = !DILocalVariable(name: "aExp", scope: !11999, file: !3, line: 5080, type: !1319)
!12011 = !DILocation(line: 5080, column: 11, scope: !11999)
!12012 = !DILocalVariable(name: "bExp", scope: !11999, file: !3, line: 5080, type: !1319)
!12013 = !DILocation(line: 5080, column: 17, scope: !11999)
!12014 = !DILocalVariable(name: "zExp", scope: !11999, file: !3, line: 5080, type: !1319)
!12015 = !DILocation(line: 5080, column: 23, scope: !11999)
!12016 = !DILocalVariable(name: "aSig0", scope: !11999, file: !3, line: 5081, type: !24)
!12017 = !DILocation(line: 5081, column: 12, scope: !11999)
!12018 = !DILocalVariable(name: "aSig1", scope: !11999, file: !3, line: 5081, type: !24)
!12019 = !DILocation(line: 5081, column: 19, scope: !11999)
!12020 = !DILocalVariable(name: "bSig0", scope: !11999, file: !3, line: 5081, type: !24)
!12021 = !DILocation(line: 5081, column: 26, scope: !11999)
!12022 = !DILocalVariable(name: "bSig1", scope: !11999, file: !3, line: 5081, type: !24)
!12023 = !DILocation(line: 5081, column: 33, scope: !11999)
!12024 = !DILocalVariable(name: "zSig0", scope: !11999, file: !3, line: 5081, type: !24)
!12025 = !DILocation(line: 5081, column: 40, scope: !11999)
!12026 = !DILocalVariable(name: "zSig1", scope: !11999, file: !3, line: 5081, type: !24)
!12027 = !DILocation(line: 5081, column: 47, scope: !11999)
!12028 = !DILocalVariable(name: "zSig2", scope: !11999, file: !3, line: 5081, type: !24)
!12029 = !DILocation(line: 5081, column: 54, scope: !11999)
!12030 = !DILocalVariable(name: "rem0", scope: !11999, file: !3, line: 5082, type: !24)
!12031 = !DILocation(line: 5082, column: 12, scope: !11999)
!12032 = !DILocalVariable(name: "rem1", scope: !11999, file: !3, line: 5082, type: !24)
!12033 = !DILocation(line: 5082, column: 18, scope: !11999)
!12034 = !DILocalVariable(name: "rem2", scope: !11999, file: !3, line: 5082, type: !24)
!12035 = !DILocation(line: 5082, column: 24, scope: !11999)
!12036 = !DILocalVariable(name: "rem3", scope: !11999, file: !3, line: 5082, type: !24)
!12037 = !DILocation(line: 5082, column: 30, scope: !11999)
!12038 = !DILocalVariable(name: "term0", scope: !11999, file: !3, line: 5082, type: !24)
!12039 = !DILocation(line: 5082, column: 36, scope: !11999)
!12040 = !DILocalVariable(name: "term1", scope: !11999, file: !3, line: 5082, type: !24)
!12041 = !DILocation(line: 5082, column: 43, scope: !11999)
!12042 = !DILocalVariable(name: "term2", scope: !11999, file: !3, line: 5082, type: !24)
!12043 = !DILocation(line: 5082, column: 50, scope: !11999)
!12044 = !DILocalVariable(name: "term3", scope: !11999, file: !3, line: 5082, type: !24)
!12045 = !DILocation(line: 5082, column: 57, scope: !11999)
!12046 = !DILocalVariable(name: "z", scope: !11999, file: !3, line: 5083, type: !1190)
!12047 = !DILocation(line: 5083, column: 14, scope: !11999)
!12048 = !DILocation(line: 5085, column: 13, scope: !11999)
!12049 = !DILocation(line: 5085, column: 11, scope: !11999)
!12050 = !DILocation(line: 5086, column: 13, scope: !11999)
!12051 = !DILocation(line: 5086, column: 11, scope: !11999)
!12052 = !DILocation(line: 5087, column: 12, scope: !11999)
!12053 = !DILocation(line: 5087, column: 10, scope: !11999)
!12054 = !DILocation(line: 5088, column: 13, scope: !11999)
!12055 = !DILocation(line: 5088, column: 11, scope: !11999)
!12056 = !DILocation(line: 5089, column: 13, scope: !11999)
!12057 = !DILocation(line: 5089, column: 11, scope: !11999)
!12058 = !DILocation(line: 5090, column: 13, scope: !11999)
!12059 = !DILocation(line: 5090, column: 11, scope: !11999)
!12060 = !DILocation(line: 5091, column: 12, scope: !11999)
!12061 = !DILocation(line: 5091, column: 10, scope: !11999)
!12062 = !DILocation(line: 5092, column: 13, scope: !11999)
!12063 = !DILocation(line: 5092, column: 11, scope: !11999)
!12064 = !DILocation(line: 5093, column: 13, scope: !11999)
!12065 = !DILocation(line: 5093, column: 21, scope: !11999)
!12066 = !DILocation(line: 5093, column: 19, scope: !11999)
!12067 = !DILocation(line: 5093, column: 11, scope: !11999)
!12068 = !DILocation(line: 5094, column: 10, scope: !12069)
!12069 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5094, column: 10)
!12070 = !DILocation(line: 5094, column: 15, scope: !12069)
!12071 = !DILocation(line: 5094, column: 10, scope: !11999)
!12072 = !DILocation(line: 5095, column: 14, scope: !12073)
!12073 = distinct !DILexicalBlock(scope: !12074, file: !3, line: 5095, column: 14)
!12074 = distinct !DILexicalBlock(scope: !12069, file: !3, line: 5094, column: 27)
!12075 = !DILocation(line: 5095, column: 22, scope: !12073)
!12076 = !DILocation(line: 5095, column: 20, scope: !12073)
!12077 = !DILocation(line: 5095, column: 14, scope: !12074)
!12078 = !DILocation(line: 5095, column: 37, scope: !12073)
!12079 = !DILocation(line: 5095, column: 30, scope: !12073)
!12080 = !DILocation(line: 5096, column: 14, scope: !12081)
!12081 = distinct !DILexicalBlock(scope: !12074, file: !3, line: 5096, column: 14)
!12082 = !DILocation(line: 5096, column: 19, scope: !12081)
!12083 = !DILocation(line: 5096, column: 14, scope: !12074)
!12084 = !DILocation(line: 5097, column: 18, scope: !12085)
!12085 = distinct !DILexicalBlock(scope: !12086, file: !3, line: 5097, column: 18)
!12086 = distinct !DILexicalBlock(scope: !12081, file: !3, line: 5096, column: 31)
!12087 = !DILocation(line: 5097, column: 26, scope: !12085)
!12088 = !DILocation(line: 5097, column: 24, scope: !12085)
!12089 = !DILocation(line: 5097, column: 18, scope: !12086)
!12090 = !DILocation(line: 5097, column: 41, scope: !12085)
!12091 = !DILocation(line: 5097, column: 34, scope: !12085)
!12092 = !DILocation(line: 5098, column: 13, scope: !12086)
!12093 = !DILocation(line: 5100, column: 30, scope: !12074)
!12094 = !DILocation(line: 5100, column: 16, scope: !12074)
!12095 = !DILocation(line: 5100, column: 9, scope: !12074)
!12096 = !DILocation(line: 5102, column: 10, scope: !12097)
!12097 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5102, column: 10)
!12098 = !DILocation(line: 5102, column: 15, scope: !12097)
!12099 = !DILocation(line: 5102, column: 10, scope: !11999)
!12100 = !DILocation(line: 5103, column: 14, scope: !12101)
!12101 = distinct !DILexicalBlock(scope: !12102, file: !3, line: 5103, column: 14)
!12102 = distinct !DILexicalBlock(scope: !12097, file: !3, line: 5102, column: 27)
!12103 = !DILocation(line: 5103, column: 22, scope: !12101)
!12104 = !DILocation(line: 5103, column: 20, scope: !12101)
!12105 = !DILocation(line: 5103, column: 14, scope: !12102)
!12106 = !DILocation(line: 5103, column: 37, scope: !12101)
!12107 = !DILocation(line: 5103, column: 30, scope: !12101)
!12108 = !DILocation(line: 5104, column: 30, scope: !12102)
!12109 = !DILocation(line: 5104, column: 16, scope: !12102)
!12110 = !DILocation(line: 5104, column: 9, scope: !12102)
!12111 = !DILocation(line: 5106, column: 10, scope: !12112)
!12112 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5106, column: 10)
!12113 = !DILocation(line: 5106, column: 15, scope: !12112)
!12114 = !DILocation(line: 5106, column: 10, scope: !11999)
!12115 = !DILocation(line: 5107, column: 16, scope: !12116)
!12116 = distinct !DILexicalBlock(scope: !12117, file: !3, line: 5107, column: 14)
!12117 = distinct !DILexicalBlock(scope: !12112, file: !3, line: 5106, column: 22)
!12118 = !DILocation(line: 5107, column: 24, scope: !12116)
!12119 = !DILocation(line: 5107, column: 22, scope: !12116)
!12120 = !DILocation(line: 5107, column: 32, scope: !12116)
!12121 = !DILocation(line: 5107, column: 14, scope: !12117)
!12122 = !DILocation(line: 5108, column: 20, scope: !12123)
!12123 = distinct !DILexicalBlock(scope: !12124, file: !3, line: 5108, column: 18)
!12124 = distinct !DILexicalBlock(scope: !12116, file: !3, line: 5107, column: 39)
!12125 = !DILocation(line: 5108, column: 27, scope: !12123)
!12126 = !DILocation(line: 5108, column: 25, scope: !12123)
!12127 = !DILocation(line: 5108, column: 35, scope: !12123)
!12128 = !DILocation(line: 5108, column: 33, scope: !12123)
!12129 = !DILocation(line: 5108, column: 43, scope: !12123)
!12130 = !DILocation(line: 5108, column: 18, scope: !12124)
!12131 = !DILocation(line: 5108, column: 50, scope: !12123)
!12132 = !DILocation(line: 5110, column: 17, scope: !12133)
!12133 = distinct !DILexicalBlock(scope: !12123, file: !3, line: 5108, column: 50)
!12134 = !DILocation(line: 5111, column: 19, scope: !12133)
!12135 = !DILocation(line: 5111, column: 23, scope: !12133)
!12136 = !DILocation(line: 5112, column: 19, scope: !12133)
!12137 = !DILocation(line: 5112, column: 24, scope: !12133)
!12138 = !DILocation(line: 5113, column: 24, scope: !12133)
!12139 = !DILocation(line: 5113, column: 17, scope: !12133)
!12140 = !DILocation(line: 5115, column: 13, scope: !12124)
!12141 = !DILocation(line: 5116, column: 34, scope: !12124)
!12142 = !DILocation(line: 5116, column: 20, scope: !12124)
!12143 = !DILocation(line: 5116, column: 13, scope: !12124)
!12144 = !DILocation(line: 5118, column: 37, scope: !12117)
!12145 = !DILocation(line: 5118, column: 44, scope: !12117)
!12146 = !DILocation(line: 5118, column: 9, scope: !12117)
!12147 = !DILocation(line: 5119, column: 5, scope: !12117)
!12148 = !DILocation(line: 5120, column: 10, scope: !12149)
!12149 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5120, column: 10)
!12150 = !DILocation(line: 5120, column: 15, scope: !12149)
!12151 = !DILocation(line: 5120, column: 10, scope: !11999)
!12152 = !DILocation(line: 5121, column: 16, scope: !12153)
!12153 = distinct !DILexicalBlock(scope: !12154, file: !3, line: 5121, column: 14)
!12154 = distinct !DILexicalBlock(scope: !12149, file: !3, line: 5120, column: 22)
!12155 = !DILocation(line: 5121, column: 24, scope: !12153)
!12156 = !DILocation(line: 5121, column: 22, scope: !12153)
!12157 = !DILocation(line: 5121, column: 32, scope: !12153)
!12158 = !DILocation(line: 5121, column: 14, scope: !12154)
!12159 = !DILocation(line: 5121, column: 60, scope: !12153)
!12160 = !DILocation(line: 5121, column: 46, scope: !12153)
!12161 = !DILocation(line: 5121, column: 39, scope: !12153)
!12162 = !DILocation(line: 5122, column: 37, scope: !12154)
!12163 = !DILocation(line: 5122, column: 44, scope: !12154)
!12164 = !DILocation(line: 5122, column: 9, scope: !12154)
!12165 = !DILocation(line: 5123, column: 5, scope: !12154)
!12166 = !DILocation(line: 5124, column: 12, scope: !11999)
!12167 = !DILocation(line: 5124, column: 19, scope: !11999)
!12168 = !DILocation(line: 5124, column: 17, scope: !11999)
!12169 = !DILocation(line: 5124, column: 24, scope: !11999)
!12170 = !DILocation(line: 5124, column: 10, scope: !11999)
!12171 = !DILocation(line: 5126, column: 9, scope: !11999)
!12172 = !DILocation(line: 5126, column: 15, scope: !11999)
!12173 = !DILocation(line: 5126, column: 46, scope: !11999)
!12174 = !DILocation(line: 5125, column: 5, scope: !11999)
!12175 = !DILocation(line: 5128, column: 9, scope: !11999)
!12176 = !DILocation(line: 5128, column: 15, scope: !11999)
!12177 = !DILocation(line: 5128, column: 46, scope: !11999)
!12178 = !DILocation(line: 5127, column: 5, scope: !11999)
!12179 = !DILocation(line: 5129, column: 17, scope: !12180)
!12180 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5129, column: 10)
!12181 = !DILocation(line: 5129, column: 24, scope: !12180)
!12182 = !DILocation(line: 5129, column: 31, scope: !12180)
!12183 = !DILocation(line: 5129, column: 38, scope: !12180)
!12184 = !DILocation(line: 5129, column: 10, scope: !12180)
!12185 = !DILocation(line: 5129, column: 10, scope: !11999)
!12186 = !DILocation(line: 5130, column: 24, scope: !12187)
!12187 = distinct !DILexicalBlock(scope: !12180, file: !3, line: 5129, column: 48)
!12188 = !DILocation(line: 5130, column: 31, scope: !12187)
!12189 = !DILocation(line: 5130, column: 9, scope: !12187)
!12190 = !DILocation(line: 5131, column: 9, scope: !12187)
!12191 = !DILocation(line: 5132, column: 5, scope: !12187)
!12192 = !DILocation(line: 5133, column: 33, scope: !11999)
!12193 = !DILocation(line: 5133, column: 40, scope: !11999)
!12194 = !DILocation(line: 5133, column: 47, scope: !11999)
!12195 = !DILocation(line: 5133, column: 13, scope: !11999)
!12196 = !DILocation(line: 5133, column: 11, scope: !11999)
!12197 = !DILocation(line: 5134, column: 22, scope: !11999)
!12198 = !DILocation(line: 5134, column: 29, scope: !11999)
!12199 = !DILocation(line: 5134, column: 36, scope: !11999)
!12200 = !DILocation(line: 5134, column: 5, scope: !11999)
!12201 = !DILocation(line: 5135, column: 13, scope: !11999)
!12202 = !DILocation(line: 5135, column: 20, scope: !11999)
!12203 = !DILocation(line: 5135, column: 30, scope: !11999)
!12204 = !DILocation(line: 5135, column: 37, scope: !11999)
!12205 = !DILocation(line: 5135, column: 44, scope: !11999)
!12206 = !DILocation(line: 5135, column: 5, scope: !11999)
!12207 = !DILocation(line: 5136, column: 5, scope: !11999)
!12208 = !DILocation(line: 5136, column: 23, scope: !11999)
!12209 = !DILocation(line: 5136, column: 28, scope: !11999)
!12210 = !DILocation(line: 5137, column: 9, scope: !12211)
!12211 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5136, column: 34)
!12212 = !DILocation(line: 5138, column: 17, scope: !12211)
!12213 = !DILocation(line: 5138, column: 23, scope: !12211)
!12214 = !DILocation(line: 5138, column: 29, scope: !12211)
!12215 = !DILocation(line: 5138, column: 38, scope: !12211)
!12216 = !DILocation(line: 5138, column: 45, scope: !12211)
!12217 = !DILocation(line: 5138, column: 9, scope: !12211)
!12218 = distinct !{!12218, !12207, !12219}
!12219 = !DILocation(line: 5139, column: 5, scope: !11999)
!12220 = !DILocation(line: 5140, column: 33, scope: !11999)
!12221 = !DILocation(line: 5140, column: 39, scope: !11999)
!12222 = !DILocation(line: 5140, column: 45, scope: !11999)
!12223 = !DILocation(line: 5140, column: 13, scope: !11999)
!12224 = !DILocation(line: 5140, column: 11, scope: !11999)
!12225 = !DILocation(line: 5141, column: 12, scope: !12226)
!12226 = distinct !DILexicalBlock(scope: !11999, file: !3, line: 5141, column: 10)
!12227 = !DILocation(line: 5141, column: 18, scope: !12226)
!12228 = !DILocation(line: 5141, column: 29, scope: !12226)
!12229 = !DILocation(line: 5141, column: 10, scope: !11999)
!12230 = !DILocation(line: 5142, column: 26, scope: !12231)
!12231 = distinct !DILexicalBlock(scope: !12226, file: !3, line: 5141, column: 36)
!12232 = !DILocation(line: 5142, column: 33, scope: !12231)
!12233 = !DILocation(line: 5142, column: 40, scope: !12231)
!12234 = !DILocation(line: 5142, column: 9, scope: !12231)
!12235 = !DILocation(line: 5143, column: 17, scope: !12231)
!12236 = !DILocation(line: 5143, column: 23, scope: !12231)
!12237 = !DILocation(line: 5143, column: 32, scope: !12231)
!12238 = !DILocation(line: 5143, column: 39, scope: !12231)
!12239 = !DILocation(line: 5143, column: 46, scope: !12231)
!12240 = !DILocation(line: 5143, column: 9, scope: !12231)
!12241 = !DILocation(line: 5144, column: 9, scope: !12231)
!12242 = !DILocation(line: 5144, column: 27, scope: !12231)
!12243 = !DILocation(line: 5144, column: 32, scope: !12231)
!12244 = !DILocation(line: 5145, column: 13, scope: !12245)
!12245 = distinct !DILexicalBlock(scope: !12231, file: !3, line: 5144, column: 38)
!12246 = !DILocation(line: 5146, column: 21, scope: !12245)
!12247 = !DILocation(line: 5146, column: 27, scope: !12245)
!12248 = !DILocation(line: 5146, column: 33, scope: !12245)
!12249 = !DILocation(line: 5146, column: 42, scope: !12245)
!12250 = !DILocation(line: 5146, column: 49, scope: !12245)
!12251 = !DILocation(line: 5146, column: 13, scope: !12245)
!12252 = distinct !{!12252, !12241, !12253}
!12253 = !DILocation(line: 5147, column: 9, scope: !12231)
!12254 = !DILocation(line: 5148, column: 22, scope: !12231)
!12255 = !DILocation(line: 5148, column: 29, scope: !12231)
!12256 = !DILocation(line: 5148, column: 27, scope: !12231)
!12257 = !DILocation(line: 5148, column: 36, scope: !12231)
!12258 = !DILocation(line: 5148, column: 34, scope: !12231)
!12259 = !DILocation(line: 5148, column: 43, scope: !12231)
!12260 = !DILocation(line: 5148, column: 18, scope: !12231)
!12261 = !DILocation(line: 5148, column: 15, scope: !12231)
!12262 = !DILocation(line: 5149, column: 5, scope: !12231)
!12263 = !DILocation(line: 5150, column: 32, scope: !11999)
!12264 = !DILocation(line: 5150, column: 39, scope: !11999)
!12265 = !DILocation(line: 5150, column: 5, scope: !11999)
!12266 = !DILocation(line: 5151, column: 34, scope: !11999)
!12267 = !DILocation(line: 5151, column: 41, scope: !11999)
!12268 = !DILocation(line: 5151, column: 47, scope: !11999)
!12269 = !DILocation(line: 5151, column: 54, scope: !11999)
!12270 = !DILocation(line: 5151, column: 61, scope: !11999)
!12271 = !DILocation(line: 5151, column: 12, scope: !11999)
!12272 = !DILocation(line: 5151, column: 5, scope: !11999)
!12273 = !DILocation(line: 5153, column: 1, scope: !11999)
!12274 = distinct !DISubprogram(name: "float128_rem", scope: !3, file: !3, line: 5161, type: !11124, isLocal: false, isDefinition: true, scopeLine: 5162, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12275 = !DILocalVariable(name: "a", arg: 1, scope: !12274, file: !3, line: 5161, type: !1190)
!12276 = !DILocation(line: 5161, column: 33, scope: !12274)
!12277 = !DILocalVariable(name: "b", arg: 2, scope: !12274, file: !3, line: 5161, type: !1190)
!12278 = !DILocation(line: 5161, column: 45, scope: !12274)
!12279 = !DILocalVariable(name: "aSign", scope: !12274, file: !3, line: 5163, type: !1241)
!12280 = !DILocation(line: 5163, column: 10, scope: !12274)
!12281 = !DILocalVariable(name: "bSign", scope: !12274, file: !3, line: 5163, type: !1241)
!12282 = !DILocation(line: 5163, column: 17, scope: !12274)
!12283 = !DILocalVariable(name: "zSign", scope: !12274, file: !3, line: 5163, type: !1241)
!12284 = !DILocation(line: 5163, column: 24, scope: !12274)
!12285 = !DILocalVariable(name: "aExp", scope: !12274, file: !3, line: 5164, type: !1319)
!12286 = !DILocation(line: 5164, column: 11, scope: !12274)
!12287 = !DILocalVariable(name: "bExp", scope: !12274, file: !3, line: 5164, type: !1319)
!12288 = !DILocation(line: 5164, column: 17, scope: !12274)
!12289 = !DILocalVariable(name: "expDiff", scope: !12274, file: !3, line: 5164, type: !1319)
!12290 = !DILocation(line: 5164, column: 23, scope: !12274)
!12291 = !DILocalVariable(name: "aSig0", scope: !12274, file: !3, line: 5165, type: !24)
!12292 = !DILocation(line: 5165, column: 12, scope: !12274)
!12293 = !DILocalVariable(name: "aSig1", scope: !12274, file: !3, line: 5165, type: !24)
!12294 = !DILocation(line: 5165, column: 19, scope: !12274)
!12295 = !DILocalVariable(name: "bSig0", scope: !12274, file: !3, line: 5165, type: !24)
!12296 = !DILocation(line: 5165, column: 26, scope: !12274)
!12297 = !DILocalVariable(name: "bSig1", scope: !12274, file: !3, line: 5165, type: !24)
!12298 = !DILocation(line: 5165, column: 33, scope: !12274)
!12299 = !DILocalVariable(name: "q", scope: !12274, file: !3, line: 5165, type: !24)
!12300 = !DILocation(line: 5165, column: 40, scope: !12274)
!12301 = !DILocalVariable(name: "term0", scope: !12274, file: !3, line: 5165, type: !24)
!12302 = !DILocation(line: 5165, column: 43, scope: !12274)
!12303 = !DILocalVariable(name: "term1", scope: !12274, file: !3, line: 5165, type: !24)
!12304 = !DILocation(line: 5165, column: 50, scope: !12274)
!12305 = !DILocalVariable(name: "term2", scope: !12274, file: !3, line: 5165, type: !24)
!12306 = !DILocation(line: 5165, column: 57, scope: !12274)
!12307 = !DILocalVariable(name: "allZero", scope: !12274, file: !3, line: 5166, type: !24)
!12308 = !DILocation(line: 5166, column: 12, scope: !12274)
!12309 = !DILocalVariable(name: "alternateASig0", scope: !12274, file: !3, line: 5166, type: !24)
!12310 = !DILocation(line: 5166, column: 21, scope: !12274)
!12311 = !DILocalVariable(name: "alternateASig1", scope: !12274, file: !3, line: 5166, type: !24)
!12312 = !DILocation(line: 5166, column: 37, scope: !12274)
!12313 = !DILocalVariable(name: "sigMean1", scope: !12274, file: !3, line: 5166, type: !24)
!12314 = !DILocation(line: 5166, column: 53, scope: !12274)
!12315 = !DILocalVariable(name: "sigMean0", scope: !12274, file: !3, line: 5167, type: !33)
!12316 = !DILocation(line: 5167, column: 13, scope: !12274)
!12317 = !DILocalVariable(name: "z", scope: !12274, file: !3, line: 5168, type: !1190)
!12318 = !DILocation(line: 5168, column: 14, scope: !12274)
!12319 = !DILocation(line: 5170, column: 13, scope: !12274)
!12320 = !DILocation(line: 5170, column: 11, scope: !12274)
!12321 = !DILocation(line: 5171, column: 13, scope: !12274)
!12322 = !DILocation(line: 5171, column: 11, scope: !12274)
!12323 = !DILocation(line: 5172, column: 12, scope: !12274)
!12324 = !DILocation(line: 5172, column: 10, scope: !12274)
!12325 = !DILocation(line: 5173, column: 13, scope: !12274)
!12326 = !DILocation(line: 5173, column: 11, scope: !12274)
!12327 = !DILocation(line: 5174, column: 13, scope: !12274)
!12328 = !DILocation(line: 5174, column: 11, scope: !12274)
!12329 = !DILocation(line: 5175, column: 13, scope: !12274)
!12330 = !DILocation(line: 5175, column: 11, scope: !12274)
!12331 = !DILocation(line: 5176, column: 12, scope: !12274)
!12332 = !DILocation(line: 5176, column: 10, scope: !12274)
!12333 = !DILocation(line: 5177, column: 13, scope: !12274)
!12334 = !DILocation(line: 5177, column: 11, scope: !12274)
!12335 = !DILocation(line: 5178, column: 10, scope: !12336)
!12336 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5178, column: 10)
!12337 = !DILocation(line: 5178, column: 15, scope: !12336)
!12338 = !DILocation(line: 5178, column: 10, scope: !12274)
!12339 = !DILocation(line: 5179, column: 19, scope: !12340)
!12340 = distinct !DILexicalBlock(scope: !12341, file: !3, line: 5179, column: 17)
!12341 = distinct !DILexicalBlock(scope: !12336, file: !3, line: 5178, column: 27)
!12342 = !DILocation(line: 5179, column: 27, scope: !12340)
!12343 = !DILocation(line: 5179, column: 25, scope: !12340)
!12344 = !DILocation(line: 5180, column: 14, scope: !12340)
!12345 = !DILocation(line: 5180, column: 21, scope: !12340)
!12346 = !DILocation(line: 5180, column: 26, scope: !12340)
!12347 = !DILocation(line: 5180, column: 38, scope: !12340)
!12348 = !DILocation(line: 5180, column: 43, scope: !12340)
!12349 = !DILocation(line: 5180, column: 51, scope: !12340)
!12350 = !DILocation(line: 5180, column: 49, scope: !12340)
!12351 = !DILocation(line: 5179, column: 17, scope: !12341)
!12352 = !DILocation(line: 5181, column: 20, scope: !12353)
!12353 = distinct !DILexicalBlock(scope: !12340, file: !3, line: 5180, column: 63)
!12354 = !DILocation(line: 5181, column: 13, scope: !12353)
!12355 = !DILocation(line: 5183, column: 9, scope: !12341)
!12356 = !DILocation(line: 5185, column: 10, scope: !12357)
!12357 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5185, column: 10)
!12358 = !DILocation(line: 5185, column: 15, scope: !12357)
!12359 = !DILocation(line: 5185, column: 10, scope: !12274)
!12360 = !DILocation(line: 5186, column: 14, scope: !12361)
!12361 = distinct !DILexicalBlock(scope: !12362, file: !3, line: 5186, column: 14)
!12362 = distinct !DILexicalBlock(scope: !12357, file: !3, line: 5185, column: 27)
!12363 = !DILocation(line: 5186, column: 22, scope: !12361)
!12364 = !DILocation(line: 5186, column: 20, scope: !12361)
!12365 = !DILocation(line: 5186, column: 14, scope: !12362)
!12366 = !DILocation(line: 5186, column: 37, scope: !12361)
!12367 = !DILocation(line: 5186, column: 30, scope: !12361)
!12368 = !DILocation(line: 5187, column: 16, scope: !12362)
!12369 = !DILocation(line: 5187, column: 9, scope: !12362)
!12370 = !DILocation(line: 5189, column: 10, scope: !12371)
!12371 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5189, column: 10)
!12372 = !DILocation(line: 5189, column: 15, scope: !12371)
!12373 = !DILocation(line: 5189, column: 10, scope: !12274)
!12374 = !DILocation(line: 5190, column: 16, scope: !12375)
!12375 = distinct !DILexicalBlock(scope: !12376, file: !3, line: 5190, column: 14)
!12376 = distinct !DILexicalBlock(scope: !12371, file: !3, line: 5189, column: 22)
!12377 = !DILocation(line: 5190, column: 24, scope: !12375)
!12378 = !DILocation(line: 5190, column: 22, scope: !12375)
!12379 = !DILocation(line: 5190, column: 32, scope: !12375)
!12380 = !DILocation(line: 5190, column: 14, scope: !12376)
!12381 = !DILocation(line: 5190, column: 39, scope: !12375)
!12382 = !DILocation(line: 5192, column: 13, scope: !12383)
!12383 = distinct !DILexicalBlock(scope: !12375, file: !3, line: 5190, column: 39)
!12384 = !DILocation(line: 5193, column: 15, scope: !12383)
!12385 = !DILocation(line: 5193, column: 19, scope: !12383)
!12386 = !DILocation(line: 5194, column: 15, scope: !12383)
!12387 = !DILocation(line: 5194, column: 20, scope: !12383)
!12388 = !DILocation(line: 5195, column: 20, scope: !12383)
!12389 = !DILocation(line: 5195, column: 13, scope: !12383)
!12390 = !DILocation(line: 5197, column: 37, scope: !12376)
!12391 = !DILocation(line: 5197, column: 44, scope: !12376)
!12392 = !DILocation(line: 5197, column: 9, scope: !12376)
!12393 = !DILocation(line: 5198, column: 5, scope: !12376)
!12394 = !DILocation(line: 5199, column: 10, scope: !12395)
!12395 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5199, column: 10)
!12396 = !DILocation(line: 5199, column: 15, scope: !12395)
!12397 = !DILocation(line: 5199, column: 10, scope: !12274)
!12398 = !DILocation(line: 5200, column: 16, scope: !12399)
!12399 = distinct !DILexicalBlock(scope: !12400, file: !3, line: 5200, column: 14)
!12400 = distinct !DILexicalBlock(scope: !12395, file: !3, line: 5199, column: 22)
!12401 = !DILocation(line: 5200, column: 24, scope: !12399)
!12402 = !DILocation(line: 5200, column: 22, scope: !12399)
!12403 = !DILocation(line: 5200, column: 32, scope: !12399)
!12404 = !DILocation(line: 5200, column: 14, scope: !12400)
!12405 = !DILocation(line: 5200, column: 46, scope: !12399)
!12406 = !DILocation(line: 5200, column: 39, scope: !12399)
!12407 = !DILocation(line: 5201, column: 37, scope: !12400)
!12408 = !DILocation(line: 5201, column: 44, scope: !12400)
!12409 = !DILocation(line: 5201, column: 9, scope: !12400)
!12410 = !DILocation(line: 5202, column: 5, scope: !12400)
!12411 = !DILocation(line: 5203, column: 15, scope: !12274)
!12412 = !DILocation(line: 5203, column: 22, scope: !12274)
!12413 = !DILocation(line: 5203, column: 20, scope: !12274)
!12414 = !DILocation(line: 5203, column: 13, scope: !12274)
!12415 = !DILocation(line: 5204, column: 10, scope: !12416)
!12416 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5204, column: 10)
!12417 = !DILocation(line: 5204, column: 18, scope: !12416)
!12418 = !DILocation(line: 5204, column: 10, scope: !12274)
!12419 = !DILocation(line: 5204, column: 32, scope: !12416)
!12420 = !DILocation(line: 5204, column: 25, scope: !12416)
!12421 = !DILocation(line: 5206, column: 9, scope: !12274)
!12422 = !DILocation(line: 5206, column: 15, scope: !12274)
!12423 = !DILocation(line: 5207, column: 9, scope: !12274)
!12424 = !DILocation(line: 5208, column: 16, scope: !12274)
!12425 = !DILocation(line: 5208, column: 24, scope: !12274)
!12426 = !DILocation(line: 5208, column: 12, scope: !12274)
!12427 = !DILocation(line: 5205, column: 5, scope: !12274)
!12428 = !DILocation(line: 5213, column: 9, scope: !12274)
!12429 = !DILocation(line: 5213, column: 15, scope: !12274)
!12430 = !DILocation(line: 5213, column: 46, scope: !12274)
!12431 = !DILocation(line: 5212, column: 5, scope: !12274)
!12432 = !DILocation(line: 5214, column: 16, scope: !12274)
!12433 = !DILocation(line: 5214, column: 23, scope: !12274)
!12434 = !DILocation(line: 5214, column: 30, scope: !12274)
!12435 = !DILocation(line: 5214, column: 37, scope: !12274)
!12436 = !DILocation(line: 5214, column: 9, scope: !12274)
!12437 = !DILocation(line: 5214, column: 7, scope: !12274)
!12438 = !DILocation(line: 5215, column: 10, scope: !12439)
!12439 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5215, column: 10)
!12440 = !DILocation(line: 5215, column: 10, scope: !12274)
!12441 = !DILocation(line: 5215, column: 22, scope: !12439)
!12442 = !DILocation(line: 5215, column: 29, scope: !12439)
!12443 = !DILocation(line: 5215, column: 36, scope: !12439)
!12444 = !DILocation(line: 5215, column: 43, scope: !12439)
!12445 = !DILocation(line: 5215, column: 14, scope: !12439)
!12446 = !DILocation(line: 5216, column: 13, scope: !12274)
!12447 = !DILocation(line: 5217, column: 5, scope: !12274)
!12448 = !DILocation(line: 5217, column: 17, scope: !12274)
!12449 = !DILocation(line: 5217, column: 15, scope: !12274)
!12450 = !DILocation(line: 5218, column: 33, scope: !12451)
!12451 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5217, column: 27)
!12452 = !DILocation(line: 5218, column: 40, scope: !12451)
!12453 = !DILocation(line: 5218, column: 47, scope: !12451)
!12454 = !DILocation(line: 5218, column: 13, scope: !12451)
!12455 = !DILocation(line: 5218, column: 11, scope: !12451)
!12456 = !DILocation(line: 5219, column: 19, scope: !12451)
!12457 = !DILocation(line: 5219, column: 17, scope: !12451)
!12458 = !DILocation(line: 5219, column: 13, scope: !12451)
!12459 = !DILocation(line: 5219, column: 25, scope: !12451)
!12460 = !DILocation(line: 5219, column: 27, scope: !12451)
!12461 = !DILocation(line: 5219, column: 11, scope: !12451)
!12462 = !DILocation(line: 5220, column: 26, scope: !12451)
!12463 = !DILocation(line: 5220, column: 33, scope: !12451)
!12464 = !DILocation(line: 5220, column: 40, scope: !12451)
!12465 = !DILocation(line: 5220, column: 9, scope: !12451)
!12466 = !DILocation(line: 5221, column: 28, scope: !12451)
!12467 = !DILocation(line: 5221, column: 35, scope: !12451)
!12468 = !DILocation(line: 5221, column: 42, scope: !12451)
!12469 = !DILocation(line: 5221, column: 9, scope: !12451)
!12470 = !DILocation(line: 5222, column: 28, scope: !12451)
!12471 = !DILocation(line: 5222, column: 35, scope: !12451)
!12472 = !DILocation(line: 5222, column: 9, scope: !12451)
!12473 = !DILocation(line: 5223, column: 17, scope: !12451)
!12474 = !DILocation(line: 5223, column: 27, scope: !12451)
!12475 = !DILocation(line: 5223, column: 34, scope: !12451)
!12476 = !DILocation(line: 5223, column: 9, scope: !12451)
!12477 = !DILocation(line: 5224, column: 17, scope: !12451)
!12478 = distinct !{!12478, !12447, !12479}
!12479 = !DILocation(line: 5225, column: 5, scope: !12274)
!12480 = !DILocation(line: 5226, column: 16, scope: !12481)
!12481 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5226, column: 10)
!12482 = !DILocation(line: 5226, column: 14, scope: !12481)
!12483 = !DILocation(line: 5226, column: 10, scope: !12274)
!12484 = !DILocation(line: 5227, column: 33, scope: !12485)
!12485 = distinct !DILexicalBlock(scope: !12481, file: !3, line: 5226, column: 26)
!12486 = !DILocation(line: 5227, column: 40, scope: !12485)
!12487 = !DILocation(line: 5227, column: 47, scope: !12485)
!12488 = !DILocation(line: 5227, column: 13, scope: !12485)
!12489 = !DILocation(line: 5227, column: 11, scope: !12485)
!12490 = !DILocation(line: 5228, column: 19, scope: !12485)
!12491 = !DILocation(line: 5228, column: 17, scope: !12485)
!12492 = !DILocation(line: 5228, column: 13, scope: !12485)
!12493 = !DILocation(line: 5228, column: 25, scope: !12485)
!12494 = !DILocation(line: 5228, column: 27, scope: !12485)
!12495 = !DILocation(line: 5228, column: 11, scope: !12485)
!12496 = !DILocation(line: 5229, column: 17, scope: !12485)
!12497 = !DILocation(line: 5229, column: 15, scope: !12485)
!12498 = !DILocation(line: 5229, column: 11, scope: !12485)
!12499 = !DILocation(line: 5230, column: 24, scope: !12485)
!12500 = !DILocation(line: 5230, column: 31, scope: !12485)
!12501 = !DILocation(line: 5230, column: 9, scope: !12485)
!12502 = !DILocation(line: 5231, column: 17, scope: !12485)
!12503 = !DILocation(line: 5232, column: 14, scope: !12504)
!12504 = distinct !DILexicalBlock(scope: !12485, file: !3, line: 5232, column: 14)
!12505 = !DILocation(line: 5232, column: 22, scope: !12504)
!12506 = !DILocation(line: 5232, column: 14, scope: !12485)
!12507 = !DILocation(line: 5233, column: 28, scope: !12508)
!12508 = distinct !DILexicalBlock(scope: !12504, file: !3, line: 5232, column: 28)
!12509 = !DILocation(line: 5233, column: 35, scope: !12508)
!12510 = !DILocation(line: 5233, column: 44, scope: !12508)
!12511 = !DILocation(line: 5233, column: 42, scope: !12508)
!12512 = !DILocation(line: 5233, column: 13, scope: !12508)
!12513 = !DILocation(line: 5234, column: 9, scope: !12508)
!12514 = !DILocation(line: 5236, column: 32, scope: !12515)
!12515 = distinct !DILexicalBlock(scope: !12504, file: !3, line: 5235, column: 14)
!12516 = !DILocation(line: 5236, column: 39, scope: !12515)
!12517 = !DILocation(line: 5236, column: 46, scope: !12515)
!12518 = !DILocation(line: 5236, column: 13, scope: !12515)
!12519 = !DILocation(line: 5238, column: 26, scope: !12485)
!12520 = !DILocation(line: 5238, column: 33, scope: !12485)
!12521 = !DILocation(line: 5238, column: 40, scope: !12485)
!12522 = !DILocation(line: 5238, column: 9, scope: !12485)
!12523 = !DILocation(line: 5239, column: 17, scope: !12485)
!12524 = !DILocation(line: 5239, column: 24, scope: !12485)
!12525 = !DILocation(line: 5239, column: 31, scope: !12485)
!12526 = !DILocation(line: 5239, column: 38, scope: !12485)
!12527 = !DILocation(line: 5239, column: 9, scope: !12485)
!12528 = !DILocation(line: 5240, column: 5, scope: !12485)
!12529 = !DILocation(line: 5242, column: 24, scope: !12530)
!12530 = distinct !DILexicalBlock(scope: !12481, file: !3, line: 5241, column: 10)
!12531 = !DILocation(line: 5242, column: 31, scope: !12530)
!12532 = !DILocation(line: 5242, column: 9, scope: !12530)
!12533 = !DILocation(line: 5243, column: 24, scope: !12530)
!12534 = !DILocation(line: 5243, column: 31, scope: !12530)
!12535 = !DILocation(line: 5243, column: 9, scope: !12530)
!12536 = !DILocation(line: 5245, column: 5, scope: !12274)
!12537 = distinct !{!12537, !12536, !12538}
!12538 = !DILocation(line: 5250, column: 36, scope: !12274)
!12539 = !DILocation(line: 5246, column: 26, scope: !12540)
!12540 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5245, column: 8)
!12541 = !DILocation(line: 5246, column: 24, scope: !12540)
!12542 = !DILocation(line: 5247, column: 26, scope: !12540)
!12543 = !DILocation(line: 5247, column: 24, scope: !12540)
!12544 = !DILocation(line: 5248, column: 9, scope: !12540)
!12545 = !DILocation(line: 5249, column: 17, scope: !12540)
!12546 = !DILocation(line: 5249, column: 24, scope: !12540)
!12547 = !DILocation(line: 5249, column: 31, scope: !12540)
!12548 = !DILocation(line: 5249, column: 38, scope: !12540)
!12549 = !DILocation(line: 5249, column: 9, scope: !12540)
!12550 = !DILocation(line: 5250, column: 5, scope: !12540)
!12551 = !DILocation(line: 5250, column: 30, scope: !12274)
!12552 = !DILocation(line: 5250, column: 17, scope: !12274)
!12553 = !DILocation(line: 5252, column: 9, scope: !12274)
!12554 = !DILocation(line: 5252, column: 16, scope: !12274)
!12555 = !DILocation(line: 5252, column: 23, scope: !12274)
!12556 = !DILocation(line: 5252, column: 39, scope: !12274)
!12557 = !DILocation(line: 5251, column: 5, scope: !12274)
!12558 = !DILocation(line: 5253, column: 15, scope: !12559)
!12559 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5253, column: 13)
!12560 = !DILocation(line: 5253, column: 24, scope: !12559)
!12561 = !DILocation(line: 5254, column: 10, scope: !12559)
!12562 = !DILocation(line: 5254, column: 19, scope: !12559)
!12563 = !DILocation(line: 5254, column: 30, scope: !12559)
!12564 = !DILocation(line: 5254, column: 28, scope: !12559)
!12565 = !DILocation(line: 5254, column: 41, scope: !12559)
!12566 = !DILocation(line: 5254, column: 48, scope: !12559)
!12567 = !DILocation(line: 5254, column: 53, scope: !12559)
!12568 = !DILocation(line: 5254, column: 55, scope: !12559)
!12569 = !DILocation(line: 5253, column: 13, scope: !12274)
!12570 = !DILocation(line: 5255, column: 17, scope: !12571)
!12571 = distinct !DILexicalBlock(scope: !12559, file: !3, line: 5254, column: 65)
!12572 = !DILocation(line: 5255, column: 15, scope: !12571)
!12573 = !DILocation(line: 5256, column: 17, scope: !12571)
!12574 = !DILocation(line: 5256, column: 15, scope: !12571)
!12575 = !DILocation(line: 5257, column: 5, scope: !12571)
!12576 = !DILocation(line: 5258, column: 25, scope: !12274)
!12577 = !DILocation(line: 5258, column: 31, scope: !12274)
!12578 = !DILocation(line: 5258, column: 11, scope: !12274)
!12579 = !DILocation(line: 5259, column: 10, scope: !12580)
!12580 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 5259, column: 10)
!12581 = !DILocation(line: 5259, column: 10, scope: !12274)
!12582 = !DILocation(line: 5259, column: 32, scope: !12580)
!12583 = !DILocation(line: 5259, column: 39, scope: !12580)
!12584 = !DILocation(line: 5259, column: 18, scope: !12580)
!12585 = !DILocation(line: 5261, column: 40, scope: !12274)
!12586 = !DILocation(line: 5261, column: 48, scope: !12274)
!12587 = !DILocation(line: 5261, column: 46, scope: !12274)
!12588 = !DILocation(line: 5261, column: 55, scope: !12274)
!12589 = !DILocation(line: 5261, column: 60, scope: !12274)
!12590 = !DILocation(line: 5261, column: 65, scope: !12274)
!12591 = !DILocation(line: 5261, column: 72, scope: !12274)
!12592 = !DILocation(line: 5261, column: 9, scope: !12274)
!12593 = !DILocation(line: 5260, column: 5, scope: !12274)
!12594 = !DILocation(line: 5263, column: 1, scope: !12274)
!12595 = distinct !DISubprogram(name: "normalizeRoundAndPackFloat128", scope: !3, file: !3, line: 1010, type: !1393, isLocal: true, isDefinition: true, scopeLine: 1012, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12596 = !DILocalVariable(name: "zSign", arg: 1, scope: !12595, file: !3, line: 1011, type: !1241)
!12597 = !DILocation(line: 1011, column: 11, scope: !12595)
!12598 = !DILocalVariable(name: "zExp", arg: 2, scope: !12595, file: !3, line: 1011, type: !1319)
!12599 = !DILocation(line: 1011, column: 24, scope: !12595)
!12600 = !DILocalVariable(name: "zSig0", arg: 3, scope: !12595, file: !3, line: 1011, type: !24)
!12601 = !DILocation(line: 1011, column: 37, scope: !12595)
!12602 = !DILocalVariable(name: "zSig1", arg: 4, scope: !12595, file: !3, line: 1011, type: !24)
!12603 = !DILocation(line: 1011, column: 51, scope: !12595)
!12604 = !DILocalVariable(name: "shiftCount", scope: !12595, file: !3, line: 1013, type: !38)
!12605 = !DILocation(line: 1013, column: 10, scope: !12595)
!12606 = !DILocalVariable(name: "zSig2", scope: !12595, file: !3, line: 1014, type: !24)
!12607 = !DILocation(line: 1014, column: 12, scope: !12595)
!12608 = !DILocation(line: 1016, column: 10, scope: !12609)
!12609 = distinct !DILexicalBlock(scope: !12595, file: !3, line: 1016, column: 10)
!12610 = !DILocation(line: 1016, column: 16, scope: !12609)
!12611 = !DILocation(line: 1016, column: 10, scope: !12595)
!12612 = !DILocation(line: 1017, column: 17, scope: !12613)
!12613 = distinct !DILexicalBlock(scope: !12609, file: !3, line: 1016, column: 23)
!12614 = !DILocation(line: 1017, column: 15, scope: !12613)
!12615 = !DILocation(line: 1018, column: 15, scope: !12613)
!12616 = !DILocation(line: 1019, column: 14, scope: !12613)
!12617 = !DILocation(line: 1020, column: 5, scope: !12613)
!12618 = !DILocation(line: 1021, column: 39, scope: !12595)
!12619 = !DILocation(line: 1021, column: 18, scope: !12595)
!12620 = !DILocation(line: 1021, column: 47, scope: !12595)
!12621 = !DILocation(line: 1021, column: 16, scope: !12595)
!12622 = !DILocation(line: 1022, column: 15, scope: !12623)
!12623 = distinct !DILexicalBlock(scope: !12595, file: !3, line: 1022, column: 10)
!12624 = !DILocation(line: 1022, column: 12, scope: !12623)
!12625 = !DILocation(line: 1022, column: 10, scope: !12595)
!12626 = !DILocation(line: 1023, column: 15, scope: !12627)
!12627 = distinct !DILexicalBlock(scope: !12623, file: !3, line: 1022, column: 28)
!12628 = !DILocation(line: 1024, column: 28, scope: !12627)
!12629 = !DILocation(line: 1024, column: 35, scope: !12627)
!12630 = !DILocation(line: 1024, column: 42, scope: !12627)
!12631 = !DILocation(line: 1024, column: 9, scope: !12627)
!12632 = !DILocation(line: 1025, column: 5, scope: !12627)
!12633 = !DILocation(line: 1028, column: 13, scope: !12634)
!12634 = distinct !DILexicalBlock(scope: !12623, file: !3, line: 1026, column: 10)
!12635 = !DILocation(line: 1028, column: 20, scope: !12634)
!12636 = !DILocation(line: 1028, column: 32, scope: !12634)
!12637 = !DILocation(line: 1028, column: 30, scope: !12634)
!12638 = !DILocation(line: 1027, column: 9, scope: !12634)
!12639 = !DILocation(line: 1030, column: 13, scope: !12595)
!12640 = !DILocation(line: 1030, column: 10, scope: !12595)
!12641 = !DILocation(line: 1031, column: 34, scope: !12595)
!12642 = !DILocation(line: 1031, column: 41, scope: !12595)
!12643 = !DILocation(line: 1031, column: 47, scope: !12595)
!12644 = !DILocation(line: 1031, column: 54, scope: !12595)
!12645 = !DILocation(line: 1031, column: 61, scope: !12595)
!12646 = !DILocation(line: 1031, column: 12, scope: !12595)
!12647 = !DILocation(line: 1031, column: 5, scope: !12595)
!12648 = distinct !DISubprogram(name: "float128_sqrt", scope: !3, file: !3, line: 5271, type: !10874, isLocal: false, isDefinition: true, scopeLine: 5272, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12649 = !DILocalVariable(name: "a", arg: 1, scope: !12648, file: !3, line: 5271, type: !1190)
!12650 = !DILocation(line: 5271, column: 34, scope: !12648)
!12651 = !DILocalVariable(name: "aSign", scope: !12648, file: !3, line: 5273, type: !1241)
!12652 = !DILocation(line: 5273, column: 10, scope: !12648)
!12653 = !DILocalVariable(name: "aExp", scope: !12648, file: !3, line: 5274, type: !1319)
!12654 = !DILocation(line: 5274, column: 11, scope: !12648)
!12655 = !DILocalVariable(name: "zExp", scope: !12648, file: !3, line: 5274, type: !1319)
!12656 = !DILocation(line: 5274, column: 17, scope: !12648)
!12657 = !DILocalVariable(name: "aSig0", scope: !12648, file: !3, line: 5275, type: !24)
!12658 = !DILocation(line: 5275, column: 12, scope: !12648)
!12659 = !DILocalVariable(name: "aSig1", scope: !12648, file: !3, line: 5275, type: !24)
!12660 = !DILocation(line: 5275, column: 19, scope: !12648)
!12661 = !DILocalVariable(name: "zSig0", scope: !12648, file: !3, line: 5275, type: !24)
!12662 = !DILocation(line: 5275, column: 26, scope: !12648)
!12663 = !DILocalVariable(name: "zSig1", scope: !12648, file: !3, line: 5275, type: !24)
!12664 = !DILocation(line: 5275, column: 33, scope: !12648)
!12665 = !DILocalVariable(name: "zSig2", scope: !12648, file: !3, line: 5275, type: !24)
!12666 = !DILocation(line: 5275, column: 40, scope: !12648)
!12667 = !DILocalVariable(name: "doubleZSig0", scope: !12648, file: !3, line: 5275, type: !24)
!12668 = !DILocation(line: 5275, column: 47, scope: !12648)
!12669 = !DILocalVariable(name: "rem0", scope: !12648, file: !3, line: 5276, type: !24)
!12670 = !DILocation(line: 5276, column: 12, scope: !12648)
!12671 = !DILocalVariable(name: "rem1", scope: !12648, file: !3, line: 5276, type: !24)
!12672 = !DILocation(line: 5276, column: 18, scope: !12648)
!12673 = !DILocalVariable(name: "rem2", scope: !12648, file: !3, line: 5276, type: !24)
!12674 = !DILocation(line: 5276, column: 24, scope: !12648)
!12675 = !DILocalVariable(name: "rem3", scope: !12648, file: !3, line: 5276, type: !24)
!12676 = !DILocation(line: 5276, column: 30, scope: !12648)
!12677 = !DILocalVariable(name: "term0", scope: !12648, file: !3, line: 5276, type: !24)
!12678 = !DILocation(line: 5276, column: 36, scope: !12648)
!12679 = !DILocalVariable(name: "term1", scope: !12648, file: !3, line: 5276, type: !24)
!12680 = !DILocation(line: 5276, column: 43, scope: !12648)
!12681 = !DILocalVariable(name: "term2", scope: !12648, file: !3, line: 5276, type: !24)
!12682 = !DILocation(line: 5276, column: 50, scope: !12648)
!12683 = !DILocalVariable(name: "term3", scope: !12648, file: !3, line: 5276, type: !24)
!12684 = !DILocation(line: 5276, column: 57, scope: !12648)
!12685 = !DILocalVariable(name: "z", scope: !12648, file: !3, line: 5277, type: !1190)
!12686 = !DILocation(line: 5277, column: 14, scope: !12648)
!12687 = !DILocation(line: 5279, column: 13, scope: !12648)
!12688 = !DILocation(line: 5279, column: 11, scope: !12648)
!12689 = !DILocation(line: 5280, column: 13, scope: !12648)
!12690 = !DILocation(line: 5280, column: 11, scope: !12648)
!12691 = !DILocation(line: 5281, column: 12, scope: !12648)
!12692 = !DILocation(line: 5281, column: 10, scope: !12648)
!12693 = !DILocation(line: 5282, column: 13, scope: !12648)
!12694 = !DILocation(line: 5282, column: 11, scope: !12648)
!12695 = !DILocation(line: 5283, column: 10, scope: !12696)
!12696 = distinct !DILexicalBlock(scope: !12648, file: !3, line: 5283, column: 10)
!12697 = !DILocation(line: 5283, column: 15, scope: !12696)
!12698 = !DILocation(line: 5283, column: 10, scope: !12648)
!12699 = !DILocation(line: 5284, column: 14, scope: !12700)
!12700 = distinct !DILexicalBlock(scope: !12701, file: !3, line: 5284, column: 14)
!12701 = distinct !DILexicalBlock(scope: !12696, file: !3, line: 5283, column: 27)
!12702 = !DILocation(line: 5284, column: 22, scope: !12700)
!12703 = !DILocation(line: 5284, column: 20, scope: !12700)
!12704 = !DILocation(line: 5284, column: 14, scope: !12701)
!12705 = !DILocation(line: 5284, column: 37, scope: !12700)
!12706 = !DILocation(line: 5284, column: 30, scope: !12700)
!12707 = !DILocation(line: 5285, column: 16, scope: !12708)
!12708 = distinct !DILexicalBlock(scope: !12701, file: !3, line: 5285, column: 14)
!12709 = !DILocation(line: 5285, column: 14, scope: !12701)
!12710 = !DILocation(line: 5285, column: 31, scope: !12708)
!12711 = !DILocation(line: 5285, column: 24, scope: !12708)
!12712 = !DILocation(line: 5286, column: 9, scope: !12701)
!12713 = !DILocation(line: 5288, column: 10, scope: !12714)
!12714 = distinct !DILexicalBlock(scope: !12648, file: !3, line: 5288, column: 10)
!12715 = !DILocation(line: 5288, column: 10, scope: !12648)
!12716 = !DILocation(line: 5289, column: 16, scope: !12717)
!12717 = distinct !DILexicalBlock(scope: !12718, file: !3, line: 5289, column: 14)
!12718 = distinct !DILexicalBlock(scope: !12714, file: !3, line: 5288, column: 18)
!12719 = !DILocation(line: 5289, column: 23, scope: !12717)
!12720 = !DILocation(line: 5289, column: 21, scope: !12717)
!12721 = !DILocation(line: 5289, column: 31, scope: !12717)
!12722 = !DILocation(line: 5289, column: 29, scope: !12717)
!12723 = !DILocation(line: 5289, column: 39, scope: !12717)
!12724 = !DILocation(line: 5289, column: 14, scope: !12718)
!12725 = !DILocation(line: 5289, column: 53, scope: !12717)
!12726 = !DILocation(line: 5289, column: 46, scope: !12717)
!12727 = !DILocation(line: 5289, column: 42, scope: !12717)
!12728 = !DILocation(line: 5291, column: 9, scope: !12718)
!12729 = !DILocation(line: 5292, column: 11, scope: !12718)
!12730 = !DILocation(line: 5292, column: 15, scope: !12718)
!12731 = !DILocation(line: 5293, column: 11, scope: !12718)
!12732 = !DILocation(line: 5293, column: 16, scope: !12718)
!12733 = !DILocation(line: 5294, column: 16, scope: !12718)
!12734 = !DILocation(line: 5294, column: 9, scope: !12718)
!12735 = !DILocation(line: 5296, column: 10, scope: !12736)
!12736 = distinct !DILexicalBlock(scope: !12648, file: !3, line: 5296, column: 10)
!12737 = !DILocation(line: 5296, column: 15, scope: !12736)
!12738 = !DILocation(line: 5296, column: 10, scope: !12648)
!12739 = !DILocation(line: 5297, column: 16, scope: !12740)
!12740 = distinct !DILexicalBlock(scope: !12741, file: !3, line: 5297, column: 14)
!12741 = distinct !DILexicalBlock(scope: !12736, file: !3, line: 5296, column: 22)
!12742 = !DILocation(line: 5297, column: 24, scope: !12740)
!12743 = !DILocation(line: 5297, column: 22, scope: !12740)
!12744 = !DILocation(line: 5297, column: 32, scope: !12740)
!12745 = !DILocation(line: 5297, column: 14, scope: !12741)
!12746 = !DILocation(line: 5297, column: 46, scope: !12740)
!12747 = !DILocation(line: 5297, column: 39, scope: !12740)
!12748 = !DILocation(line: 5298, column: 37, scope: !12741)
!12749 = !DILocation(line: 5298, column: 44, scope: !12741)
!12750 = !DILocation(line: 5298, column: 9, scope: !12741)
!12751 = !DILocation(line: 5299, column: 5, scope: !12741)
!12752 = !DILocation(line: 5300, column: 16, scope: !12648)
!12753 = !DILocation(line: 5300, column: 21, scope: !12648)
!12754 = !DILocation(line: 5300, column: 31, scope: !12648)
!12755 = !DILocation(line: 5300, column: 37, scope: !12648)
!12756 = !DILocation(line: 5300, column: 10, scope: !12648)
!12757 = !DILocation(line: 5301, column: 11, scope: !12648)
!12758 = !DILocation(line: 5302, column: 29, scope: !12648)
!12759 = !DILocation(line: 5302, column: 35, scope: !12648)
!12760 = !DILocation(line: 5302, column: 40, scope: !12648)
!12761 = !DILocation(line: 5302, column: 13, scope: !12648)
!12762 = !DILocation(line: 5302, column: 11, scope: !12648)
!12763 = !DILocation(line: 5303, column: 24, scope: !12648)
!12764 = !DILocation(line: 5303, column: 31, scope: !12648)
!12765 = !DILocation(line: 5303, column: 45, scope: !12648)
!12766 = !DILocation(line: 5303, column: 50, scope: !12648)
!12767 = !DILocation(line: 5303, column: 41, scope: !12648)
!12768 = !DILocation(line: 5303, column: 5, scope: !12648)
!12769 = !DILocation(line: 5304, column: 33, scope: !12648)
!12770 = !DILocation(line: 5304, column: 40, scope: !12648)
!12771 = !DILocation(line: 5304, column: 47, scope: !12648)
!12772 = !DILocation(line: 5304, column: 52, scope: !12648)
!12773 = !DILocation(line: 5304, column: 13, scope: !12648)
!12774 = !DILocation(line: 5304, column: 63, scope: !12648)
!12775 = !DILocation(line: 5304, column: 68, scope: !12648)
!12776 = !DILocation(line: 5304, column: 59, scope: !12648)
!12777 = !DILocation(line: 5304, column: 11, scope: !12648)
!12778 = !DILocation(line: 5305, column: 19, scope: !12648)
!12779 = !DILocation(line: 5305, column: 24, scope: !12648)
!12780 = !DILocation(line: 5305, column: 17, scope: !12648)
!12781 = !DILocation(line: 5306, column: 17, scope: !12648)
!12782 = !DILocation(line: 5306, column: 24, scope: !12648)
!12783 = !DILocation(line: 5306, column: 5, scope: !12648)
!12784 = !DILocation(line: 5307, column: 13, scope: !12648)
!12785 = !DILocation(line: 5307, column: 20, scope: !12648)
!12786 = !DILocation(line: 5307, column: 27, scope: !12648)
!12787 = !DILocation(line: 5307, column: 34, scope: !12648)
!12788 = !DILocation(line: 5307, column: 5, scope: !12648)
!12789 = !DILocation(line: 5308, column: 5, scope: !12648)
!12790 = !DILocation(line: 5308, column: 23, scope: !12648)
!12791 = !DILocation(line: 5308, column: 28, scope: !12648)
!12792 = !DILocation(line: 5309, column: 9, scope: !12793)
!12793 = distinct !DILexicalBlock(scope: !12648, file: !3, line: 5308, column: 34)
!12794 = !DILocation(line: 5310, column: 21, scope: !12793)
!12795 = !DILocation(line: 5311, column: 17, scope: !12793)
!12796 = !DILocation(line: 5311, column: 23, scope: !12793)
!12797 = !DILocation(line: 5311, column: 29, scope: !12793)
!12798 = !DILocation(line: 5311, column: 34, scope: !12793)
!12799 = !DILocation(line: 5311, column: 40, scope: !12793)
!12800 = !DILocation(line: 5311, column: 52, scope: !12793)
!12801 = !DILocation(line: 5311, column: 9, scope: !12793)
!12802 = distinct !{!12802, !12789, !12803}
!12803 = !DILocation(line: 5312, column: 5, scope: !12648)
!12804 = !DILocation(line: 5313, column: 33, scope: !12648)
!12805 = !DILocation(line: 5313, column: 42, scope: !12648)
!12806 = !DILocation(line: 5313, column: 13, scope: !12648)
!12807 = !DILocation(line: 5313, column: 11, scope: !12648)
!12808 = !DILocation(line: 5314, column: 12, scope: !12809)
!12809 = distinct !DILexicalBlock(scope: !12648, file: !3, line: 5314, column: 10)
!12810 = !DILocation(line: 5314, column: 18, scope: !12809)
!12811 = !DILocation(line: 5314, column: 29, scope: !12809)
!12812 = !DILocation(line: 5314, column: 10, scope: !12648)
!12813 = !DILocation(line: 5315, column: 14, scope: !12814)
!12814 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 5315, column: 14)
!12815 = distinct !DILexicalBlock(scope: !12809, file: !3, line: 5314, column: 36)
!12816 = !DILocation(line: 5315, column: 20, scope: !12814)
!12817 = !DILocation(line: 5315, column: 14, scope: !12815)
!12818 = !DILocation(line: 5315, column: 33, scope: !12814)
!12819 = !DILocation(line: 5315, column: 27, scope: !12814)
!12820 = !DILocation(line: 5316, column: 21, scope: !12815)
!12821 = !DILocation(line: 5316, column: 34, scope: !12815)
!12822 = !DILocation(line: 5316, column: 9, scope: !12815)
!12823 = !DILocation(line: 5317, column: 17, scope: !12815)
!12824 = !DILocation(line: 5317, column: 26, scope: !12815)
!12825 = !DILocation(line: 5317, column: 33, scope: !12815)
!12826 = !DILocation(line: 5317, column: 9, scope: !12815)
!12827 = !DILocation(line: 5318, column: 21, scope: !12815)
!12828 = !DILocation(line: 5318, column: 28, scope: !12815)
!12829 = !DILocation(line: 5318, column: 9, scope: !12815)
!12830 = !DILocation(line: 5319, column: 17, scope: !12815)
!12831 = !DILocation(line: 5319, column: 23, scope: !12815)
!12832 = !DILocation(line: 5319, column: 35, scope: !12815)
!12833 = !DILocation(line: 5319, column: 42, scope: !12815)
!12834 = !DILocation(line: 5319, column: 9, scope: !12815)
!12835 = !DILocation(line: 5320, column: 9, scope: !12815)
!12836 = !DILocation(line: 5320, column: 27, scope: !12815)
!12837 = !DILocation(line: 5320, column: 32, scope: !12815)
!12838 = !DILocation(line: 5321, column: 13, scope: !12839)
!12839 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 5320, column: 38)
!12840 = !DILocation(line: 5322, column: 35, scope: !12839)
!12841 = !DILocation(line: 5322, column: 13, scope: !12839)
!12842 = !DILocation(line: 5323, column: 19, scope: !12839)
!12843 = !DILocation(line: 5324, column: 22, scope: !12839)
!12844 = !DILocation(line: 5324, column: 19, scope: !12839)
!12845 = !DILocation(line: 5325, column: 21, scope: !12839)
!12846 = !DILocation(line: 5325, column: 27, scope: !12839)
!12847 = !DILocation(line: 5325, column: 33, scope: !12839)
!12848 = !DILocation(line: 5325, column: 42, scope: !12839)
!12849 = !DILocation(line: 5325, column: 49, scope: !12839)
!12850 = !DILocation(line: 5325, column: 13, scope: !12839)
!12851 = distinct !{!12851, !12835, !12852}
!12852 = !DILocation(line: 5326, column: 9, scope: !12815)
!12853 = !DILocation(line: 5327, column: 22, scope: !12815)
!12854 = !DILocation(line: 5327, column: 29, scope: !12815)
!12855 = !DILocation(line: 5327, column: 27, scope: !12815)
!12856 = !DILocation(line: 5327, column: 36, scope: !12815)
!12857 = !DILocation(line: 5327, column: 34, scope: !12815)
!12858 = !DILocation(line: 5327, column: 43, scope: !12815)
!12859 = !DILocation(line: 5327, column: 18, scope: !12815)
!12860 = !DILocation(line: 5327, column: 15, scope: !12815)
!12861 = !DILocation(line: 5328, column: 5, scope: !12815)
!12862 = !DILocation(line: 5329, column: 32, scope: !12648)
!12863 = !DILocation(line: 5329, column: 39, scope: !12648)
!12864 = !DILocation(line: 5329, column: 5, scope: !12648)
!12865 = !DILocation(line: 5330, column: 37, scope: !12648)
!12866 = !DILocation(line: 5330, column: 43, scope: !12648)
!12867 = !DILocation(line: 5330, column: 50, scope: !12648)
!12868 = !DILocation(line: 5330, column: 57, scope: !12648)
!12869 = !DILocation(line: 5330, column: 12, scope: !12648)
!12870 = !DILocation(line: 5330, column: 5, scope: !12648)
!12871 = !DILocation(line: 5332, column: 1, scope: !12648)
!12872 = distinct !DISubprogram(name: "float128_eq", scope: !3, file: !3, line: 5340, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5341, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12873 = !DISubroutineType(types: !12874)
!12874 = !{!1022, !1190, !1190}
!12875 = !DILocalVariable(name: "a", arg: 1, scope: !12872, file: !3, line: 5340, type: !1190)
!12876 = !DILocation(line: 5340, column: 28, scope: !12872)
!12877 = !DILocalVariable(name: "b", arg: 2, scope: !12872, file: !3, line: 5340, type: !1190)
!12878 = !DILocation(line: 5340, column: 40, scope: !12872)
!12879 = !DILocation(line: 5343, column: 20, scope: !12880)
!12880 = distinct !DILexicalBlock(scope: !12872, file: !3, line: 5343, column: 13)
!12881 = !DILocation(line: 5343, column: 44, scope: !12880)
!12882 = !DILocation(line: 5344, column: 15, scope: !12880)
!12883 = !DILocation(line: 5344, column: 20, scope: !12880)
!12884 = !DILocation(line: 5344, column: 48, scope: !12880)
!12885 = !DILocation(line: 5344, column: 46, scope: !12880)
!12886 = !DILocation(line: 5345, column: 10, scope: !12880)
!12887 = !DILocation(line: 5345, column: 20, scope: !12880)
!12888 = !DILocation(line: 5345, column: 44, scope: !12880)
!12889 = !DILocation(line: 5346, column: 15, scope: !12880)
!12890 = !DILocation(line: 5346, column: 20, scope: !12880)
!12891 = !DILocation(line: 5346, column: 48, scope: !12880)
!12892 = !DILocation(line: 5346, column: 46, scope: !12880)
!12893 = !DILocation(line: 5343, column: 13, scope: !12872)
!12894 = !DILocation(line: 5348, column: 17, scope: !12895)
!12895 = distinct !DILexicalBlock(scope: !12896, file: !3, line: 5348, column: 17)
!12896 = distinct !DILexicalBlock(scope: !12880, file: !3, line: 5347, column: 10)
!12897 = !DILocation(line: 5349, column: 14, scope: !12895)
!12898 = !DILocation(line: 5349, column: 17, scope: !12895)
!12899 = !DILocation(line: 5348, column: 17, scope: !12896)
!12900 = !DILocation(line: 5350, column: 13, scope: !12901)
!12901 = distinct !DILexicalBlock(scope: !12895, file: !3, line: 5349, column: 40)
!12902 = !DILocation(line: 5351, column: 9, scope: !12901)
!12903 = !DILocation(line: 5352, column: 9, scope: !12896)
!12904 = !DILocation(line: 5355, column: 16, scope: !12872)
!12905 = !DILocation(line: 5355, column: 25, scope: !12872)
!12906 = !DILocation(line: 5355, column: 20, scope: !12872)
!12907 = !DILocation(line: 5356, column: 9, scope: !12872)
!12908 = !DILocation(line: 5356, column: 21, scope: !12872)
!12909 = !DILocation(line: 5356, column: 31, scope: !12872)
!12910 = !DILocation(line: 5356, column: 26, scope: !12872)
!12911 = !DILocation(line: 5357, column: 14, scope: !12872)
!12912 = !DILocation(line: 5357, column: 26, scope: !12872)
!12913 = !DILocation(line: 5357, column: 30, scope: !12872)
!12914 = !DILocation(line: 5358, column: 19, scope: !12872)
!12915 = !DILocation(line: 5358, column: 39, scope: !12872)
!12916 = !DILocation(line: 5358, column: 48, scope: !12872)
!12917 = !DILocation(line: 5358, column: 44, scope: !12872)
!12918 = !DILocation(line: 5358, column: 54, scope: !12872)
!12919 = !DILocation(line: 5358, column: 60, scope: !12872)
!12920 = !DILocation(line: 5354, column: 5, scope: !12872)
!12921 = !DILocation(line: 5361, column: 1, scope: !12872)
!12922 = distinct !DISubprogram(name: "float128_le", scope: !3, file: !3, line: 5370, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5371, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12923 = !DILocalVariable(name: "a", arg: 1, scope: !12922, file: !3, line: 5370, type: !1190)
!12924 = !DILocation(line: 5370, column: 28, scope: !12922)
!12925 = !DILocalVariable(name: "b", arg: 2, scope: !12922, file: !3, line: 5370, type: !1190)
!12926 = !DILocation(line: 5370, column: 40, scope: !12922)
!12927 = !DILocalVariable(name: "aSign", scope: !12922, file: !3, line: 5372, type: !1241)
!12928 = !DILocation(line: 5372, column: 10, scope: !12922)
!12929 = !DILocalVariable(name: "bSign", scope: !12922, file: !3, line: 5372, type: !1241)
!12930 = !DILocation(line: 5372, column: 17, scope: !12922)
!12931 = !DILocation(line: 5374, column: 20, scope: !12932)
!12932 = distinct !DILexicalBlock(scope: !12922, file: !3, line: 5374, column: 13)
!12933 = !DILocation(line: 5374, column: 44, scope: !12932)
!12934 = !DILocation(line: 5375, column: 15, scope: !12932)
!12935 = !DILocation(line: 5375, column: 20, scope: !12932)
!12936 = !DILocation(line: 5375, column: 48, scope: !12932)
!12937 = !DILocation(line: 5375, column: 46, scope: !12932)
!12938 = !DILocation(line: 5376, column: 10, scope: !12932)
!12939 = !DILocation(line: 5376, column: 20, scope: !12932)
!12940 = !DILocation(line: 5376, column: 44, scope: !12932)
!12941 = !DILocation(line: 5377, column: 15, scope: !12932)
!12942 = !DILocation(line: 5377, column: 20, scope: !12932)
!12943 = !DILocation(line: 5377, column: 48, scope: !12932)
!12944 = !DILocation(line: 5377, column: 46, scope: !12932)
!12945 = !DILocation(line: 5374, column: 13, scope: !12922)
!12946 = !DILocation(line: 5379, column: 9, scope: !12947)
!12947 = distinct !DILexicalBlock(scope: !12932, file: !3, line: 5378, column: 10)
!12948 = !DILocation(line: 5380, column: 9, scope: !12947)
!12949 = !DILocation(line: 5382, column: 13, scope: !12922)
!12950 = !DILocation(line: 5382, column: 11, scope: !12922)
!12951 = !DILocation(line: 5383, column: 13, scope: !12922)
!12952 = !DILocation(line: 5383, column: 11, scope: !12922)
!12953 = !DILocation(line: 5384, column: 10, scope: !12954)
!12954 = distinct !DILexicalBlock(scope: !12922, file: !3, line: 5384, column: 10)
!12955 = !DILocation(line: 5384, column: 19, scope: !12954)
!12956 = !DILocation(line: 5384, column: 16, scope: !12954)
!12957 = !DILocation(line: 5384, column: 10, scope: !12922)
!12958 = !DILocation(line: 5386, column: 16, scope: !12959)
!12959 = distinct !DILexicalBlock(scope: !12954, file: !3, line: 5384, column: 27)
!12960 = !DILocation(line: 5387, column: 13, scope: !12959)
!12961 = !DILocation(line: 5387, column: 40, scope: !12959)
!12962 = !DILocation(line: 5387, column: 49, scope: !12959)
!12963 = !DILocation(line: 5387, column: 45, scope: !12959)
!12964 = !DILocation(line: 5387, column: 55, scope: !12959)
!12965 = !DILocation(line: 5387, column: 67, scope: !12959)
!12966 = !DILocation(line: 5387, column: 63, scope: !12959)
!12967 = !DILocation(line: 5387, column: 75, scope: !12959)
!12968 = !DILocation(line: 5387, column: 71, scope: !12959)
!12969 = !DILocation(line: 5388, column: 18, scope: !12959)
!12970 = !DILocation(line: 5385, column: 9, scope: !12959)
!12971 = !DILocation(line: 5391, column: 11, scope: !12922)
!12972 = !DILocation(line: 5391, column: 28, scope: !12922)
!12973 = !DILocation(line: 5391, column: 36, scope: !12922)
!12974 = !DILocation(line: 5391, column: 43, scope: !12922)
!12975 = !DILocation(line: 5391, column: 51, scope: !12922)
!12976 = !DILocation(line: 5391, column: 19, scope: !12922)
!12977 = !DILocation(line: 5392, column: 20, scope: !12922)
!12978 = !DILocation(line: 5392, column: 28, scope: !12922)
!12979 = !DILocation(line: 5392, column: 35, scope: !12922)
!12980 = !DILocation(line: 5392, column: 43, scope: !12922)
!12981 = !DILocation(line: 5392, column: 11, scope: !12922)
!12982 = !DILocation(line: 5390, column: 5, scope: !12922)
!12983 = !DILocation(line: 5394, column: 1, scope: !12922)
!12984 = distinct !DISubprogram(name: "float128_lt", scope: !3, file: !3, line: 5402, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5403, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!12985 = !DILocalVariable(name: "a", arg: 1, scope: !12984, file: !3, line: 5402, type: !1190)
!12986 = !DILocation(line: 5402, column: 28, scope: !12984)
!12987 = !DILocalVariable(name: "b", arg: 2, scope: !12984, file: !3, line: 5402, type: !1190)
!12988 = !DILocation(line: 5402, column: 40, scope: !12984)
!12989 = !DILocalVariable(name: "aSign", scope: !12984, file: !3, line: 5404, type: !1241)
!12990 = !DILocation(line: 5404, column: 10, scope: !12984)
!12991 = !DILocalVariable(name: "bSign", scope: !12984, file: !3, line: 5404, type: !1241)
!12992 = !DILocation(line: 5404, column: 17, scope: !12984)
!12993 = !DILocation(line: 5406, column: 20, scope: !12994)
!12994 = distinct !DILexicalBlock(scope: !12984, file: !3, line: 5406, column: 13)
!12995 = !DILocation(line: 5406, column: 44, scope: !12994)
!12996 = !DILocation(line: 5407, column: 15, scope: !12994)
!12997 = !DILocation(line: 5407, column: 20, scope: !12994)
!12998 = !DILocation(line: 5407, column: 48, scope: !12994)
!12999 = !DILocation(line: 5407, column: 46, scope: !12994)
!13000 = !DILocation(line: 5408, column: 10, scope: !12994)
!13001 = !DILocation(line: 5408, column: 20, scope: !12994)
!13002 = !DILocation(line: 5408, column: 44, scope: !12994)
!13003 = !DILocation(line: 5409, column: 15, scope: !12994)
!13004 = !DILocation(line: 5409, column: 20, scope: !12994)
!13005 = !DILocation(line: 5409, column: 48, scope: !12994)
!13006 = !DILocation(line: 5409, column: 46, scope: !12994)
!13007 = !DILocation(line: 5406, column: 13, scope: !12984)
!13008 = !DILocation(line: 5411, column: 9, scope: !13009)
!13009 = distinct !DILexicalBlock(scope: !12994, file: !3, line: 5410, column: 10)
!13010 = !DILocation(line: 5412, column: 9, scope: !13009)
!13011 = !DILocation(line: 5414, column: 13, scope: !12984)
!13012 = !DILocation(line: 5414, column: 11, scope: !12984)
!13013 = !DILocation(line: 5415, column: 13, scope: !12984)
!13014 = !DILocation(line: 5415, column: 11, scope: !12984)
!13015 = !DILocation(line: 5416, column: 10, scope: !13016)
!13016 = distinct !DILexicalBlock(scope: !12984, file: !3, line: 5416, column: 10)
!13017 = !DILocation(line: 5416, column: 19, scope: !13016)
!13018 = !DILocation(line: 5416, column: 16, scope: !13016)
!13019 = !DILocation(line: 5416, column: 10, scope: !12984)
!13020 = !DILocation(line: 5418, column: 16, scope: !13021)
!13021 = distinct !DILexicalBlock(scope: !13016, file: !3, line: 5416, column: 27)
!13022 = !DILocation(line: 5419, column: 13, scope: !13021)
!13023 = !DILocation(line: 5419, column: 40, scope: !13021)
!13024 = !DILocation(line: 5419, column: 49, scope: !13021)
!13025 = !DILocation(line: 5419, column: 45, scope: !13021)
!13026 = !DILocation(line: 5419, column: 55, scope: !13021)
!13027 = !DILocation(line: 5419, column: 67, scope: !13021)
!13028 = !DILocation(line: 5419, column: 63, scope: !13021)
!13029 = !DILocation(line: 5419, column: 75, scope: !13021)
!13030 = !DILocation(line: 5419, column: 71, scope: !13021)
!13031 = !DILocation(line: 5420, column: 18, scope: !13021)
!13032 = !DILocation(line: 5417, column: 9, scope: !13021)
!13033 = !DILocation(line: 5423, column: 11, scope: !12984)
!13034 = !DILocation(line: 5423, column: 28, scope: !12984)
!13035 = !DILocation(line: 5423, column: 36, scope: !12984)
!13036 = !DILocation(line: 5423, column: 43, scope: !12984)
!13037 = !DILocation(line: 5423, column: 51, scope: !12984)
!13038 = !DILocation(line: 5423, column: 19, scope: !12984)
!13039 = !DILocation(line: 5424, column: 20, scope: !12984)
!13040 = !DILocation(line: 5424, column: 28, scope: !12984)
!13041 = !DILocation(line: 5424, column: 35, scope: !12984)
!13042 = !DILocation(line: 5424, column: 43, scope: !12984)
!13043 = !DILocation(line: 5424, column: 11, scope: !12984)
!13044 = !DILocation(line: 5422, column: 5, scope: !12984)
!13045 = !DILocation(line: 5426, column: 1, scope: !12984)
!13046 = distinct !DISubprogram(name: "float128_ge", scope: !3, file: !3, line: 5427, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5428, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13047 = !DILocalVariable(name: "a", arg: 1, scope: !13046, file: !3, line: 5427, type: !1190)
!13048 = !DILocation(line: 5427, column: 28, scope: !13046)
!13049 = !DILocalVariable(name: "b", arg: 2, scope: !13046, file: !3, line: 5427, type: !1190)
!13050 = !DILocation(line: 5427, column: 40, scope: !13046)
!13051 = !DILocation(line: 5429, column: 13, scope: !13046)
!13052 = !DILocation(line: 5429, column: 12, scope: !13046)
!13053 = !DILocation(line: 5429, column: 5, scope: !13046)
!13054 = distinct !DISubprogram(name: "float128_gt", scope: !3, file: !3, line: 5432, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5433, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13055 = !DILocalVariable(name: "a", arg: 1, scope: !13054, file: !3, line: 5432, type: !1190)
!13056 = !DILocation(line: 5432, column: 28, scope: !13054)
!13057 = !DILocalVariable(name: "b", arg: 2, scope: !13054, file: !3, line: 5432, type: !1190)
!13058 = !DILocation(line: 5432, column: 40, scope: !13054)
!13059 = !DILocation(line: 5434, column: 10, scope: !13054)
!13060 = !DILocation(line: 5434, column: 9, scope: !13054)
!13061 = !DILocation(line: 5434, column: 2, scope: !13054)
!13062 = distinct !DISubprogram(name: "float128_ge_quiet", scope: !3, file: !3, line: 5437, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5438, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13063 = !DILocalVariable(name: "a", arg: 1, scope: !13062, file: !3, line: 5437, type: !1190)
!13064 = !DILocation(line: 5437, column: 34, scope: !13062)
!13065 = !DILocalVariable(name: "b", arg: 2, scope: !13062, file: !3, line: 5437, type: !1190)
!13066 = !DILocation(line: 5437, column: 46, scope: !13062)
!13067 = !DILocation(line: 5439, column: 9, scope: !13062)
!13068 = !DILocation(line: 5439, column: 32, scope: !13062)
!13069 = !DILocation(line: 5439, column: 34, scope: !13062)
!13070 = !DILocation(line: 5439, column: 2, scope: !13062)
!13071 = distinct !DISubprogram(name: "float128_uno_quiet", scope: !3, file: !3, line: 5458, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5459, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13072 = !DILocalVariable(name: "a", arg: 1, scope: !13071, file: !3, line: 5458, type: !1190)
!13073 = !DILocation(line: 5458, column: 35, scope: !13071)
!13074 = !DILocalVariable(name: "b", arg: 2, scope: !13071, file: !3, line: 5458, type: !1190)
!13075 = !DILocation(line: 5458, column: 47, scope: !13071)
!13076 = !DILocation(line: 5460, column: 9, scope: !13071)
!13077 = !DILocation(line: 5460, column: 27, scope: !13071)
!13078 = !DILocation(line: 5460, column: 29, scope: !13071)
!13079 = !DILocation(line: 5460, column: 2, scope: !13071)
!13080 = distinct !DISubprogram(name: "float128_gt_quiet", scope: !3, file: !3, line: 5441, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5442, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13081 = !DILocalVariable(name: "a", arg: 1, scope: !13080, file: !3, line: 5441, type: !1190)
!13082 = !DILocation(line: 5441, column: 34, scope: !13080)
!13083 = !DILocalVariable(name: "b", arg: 2, scope: !13080, file: !3, line: 5441, type: !1190)
!13084 = !DILocation(line: 5441, column: 46, scope: !13080)
!13085 = !DILocation(line: 5443, column: 9, scope: !13080)
!13086 = !DILocation(line: 5443, column: 32, scope: !13080)
!13087 = !DILocation(line: 5443, column: 34, scope: !13080)
!13088 = !DILocation(line: 5443, column: 2, scope: !13080)
!13089 = distinct !DISubprogram(name: "float128_ne", scope: !3, file: !3, line: 5445, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5446, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13090 = !DILocalVariable(name: "a", arg: 1, scope: !13089, file: !3, line: 5445, type: !1190)
!13091 = !DILocation(line: 5445, column: 28, scope: !13089)
!13092 = !DILocalVariable(name: "b", arg: 2, scope: !13089, file: !3, line: 5445, type: !1190)
!13093 = !DILocation(line: 5445, column: 40, scope: !13089)
!13094 = !DILocation(line: 5447, column: 10, scope: !13089)
!13095 = !DILocation(line: 5447, column: 9, scope: !13089)
!13096 = !DILocation(line: 5447, column: 2, scope: !13089)
!13097 = distinct !DISubprogram(name: "float128_one_quiet", scope: !3, file: !3, line: 5450, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5451, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13098 = !DILocalVariable(name: "a", arg: 1, scope: !13097, file: !3, line: 5450, type: !1190)
!13099 = !DILocation(line: 5450, column: 35, scope: !13097)
!13100 = !DILocalVariable(name: "b", arg: 2, scope: !13097, file: !3, line: 5450, type: !1190)
!13101 = !DILocation(line: 5450, column: 47, scope: !13097)
!13102 = !DILocation(line: 5452, column: 9, scope: !13097)
!13103 = !DILocation(line: 5452, column: 32, scope: !13097)
!13104 = !DILocation(line: 5452, column: 34, scope: !13097)
!13105 = !DILocation(line: 5452, column: 2, scope: !13097)
!13106 = distinct !DISubprogram(name: "float128_ord_quiet", scope: !3, file: !3, line: 5454, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5455, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13107 = !DILocalVariable(name: "a", arg: 1, scope: !13106, file: !3, line: 5454, type: !1190)
!13108 = !DILocation(line: 5454, column: 35, scope: !13106)
!13109 = !DILocalVariable(name: "b", arg: 2, scope: !13106, file: !3, line: 5454, type: !1190)
!13110 = !DILocation(line: 5454, column: 47, scope: !13106)
!13111 = !DILocation(line: 5456, column: 10, scope: !13106)
!13112 = !DILocation(line: 5456, column: 28, scope: !13106)
!13113 = !DILocation(line: 5456, column: 31, scope: !13106)
!13114 = !DILocation(line: 5456, column: 30, scope: !13106)
!13115 = !DILocation(line: 5456, column: 2, scope: !13106)
!13116 = distinct !DISubprogram(name: "float128_eq_signaling", scope: !3, file: !3, line: 5469, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5470, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13117 = !DILocalVariable(name: "a", arg: 1, scope: !13116, file: !3, line: 5469, type: !1190)
!13118 = !DILocation(line: 5469, column: 38, scope: !13116)
!13119 = !DILocalVariable(name: "b", arg: 2, scope: !13116, file: !3, line: 5469, type: !1190)
!13120 = !DILocation(line: 5469, column: 50, scope: !13116)
!13121 = !DILocation(line: 5472, column: 20, scope: !13122)
!13122 = distinct !DILexicalBlock(scope: !13116, file: !3, line: 5472, column: 13)
!13123 = !DILocation(line: 5472, column: 44, scope: !13122)
!13124 = !DILocation(line: 5473, column: 15, scope: !13122)
!13125 = !DILocation(line: 5473, column: 20, scope: !13122)
!13126 = !DILocation(line: 5473, column: 48, scope: !13122)
!13127 = !DILocation(line: 5473, column: 46, scope: !13122)
!13128 = !DILocation(line: 5474, column: 10, scope: !13122)
!13129 = !DILocation(line: 5474, column: 20, scope: !13122)
!13130 = !DILocation(line: 5474, column: 44, scope: !13122)
!13131 = !DILocation(line: 5475, column: 15, scope: !13122)
!13132 = !DILocation(line: 5475, column: 20, scope: !13122)
!13133 = !DILocation(line: 5475, column: 48, scope: !13122)
!13134 = !DILocation(line: 5475, column: 46, scope: !13122)
!13135 = !DILocation(line: 5472, column: 13, scope: !13116)
!13136 = !DILocation(line: 5477, column: 9, scope: !13137)
!13137 = distinct !DILexicalBlock(scope: !13122, file: !3, line: 5476, column: 10)
!13138 = !DILocation(line: 5478, column: 9, scope: !13137)
!13139 = !DILocation(line: 5481, column: 16, scope: !13116)
!13140 = !DILocation(line: 5481, column: 25, scope: !13116)
!13141 = !DILocation(line: 5481, column: 20, scope: !13116)
!13142 = !DILocation(line: 5482, column: 9, scope: !13116)
!13143 = !DILocation(line: 5482, column: 21, scope: !13116)
!13144 = !DILocation(line: 5482, column: 31, scope: !13116)
!13145 = !DILocation(line: 5482, column: 26, scope: !13116)
!13146 = !DILocation(line: 5483, column: 14, scope: !13116)
!13147 = !DILocation(line: 5483, column: 26, scope: !13116)
!13148 = !DILocation(line: 5483, column: 30, scope: !13116)
!13149 = !DILocation(line: 5484, column: 19, scope: !13116)
!13150 = !DILocation(line: 5484, column: 39, scope: !13116)
!13151 = !DILocation(line: 5484, column: 48, scope: !13116)
!13152 = !DILocation(line: 5484, column: 44, scope: !13116)
!13153 = !DILocation(line: 5484, column: 54, scope: !13116)
!13154 = !DILocation(line: 5484, column: 60, scope: !13116)
!13155 = !DILocation(line: 5480, column: 5, scope: !13116)
!13156 = !DILocation(line: 5487, column: 1, scope: !13116)
!13157 = distinct !DISubprogram(name: "float128_le_quiet", scope: !3, file: !3, line: 5496, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5497, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13158 = !DILocalVariable(name: "a", arg: 1, scope: !13157, file: !3, line: 5496, type: !1190)
!13159 = !DILocation(line: 5496, column: 34, scope: !13157)
!13160 = !DILocalVariable(name: "b", arg: 2, scope: !13157, file: !3, line: 5496, type: !1190)
!13161 = !DILocation(line: 5496, column: 46, scope: !13157)
!13162 = !DILocalVariable(name: "aSign", scope: !13157, file: !3, line: 5498, type: !1241)
!13163 = !DILocation(line: 5498, column: 10, scope: !13157)
!13164 = !DILocalVariable(name: "bSign", scope: !13157, file: !3, line: 5498, type: !1241)
!13165 = !DILocation(line: 5498, column: 17, scope: !13157)
!13166 = !DILocation(line: 5500, column: 20, scope: !13167)
!13167 = distinct !DILexicalBlock(scope: !13157, file: !3, line: 5500, column: 13)
!13168 = !DILocation(line: 5500, column: 44, scope: !13167)
!13169 = !DILocation(line: 5501, column: 15, scope: !13167)
!13170 = !DILocation(line: 5501, column: 20, scope: !13167)
!13171 = !DILocation(line: 5501, column: 48, scope: !13167)
!13172 = !DILocation(line: 5501, column: 46, scope: !13167)
!13173 = !DILocation(line: 5502, column: 10, scope: !13167)
!13174 = !DILocation(line: 5502, column: 20, scope: !13167)
!13175 = !DILocation(line: 5502, column: 44, scope: !13167)
!13176 = !DILocation(line: 5503, column: 15, scope: !13167)
!13177 = !DILocation(line: 5503, column: 20, scope: !13167)
!13178 = !DILocation(line: 5503, column: 48, scope: !13167)
!13179 = !DILocation(line: 5503, column: 46, scope: !13167)
!13180 = !DILocation(line: 5500, column: 13, scope: !13157)
!13181 = !DILocation(line: 5505, column: 17, scope: !13182)
!13182 = distinct !DILexicalBlock(scope: !13183, file: !3, line: 5505, column: 17)
!13183 = distinct !DILexicalBlock(scope: !13167, file: !3, line: 5504, column: 10)
!13184 = !DILocation(line: 5506, column: 14, scope: !13182)
!13185 = !DILocation(line: 5506, column: 17, scope: !13182)
!13186 = !DILocation(line: 5505, column: 17, scope: !13183)
!13187 = !DILocation(line: 5507, column: 13, scope: !13188)
!13188 = distinct !DILexicalBlock(scope: !13182, file: !3, line: 5506, column: 40)
!13189 = !DILocation(line: 5508, column: 9, scope: !13188)
!13190 = !DILocation(line: 5509, column: 9, scope: !13183)
!13191 = !DILocation(line: 5511, column: 13, scope: !13157)
!13192 = !DILocation(line: 5511, column: 11, scope: !13157)
!13193 = !DILocation(line: 5512, column: 13, scope: !13157)
!13194 = !DILocation(line: 5512, column: 11, scope: !13157)
!13195 = !DILocation(line: 5513, column: 10, scope: !13196)
!13196 = distinct !DILexicalBlock(scope: !13157, file: !3, line: 5513, column: 10)
!13197 = !DILocation(line: 5513, column: 19, scope: !13196)
!13198 = !DILocation(line: 5513, column: 16, scope: !13196)
!13199 = !DILocation(line: 5513, column: 10, scope: !13157)
!13200 = !DILocation(line: 5515, column: 16, scope: !13201)
!13201 = distinct !DILexicalBlock(scope: !13196, file: !3, line: 5513, column: 27)
!13202 = !DILocation(line: 5516, column: 13, scope: !13201)
!13203 = !DILocation(line: 5516, column: 40, scope: !13201)
!13204 = !DILocation(line: 5516, column: 49, scope: !13201)
!13205 = !DILocation(line: 5516, column: 45, scope: !13201)
!13206 = !DILocation(line: 5516, column: 55, scope: !13201)
!13207 = !DILocation(line: 5516, column: 67, scope: !13201)
!13208 = !DILocation(line: 5516, column: 63, scope: !13201)
!13209 = !DILocation(line: 5516, column: 75, scope: !13201)
!13210 = !DILocation(line: 5516, column: 71, scope: !13201)
!13211 = !DILocation(line: 5517, column: 18, scope: !13201)
!13212 = !DILocation(line: 5514, column: 9, scope: !13201)
!13213 = !DILocation(line: 5520, column: 11, scope: !13157)
!13214 = !DILocation(line: 5520, column: 28, scope: !13157)
!13215 = !DILocation(line: 5520, column: 36, scope: !13157)
!13216 = !DILocation(line: 5520, column: 43, scope: !13157)
!13217 = !DILocation(line: 5520, column: 51, scope: !13157)
!13218 = !DILocation(line: 5520, column: 19, scope: !13157)
!13219 = !DILocation(line: 5521, column: 20, scope: !13157)
!13220 = !DILocation(line: 5521, column: 28, scope: !13157)
!13221 = !DILocation(line: 5521, column: 35, scope: !13157)
!13222 = !DILocation(line: 5521, column: 43, scope: !13157)
!13223 = !DILocation(line: 5521, column: 11, scope: !13157)
!13224 = !DILocation(line: 5519, column: 5, scope: !13157)
!13225 = !DILocation(line: 5523, column: 1, scope: !13157)
!13226 = distinct !DISubprogram(name: "float128_lt_quiet", scope: !3, file: !3, line: 5532, type: !12873, isLocal: false, isDefinition: true, scopeLine: 5533, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !50)
!13227 = !DILocalVariable(name: "a", arg: 1, scope: !13226, file: !3, line: 5532, type: !1190)
!13228 = !DILocation(line: 5532, column: 34, scope: !13226)
!13229 = !DILocalVariable(name: "b", arg: 2, scope: !13226, file: !3, line: 5532, type: !1190)
!13230 = !DILocation(line: 5532, column: 46, scope: !13226)
!13231 = !DILocalVariable(name: "aSign", scope: !13226, file: !3, line: 5534, type: !1241)
!13232 = !DILocation(line: 5534, column: 10, scope: !13226)
!13233 = !DILocalVariable(name: "bSign", scope: !13226, file: !3, line: 5534, type: !1241)
!13234 = !DILocation(line: 5534, column: 17, scope: !13226)
!13235 = !DILocation(line: 5536, column: 20, scope: !13236)
!13236 = distinct !DILexicalBlock(scope: !13226, file: !3, line: 5536, column: 13)
!13237 = !DILocation(line: 5536, column: 44, scope: !13236)
!13238 = !DILocation(line: 5537, column: 15, scope: !13236)
!13239 = !DILocation(line: 5537, column: 20, scope: !13236)
!13240 = !DILocation(line: 5537, column: 48, scope: !13236)
!13241 = !DILocation(line: 5537, column: 46, scope: !13236)
!13242 = !DILocation(line: 5538, column: 10, scope: !13236)
!13243 = !DILocation(line: 5538, column: 20, scope: !13236)
!13244 = !DILocation(line: 5538, column: 44, scope: !13236)
!13245 = !DILocation(line: 5539, column: 15, scope: !13236)
!13246 = !DILocation(line: 5539, column: 20, scope: !13236)
!13247 = !DILocation(line: 5539, column: 48, scope: !13236)
!13248 = !DILocation(line: 5539, column: 46, scope: !13236)
!13249 = !DILocation(line: 5536, column: 13, scope: !13226)
!13250 = !DILocation(line: 5541, column: 17, scope: !13251)
!13251 = distinct !DILexicalBlock(scope: !13252, file: !3, line: 5541, column: 17)
!13252 = distinct !DILexicalBlock(scope: !13236, file: !3, line: 5540, column: 10)
!13253 = !DILocation(line: 5542, column: 14, scope: !13251)
!13254 = !DILocation(line: 5542, column: 17, scope: !13251)
!13255 = !DILocation(line: 5541, column: 17, scope: !13252)
!13256 = !DILocation(line: 5543, column: 13, scope: !13257)
!13257 = distinct !DILexicalBlock(scope: !13251, file: !3, line: 5542, column: 40)
!13258 = !DILocation(line: 5544, column: 9, scope: !13257)
!13259 = !DILocation(line: 5545, column: 9, scope: !13252)
!13260 = !DILocation(line: 5547, column: 13, scope: !13226)
!13261 = !DILocation(line: 5547, column: 11, scope: !13226)
!13262 = !DILocation(line: 5548, column: 13, scope: !13226)
!13263 = !DILocation(line: 5548, column: 11, scope: !13226)
!13264 = !DILocation(line: 5549, column: 10, scope: !13265)
!13265 = distinct !DILexicalBlock(scope: !13226, file: !3, line: 5549, column: 10)
!13266 = !DILocation(line: 5549, column: 19, scope: !13265)
!13267 = !DILocation(line: 5549, column: 16, scope: !13265)
!13268 = !DILocation(line: 5549, column: 10, scope: !13226)
!13269 = !DILocation(line: 5551, column: 16, scope: !13270)
!13270 = distinct !DILexicalBlock(scope: !13265, file: !3, line: 5549, column: 27)
!13271 = !DILocation(line: 5552, column: 13, scope: !13270)
!13272 = !DILocation(line: 5552, column: 40, scope: !13270)
!13273 = !DILocation(line: 5552, column: 49, scope: !13270)
!13274 = !DILocation(line: 5552, column: 45, scope: !13270)
!13275 = !DILocation(line: 5552, column: 55, scope: !13270)
!13276 = !DILocation(line: 5552, column: 67, scope: !13270)
!13277 = !DILocation(line: 5552, column: 63, scope: !13270)
!13278 = !DILocation(line: 5552, column: 75, scope: !13270)
!13279 = !DILocation(line: 5552, column: 71, scope: !13270)
!13280 = !DILocation(line: 5553, column: 18, scope: !13270)
!13281 = !DILocation(line: 5550, column: 9, scope: !13270)
!13282 = !DILocation(line: 5556, column: 11, scope: !13226)
!13283 = !DILocation(line: 5556, column: 28, scope: !13226)
!13284 = !DILocation(line: 5556, column: 36, scope: !13226)
!13285 = !DILocation(line: 5556, column: 43, scope: !13226)
!13286 = !DILocation(line: 5556, column: 51, scope: !13226)
!13287 = !DILocation(line: 5556, column: 19, scope: !13226)
!13288 = !DILocation(line: 5557, column: 20, scope: !13226)
!13289 = !DILocation(line: 5557, column: 28, scope: !13226)
!13290 = !DILocation(line: 5557, column: 35, scope: !13226)
!13291 = !DILocation(line: 5557, column: 43, scope: !13226)
!13292 = !DILocation(line: 5557, column: 11, scope: !13226)
!13293 = !DILocation(line: 5555, column: 5, scope: !13226)
!13294 = !DILocation(line: 5559, column: 1, scope: !13226)
