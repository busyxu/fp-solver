#line 2 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"

#line 4 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int cvc5::parser::Smt2Lexer::yylex()

static const flex_int16_t yy_nxt[][46] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0
    },

    {
        3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       10,   10,   13,   13,   14,   15,   10,   16,   17,    4,
       18,   19,   20,   21,   22,   23,   10,   24,   10,   25,
       10,   10,   26,   27,   10,   10,   28,   10,   29,   30,
       10,   10,   10,   10,   10,   31

    },

    {
        3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       10,   10,   13,   13,   14,   15,   10,   16,   17,    4,
       18,   19,   20,   21,   22,   23,   10,   24,   10,   25,
       10,   10,   26,   27,   10,   10,   28,   10,   29,   30,
       10,   10,   10,   10,   10,   31
    },

    {
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3

    },

    {
        3,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4
    },

    {
        3,   -5,   32,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5

    },

    {
        3,   -6,   -6,   33,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6
    },

    {
        3,   -7,   -7,   -7,   34,   -7,   -7,   34,   -7,   -7,
       34,   34,   34,   34,   -7,   -7,   34,   34,   34,   -7,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   -7

    },

    {
        3,   35,   35,   35,   35,   36,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35
    },

    {
        3,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   37,   -9,   -9,   -9,   38,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   39,   -9,   -9

    },

    {
        3,  -10,  -10,  -10,   34,  -10,  -10,   34,  -10,  -10,
       34,   34,   34,   34,  -10,  -10,   34,   34,   34,  -10,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -10
    },

    {
        3,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11

    },

    {
        3,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12
    },

    {
        3,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,   40,   41,   41,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13

    },

    {
        3,  -14,  -14,  -14,   42,  -14,  -14,   42,  -14,  -14,
       42,   42,  -14,  -14,  -14,  -14,   42,   42,   42,  -14,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,  -14
    },

    {
        3,   43,   43,   44,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43

    },

    {
        3,  -16,  -16,  -16,   34,  -16,  -16,   34,  -16,  -16,
       34,   34,   34,   34,  -16,  -16,   34,   34,   34,  -16,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   45,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -16
    },

    {
        3,  -17,  -17,  -17,   34,  -17,  -17,   34,  -17,  -17,
       34,   34,   34,   34,  -17,  -17,   34,   34,   34,  -17,
       34,   46,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -17

    },

    {
        3,  -18,  -18,  -18,   34,  -18,  -18,   34,  -18,  -18,
       34,   34,   34,   34,  -18,  -18,   34,   34,   34,  -18,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -18
    },

    {
        3,  -19,  -19,  -19,   34,  -19,  -19,   34,  -19,  -19,
       34,   34,   34,   34,  -19,  -19,   34,   34,   34,  -19,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   47,
       34,   34,   34,   34,   34,  -19

    },

    {
        3,  -20,  -20,  -20,   34,  -20,  -20,   34,  -20,  -20,
       34,   34,   34,   34,  -20,  -20,   34,   34,   34,  -20,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   48,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -20
    },

    {
        3,  -21,  -21,  -21,   34,  -21,  -21,   34,  -21,  -21,
       34,   34,   34,   34,  -21,  -21,   34,   34,   34,  -21,
       34,   34,   34,   34,   34,   34,   34,   34,   49,   34,
       34,   34,   34,   34,   34,   50,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -21

    },

    {
        3,  -22,  -22,  -22,   34,  -22,  -22,   34,  -22,  -22,
       34,   34,   34,   34,  -22,  -22,   34,   34,   34,  -22,
       34,   34,   34,   34,   34,   51,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -22
    },

    {
        3,  -23,  -23,  -23,   34,  -23,  -23,   34,  -23,  -23,
       34,   34,   34,   34,  -23,  -23,   34,   34,   34,  -23,
       34,   34,   34,   52,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   53,   34,  -23

    },

    {
        3,  -24,  -24,  -24,   34,  -24,  -24,   34,  -24,  -24,
       34,   34,   34,   34,  -24,  -24,   34,   34,   34,  -24,
       34,   34,   34,   34,   34,   54,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -24
    },

    {
        3,  -25,  -25,  -25,   34,  -25,  -25,   34,  -25,  -25,
       34,   34,   34,   34,  -25,  -25,   34,   34,   34,  -25,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   55,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -25

    },

    {
        3,  -26,  -26,  -26,   34,  -26,  -26,   34,  -26,  -26,
       34,   34,   34,   34,  -26,  -26,   34,   34,   34,  -26,
       34,   34,   34,   34,   34,   56,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -26
    },

    {
        3,  -27,  -27,  -27,   34,  -27,  -27,   34,  -27,  -27,
       34,   34,   34,   34,  -27,  -27,   34,   34,   34,  -27,
       34,   57,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -27

    },

    {
        3,  -28,  -28,  -28,   34,  -28,  -28,   34,  -28,  -28,
       34,   34,   34,   34,  -28,  -28,   34,   34,   34,  -28,
       34,   58,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   59,   34,   34,   34,   34,
       34,   60,   34,   34,   34,  -28
    },

    {
        3,  -29,  -29,  -29,   34,  -29,  -29,   34,  -29,  -29,
       34,   34,   34,   34,  -29,  -29,   34,   34,   34,  -29,
       34,   34,   34,   34,   34,   61,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -29

    },

    {
        3,  -30,  -30,  -30,   34,  -30,  -30,   34,  -30,  -30,
       34,   34,   34,   34,  -30,  -30,   34,   34,   34,  -30,
       34,   34,   34,   34,   34,   62,   34,   34,   34,   63,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   64,  -30
    },

    {
        3,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,  -31,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   66

    },

    {
        3,  -32,   32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32
    },

    {
        3,  -33,  -33,   33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33

    },

    {
        3,  -34,  -34,  -34,   34,  -34,  -34,   34,  -34,  -34,
       34,   34,   34,   34,  -34,  -34,   34,   34,   34,  -34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -34
    },

    {
        3,   35,   35,   35,   35,   36,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35

    },

    {
        3,  -36,  -36,  -36,  -36,   35,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36
    },

    {
        3,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,   67,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37

    },

    {
        3,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,   68,   68,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38
    },

    {
        3,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,   69,   69,  -39,  -39,   69,   69,  -39,  -39,
      -39,   69,   69,   69,   69,   69,   69,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39

    },

    {
        3,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,   70,   70,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40
    },

    {
        3,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,   40,   41,   41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41

    },

    {
        3,  -42,  -42,  -42,   71,  -42,  -42,   71,  -42,  -42,
       71,   71,   71,   71,  -42,  -42,   71,   71,   71,  -42,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  -42
    },

    {
        3,   43,   43,   44,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43

    },

    {
        3,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44
    },

    {
        3,  -45,  -45,  -45,   34,  -45,  -45,   34,  -45,  -45,
       34,   34,   34,   34,  -45,  -45,   34,   34,   34,  -45,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   72,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -45

    },

    {
        3,  -46,  -46,  -46,   34,  -46,  -46,   34,  -46,  -46,
       34,   34,   34,   34,  -46,  -46,   34,   34,   34,  -46,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   73,   34,
       34,   34,   34,   34,   34,  -46
    },

    {
        3,  -47,  -47,  -47,   34,  -47,  -47,   34,  -47,  -47,
       34,   34,   34,   34,  -47,  -47,   34,   34,   34,  -47,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   74,
       34,   34,   34,   34,   34,  -47

    },

    {
        3,  -48,  -48,  -48,   34,  -48,  -48,   34,  -48,  -48,
       34,   34,   34,   34,  -48,  -48,   34,   34,   34,  -48,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   75,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -48
    },

    {
        3,  -49,  -49,  -49,   34,  -49,  -49,   34,  -49,  -49,
       34,   34,   34,   34,  -49,  -49,   34,   34,   34,  -49,
       34,   34,   34,   34,   34,   76,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -49

    },

    {
        3,  -50,  -50,  -50,   34,  -50,  -50,   34,  -50,  -50,
       34,   34,   34,   34,  -50,  -50,   34,   34,   34,  -50,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   77,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -50
    },

    {
        3,  -51,  -51,  -51,   34,  -51,  -51,   34,  -51,  -51,
       34,   34,   34,   34,  -51,  -51,   34,   34,   34,  -51,
       34,   34,   34,   78,   34,   34,   79,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -51

    },

    {
        3,  -52,  -52,  -52,   34,  -52,  -52,   34,  -52,  -52,
       34,   34,   34,   34,  -52,  -52,   34,   34,   34,  -52,
       34,   34,   34,   34,   34,   34,   34,   34,   80,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -52
    },

    {
        3,  -53,  -53,  -53,   34,  -53,  -53,   34,  -53,  -53,
       34,   34,   34,   34,  -53,  -53,   34,   34,   34,  -53,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   81,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -53

    },

    {
        3,  -54,  -54,  -54,   34,  -54,  -54,   34,  -54,  -54,
       34,   34,   34,   34,  -54,  -54,   34,   34,   34,  -54,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       82,   34,   34,   34,   34,  -54
    },

    {
        3,  -55,  -55,  -55,   34,  -55,  -55,   34,  -55,  -55,
       34,   34,   34,   34,  -55,  -55,   34,   34,   34,  -55,
       34,   34,   34,   83,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   84,   34,   34,  -55

    },

    {
        3,  -56,  -56,  -56,   34,  -56,  -56,   34,  -56,  -56,
       34,   34,   34,   34,  -56,  -56,   34,   34,   34,  -56,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       85,   34,   34,   34,   34,  -56
    },

    {
        3,  -57,  -57,  -57,   34,  -57,  -57,   34,  -57,  -57,
       34,   34,   34,   34,  -57,  -57,   34,   34,   34,  -57,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       86,   34,   34,   34,   34,  -57

    },

    {
        3,  -58,  -58,  -58,   34,  -58,  -58,   34,  -58,  -58,
       34,   34,   34,   34,  -58,  -58,   34,   34,   34,  -58,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   87,   34,
       34,   34,   34,   34,   34,  -58
    },

    {
        3,  -59,  -59,  -59,   34,  -59,  -59,   34,  -59,  -59,
       34,   34,   34,   34,  -59,  -59,   34,   34,   34,  -59,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   88,   34,   34,   34,
       34,   34,   34,   34,   34,  -59

    },

    {
        3,  -60,  -60,  -60,   34,  -60,  -60,   34,  -60,  -60,
       34,   34,   34,   34,  -60,  -60,   34,   34,   34,  -60,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   89,
       34,   34,   34,   34,   34,  -60
    },

    {
        3,  -61,  -61,  -61,   34,  -61,  -61,   34,  -61,  -61,
       34,   34,   34,   34,  -61,  -61,   34,   34,   34,  -61,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   90,
       34,   34,   34,   34,   34,  -61

    },

    {
        3,  -62,  -62,  -62,   34,  -62,  -62,   34,  -62,  -62,
       34,   34,   34,   34,  -62,  -62,   34,   34,   34,  -62,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       91,   34,   34,   34,   34,  -62
    },

    {
        3,  -63,  -63,  -63,   34,  -63,  -63,   34,  -63,  -63,
       34,   34,   34,   34,  -63,  -63,   34,   34,   34,  -63,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   92,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -63

    },

    {
        3,  -64,  -64,  -64,   34,  -64,  -64,   34,  -64,  -64,
       34,   34,   34,   34,  -64,  -64,   34,   34,   34,  -64,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   93,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -64
    },

    {
        3,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,  -65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   66

    },

    {
        3,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66
    },

    {
        3,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,   67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67

    },

    {
        3,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,   68,   68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,   94,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68
    },

    {
        3,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,   69,   69,  -69,  -69,   69,   69,  -69,  -69,
      -69,   69,   69,   69,   69,   69,   69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69

    },

    {
        3,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,   70,   70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70
    },

    {
        3,  -71,  -71,  -71,   71,  -71,  -71,   71,  -71,  -71,
       71,   71,   71,   71,  -71,  -71,   71,   71,   71,  -71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  -71

    },

    {
        3,  -72,  -72,  -72,   34,  -72,  -72,   34,  -72,  -72,
       34,   34,   34,   34,  -72,  -72,   34,   34,   34,  -72,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   95,
       34,   34,   34,   34,   34,  -72
    },

    {
        3,  -73,  -73,  -73,   34,  -73,  -73,   34,  -73,  -73,
       34,   34,   34,   34,  -73,  -73,   34,   34,   34,  -73,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   96,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -73

    },

    {
        3,  -74,  -74,  -74,   34,  -74,  -74,   34,  -74,  -74,
       34,   34,   34,   34,  -74,  -74,   34,   34,   34,  -74,
       34,   34,   34,   34,   34,   97,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   98,   34,   34,   34,  -74
    },

    {
        3,  -75,  -75,  -75,   34,  -75,  -75,   34,  -75,  -75,
       34,   34,   34,   34,  -75,  -75,   34,   34,   34,  -75,
       34,   34,   34,   99,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -75

    },

    {
        3,  -76,  -76,  -76,   34,  -76,  -76,   34,  -76,  -76,
       34,   34,   34,   34,  -76,  -76,   34,   34,   34,  -76,
       34,   34,   34,  100,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -76
    },

    {
        3,  -77,  -77,  -77,   34,  -77,  -77,   34,  -77,  -77,
       34,   34,   34,   34,  -77,  -77,   34,   34,   34,  -77,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  101,
       34,   34,   34,   34,   34,  -77

    },

    {
        3,  -78,  -78,  -78,   34,  -78,  -78,   34,  -78,  -78,
       34,   34,   34,   34,  -78,  -78,   34,   34,   34,  -78,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  102,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -78
    },

    {
        3,  -79,  -79,  -79,   34,  -79,  -79,   34,  -79,  -79,
       34,   34,   34,   34,  -79,  -79,   34,   34,   34,  -79,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  103,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -79

    },

    {
        3,  -80,  -80,  -80,   34,  -80,  -80,   34,  -80,  -80,
       34,   34,   34,   34,  -80,  -80,   34,   34,   34,  -80,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  104,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -80
    },

    {
        3,  -81,  -81,  -81,   34,  -81,  -81,   34,  -81,  -81,
       34,   34,   34,   34,  -81,  -81,   34,   34,   34,  -81,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      105,   34,   34,   34,   34,  -81

    },

    {
        3,  -82,  -82,  -82,   34,  -82,  -82,   34,  -82,  -82,
      106,   34,   34,   34,  -82,  -82,   34,   34,   34,  -82,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -82
    },

    {
        3,  -83,  -83,  -83,   34,  -83,  -83,   34,  -83,  -83,
       34,   34,   34,   34,  -83,  -83,   34,   34,   34,  -83,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  107,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -83

    },

    {
        3,  -84,  -84,  -84,   34,  -84,  -84,   34,  -84,  -84,
      108,   34,   34,   34,  -84,  -84,   34,   34,   34,  -84,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -84
    },

    {
        3,  -85,  -85,  -85,   34,  -85,  -85,   34,  -85,  -85,
       34,   34,   34,   34,  -85,  -85,   34,   34,   34,  -85,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -85

    },

    {
        3,  -86,  -86,  -86,   34,  -86,  -86,   34,  -86,  -86,
       34,   34,   34,   34,  -86,  -86,   34,   34,   34,  -86,
       34,   34,   34,  109,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -86
    },

    {
        3,  -87,  -87,  -87,   34,  -87,  -87,   34,  -87,  -87,
       34,   34,   34,   34,  -87,  -87,   34,   34,   34,  -87,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -87

    },

    {
        3,  -88,  -88,  -88,   34,  -88,  -88,   34,  -88,  -88,
       34,   34,   34,   34,  -88,  -88,   34,   34,   34,  -88,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -88
    },

    {
        3,  -89,  -89,  -89,   34,  -89,  -89,   34,  -89,  -89,
       34,   34,   34,   34,  -89,  -89,   34,   34,   34,  -89,
       34,   34,   34,   34,   34,   34,   34,   34,  110,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -89

    },

    {
        3,  -90,  -90,  -90,   34,  -90,  -90,   34,  -90,  -90,
       34,   34,   34,   34,  -90,  -90,   34,   34,   34,  -90,
       34,   34,   34,   34,   34,  111,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -90
    },

    {
        3,  -91,  -91,  -91,   34,  -91,  -91,   34,  -91,  -91,
      112,   34,   34,   34,  -91,  -91,   34,   34,   34,  -91,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -91

    },

    {
        3,  -92,  -92,  -92,   34,  -92,  -92,   34,  -92,  -92,
       34,   34,   34,   34,  -92,  -92,   34,   34,   34,  -92,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  113,   34,   34,   34,
       34,   34,   34,   34,   34,  -92
    },

    {
        3,  -93,  -93,  -93,   34,  -93,  -93,   34,  -93,  -93,
       34,   34,   34,   34,  -93,  -93,   34,   34,   34,  -93,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      114,   34,   34,   34,   34,  -93

    },

    {
        3,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  115,  115,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94
    },

    {
        3,  -95,  -95,  -95,   34,  -95,  -95,   34,  -95,  -95,
       34,   34,   34,   34,  -95,  -95,   34,   34,   34,  -95,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      116,   34,   34,   34,   34,  -95

    },

    {
        3,  -96,  -96,  -96,   34,  -96,  -96,   34,  -96,  -96,
       34,   34,   34,   34,  -96,  -96,   34,   34,   34,  -96,
       34,  117,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -96
    },

    {
        3,  -97,  -97,  -97,   34,  -97,  -97,   34,  -97,  -97,
       34,   34,   34,   34,  -97,  -97,   34,   34,   34,  -97,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  118,   34,
       34,   34,   34,   34,   34,  -97

    },

    {
        3,  -98,  -98,  -98,   34,  -98,  -98,   34,  -98,  -98,
       34,   34,   34,   34,  -98,  -98,   34,   34,   34,  -98,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  119,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -98
    },

    {
        3,  -99,  -99,  -99,   34,  -99,  -99,   34,  -99,  -99,
       34,   34,   34,   34,  -99,  -99,   34,   34,   34,  -99,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  120,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  -99

    },

    {
        3, -100, -100, -100,   34, -100, -100,   34, -100, -100,
       34,   34,   34,   34, -100, -100,   34,   34,   34, -100,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  121,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -100
    },

    {
        3, -101, -101, -101,   34, -101, -101,   34, -101, -101,
       34,   34,   34,   34, -101, -101,   34,   34,   34, -101,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      122,   34,   34,   34,   34, -101

    },

    {
        3, -102, -102, -102,   34, -102, -102,   34, -102, -102,
       34,   34,   34,   34, -102, -102,   34,   34,   34, -102,
       34,  123,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -102
    },

    {
        3, -103, -103, -103,   34, -103, -103,   34, -103, -103,
       34,   34,   34,   34, -103, -103,   34,   34,   34, -103,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  124,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -103

    },

    {
        3, -104, -104, -104,   34, -104, -104,   34, -104, -104,
       34,   34,   34,   34, -104, -104,   34,   34,   34, -104,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -104
    },

    {
        3, -105, -105, -105,   34, -105, -105,   34, -105, -105,
       34,   34,   34,   34, -105, -105,   34,   34,   34, -105,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -105

    },

    {
        3, -106, -106, -106,   34, -106, -106,   34, -106, -106,
       34,   34,   34,   34, -106, -106,   34,   34,   34, -106,
       34,  125,   34,   34,  126,   34,   34,   34,   34,  127,
       34,   34,  128,  129,   34,  130,  131,  132,   34,   34,
       34,  133,  134,   34,   34, -106
    },

    {
        3, -107, -107, -107,   34, -107, -107,   34, -107, -107,
       34,   34,   34,   34, -107, -107,   34,   34,   34, -107,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  135,   34,   34,   34, -107

    },

    {
        3, -108, -108, -108,   34, -108, -108,   34, -108, -108,
       34,   34,   34,   34, -108, -108,   34,   34,   34, -108,
       34,   34,   34,  136,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -108
    },

    {
        3, -109, -109, -109,   34, -109, -109,   34, -109, -109,
       34,   34,   34,   34, -109, -109,   34,   34,   34, -109,
       34,   34,   34,   34,   34,   34,   34,   34,  137,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -109

    },

    {
        3, -110, -110, -110,   34, -110, -110,   34, -110, -110,
       34,   34,   34,   34, -110, -110,   34,   34,   34, -110,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -110
    },

    {
        3, -111, -111, -111,   34, -111, -111,   34, -111, -111,
       34,   34,   34,   34, -111, -111,   34,   34,   34, -111,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      138,   34,   34,   34,   34, -111

    },

    {
        3, -112, -112, -112,   34, -112, -112,   34, -112, -112,
       34,   34,   34,   34, -112, -112,   34,   34,   34, -112,
       34,   34,   34,   34,   34,   34,  139,   34,   34,  140,
       34,   34,  141,   34,   34,  142,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -112
    },

    {
        3, -113, -113, -113,   34, -113, -113,   34, -113, -113,
       34,   34,   34,   34, -113, -113,   34,   34,   34, -113,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  143,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -113

    },

    {
        3, -114, -114, -114,   34, -114, -114,   34, -114, -114,
       34,   34,   34,   34, -114, -114,   34,   34,   34, -114,
       34,   34,   34,   34,   34,   34,   34,   34,  144,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -114
    },

    {
        3, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115,  115,  115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115

    },

    {
        3, -116, -116, -116,   34, -116, -116,   34, -116, -116,
       34,   34,   34,   34, -116, -116,   34,   34,   34, -116,
       34,  145,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -116
    },

    {
        3, -117, -117, -117,   34, -117, -117,   34, -117, -117,
       34,   34,   34,   34, -117, -117,   34,   34,   34, -117,
       34,   34,  146,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -117

    },

    {
        3, -118, -118, -118,   34, -118, -118,   34, -118, -118,
       34,   34,   34,   34, -118, -118,   34,   34,   34, -118,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      147,   34,   34,   34,   34, -118
    },

    {
        3, -119, -119, -119,   34, -119, -119,   34, -119, -119,
       34,   34,   34,   34, -119, -119,   34,   34,   34, -119,
       34,   34,   34,   34,   34,  148,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -119

    },

    {
        3, -120, -120, -120,   34, -120, -120,   34, -120, -120,
      149,   34,   34,   34, -120, -120,   34,   34,   34, -120,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -120
    },

    {
        3, -121, -121, -121,   34, -121, -121,   34, -121, -121,
      150,   34,   34,   34, -121, -121,   34,   34,   34, -121,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -121

    },

    {
        3, -122, -122, -122,   34, -122, -122,   34, -122, -122,
       34,   34,   34,   34, -122, -122,   34,   34,   34, -122,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  151,   34,
       34,   34,   34,   34,   34, -122
    },

    {
        3, -123, -123, -123,   34, -123, -123,   34, -123, -123,
       34,   34,   34,   34, -123, -123,   34,   34,   34, -123,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  152,   34,
       34,   34,   34,   34,   34, -123

    },

    {
        3, -124, -124, -124,   34, -124, -124,   34, -124, -124,
       34,   34,   34,   34, -124, -124,   34,   34,   34, -124,
       34,   34,   34,   34,   34,  153,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -124
    },

    {
        3, -125, -125, -125,   34, -125, -125,   34, -125, -125,
       34,   34,   34,   34, -125, -125,   34,   34,   34, -125,
       34,   34,  154,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  155,
       34,   34,   34,   34,   34, -125

    },

    {
        3, -126, -126, -126,   34, -126, -126,   34, -126, -126,
       34,   34,   34,   34, -126, -126,   34,   34,   34, -126,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  156,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -126
    },

    {
        3, -127, -127, -127,   34, -127, -127,   34, -127, -127,
       34,   34,   34,   34, -127, -127,   34,   34,   34, -127,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  157,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -127

    },

    {
        3, -128, -128, -128,   34, -128, -128,   34, -128, -128,
       34,   34,   34,   34, -128, -128,   34,   34,   34, -128,
       34,   34,   34,   34,   34,  158,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -128
    },

    {
        3, -129, -129, -129,   34, -129, -129,   34, -129, -129,
       34,   34,   34,   34, -129, -129,   34,   34,   34, -129,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  159,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -129

    },

    {
        3, -130, -130, -130,   34, -130, -130,   34, -130, -130,
       34,   34,   34,   34, -130, -130,   34,   34,   34, -130,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  160,   34,   34,   34,
       34,   34,   34,   34,   34, -130
    },

    {
        3, -131, -131, -131,   34, -131, -131,   34, -131, -131,
       34,   34,   34,   34, -131, -131,   34,   34,   34, -131,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  161,   34,
       34,   34,   34,   34,   34, -131

    },

    {
        3, -132, -132, -132,   34, -132, -132,   34, -132, -132,
       34,   34,   34,   34, -132, -132,   34,   34,   34, -132,
       34,   34,   34,   34,   34,  162,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -132
    },

    {
        3, -133, -133, -133,   34, -133, -133,   34, -133, -133,
       34,   34,   34,   34, -133, -133,   34,   34,   34, -133,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  163,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -133

    },

    {
        3, -134, -134, -134,   34, -134, -134,   34, -134, -134,
       34,   34,   34,   34, -134, -134,   34,   34,   34, -134,
       34,  164,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -134
    },

    {
        3, -135, -135, -135,   34, -135, -135,   34, -135, -135,
       34,   34,   34,   34, -135, -135,   34,   34,   34, -135,
       34,   34,   34,   34,  165,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -135

    },

    {
        3, -136, -136, -136,   34, -136, -136,   34, -136, -136,
       34,   34,   34,   34, -136, -136,   34,   34,   34, -136,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  166,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -136
    },

    {
        3, -137, -137, -137,   34, -137, -137,   34, -137, -137,
       34,   34,   34,   34, -137, -137,   34,   34,   34, -137,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -137

    },

    {
        3, -138, -138, -138,   34, -138, -138,   34, -138, -138,
      167,   34,   34,   34, -138, -138,   34,   34,   34, -138,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -138
    },

    {
        3, -139, -139, -139,   34, -139, -139,   34, -139, -139,
       34,   34,   34,   34, -139, -139,   34,   34,   34, -139,
       34,   34,   34,   34,   34,  168,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -139

    },

    {
        3, -140, -140, -140,   34, -140, -140,   34, -140, -140,
       34,   34,   34,   34, -140, -140,   34,   34,   34, -140,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  169,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -140
    },

    {
        3, -141, -141, -141,   34, -141, -141,   34, -141, -141,
       34,   34,   34,   34, -141, -141,   34,   34,   34, -141,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  170,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -141

    },

    {
        3, -142, -142, -142,   34, -142, -142,   34, -142, -142,
       34,   34,   34,   34, -142, -142,   34,   34,   34, -142,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  171,   34,   34,   34,
       34,   34,   34,   34,   34, -142
    },

    {
        3, -143, -143, -143,   34, -143, -143,   34, -143, -143,
       34,   34,   34,   34, -143, -143,   34,   34,   34, -143,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  172,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -143

    },

    {
        3, -144, -144, -144,   34, -144, -144,   34, -144, -144,
      173,   34,   34,   34, -144, -144,   34,   34,   34, -144,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -144
    },

    {
        3, -145, -145, -145,   34, -145, -145,   34, -145, -145,
       34,   34,   34,   34, -145, -145,   34,   34,   34, -145,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  174,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -145

    },

    {
        3, -146, -146, -146,   34, -146, -146,   34, -146, -146,
       34,   34,   34,   34, -146, -146,   34,   34,   34, -146,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  175,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -146
    },

    {
        3, -147, -147, -147,   34, -147, -147,   34, -147, -147,
       34,   34,   34,   34, -147, -147,   34,   34,   34, -147,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -147

    },

    {
        3, -148, -148, -148,   34, -148, -148,   34, -148, -148,
       34,   34,   34,   34, -148, -148,   34,   34,   34, -148,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -148
    },

    {
        3, -149, -149, -149,   34, -149, -149,   34, -149, -149,
       34,   34,   34,   34, -149, -149,   34,   34,   34, -149,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  176,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -149

    },

    {
        3, -150, -150, -150,   34, -150, -150,   34, -150, -150,
       34,   34,   34,   34, -150, -150,   34,   34,   34, -150,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  177,
       34,   34,   34,   34,   34, -150
    },

    {
        3, -151, -151, -151,   34, -151, -151,   34, -151, -151,
       34,   34,   34,   34, -151, -151,   34,   34,   34, -151,
       34,  178,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -151

    },

    {
        3, -152, -152, -152,   34, -152, -152,   34, -152, -152,
       34,   34,   34,   34, -152, -152,   34,   34,   34, -152,
       34,   34,   34,   34,   34,  179,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -152
    },

    {
        3, -153, -153, -153,   34, -153, -153,   34, -153, -153,
      180,   34,   34,   34, -153, -153,   34,   34,   34, -153,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -153

    },

    {
        3, -154, -154, -154,   34, -154, -154,   34, -154, -154,
       34,   34,   34,   34, -154, -154,   34,   34,   34, -154,
       34,   34,   34,   34,  181,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -154
    },

    {
        3, -155, -155, -155,   34, -155, -155,   34, -155, -155,
       34,   34,   34,   34, -155, -155,   34,   34,   34, -155,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  182,
       34,   34,   34,   34,   34, -155

    },

    {
        3, -156, -156, -156,   34, -156, -156,   34, -156, -156,
       34,   34,   34,   34, -156, -156,   34,   34,   34, -156,
       34,   34,   34,   34,   34,   34,  183,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -156
    },

    {
        3, -157, -157, -157,   34, -157, -157,   34, -157, -157,
       34,   34,   34,   34, -157, -157,   34,   34,   34, -157,
       34,   34,   34,   34,   34,   34,  184,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      185,   34,   34,   34,   34, -157

    },

    {
        3, -158, -158, -158,   34, -158, -158,   34, -158, -158,
       34,   34,   34,   34, -158, -158,   34,   34,   34, -158,
       34,  186,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -158
    },

    {
        3, -159, -159, -159,   34, -159, -159,   34, -159, -159,
       34,   34,   34,   34, -159, -159,   34,   34,   34, -159,
       34,   34,   34,   34,  187,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -159

    },

    {
        3, -160, -160, -160,   34, -160, -160,   34, -160, -160,
       34,   34,   34,   34, -160, -160,   34,   34,   34, -160,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      188,   34,   34,   34,   34, -160
    },

    {
        3, -161, -161, -161,   34, -161, -161,   34, -161, -161,
       34,   34,   34,   34, -161, -161,   34,   34,   34, -161,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  189,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -161

    },

    {
        3, -162, -162, -162,   34, -162, -162,   34, -162, -162,
      190,   34,   34,   34, -162, -162,   34,   34,   34, -162,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -162
    },

    {
        3, -163, -163, -163,   34, -163, -163,   34, -163, -163,
       34,   34,   34,   34, -163, -163,   34,   34,   34, -163,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  191,
       34,   34,   34,   34,   34, -163

    },

    {
        3, -164, -164, -164,   34, -164, -164,   34, -164, -164,
       34,   34,   34,   34, -164, -164,   34,   34,   34, -164,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  192,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -164
    },

    {
        3, -165, -165, -165,   34, -165, -165,   34, -165, -165,
       34,   34,   34,   34, -165, -165,   34,   34,   34, -165,
       34,   34,   34,   34,   34,  193,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -165

    },

    {
        3, -166, -166, -166,   34, -166, -166,   34, -166, -166,
       34,   34,   34,   34, -166, -166,   34,   34,   34, -166,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  194,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -166
    },

    {
        3, -167, -167, -167,   34, -167, -167,   34, -167, -167,
       34,   34,   34,   34, -167, -167,   34,   34,   34, -167,
       34,  195,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -167

    },

    {
        3, -168, -168, -168,   34, -168, -168,   34, -168, -168,
       34,   34,   34,   34, -168, -168,   34,   34,   34, -168,
       34,  196,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -168
    },

    {
        3, -169, -169, -169,   34, -169, -169,   34, -169, -169,
       34,   34,   34,   34, -169, -169,   34,   34,   34, -169,
       34,   34,   34,   34,   34,   34,  197,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -169

    },

    {
        3, -170, -170, -170,   34, -170, -170,   34, -170, -170,
       34,   34,   34,   34, -170, -170,   34,   34,   34, -170,
       34,   34,   34,   34,   34,   34,   34,  198,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -170
    },

    {
        3, -171, -171, -171,   34, -171, -171,   34, -171, -171,
       34,   34,   34,   34, -171, -171,   34,   34,   34, -171,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      199,   34,   34,   34,   34, -171

    },

    {
        3, -172, -172, -172,   34, -172, -172,   34, -172, -172,
       34,   34,   34,   34, -172, -172,   34,   34,   34, -172,
       34,   34,   34,   34,   34,   34,  200,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -172
    },

    {
        3, -173, -173, -173,   34, -173, -173,   34, -173, -173,
       34,   34,   34,   34, -173, -173,   34,   34,   34, -173,
       34,   34,   34,   34,   34,   34,  201,   34,   34,  202,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -173

    },

    {
        3, -174, -174, -174,   34, -174, -174,   34, -174, -174,
       34,   34,   34,   34, -174, -174,   34,   34,   34, -174,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      203,   34,   34,   34,   34, -174
    },

    {
        3, -175, -175, -175,   34, -175, -175,   34, -175, -175,
       34,   34,   34,   34, -175, -175,   34,   34,   34, -175,
       34,   34,   34,   34,   34,  204,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -175

    },

    {
        3, -176, -176, -176,   34, -176, -176,   34, -176, -176,
       34,   34,   34,   34, -176, -176,   34,   34,   34, -176,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  205,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -176
    },

    {
        3, -177, -177, -177,   34, -177, -177,   34, -177, -177,
       34,   34,   34,   34, -177, -177,   34,   34,   34, -177,
       34,  206,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  207, -177

    },

    {
        3, -178, -178, -178,   34, -178, -178,   34, -178, -178,
       34,   34,   34,   34, -178, -178,   34,   34,   34, -178,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  208,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -178
    },

    {
        3, -179, -179, -179,   34, -179, -179,   34, -179, -179,
      209,   34,   34,   34, -179, -179,   34,   34,   34, -179,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -179

    },

    {
        3, -180, -180, -180,   34, -180, -180,   34, -180, -180,
       34,   34,   34,   34, -180, -180,   34,   34,   34, -180,
       34,   34,   34,  210,   34,   34,  211,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  212,
       34,   34,   34,   34,   34, -180
    },

    {
        3, -181, -181, -181,   34, -181, -181,   34, -181, -181,
       34,   34,   34,   34, -181, -181,   34,   34,   34, -181,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  213,   34,   34,   34, -181

    },

    {
        3, -182, -182, -182,   34, -182, -182,   34, -182, -182,
       34,   34,   34,   34, -182, -182,   34,   34,   34, -182,
       34,   34,   34,   34,   34,  214,   34,   34,   34,  215,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -182
    },

    {
        3, -183, -183, -183,   34, -183, -183,   34, -183, -183,
       34,   34,   34,   34, -183, -183,   34,   34,   34, -183,
       34,   34,   34,   34,   34,   34,  216,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -183

    },

    {
        3, -184, -184, -184,   34, -184, -184,   34, -184, -184,
       34,   34,   34,   34, -184, -184,   34,   34,   34, -184,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  217,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -184
    },

    {
        3, -185, -185, -185,   34, -185, -185,   34, -185, -185,
       34,   34,   34,   34, -185, -185,   34,   34,   34, -185,
       34,   34,   34,   34,   34,  218,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -185

    },

    {
        3, -186, -186, -186,   34, -186, -186,   34, -186, -186,
       34,   34,   34,   34, -186, -186,   34,   34,   34, -186,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  219,   34,
       34,   34,   34,   34,   34, -186
    },

    {
        3, -187, -187, -187,   34, -187, -187,   34, -187, -187,
       34,   34,   34,   34, -187, -187,   34,   34,   34, -187,
       34,   34,   34,   34,   34,  220,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -187

    },

    {
        3, -188, -188, -188,   34, -188, -188,   34, -188, -188,
       34,   34,   34,   34, -188, -188,   34,   34,   34, -188,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  221,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -188
    },

    {
        3, -189, -189, -189,   34, -189, -189,   34, -189, -189,
       34,   34,   34,   34, -189, -189,   34,   34,   34, -189,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  222,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -189

    },

    {
        3, -190, -190, -190,   34, -190, -190,   34, -190, -190,
       34,   34,   34,   34, -190, -190,   34,   34,   34, -190,
       34,   34,   34,   34,  223,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -190
    },

    {
        3, -191, -191, -191,   34, -191, -191,   34, -191, -191,
       34,   34,   34,   34, -191, -191,   34,   34,   34, -191,
       34,  224,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -191

    },

    {
        3, -192, -192, -192,   34, -192, -192,   34, -192, -192,
       34,   34,   34,   34, -192, -192,   34,   34,   34, -192,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  225,   34,   34,   34, -192
    },

    {
        3, -193, -193, -193,   34, -193, -193,   34, -193, -193,
       34,   34,   34,   34, -193, -193,   34,   34,   34, -193,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -193

    },

    {
        3, -194, -194, -194,   34, -194, -194,   34, -194, -194,
       34,   34,   34,   34, -194, -194,   34,   34,   34, -194,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  226,
       34,   34,   34,   34,   34, -194
    },

    {
        3, -195, -195, -195,   34, -195, -195,   34, -195, -195,
       34,   34,   34,   34, -195, -195,   34,   34,   34, -195,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  227,
       34,   34,   34,   34,   34, -195

    },

    {
        3, -196, -196, -196,   34, -196, -196,   34, -196, -196,
       34,   34,   34,   34, -196, -196,   34,   34,   34, -196,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      228,   34,   34,   34,   34, -196
    },

    {
        3, -197, -197, -197,   34, -197, -197,   34, -197, -197,
       34,   34,   34,   34, -197, -197,   34,   34,   34, -197,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  229,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -197

    },

    {
        3, -198, -198, -198,   34, -198, -198,   34, -198, -198,
       34,   34,   34,   34, -198, -198,   34,   34,   34, -198,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  230,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -198
    },

    {
        3, -199, -199, -199,   34, -199, -199,   34, -199, -199,
       34,   34,   34,   34, -199, -199,   34,   34,   34, -199,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  231,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -199

    },

    {
        3, -200, -200, -200,   34, -200, -200,   34, -200, -200,
       34,   34,   34,   34, -200, -200,   34,   34,   34, -200,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  232, -200
    },

    {
        3, -201, -201, -201,   34, -201, -201,   34, -201, -201,
       34,   34,   34,   34, -201, -201,   34,   34,   34, -201,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  233,   34,   34,   34, -201

    },

    {
        3, -202, -202, -202,   34, -202, -202,   34, -202, -202,
       34,   34,   34,   34, -202, -202,   34,   34,   34, -202,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  234,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -202
    },

    {
        3, -203, -203, -203,   34, -203, -203,   34, -203, -203,
       34,   34,   34,   34, -203, -203,   34,   34,   34, -203,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -203

    },

    {
        3, -204, -204, -204,   34, -204, -204,   34, -204, -204,
       34,   34,   34,   34, -204, -204,   34,   34,   34, -204,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -204
    },

    {
        3, -205, -205, -205,   34, -205, -205,   34, -205, -205,
       34,   34,   34,   34, -205, -205,   34,   34,   34, -205,
       34,   34,   34,   34,  235,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -205

    },

    {
        3, -206, -206, -206,   34, -206, -206,   34, -206, -206,
       34,   34,   34,   34, -206, -206,   34,   34,   34, -206,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      236,   34,   34,   34,   34, -206
    },

    {
        3, -207, -207, -207,   34, -207, -207,   34, -207, -207,
       34,   34,   34,   34, -207, -207,   34,   34,   34, -207,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  237,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -207

    },

    {
        3, -208, -208, -208,   34, -208, -208,   34, -208, -208,
       34,   34,   34,   34, -208, -208,   34,   34,   34, -208,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  238,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -208
    },

    {
        3, -209, -209, -209,   34, -209, -209,   34, -209, -209,
       34,   34,   34,   34, -209, -209,   34,   34,   34, -209,
       34,   34,   34,  239,  240,   34,  241,   34,  242,   34,
       34,   34,   34,   34,   34,   34,  243,   34,   34,  244,
       34,   34,  245,   34,   34, -209

    },

    {
        3, -210, -210, -210,   34, -210, -210,   34, -210, -210,
       34,   34,   34,   34, -210, -210,   34,   34,   34, -210,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  246,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -210
    },

    {
        3, -211, -211, -211,   34, -211, -211,   34, -211, -211,
       34,   34,   34,   34, -211, -211,   34,   34,   34, -211,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  247,   34,   34,   34, -211

    },

    {
        3, -212, -212, -212,   34, -212, -212,   34, -212, -212,
       34,   34,   34,   34, -212, -212,   34,   34,   34, -212,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  248,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -212
    },

    {
        3, -213, -213, -213,   34, -213, -213,   34, -213, -213,
       34,   34,   34,   34, -213, -213,   34,   34,   34, -213,
       34,   34,   34,  249,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -213

    },

    {
        3, -214, -214, -214,   34, -214, -214,   34, -214, -214,
       34,   34,   34,   34, -214, -214,   34,   34,   34, -214,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  250,   34,
       34,   34,   34,   34,   34, -214
    },

    {
        3, -215, -215, -215,   34, -215, -215,   34, -215, -215,
       34,   34,   34,   34, -215, -215,   34,   34,   34, -215,
       34,   34,   34,   34,   34,   34,   34,  251,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -215

    },

    {
        3, -216, -216, -216,   34, -216, -216,   34, -216, -216,
       34,   34,   34,   34, -216, -216,   34,   34,   34, -216,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  252,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -216
    },

    {
        3, -217, -217, -217,   34, -217, -217,   34, -217, -217,
       34,   34,   34,   34, -217, -217,   34,   34,   34, -217,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -217

    },

    {
        3, -218, -218, -218,   34, -218, -218,   34, -218, -218,
       34,   34,   34,   34, -218, -218,   34,   34,   34, -218,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  253,   34,
       34,   34,   34,   34,   34, -218
    },

    {
        3, -219, -219, -219,   34, -219, -219,   34, -219, -219,
       34,   34,   34,   34, -219, -219,   34,   34,   34, -219,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  254,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -219

    },

    {
        3, -220, -220, -220,   34, -220, -220,   34, -220, -220,
       34,   34,   34,   34, -220, -220,   34,   34,   34, -220,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  255,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -220
    },

    {
        3, -221, -221, -221,   34, -221, -221,   34, -221, -221,
       34,   34,   34,   34, -221, -221,   34,   34,   34, -221,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  256,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -221

    },

    {
        3, -222, -222, -222,   34, -222, -222,   34, -222, -222,
       34,   34,   34,   34, -222, -222,   34,   34,   34, -222,
       34,   34,   34,   34,   34,   34,  257,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -222
    },

    {
        3, -223, -223, -223,   34, -223, -223,   34, -223, -223,
       34,   34,   34,   34, -223, -223,   34,   34,   34, -223,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  258,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -223

    },

    {
        3, -224, -224, -224,   34, -224, -224,   34, -224, -224,
       34,   34,   34,   34, -224, -224,   34,   34,   34, -224,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      259,   34,   34,   34,   34, -224
    },

    {
        3, -225, -225, -225,   34, -225, -225,   34, -225, -225,
       34,   34,   34,   34, -225, -225,   34,   34,   34, -225,
       34,   34,   34,   34,   34,  260,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -225

    },

    {
        3, -226, -226, -226,   34, -226, -226,   34, -226, -226,
       34,   34,   34,   34, -226, -226,   34,   34,   34, -226,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      261,   34,   34,   34,   34, -226
    },

    {
        3, -227, -227, -227,   34, -227, -227,   34, -227, -227,
       34,   34,   34,   34, -227, -227,   34,   34,   34, -227,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  262,
       34,   34,   34,   34,   34, -227

    },

    {
        3, -228, -228, -228,   34, -228, -228,   34, -228, -228,
       34,   34,   34,   34, -228, -228,   34,   34,   34, -228,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  263,   34,   34,   34, -228
    },

    {
        3, -229, -229, -229,   34, -229, -229,   34, -229, -229,
       34,   34,   34,   34, -229, -229,   34,   34,   34, -229,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -229

    },

    {
        3, -230, -230, -230,   34, -230, -230,   34, -230, -230,
       34,   34,   34,   34, -230, -230,   34,   34,   34, -230,
       34,   34,   34,  264,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -230
    },

    {
        3, -231, -231, -231,   34, -231, -231,   34, -231, -231,
       34,   34,   34,   34, -231, -231,   34,   34,   34, -231,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  265,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -231

    },

    {
        3, -232, -232, -232,   34, -232, -232,   34, -232, -232,
       34,   34,   34,   34, -232, -232,   34,   34,   34, -232,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -232
    },

    {
        3, -233, -233, -233,   34, -233, -233,   34, -233, -233,
       34,   34,   34,   34, -233, -233,   34,   34,   34, -233,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  266,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -233

    },

    {
        3, -234, -234, -234,   34, -234, -234,   34, -234, -234,
       34,   34,   34,   34, -234, -234,   34,   34,   34, -234,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  267,   34,   34, -234
    },

    {
        3, -235, -235, -235,   34, -235, -235,   34, -235, -235,
       34,   34,   34,   34, -235, -235,   34,   34,   34, -235,
       34,   34,   34,   34,   34,  268,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -235

    },

    {
        3, -236, -236, -236,   34, -236, -236,   34, -236, -236,
      269,   34,   34,   34, -236, -236,   34,   34,   34, -236,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -236
    },

    {
        3, -237, -237, -237,   34, -237, -237,   34, -237, -237,
       34,   34,   34,   34, -237, -237,   34,   34,   34, -237,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      270,   34,   34,   34,   34, -237

    },

    {
        3, -238, -238, -238,   34, -238, -238,   34, -238, -238,
       34,   34,   34,   34, -238, -238,   34,   34,   34, -238,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      271,   34,   34,   34,   34, -238
    },

    {
        3, -239, -239, -239,   34, -239, -239,   34, -239, -239,
       34,   34,   34,   34, -239, -239,   34,   34,   34, -239,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  272,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -239

    },

    {
        3, -240, -240, -240,   34, -240, -240,   34, -240, -240,
       34,   34,   34,   34, -240, -240,   34,   34,   34, -240,
       34,  273,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -240
    },

    {
        3, -241, -241, -241,   34, -241, -241,   34, -241, -241,
       34,   34,   34,   34, -241, -241,   34,   34,   34, -241,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  274,   34,   34,   34, -241

    },

    {
        3, -242, -242, -242,   34, -242, -242,   34, -242, -242,
       34,   34,   34,   34, -242, -242,   34,   34,   34, -242,
       34,   34,   34,   34,   34,  275,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -242
    },

    {
        3, -243, -243, -243,   34, -243, -243,   34, -243, -243,
       34,   34,   34,   34, -243, -243,   34,   34,   34, -243,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  276,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -243

    },

    {
        3, -244, -244, -244,   34, -244, -244,   34, -244, -244,
       34,   34,   34,   34, -244, -244,   34,   34,   34, -244,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  277,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -244
    },

    {
        3, -245, -245, -245,   34, -245, -245,   34, -245, -245,
       34,   34,   34,   34, -245, -245,   34,   34,   34, -245,
       34,  278,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -245

    },

    {
        3, -246, -246, -246,   34, -246, -246,   34, -246, -246,
       34,   34,   34,   34, -246, -246,   34,   34,   34, -246,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  279,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -246
    },

    {
        3, -247, -247, -247,   34, -247, -247,   34, -247, -247,
       34,   34,   34,   34, -247, -247,   34,   34,   34, -247,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  280,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -247

    },

    {
        3, -248, -248, -248,   34, -248, -248,   34, -248, -248,
       34,   34,   34,   34, -248, -248,   34,   34,   34, -248,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  281,   34,
       34,   34,   34,   34,   34, -248
    },

    {
        3, -249, -249, -249,   34, -249, -249,   34, -249, -249,
       34,   34,   34,   34, -249, -249,   34,   34,   34, -249,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      282,   34,   34,   34,   34, -249

    },

    {
        3, -250, -250, -250,   34, -250, -250,   34, -250, -250,
       34,   34,   34,   34, -250, -250,   34,   34,   34, -250,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      283,   34,   34,   34,   34, -250
    },

    {
        3, -251, -251, -251,   34, -251, -251,   34, -251, -251,
       34,   34,   34,   34, -251, -251,   34,   34,   34, -251,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  284,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -251

    },

    {
        3, -252, -252, -252,   34, -252, -252,   34, -252, -252,
       34,   34,   34,   34, -252, -252,   34,   34,   34, -252,
       34,   34,   34,  285,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -252
    },

    {
        3, -253, -253, -253,   34, -253, -253,   34, -253, -253,
       34,   34,   34,   34, -253, -253,   34,   34,   34, -253,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  286,   34,   34,   34,
       34,   34,   34,   34,   34, -253

    },

    {
        3, -254, -254, -254,   34, -254, -254,   34, -254, -254,
       34,   34,   34,   34, -254, -254,   34,   34,   34, -254,
       34,   34,   34,   34,   34,  287,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -254
    },

    {
        3, -255, -255, -255,   34, -255, -255,   34, -255, -255,
       34,   34,   34,   34, -255, -255,   34,   34,   34, -255,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -255

    },

    {
        3, -256, -256, -256,   34, -256, -256,   34, -256, -256,
       34,   34,   34,   34, -256, -256,   34,   34,   34, -256,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  288,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -256
    },

    {
        3, -257, -257, -257,   34, -257, -257,   34, -257, -257,
       34,   34,   34,   34, -257, -257,   34,   34,   34, -257,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -257

    },

    {
        3, -258, -258, -258,   34, -258, -258,   34, -258, -258,
       34,   34,   34,   34, -258, -258,   34,   34,   34, -258,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  289,
       34,   34,   34,   34,   34, -258
    },

    {
        3, -259, -259, -259,   34, -259, -259,   34, -259, -259,
      290,   34,   34,   34, -259, -259,   34,   34,   34, -259,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -259

    },

    {
        3, -260, -260, -260,   34, -260, -260,   34, -260, -260,
       34,   34,   34,   34, -260, -260,   34,   34,   34, -260,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -260
    },

    {
        3, -261, -261, -261,   34, -261, -261,   34, -261, -261,
       34,   34,   34,   34, -261, -261,   34,   34,   34, -261,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  291,   34,
       34,   34,   34,   34,   34, -261

    },

    {
        3, -262, -262, -262,   34, -262, -262,   34, -262, -262,
       34,   34,   34,   34, -262, -262,   34,   34,   34, -262,
       34,   34,   34,   34,   34,  292,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -262
    },

    {
        3, -263, -263, -263,   34, -263, -263,   34, -263, -263,
       34,   34,   34,   34, -263, -263,   34,   34,   34, -263,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  293,   34,
       34,   34,   34,   34,   34, -263

    },

    {
        3, -264, -264, -264,   34, -264, -264,   34, -264, -264,
       34,   34,   34,   34, -264, -264,   34,   34,   34, -264,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -264
    },

    {
        3, -265, -265, -265,   34, -265, -265,   34, -265, -265,
       34,   34,   34,   34, -265, -265,   34,   34,   34, -265,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  294,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -265

    },

    {
        3, -266, -266, -266,   34, -266, -266,   34, -266, -266,
       34,   34,   34,   34, -266, -266,   34,   34,   34, -266,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -266
    },

    {
        3, -267, -267, -267,   34, -267, -267,   34, -267, -267,
       34,   34,   34,   34, -267, -267,   34,   34,   34, -267,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -267

    },

    {
        3, -268, -268, -268,   34, -268, -268,   34, -268, -268,
       34,   34,   34,   34, -268, -268,   34,   34,   34, -268,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  295,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -268
    },

    {
        3, -269, -269, -269,   34, -269, -269,   34, -269, -269,
       34,   34,   34,   34, -269, -269,   34,   34,   34, -269,
       34,  296,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -269

    },

    {
        3, -270, -270, -270,   34, -270, -270,   34, -270, -270,
       34,   34,   34,   34, -270, -270,   34,   34,   34, -270,
       34,   34,   34,   34,   34,   34,   34,   34,  297,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -270
    },

    {
        3, -271, -271, -271,   34, -271, -271,   34, -271, -271,
       34,   34,   34,   34, -271, -271,   34,   34,   34, -271,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -271

    },

    {
        3, -272, -272, -272,   34, -272, -272,   34, -272, -272,
       34,   34,   34,   34, -272, -272,   34,   34,   34, -272,
       34,   34,   34,   34,  298,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  299,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -272
    },

    {
        3, -273, -273, -273,   34, -273, -273,   34, -273, -273,
       34,   34,   34,   34, -273, -273,   34,   34,   34, -273,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      300,   34,   34,   34,   34, -273

    },

    {
        3, -274, -274, -274,   34, -274, -274,   34, -274, -274,
       34,   34,   34,   34, -274, -274,   34,   34,   34, -274,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  301,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -274
    },

    {
        3, -275, -275, -275,   34, -275, -275,   34, -275, -275,
       34,   34,   34,   34, -275, -275,   34,   34,   34, -275,
       34,  302,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -275

    },

    {
        3, -276, -276, -276,   34, -276, -276,   34, -276, -276,
       34,   34,   34,   34, -276, -276,   34,   34,   34, -276,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  303,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -276
    },

    {
        3, -277, -277, -277,   34, -277, -277,   34, -277, -277,
       34,   34,   34,   34, -277, -277,   34,   34,   34, -277,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  304,   34,
       34,   34,   34,   34,   34, -277

    },

    {
        3, -278, -278, -278,   34, -278, -278,   34, -278, -278,
       34,   34,   34,   34, -278, -278,   34,   34,   34, -278,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  305,   34,
       34,   34,   34,   34,   34, -278
    },

    {
        3, -279, -279, -279,   34, -279, -279,   34, -279, -279,
       34,   34,   34,   34, -279, -279,   34,   34,   34, -279,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  306,
       34,   34,   34,   34,   34, -279

    },

    {
        3, -280, -280, -280,   34, -280, -280,   34, -280, -280,
      307,   34,   34,   34, -280, -280,   34,   34,   34, -280,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  308,
       34,   34,   34,   34,   34, -280
    },

    {
        3, -281, -281, -281,   34, -281, -281,   34, -281, -281,
       34,   34,   34,   34, -281, -281,   34,   34,   34, -281,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      309,   34,   34,   34,   34, -281

    },

    {
        3, -282, -282, -282,   34, -282, -282,   34, -282, -282,
      310,   34,   34,   34, -282, -282,   34,   34,   34, -282,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -282
    },

    {
        3, -283, -283, -283,   34, -283, -283,   34, -283, -283,
       34,   34,   34,   34, -283, -283,   34,   34,   34, -283,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  311,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -283

    },

    {
        3, -284, -284, -284,   34, -284, -284,   34, -284, -284,
       34,   34,   34,   34, -284, -284,   34,   34,   34, -284,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  312,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -284
    },

    {
        3, -285, -285, -285,   34, -285, -285,   34, -285, -285,
       34,   34,   34,   34, -285, -285,   34,   34,   34, -285,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  313,   34,   34,   34, -285

    },

    {
        3, -286, -286, -286,   34, -286, -286,   34, -286, -286,
       34,   34,   34,   34, -286, -286,   34,   34,   34, -286,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  314,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -286
    },

    {
        3, -287, -287, -287,   34, -287, -287,   34, -287, -287,
       34,   34,   34,   34, -287, -287,   34,   34,   34, -287,
       34,   34,   34,   34,  315,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -287

    },

    {
        3, -288, -288, -288,   34, -288, -288,   34, -288, -288,
       34,   34,   34,   34, -288, -288,   34,   34,   34, -288,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -288
    },

    {
        3, -289, -289, -289,   34, -289, -289,   34, -289, -289,
       34,   34,   34,   34, -289, -289,   34,   34,   34, -289,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      316,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -289

    },

    {
        3, -290, -290, -290,   34, -290, -290,   34, -290, -290,
       34,   34,   34,   34, -290, -290,   34,   34,   34, -290,
       34,  317,   34,  318,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -290
    },

    {
        3, -291, -291, -291,   34, -291, -291,   34, -291, -291,
       34,   34,   34,   34, -291, -291,   34,   34,   34, -291,
       34,  319,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -291

    },

    {
        3, -292, -292, -292,   34, -292, -292,   34, -292, -292,
       34,   34,   34,   34, -292, -292,   34,   34,   34, -292,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  320,   34,
       34,   34,   34,   34,   34, -292
    },

    {
        3, -293, -293, -293,   34, -293, -293,   34, -293, -293,
       34,   34,   34,   34, -293, -293,   34,   34,   34, -293,
       34,   34,   34,   34,   34,  321,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -293

    },

    {
        3, -294, -294, -294,   34, -294, -294,   34, -294, -294,
       34,   34,   34,   34, -294, -294,   34,   34,   34, -294,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -294
    },

    {
        3, -295, -295, -295,   34, -295, -295,   34, -295, -295,
      322,   34,   34,   34, -295, -295,   34,   34,   34, -295,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -295

    },

    {
        3, -296, -296, -296,   34, -296, -296,   34, -296, -296,
       34,   34,   34,   34, -296, -296,   34,   34,   34, -296,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  323,
       34,   34,   34,   34,   34, -296
    },

    {
        3, -297, -297, -297,   34, -297, -297,   34, -297, -297,
      324,   34,   34,   34, -297, -297,   34,   34,   34, -297,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -297

    },

    {
        3, -298, -298, -298,   34, -298, -298,   34, -298, -298,
       34,   34,   34,   34, -298, -298,   34,   34,   34, -298,
       34,  325,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -298
    },

    {
        3, -299, -299, -299,   34, -299, -299,   34, -299, -299,
       34,   34,   34,   34, -299, -299,   34,   34,   34, -299,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  326,
       34,   34,   34,   34,   34, -299

    },

    {
        3, -300, -300, -300,   34, -300, -300,   34, -300, -300,
       34,   34,   34,   34, -300, -300,   34,   34,   34, -300,
       34,  327,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -300
    },

    {
        3, -301, -301, -301,   34, -301, -301,   34, -301, -301,
       34,   34,   34,   34, -301, -301,   34,   34,   34, -301,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -301

    },

    {
        3, -302, -302, -302,   34, -302, -302,   34, -302, -302,
       34,   34,   34,   34, -302, -302,   34,   34,   34, -302,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  328,   34,   34,   34,
       34,   34,   34,   34,   34, -302
    },

    {
        3, -303, -303, -303,   34, -303, -303,   34, -303, -303,
       34,   34,   34,   34, -303, -303,   34,   34,   34, -303,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  329,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -303

    },

    {
        3, -304, -304, -304,   34, -304, -304,   34, -304, -304,
       34,   34,   34,   34, -304, -304,   34,   34,   34, -304,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      330,   34,   34,   34,   34, -304
    },

    {
        3, -305, -305, -305,   34, -305, -305,   34, -305, -305,
       34,   34,   34,   34, -305, -305,   34,   34,   34, -305,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -305

    },

    {
        3, -306, -306, -306,   34, -306, -306,   34, -306, -306,
       34,   34,   34,   34, -306, -306,   34,   34,   34, -306,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      331,   34,   34,   34,   34, -306
    },

    {
        3, -307, -307, -307,   34, -307, -307,   34, -307, -307,
       34,   34,   34,   34, -307, -307,   34,   34,   34, -307,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  332,   34,
       34,   34,   34,   34,   34, -307

    },

    {
        3, -308, -308, -308,   34, -308, -308,   34, -308, -308,
      333,   34,   34,   34, -308, -308,   34,   34,   34, -308,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -308
    },

    {
        3, -309, -309, -309,   34, -309, -309,   34, -309, -309,
       34,   34,   34,   34, -309, -309,   34,   34,   34, -309,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -309

    },

    {
        3, -310, -310, -310,   34, -310, -310,   34, -310, -310,
       34,   34,   34,   34, -310, -310,   34,   34,   34, -310,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  334,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -310
    },

    {
        3, -311, -311, -311,   34, -311, -311,   34, -311, -311,
       34,   34,   34,   34, -311, -311,   34,   34,   34, -311,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  335,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -311

    },

    {
        3, -312, -312, -312,   34, -312, -312,   34, -312, -312,
       34,   34,   34,   34, -312, -312,   34,   34,   34, -312,
       34,   34,   34,   34,   34,  336,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -312
    },

    {
        3, -313, -313, -313,   34, -313, -313,   34, -313, -313,
       34,   34,   34,   34, -313, -313,   34,   34,   34, -313,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  337,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -313

    },

    {
        3, -314, -314, -314,   34, -314, -314,   34, -314, -314,
       34,   34,   34,   34, -314, -314,   34,   34,   34, -314,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  338,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -314
    },

    {
        3, -315, -315, -315,   34, -315, -315,   34, -315, -315,
      339,   34,   34,   34, -315, -315,   34,   34,   34, -315,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -315

    },

    {
        3, -316, -316, -316,   34, -316, -316,   34, -316, -316,
       34,   34,   34,   34, -316, -316,   34,   34,   34, -316,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  340,   34,   34,   34, -316
    },

    {
        3, -317, -317, -317,   34, -317, -317,   34, -317, -317,
       34,   34,   34,   34, -317, -317,   34,   34,   34, -317,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  341,
       34,   34,   34,   34,   34, -317

    },

    {
        3, -318, -318, -318,   34, -318, -318,   34, -318, -318,
       34,   34,   34,   34, -318, -318,   34,   34,   34, -318,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  342,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -318
    },

    {
        3, -319, -319, -319,   34, -319, -319,   34, -319, -319,
       34,   34,   34,   34, -319, -319,   34,   34,   34, -319,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  343,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -319

    },

    {
        3, -320, -320, -320,   34, -320, -320,   34, -320, -320,
       34,   34,   34,   34, -320, -320,   34,   34,   34, -320,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      344,   34,   34,   34,   34, -320
    },

    {
        3, -321, -321, -321,   34, -321, -321,   34, -321, -321,
       34,   34,   34,   34, -321, -321,   34,   34,   34, -321,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -321

    },

    {
        3, -322, -322, -322,   34, -322, -322,   34, -322, -322,
       34,   34,   34,   34, -322, -322,   34,   34,   34, -322,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  345,   34,   34, -322
    },

    {
        3, -323, -323, -323,   34, -323, -323,   34, -323, -323,
       34,   34,   34,   34, -323, -323,   34,   34,   34, -323,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  346,
       34,   34,   34,   34,   34, -323

    },

    {
        3, -324, -324, -324,   34, -324, -324,   34, -324, -324,
       34,   34,   34,   34, -324, -324,   34,   34,   34, -324,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  347,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -324
    },

    {
        3, -325, -325, -325,   34, -325, -325,   34, -325, -325,
       34,   34,   34,   34, -325, -325,   34,   34,   34, -325,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      348,   34,   34,   34,   34, -325

    },

    {
        3, -326, -326, -326,   34, -326, -326,   34, -326, -326,
       34,   34,   34,   34, -326, -326,   34,   34,   34, -326,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      349,   34,   34,   34,   34, -326
    },

    {
        3, -327, -327, -327,   34, -327, -327,   34, -327, -327,
       34,   34,   34,   34, -327, -327,   34,   34,   34, -327,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      350,   34,   34,   34,   34, -327

    },

    {
        3, -328, -328, -328,   34, -328, -328,   34, -328, -328,
       34,   34,   34,   34, -328, -328,   34,   34,   34, -328,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -328
    },

    {
        3, -329, -329, -329,   34, -329, -329,   34, -329, -329,
       34,   34,   34,   34, -329, -329,   34,   34,   34, -329,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -329

    },

    {
        3, -330, -330, -330,   34, -330, -330,   34, -330, -330,
       34,   34,   34,   34, -330, -330,   34,   34,   34, -330,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -330
    },

    {
        3, -331, -331, -331,   34, -331, -331,   34, -331, -331,
       34,   34,   34,   34, -331, -331,   34,   34,   34, -331,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -331

    },

    {
        3, -332, -332, -332,   34, -332, -332,   34, -332, -332,
       34,   34,   34,   34, -332, -332,   34,   34,   34, -332,
       34,   34,   34,   34,   34,  351,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -332
    },

    {
        3, -333, -333, -333,   34, -333, -333,   34, -333, -333,
       34,   34,   34,   34, -333, -333,   34,   34,   34, -333,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  352,   34,
       34,   34,   34,   34,   34, -333

    },

    {
        3, -334, -334, -334,   34, -334, -334,   34, -334, -334,
       34,   34,   34,   34, -334, -334,   34,   34,   34, -334,
       34,   34,   34,   34,   34,  353,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -334
    },

    {
        3, -335, -335, -335,   34, -335, -335,   34, -335, -335,
       34,   34,   34,   34, -335, -335,   34,   34,   34, -335,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  354,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -335

    },

    {
        3, -336, -336, -336,   34, -336, -336,   34, -336, -336,
       34,   34,   34,   34, -336, -336,   34,   34,   34, -336,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  355,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -336
    },

    {
        3, -337, -337, -337,   34, -337, -337,   34, -337, -337,
       34,   34,   34,   34, -337, -337,   34,   34,   34, -337,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      356,   34,   34,   34,   34, -337

    },

    {
        3, -338, -338, -338,   34, -338, -338,   34, -338, -338,
       34,   34,   34,   34, -338, -338,   34,   34,   34, -338,
       34,  357,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -338
    },

    {
        3, -339, -339, -339,   34, -339, -339,   34, -339, -339,
       34,   34,   34,   34, -339, -339,   34,   34,   34, -339,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  358,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -339

    },

    {
        3, -340, -340, -340,   34, -340, -340,   34, -340, -340,
       34,   34,   34,   34, -340, -340,   34,   34,   34, -340,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  359,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -340
    },

    {
        3, -341, -341, -341,   34, -341, -341,   34, -341, -341,
       34,   34,   34,   34, -341, -341,   34,   34,   34, -341,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  360,
       34,   34,   34,   34,   34, -341

    },

    {
        3, -342, -342, -342,   34, -342, -342,   34, -342, -342,
       34,   34,   34,   34, -342, -342,   34,   34,   34, -342,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  361,   34,
       34,   34,   34,   34,   34, -342
    },

    {
        3, -343, -343, -343,   34, -343, -343,   34, -343, -343,
       34,   34,   34,   34, -343, -343,   34,   34,   34, -343,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  362,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -343

    },

    {
        3, -344, -344, -344,   34, -344, -344,   34, -344, -344,
       34,   34,   34,   34, -344, -344,   34,   34,   34, -344,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  363,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -344
    },

    {
        3, -345, -345, -345,   34, -345, -345,   34, -345, -345,
       34,   34,   34,   34, -345, -345,   34,   34,   34, -345,
       34,  364,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -345

    },

    {
        3, -346, -346, -346,   34, -346, -346,   34, -346, -346,
       34,   34,   34,   34, -346, -346,   34,   34,   34, -346,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  365,   34,   34,   34, -346
    },

    {
        3, -347, -347, -347,   34, -347, -347,   34, -347, -347,
       34,   34,   34,   34, -347, -347,   34,   34,   34, -347,
       34,   34,   34,   34,   34,  366,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -347

    },

    {
        3, -348, -348, -348,   34, -348, -348,   34, -348, -348,
       34,   34,   34,   34, -348, -348,   34,   34,   34, -348,
       34,  367,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -348
    },

    {
        3, -349, -349, -349,   34, -349, -349,   34, -349, -349,
       34,   34,   34,   34, -349, -349,   34,   34,   34, -349,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -349

    },

    {
        3, -350, -350, -350,   34, -350, -350,   34, -350, -350,
       34,   34,   34,   34, -350, -350,   34,   34,   34, -350,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  368, -350
    },

    {
        3, -351, -351, -351,   34, -351, -351,   34, -351, -351,
       34,   34,   34,   34, -351, -351,   34,   34,   34, -351,
       34,   34,   34,  369,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -351

    },

    {
        3, -352, -352, -352,   34, -352, -352,   34, -352, -352,
       34,   34,   34,   34, -352, -352,   34,   34,   34, -352,
       34,   34,   34,   34,   34,  370,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -352
    },

    {
        3, -353, -353, -353,   34, -353, -353,   34, -353, -353,
       34,   34,   34,   34, -353, -353,   34,   34,   34, -353,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  371,   34, -353

    },

    {
        3, -354, -354, -354,   34, -354, -354,   34, -354, -354,
       34,   34,   34,   34, -354, -354,   34,   34,   34, -354,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  372,
       34,   34,   34,   34,   34, -354
    },

    {
        3, -355, -355, -355,   34, -355, -355,   34, -355, -355,
       34,   34,   34,   34, -355, -355,   34,   34,   34, -355,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      373,   34,   34,   34,   34, -355

    },

    {
        3, -356, -356, -356,   34, -356, -356,   34, -356, -356,
       34,   34,   34,   34, -356, -356,   34,   34,   34, -356,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  374, -356
    },

    {
        3, -357, -357, -357,   34, -357, -357,   34, -357, -357,
       34,   34,   34,   34, -357, -357,   34,   34,   34, -357,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  375,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -357

    },

    {
        3, -358, -358, -358,   34, -358, -358,   34, -358, -358,
       34,   34,   34,   34, -358, -358,   34,   34,   34, -358,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  376,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -358
    },

    {
        3, -359, -359, -359,   34, -359, -359,   34, -359, -359,
       34,   34,   34,   34, -359, -359,   34,   34,   34, -359,
       34,   34,   34,  377,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -359

    },

    {
        3, -360, -360, -360,   34, -360, -360,   34, -360, -360,
       34,   34,   34,   34, -360, -360,   34,   34,   34, -360,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  378,   34,   34,   34, -360
    },

    {
        3, -361, -361, -361,   34, -361, -361,   34, -361, -361,
       34,   34,   34,   34, -361, -361,   34,   34,   34, -361,
       34,   34,   34,   34,   34,  379,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -361

    },

    {
        3, -362, -362, -362,   34, -362, -362,   34, -362, -362,
       34,   34,   34,   34, -362, -362,   34,   34,   34, -362,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      380,   34,   34,   34,   34, -362
    },

    {
        3, -363, -363, -363,   34, -363, -363,   34, -363, -363,
       34,   34,   34,   34, -363, -363,   34,   34,   34, -363,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  381,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -363

    },

    {
        3, -364, -364, -364,   34, -364, -364,   34, -364, -364,
       34,   34,   34,   34, -364, -364,   34,   34,   34, -364,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  382,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -364
    },

    {
        3, -365, -365, -365,   34, -365, -365,   34, -365, -365,
       34,   34,   34,   34, -365, -365,   34,   34,   34, -365,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  383,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -365

    },

    {
        3, -366, -366, -366,   34, -366, -366,   34, -366, -366,
       34,   34,   34,   34, -366, -366,   34,   34,   34, -366,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  384,   34, -366
    },

    {
        3, -367, -367, -367,   34, -367, -367,   34, -367, -367,
       34,   34,   34,   34, -367, -367,   34,   34,   34, -367,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      385,   34,   34,   34,   34, -367

    },

    {
        3, -368, -368, -368,   34, -368, -368,   34, -368, -368,
       34,   34,   34,   34, -368, -368,   34,   34,   34, -368,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  386,   34,   34,   34,
       34,   34,   34,   34,   34, -368
    },

    {
        3, -369, -369, -369,   34, -369, -369,   34, -369, -369,
       34,   34,   34,   34, -369, -369,   34,   34,   34, -369,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -369

    },

    {
        3, -370, -370, -370,   34, -370, -370,   34, -370, -370,
       34,   34,   34,   34, -370, -370,   34,   34,   34, -370,
       34,   34,   34,  387,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -370
    },

    {
        3, -371, -371, -371,   34, -371, -371,   34, -371, -371,
       34,   34,   34,   34, -371, -371,   34,   34,   34, -371,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      388,   34,   34,   34,   34, -371

    },

    {
        3, -372, -372, -372,   34, -372, -372,   34, -372, -372,
       34,   34,   34,   34, -372, -372,   34,   34,   34, -372,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -372
    },

    {
        3, -373, -373, -373,   34, -373, -373,   34, -373, -373,
       34,   34,   34,   34, -373, -373,   34,   34,   34, -373,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -373

    },

    {
        3, -374, -374, -374,   34, -374, -374,   34, -374, -374,
       34,   34,   34,   34, -374, -374,   34,   34,   34, -374,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -374
    },

    {
        3, -375, -375, -375,   34, -375, -375,   34, -375, -375,
       34,   34,   34,   34, -375, -375,   34,   34,   34, -375,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      389,   34,   34,   34,   34, -375

    },

    {
        3, -376, -376, -376,   34, -376, -376,   34, -376, -376,
       34,   34,   34,   34, -376, -376,   34,   34,   34, -376,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      390,   34,   34,   34,   34, -376
    },

    {
        3, -377, -377, -377,   34, -377, -377,   34, -377, -377,
       34,   34,   34,   34, -377, -377,   34,   34,   34, -377,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      391,   34,   34,   34,   34, -377

    },

    {
        3, -378, -378, -378,   34, -378, -378,   34, -378, -378,
       34,   34,   34,   34, -378, -378,   34,   34,   34, -378,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  392,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -378
    },

    {
        3, -379, -379, -379,   34, -379, -379,   34, -379, -379,
       34,   34,   34,   34, -379, -379,   34,   34,   34, -379,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -379

    },

    {
        3, -380, -380, -380,   34, -380, -380,   34, -380, -380,
       34,   34,   34,   34, -380, -380,   34,   34,   34, -380,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -380
    },

    {
        3, -381, -381, -381,   34, -381, -381,   34, -381, -381,
       34,   34,   34,   34, -381, -381,   34,   34,   34, -381,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  393,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -381

    },

    {
        3, -382, -382, -382,   34, -382, -382,   34, -382, -382,
       34,   34,   34,   34, -382, -382,   34,   34,   34, -382,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  394,   34,   34,   34, -382
    },

    {
        3, -383, -383, -383,   34, -383, -383,   34, -383, -383,
       34,   34,   34,   34, -383, -383,   34,   34,   34, -383,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  395,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -383

    },

    {
        3, -384, -384, -384,   34, -384, -384,   34, -384, -384,
       34,   34,   34,   34, -384, -384,   34,   34,   34, -384,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      396,   34,   34,   34,   34, -384
    },

    {
        3, -385, -385, -385,   34, -385, -385,   34, -385, -385,
       34,   34,   34,   34, -385, -385,   34,   34,   34, -385,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  397, -385

    },

    {
        3, -386, -386, -386,   34, -386, -386,   34, -386, -386,
       34,   34,   34,   34, -386, -386,   34,   34,   34, -386,
       34,   34,   34,   34,   34,  398,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -386
    },

    {
        3, -387, -387, -387,   34, -387, -387,   34, -387, -387,
       34,   34,   34,   34, -387, -387,   34,   34,   34, -387,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -387

    },

    {
        3, -388, -388, -388,   34, -388, -388,   34, -388, -388,
       34,   34,   34,   34, -388, -388,   34,   34,   34, -388,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -388
    },

    {
        3, -389, -389, -389,   34, -389, -389,   34, -389, -389,
      399,   34,   34,   34, -389, -389,   34,   34,   34, -389,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -389

    },

    {
        3, -390, -390, -390,   34, -390, -390,   34, -390, -390,
       34,   34,   34,   34, -390, -390,   34,   34,   34, -390,
       34,   34,   34,   34,   34,  400,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -390
    },

    {
        3, -391, -391, -391,   34, -391, -391,   34, -391, -391,
       34,   34,   34,   34, -391, -391,   34,   34,   34, -391,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -391

    },

    {
        3, -392, -392, -392,   34, -392, -392,   34, -392, -392,
       34,   34,   34,   34, -392, -392,   34,   34,   34, -392,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  401,   34,   34,   34,
       34,   34,   34,   34,   34, -392
    },

    {
        3, -393, -393, -393,   34, -393, -393,   34, -393, -393,
       34,   34,   34,   34, -393, -393,   34,   34,   34, -393,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  402,
       34,   34,   34,   34,   34, -393

    },

    {
        3, -394, -394, -394,   34, -394, -394,   34, -394, -394,
       34,   34,   34,   34, -394, -394,   34,   34,   34, -394,
       34,   34,   34,   34,   34,  403,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -394
    },

    {
        3, -395, -395, -395,   34, -395, -395,   34, -395, -395,
       34,   34,   34,   34, -395, -395,   34,   34,   34, -395,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  404,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -395

    },

    {
        3, -396, -396, -396,   34, -396, -396,   34, -396, -396,
       34,   34,   34,   34, -396, -396,   34,   34,   34, -396,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -396
    },

    {
        3, -397, -397, -397,   34, -397, -397,   34, -397, -397,
       34,   34,   34,   34, -397, -397,   34,   34,   34, -397,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  405,   34,   34,   34,
       34,   34,   34,   34,   34, -397

    },

    {
        3, -398, -398, -398,   34, -398, -398,   34, -398, -398,
       34,   34,   34,   34, -398, -398,   34,   34,   34, -398,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  406,
       34,   34,   34,   34,   34, -398
    },

    {
        3, -399, -399, -399,   34, -399, -399,   34, -399, -399,
       34,   34,   34,   34, -399, -399,   34,   34,   34, -399,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  407,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -399

    },

    {
        3, -400, -400, -400,   34, -400, -400,   34, -400, -400,
       34,   34,   34,   34, -400, -400,   34,   34,   34, -400,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  408,   34,
       34,   34,   34,   34,   34, -400
    },

    {
        3, -401, -401, -401,   34, -401, -401,   34, -401, -401,
       34,   34,   34,   34, -401, -401,   34,   34,   34, -401,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      409,   34,   34,   34,   34, -401

    },

    {
        3, -402, -402, -402,   34, -402, -402,   34, -402, -402,
       34,   34,   34,   34, -402, -402,   34,   34,   34, -402,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -402
    },

    {
        3, -403, -403, -403,   34, -403, -403,   34, -403, -403,
       34,   34,   34,   34, -403, -403,   34,   34,   34, -403,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  410,
       34,   34,   34,   34,   34, -403

    },

    {
        3, -404, -404, -404,   34, -404, -404,   34, -404, -404,
       34,   34,   34,   34, -404, -404,   34,   34,   34, -404,
       34,   34,   34,   34,   34,   34,   34,  411,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -404
    },

    {
        3, -405, -405, -405,   34, -405, -405,   34, -405, -405,
       34,   34,   34,   34, -405, -405,   34,   34,   34, -405,
       34,   34,   34,   34,   34,  412,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -405

    },

    {
        3, -406, -406, -406,   34, -406, -406,   34, -406, -406,
       34,   34,   34,   34, -406, -406,   34,   34,   34, -406,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -406
    },

    {
        3, -407, -407, -407,   34, -407, -407,   34, -407, -407,
       34,   34,   34,   34, -407, -407,   34,   34,   34, -407,
       34,   34,   34,   34,   34,  413,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -407

    },

    {
        3, -408, -408, -408,   34, -408, -408,   34, -408, -408,
       34,   34,   34,   34, -408, -408,   34,   34,   34, -408,
       34,  414,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -408
    },

    {
        3, -409, -409, -409,   34, -409, -409,   34, -409, -409,
       34,   34,   34,   34, -409, -409,   34,   34,   34, -409,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  415,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -409

    },

    {
        3, -410, -410, -410,   34, -410, -410,   34, -410, -410,
       34,   34,   34,   34, -410, -410,   34,   34,   34, -410,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -410
    },

    {
        3, -411, -411, -411,   34, -411, -411,   34, -411, -411,
       34,   34,   34,   34, -411, -411,   34,   34,   34, -411,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -411

    },

    {
        3, -412, -412, -412,   34, -412, -412,   34, -412, -412,
       34,   34,   34,   34, -412, -412,   34,   34,   34, -412,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  416,
       34,   34,   34,   34,   34, -412
    },

    {
        3, -413, -413, -413,   34, -413, -413,   34, -413, -413,
       34,   34,   34,   34, -413, -413,   34,   34,   34, -413,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  417,   34, -413

    },

    {
        3, -414, -414, -414,   34, -414, -414,   34, -414, -414,
       34,   34,   34,   34, -414, -414,   34,   34,   34, -414,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  418,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -414
    },

    {
        3, -415, -415, -415,   34, -415, -415,   34, -415, -415,
       34,   34,   34,   34, -415, -415,   34,   34,   34, -415,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  419,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -415

    },

    {
        3, -416, -416, -416,   34, -416, -416,   34, -416, -416,
       34,   34,   34,   34, -416, -416,   34,   34,   34, -416,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -416
    },

    {
        3, -417, -417, -417,   34, -417, -417,   34, -417, -417,
       34,   34,   34,   34, -417, -417,   34,   34,   34, -417,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      420,   34,   34,   34,   34, -417

    },

    {
        3, -418, -418, -418,   34, -418, -418,   34, -418, -418,
       34,   34,   34,   34, -418, -418,   34,   34,   34, -418,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  421,
       34,   34,   34,   34,   34, -418
    },

    {
        3, -419, -419, -419,   34, -419, -419,   34, -419, -419,
       34,   34,   34,   34, -419, -419,   34,   34,   34, -419,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  422,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -419

    },

    {
        3, -420, -420, -420,   34, -420, -420,   34, -420, -420,
       34,   34,   34,   34, -420, -420,   34,   34,   34, -420,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -420
    },

    {
        3, -421, -421, -421,   34, -421, -421,   34, -421, -421,
       34,   34,   34,   34, -421, -421,   34,   34,   34, -421,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -421

    },

    {
        3, -422, -422, -422,   34, -422, -422,   34, -422, -422,
       34,   34,   34,   34, -422, -422,   34,   34,   34, -422,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  423,
       34,   34,   34,   34,   34, -422
    },

    {
        3, -423, -423, -423,   34, -423, -423,   34, -423, -423,
       34,   34,   34,   34, -423, -423,   34,   34,   34, -423,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34, -423

    },

    } ;

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[424] =
    {   0,
        0,    0,   84,   82,   67,   68,    4,   70,   82,   79,
       50,   57,   71,   82,   80,   79,   79,   47,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       78,   67,   68,   79,   70,   69,    0,    0,    0,    0,
       71,   76,   80,   81,   79,   79,    3,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   78,   77,   74,    0,   73,   72,
       76,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   49,   79,   52,   53,   79,   79,
       79,   79,   79,    0,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   27,   28,   79,   79,   79,   79,   54,
       79,   79,   79,   79,   75,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   51,   56,   79,   79,
       79,   79,   79,   79,   79,   79,    1,    2,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   42,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   46,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   63,   64,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   34,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   59,   79,
       79,   62,   79,   79,   79,    8,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   38,   79,   40,   79,   79,   45,
       79,   79,   79,   60,   79,   65,   66,   79,   79,   79,
       11,   79,   79,   79,   79,   79,   79,   79,   79,   25,
       79,   30,   79,   79,   79,   79,   79,   39,   79,   79,
       79,   79,   79,   61,    5,   79,   10,   79,   79,   79,

       17,   79,   79,   79,   21,   79,   79,   79,   26,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       58,   79,   79,   79,   79,   79,   79,   18,   19,   20,
       22,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   14,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   24,   79,
       79,   31,   32,   33,   79,   79,   79,   79,   44,   48,
       79,   79,   79,   79,   79,   79,   23,   29,   36,   79,
       41,   79,   79,   79,   79,    9,   79,   16,   79,   79,

       79,   55,   79,   79,   79,   15,   79,   79,   79,    6,
        7,   13,   79,   79,   79,   12,   79,   79,   79,   35,
       37,   79,   43
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    7,    1,    8,
        9,    7,    7,    1,   10,   11,    7,   12,   12,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    7,
        7,    7,    7,    7,   16,   16,   17,   16,   16,   16,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   18,    7,    7,    7,    7,
        1,   19,    1,    7,   20,    1,   21,   22,   23,   24,

       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,    7,   43,
       44,    7,    1,   45,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
/******************************************************************************
 * Top contributors (to current version):
 *   Andrew Reynolds
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * SMT lexer
 */
#line 17 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
#include "parser/smt2/smt2_lexer.h"

// NOTE: alternatively we could lex simple_symbol as:
//  [a-zA-Z0-9~!@\$%\^&\*+=<>\.\?/_-]+
// ??
// Note that removing `%option full` allows us to support piping from stdin
// natively without relying on interactive mode (--stdin-input-per-line).
// Disabling --stdin-input-per-line may cause some use cases of cvc5 involving
// piping to hang (see issue #9257).
// Option `%option ecs` ensures we parse quoted symbols with special characters.
#line 4057 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"
#line 37 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
#define YY_USER_ACTION addColumns(yyleng);
#line 4060 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"
#line 4061 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 55 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"



#line 59 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
  bumpSpan();


#line 4201 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::ASSERT_TOK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::ASSUME_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 64 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::AS_TOK;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 65 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::ATTRIBUTE_TOK;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::BLOCK_MODEL_TOK;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::BLOCK_MODEL_VALUES_TOK;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::CHECK_SAT_ASSUMING_TOK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::CHECK_SAT_TOK;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::CHECK_SYNTH_NEXT_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::CHECK_SYNTH_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::CONSTRAINT_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_CODATATYPES_TOK;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_CODATATYPE_TOK;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_CONST_TOK;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_DATATYPES_TOK;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_DATATYPE_TOK;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_FUN_TOK;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::DECLARE_HEAP;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::DECLARE_POOL;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECLARE_SORT_TOK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::DECLARE_VAR_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DEFINE_CONST_TOK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DEFINE_FUNS_REC_TOK;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DEFINE_FUN_REC_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DEFINE_FUN_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DEFINE_SORT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::ECHO_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::EXIT_TOK;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_ABDUCT_NEXT_TOK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_ABDUCT_TOK;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_ASSERTIONS_TOK;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_ASSIGNMENT_TOK;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_DIFFICULTY_TOK;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_INFO_TOK;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_INTERPOL_NEXT_TOK;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_INTERPOL_TOK;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_LEARNED_LITERALS_TOK;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_MODEL_TOK;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_OPTION_TOK;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_PROOF_TOK;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_QE_DISJUNCT_TOK;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::GET_QE_TOK;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_UNSAT_ASSUMPTIONS_TOK;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_UNSAT_CORE_TOK;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::GET_VALUE_TOK;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::INCLUDE_TOK;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::INDEX_TOK;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::INV_CONSTRAINT_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::LET_TOK;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::LPAREN_TOK;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::MATCH_TOK;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::PAR_TOK;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::POP_TOK;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::PUSH_TOK;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::RESET_ASSERTIONS_TOK;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::RESET_TOK;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::RPAREN_TOK;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::SET_FEATURE_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::SET_INFO_TOK;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::SET_LOGIC_TOK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::SET_OPTION_TOK;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_strict ? cvc5::parser::SYMBOL : cvc5::parser::SIMPLIFY_TOK;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::SYGUS_CONSTANT_TOK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::SYGUS_VARIABLE_TOK;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::SYNTH_FUN_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return d_sygus ? cvc5::parser::SYNTH_INV_TOK : cvc5::parser::SYMBOL;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 129 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
bumpSpan();
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 130 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
addLines(yyleng); bumpSpan();
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 131 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
{
                      // increment location for each line
                      for (const char * c=yytext; *c; ++c)
                      {
                        if (*c == '\n')
                        {
                          addLines(1);
                          bumpSpan();
                        }
                      }
                      return cvc5::parser::STRING_LITERAL;
                    }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 143 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::UNTERMINATED_STRING_LITERAL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 144 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::INTEGER_LITERAL;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 145 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::DECIMAL_LITERAL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::HEX_LITERAL;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::BINARY_LITERAL;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::FIELD_LITERAL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::KEYWORD;
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 150 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
{
                  // increment location for each line
                  for (const char * c=yytext; *c; ++c)
                  {
                    if (*c == '\n')
                    {
                      addLines(1);
                      bumpSpan();
                    }
                  }
                  return cvc5::parser::QUOTED_SYMBOL;
                }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 162 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::UNTERMINATED_QUOTED_SYMBOL;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 163 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::SYMBOL;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 164 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
return cvc5::parser::EOF_TOK;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 165 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
{
            addLines(1);
            bumpSpan();
            break;
          }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 170 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
parseError("Error finding token"); break;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 171 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"
ECHO;
	YY_BREAK
#line 4693 "/home/aaa/fp-solver/cvc5/build/src/parser/smt2/smt2_lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 171 "/home/aaa/fp-solver/cvc5/src/parser/smt2/smt2_lexer.flex"


namespace cvc5 {
namespace parser {

Smt2Lexer::Smt2Lexer(bool isSygus, bool isStrict)
  : FlexLexer(),
    d_sygus(isSygus),
    d_strict(isStrict)
{
}

bool Smt2Lexer::isSygus() const { return d_sygus; }

bool Smt2Lexer::isStrict() const { return d_strict; }
  
}
}

