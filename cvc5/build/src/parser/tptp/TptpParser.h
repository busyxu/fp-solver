/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/aaa/fp-solver/cvc5/src/parser/tptp/Tptp.g
 *     -                            On : 2024-03-19 12:01:47
 *     -                for the parser : TptpParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
TptpParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pTptpParser, which is returned from a call to TptpParserNew().
 *
 * The methods in pTptpParser are  as follows:
 *
 *  - 
 cvc5::parser::tptp::myExpr
      pTptpParser->parseExpr(pTptpParser)
 *  - 
 std::unique_ptr<cvc5::parser::Command>
      pTptpParser->parseCommand(pTptpParser)
 *  - 
 void
      pTptpParser->formulaRole(pTptpParser)
 *  - 
 void
      pTptpParser->cnfFormula(pTptpParser)
 *  - 
 void
      pTptpParser->cnfDisjunction(pTptpParser)
 *  - 
 void
      pTptpParser->cnfLiteral(pTptpParser)
 *  - 
 void
      pTptpParser->atomicFormula(pTptpParser)
 *  - 
 void
      pTptpParser->thfAtomicFormula(pTptpParser)
 *  - 
 void
      pTptpParser->definedProp(pTptpParser)
 *  - 
 void
      pTptpParser->definedPred(pTptpParser)
 *  - 
 void
      pTptpParser->thfDefinedPred(pTptpParser)
 *  - 
 void
      pTptpParser->definedFun(pTptpParser)
 *  - 
 void
      pTptpParser->equalOp(pTptpParser)
 *  - 
 void
      pTptpParser->term(pTptpParser)
 *  - 
 void
      pTptpParser->letTerm(pTptpParser)
 *  - 
 void
      pTptpParser->simpleTerm(pTptpParser)
 *  - 
 void
      pTptpParser->thfSimpleTerm(pTptpParser)
 *  - 
 void
      pTptpParser->functionTerm(pTptpParser)
 *  - 
 void
      pTptpParser->conditionalTerm(pTptpParser)
 *  - 
 void
      pTptpParser->plainTerm(pTptpParser)
 *  - 
 void
      pTptpParser->arguments(pTptpParser)
 *  - 
 void
      pTptpParser->variable(pTptpParser)
 *  - 
 void
      pTptpParser->fofFormula(pTptpParser)
 *  - 
 void
      pTptpParser->fofLogicFormula(pTptpParser)
 *  - 
 void
      pTptpParser->fofUnitaryFormula(pTptpParser)
 *  - 
 void
      pTptpParser->bindvariable(pTptpParser)
 *  - 
 void
      pTptpParser->fofBinaryNonAssoc(pTptpParser)
 *  - 
 void
      pTptpParser->folQuantifier(pTptpParser)
 *  - 
 void
      pTptpParser->thfQuantifier(pTptpParser)
 *  - 
 void
      pTptpParser->thfAtomTyping(pTptpParser)
 *  - 
 void
      pTptpParser->thfLogicFormula(pTptpParser)
 *  - 
 void
      pTptpParser->thfTupleForm(pTptpParser)
 *  - 
 void
      pTptpParser->thfUnitaryFormula(pTptpParser)
 *  - 
 void
      pTptpParser->tffFormula(pTptpParser)
 *  - 
 void
      pTptpParser->tffTypedAtom(pTptpParser)
 *  - 
 void
      pTptpParser->tffLogicFormula(pTptpParser)
 *  - 
 void
      pTptpParser->tffUnitaryFormula(pTptpParser)
 *  - 
 void
      pTptpParser->tffLetTermDefn(pTptpParser)
 *  - 
 void
      pTptpParser->tffLetTermBinding(pTptpParser)
 *  - 
 void
      pTptpParser->tffLetFormulaDefn(pTptpParser)
 *  - 
 void
      pTptpParser->tffLetFormulaBinding(pTptpParser)
 *  - 
 void
      pTptpParser->thfBindVariable(pTptpParser)
 *  - 
 void
      pTptpParser->tffbindvariable(pTptpParser)
 *  - 
 void
      pTptpParser->tffVariableList(pTptpParser)
 *  - 
 void
      pTptpParser->parseThfType(pTptpParser)
 *  - 
 void
      pTptpParser->thfType(pTptpParser)
 *  - 
 void
      pTptpParser->parseType(pTptpParser)
 *  - 
 void
      pTptpParser->simpleType(pTptpParser)
 *  - 
 void
      pTptpParser->anything(pTptpParser)
 *  - 
 void
      pTptpParser->unquotedFileName(pTptpParser)
 *  - 
 void
      pTptpParser->nameN(pTptpParser)
 *  - 
 void
      pTptpParser->atomicWord(pTptpParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_TptpParser_H
#define _TptpParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include <memory>

#include "parser/api/cpp/command.h"
#include "parser/parse_op.h"
#include "parser/parser_antlr.h"
#include "parser/tptp/tptp_antlr.h"



#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct TptpParser_Ctx_struct TptpParser, * pTptpParser;



/* ****************************************************************************
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 */


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
TptpParser

 */
struct TptpParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     cvc5::parser::tptp::myExpr
     (*parseExpr)	(struct TptpParser_Ctx_struct * ctx);

     std::unique_ptr<cvc5::parser::Command>
     (*parseCommand)	(struct TptpParser_Ctx_struct * ctx);

     void
     (*formulaRole)	(struct TptpParser_Ctx_struct * ctx, cvc5::parser::TptpState::FormulaRole& role);

     void
     (*cnfFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*cnfDisjunction)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*cnfLiteral)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*atomicFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*thfAtomicFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::ParseOp& p);

     void
     (*definedProp)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*definedPred)	(struct TptpParser_Ctx_struct * ctx, cvc5::ParseOp& p);

     void
     (*thfDefinedPred)	(struct TptpParser_Ctx_struct * ctx, cvc5::ParseOp& p);

     void
     (*definedFun)	(struct TptpParser_Ctx_struct * ctx, cvc5::ParseOp& p);

     void
     (*equalOp)	(struct TptpParser_Ctx_struct * ctx, bool& equal);

     void
     (*term)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*letTerm)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*simpleTerm)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*thfSimpleTerm)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*functionTerm)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*conditionalTerm)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*plainTerm)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*arguments)	(struct TptpParser_Ctx_struct * ctx, std::vector<cvc5::Term>& args);

     void
     (*variable)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*fofFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*fofLogicFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*fofUnitaryFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*bindvariable)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*fofBinaryNonAssoc)	(struct TptpParser_Ctx_struct * ctx, cvc5::parser::tptp::NonAssoc& na);

     void
     (*folQuantifier)	(struct TptpParser_Ctx_struct * ctx, cvc5::Kind& kind);

     void
     (*thfQuantifier)	(struct TptpParser_Ctx_struct * ctx, cvc5::Kind& kind);

     void
     (*thfAtomTyping)	(struct TptpParser_Ctx_struct * ctx, std::unique_ptr<cvc5::parser::Command>& cmd);

     void
     (*thfLogicFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::ParseOp& p);

     void
     (*thfTupleForm)	(struct TptpParser_Ctx_struct * ctx, std::vector<cvc5::Term>& args);

     void
     (*thfUnitaryFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::ParseOp& p);

     void
     (*tffFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*tffTypedAtom)	(struct TptpParser_Ctx_struct * ctx, std::unique_ptr<cvc5::parser::Command>& cmd);

     void
     (*tffLogicFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*tffUnitaryFormula)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*tffLetTermDefn)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& lhs, cvc5::Term& rhs);

     void
     (*tffLetTermBinding)	(struct TptpParser_Ctx_struct * ctx, std::vector<cvc5::Term> & bvlist, cvc5::Term& lhs, cvc5::Term& rhs);

     void
     (*tffLetFormulaDefn)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& lhs, cvc5::Term& rhs);

     void
     (*tffLetFormulaBinding)	(struct TptpParser_Ctx_struct * ctx, std::vector<cvc5::Term> & bvlist, cvc5::Term& lhs, cvc5::Term& rhs);

     void
     (*thfBindVariable)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*tffbindvariable)	(struct TptpParser_Ctx_struct * ctx, cvc5::Term& expr);

     void
     (*tffVariableList)	(struct TptpParser_Ctx_struct * ctx, std::vector<cvc5::Term>& bvlist);

     void
     (*parseThfType)	(struct TptpParser_Ctx_struct * ctx, cvc5::Sort& type);

     void
     (*thfType)	(struct TptpParser_Ctx_struct * ctx, cvc5::Sort& type);

     void
     (*parseType)	(struct TptpParser_Ctx_struct * ctx, cvc5::Sort & type);

     void
     (*simpleType)	(struct TptpParser_Ctx_struct * ctx, cvc5::Sort& type);

     void
     (*anything)	(struct TptpParser_Ctx_struct * ctx);

     void
     (*unquotedFileName)	(struct TptpParser_Ctx_struct * ctx, std::string& name);

     void
     (*nameN)	(struct TptpParser_Ctx_struct * ctx, std::string& name);

     void
     (*atomicWord)	(struct TptpParser_Ctx_struct * ctx, std::string& name);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct TptpParser_Ctx_struct * ctx);
    void	    (*free)   (struct TptpParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pTptpParser TptpParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pTptpParser TptpParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define ALPHA_NUMERIC      4
#define AND_TOK      5
#define APP_TOK      6
#define ARROW_TOK      7
#define CHOICE_TOK      8
#define CNF_TOK      9
#define COLON_TOK      10
#define COMMA_TOK      11
#define COMMENT      12
#define DECIMAL      13
#define DEFINED_SYMBOL      14
#define DEF_DESC_TOK      15
#define DISEQUAL_TOK      16
#define DISTINCT_OBJECT      17
#define DOT      18
#define DOT_TOK      19
#define DO_CHAR      20
#define EQUAL_TOK      21
#define EXISTS_TOK      22
#define EXPONENT      23
#define FALSE_TOK      24
#define FOF_TOK      25
#define FORALL_TOK      26
#define IFF_TOK      27
#define IMPLIES_TOK      28
#define INCLUDE_TOK      29
#define LAMBDA_TOK      30
#define LBRACK_TOK      31
#define LOWER_ALPHA      32
#define LOWER_WORD      33
#define LOWER_WORD_SINGLE_QUOTED      34
#define LPAREN_TOK      35
#define MINUS_TOK      36
#define NOT_TOK      37
#define NUMBER      38
#define NUMERIC      39
#define OR_TOK      40
#define PLUS_TOK      41
#define RBRACK_TOK      42
#define REVAND_TOK      43
#define REVIFF_TOK      44
#define REVIMPLIES_TOK      45
#define REVOR_TOK      46
#define RPAREN_TOK      47
#define SIGN      48
#define SINGLE_QUOTED      49
#define SLASH      50
#define SQ_CHAR      51
#define SUBTYPE_TOK      52
#define TFF_TOK      53
#define TH1_UN_A      54
#define TH1_UN_E      55
#define THF_TOK      56
#define TIMES_TOK      57
#define TRUE_TOK      58
#define TYPE_TOK      59
#define UPPER_ALPHA      60
#define UPPER_WORD      61
#define WHITESPACE      62
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for TptpParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
