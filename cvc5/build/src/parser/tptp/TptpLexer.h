/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/aaa/fp-solver/cvc5/src/parser/tptp/Tptp.g
 *     -                            On : 2024-03-19 12:01:47
 *     -                 for the lexer : TptpLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
TptpLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pTptpLexer, which is returned from a call to TptpLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pTptpLexer are  as follows:
 *
 *  - 
 void
      pTptpLexer->T__63(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__64(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__65(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__66(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__67(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__68(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__69(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__70(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__71(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__72(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__73(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__74(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__75(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__76(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__77(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__78(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__79(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__80(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__81(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__82(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__83(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__84(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__85(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__86(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__87(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__88(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__89(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__90(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__91(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__92(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__93(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__94(pTptpLexer)
 *  - 
 void
      pTptpLexer->T__95(pTptpLexer)
 *  - 
 void
      pTptpLexer->COMMA_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->DOT_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->LPAREN_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->RPAREN_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->LBRACK_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->RBRACK_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->COLON_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->ARROW_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->SUBTYPE_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->OR_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->NOT_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->FORALL_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->EXISTS_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->LAMBDA_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->CHOICE_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->DEF_DESC_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->AND_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->IFF_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->IMPLIES_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->REVIMPLIES_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->REVIFF_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->REVOR_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->REVAND_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->TIMES_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->PLUS_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->MINUS_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->APP_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->TH1_UN_A(pTptpLexer)
 *  - 
 void
      pTptpLexer->TH1_UN_E(pTptpLexer)
 *  - 
 void
      pTptpLexer->TRUE_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->FALSE_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->EQUAL_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->DISEQUAL_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->CNF_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->FOF_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->THF_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->TFF_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->TYPE_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->INCLUDE_TOK(pTptpLexer)
 *  - 
 void
      pTptpLexer->DEFINED_SYMBOL(pTptpLexer)
 *  - 
 void
      pTptpLexer->WHITESPACE(pTptpLexer)
 *  - 
 void
      pTptpLexer->DISTINCT_OBJECT(pTptpLexer)
 *  - 
 void
      pTptpLexer->DO_CHAR(pTptpLexer)
 *  - 
 void
      pTptpLexer->LOWER_WORD_SINGLE_QUOTED(pTptpLexer)
 *  - 
 void
      pTptpLexer->SINGLE_QUOTED(pTptpLexer)
 *  - 
 void
      pTptpLexer->SQ_CHAR(pTptpLexer)
 *  - 
 void
      pTptpLexer->NUMERIC(pTptpLexer)
 *  - 
 void
      pTptpLexer->LOWER_ALPHA(pTptpLexer)
 *  - 
 void
      pTptpLexer->UPPER_ALPHA(pTptpLexer)
 *  - 
 void
      pTptpLexer->ALPHA_NUMERIC(pTptpLexer)
 *  - 
 void
      pTptpLexer->UPPER_WORD(pTptpLexer)
 *  - 
 void
      pTptpLexer->LOWER_WORD(pTptpLexer)
 *  - 
 void
      pTptpLexer->DOT(pTptpLexer)
 *  - 
 void
      pTptpLexer->EXPONENT(pTptpLexer)
 *  - 
 void
      pTptpLexer->SLASH(pTptpLexer)
 *  - 
 void
      pTptpLexer->DECIMAL(pTptpLexer)
 *  - 
 void
      pTptpLexer->SIGN(pTptpLexer)
 *  - 
 void
      pTptpLexer->NUMBER(pTptpLexer)
 *  - 
 void
      pTptpLexer->COMMENT(pTptpLexer)
 *  - 
 void
      pTptpLexer->Tokens(pTptpLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_TptpLexer_H
#define _TptpLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


/** This suppresses warnings about the redefinition of token symbols between
  * different parsers. The redefinitions should be harmless as long as no
  * client: (a) #include's the lexer headers for two grammars AND (b) uses the
  * token symbol definitions.
  */
#pragma GCC system_header

/* This improves performance by ~10 percent on big inputs.
 * This option is only valid if we know the input is ASCII (or some 8-bit encoding).
 * If we know the input is UTF-16, we can use ANTLR3_INLINE_INPUT_UTF16.
 * Otherwise, we have to let the lexer detect the encoding at runtime.
 */
#define ANTLR3_INLINE_INPUT_ASCII



#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct TptpLexer_Ctx_struct TptpLexer, * pTptpLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
TptpLexer

 */
struct TptpLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__63)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mCOMMA_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDOT_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mLPAREN_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mRPAREN_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mLBRACK_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mRBRACK_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mCOLON_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mARROW_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mSUBTYPE_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mOR_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mNOT_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mFORALL_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mEXISTS_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mLAMBDA_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mCHOICE_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDEF_DESC_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mAND_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mIFF_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mIMPLIES_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mREVIMPLIES_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mREVIFF_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mREVOR_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mREVAND_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTIMES_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mPLUS_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mMINUS_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mAPP_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTH1_UN_A)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTH1_UN_E)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTRUE_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mFALSE_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mEQUAL_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDISEQUAL_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mCNF_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mFOF_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTHF_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTFF_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTYPE_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mINCLUDE_TOK)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDEFINED_SYMBOL)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDISTINCT_OBJECT)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDO_CHAR)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mLOWER_WORD_SINGLE_QUOTED)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mSINGLE_QUOTED)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mSQ_CHAR)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mNUMERIC)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mLOWER_ALPHA)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mUPPER_ALPHA)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mALPHA_NUMERIC)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mUPPER_WORD)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mLOWER_WORD)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mSLASH)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mDECIMAL)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mSIGN)	(struct TptpLexer_Ctx_struct * ctx, bool& pos);

     void
     (*mNUMBER)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct TptpLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct TptpLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct TptpLexer_Ctx_struct * ctx);
    void	    (*free)   (struct TptpLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pTptpLexer TptpLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pTptpLexer TptpLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define ALPHA_NUMERIC      4
#define AND_TOK      5
#define APP_TOK      6
#define ARROW_TOK      7
#define CHOICE_TOK      8
#define CNF_TOK      9
#define COLON_TOK      10
#define COMMA_TOK      11
#define COMMENT      12
#define DECIMAL      13
#define DEFINED_SYMBOL      14
#define DEF_DESC_TOK      15
#define DISEQUAL_TOK      16
#define DISTINCT_OBJECT      17
#define DOT      18
#define DOT_TOK      19
#define DO_CHAR      20
#define EQUAL_TOK      21
#define EXISTS_TOK      22
#define EXPONENT      23
#define FALSE_TOK      24
#define FOF_TOK      25
#define FORALL_TOK      26
#define IFF_TOK      27
#define IMPLIES_TOK      28
#define INCLUDE_TOK      29
#define LAMBDA_TOK      30
#define LBRACK_TOK      31
#define LOWER_ALPHA      32
#define LOWER_WORD      33
#define LOWER_WORD_SINGLE_QUOTED      34
#define LPAREN_TOK      35
#define MINUS_TOK      36
#define NOT_TOK      37
#define NUMBER      38
#define NUMERIC      39
#define OR_TOK      40
#define PLUS_TOK      41
#define RBRACK_TOK      42
#define REVAND_TOK      43
#define REVIFF_TOK      44
#define REVIMPLIES_TOK      45
#define REVOR_TOK      46
#define RPAREN_TOK      47
#define SIGN      48
#define SINGLE_QUOTED      49
#define SLASH      50
#define SQ_CHAR      51
#define SUBTYPE_TOK      52
#define TFF_TOK      53
#define TH1_UN_A      54
#define TH1_UN_E      55
#define THF_TOK      56
#define TIMES_TOK      57
#define TRUE_TOK      58
#define TYPE_TOK      59
#define UPPER_ALPHA      60
#define UPPER_WORD      61
#define WHITESPACE      62
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for TptpLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
