/******************************************************************************
 * Top contributors (to current version):
 *   Gereon Kremer
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * Option template for option modules.
 *
 * For each <module>_options.toml configuration file, mkoptions.py
 * expands this template and generates a <module>_options.cpp file.
 */
#include "options/base_options.h"

#include <iostream>

#include "base/check.h"
#include "options/option_exception.h"

namespace cvc5::internal::options {

// clang-format off
std::ostream& operator<<(std::ostream& os, OutputTag mode)
{
  switch(mode)
  {
    case OutputTag::NONE: return os << "none";
    case OutputTag::INST: return os << "inst";
    case OutputTag::SYGUS: return os << "sygus";
    case OutputTag::SYGUS_GRAMMAR: return os << "sygus-grammar";
    case OutputTag::SYGUS_SOL_GTERM: return os << "sygus-sol-gterm";
    case OutputTag::TRIGGER: return os << "trigger";
    case OutputTag::RAW_BENCHMARK: return os << "raw-benchmark";
    case OutputTag::LEARNED_LITS: return os << "learned-lits";
    case OutputTag::SUBS: return os << "subs";
    case OutputTag::POST_ASSERTS: return os << "post-asserts";
    case OutputTag::PRE_ASSERTS: return os << "pre-asserts";
    case OutputTag::DEEP_RESTART: return os << "deep-restart";
    case OutputTag::INCOMPLETE: return os << "incomplete";
    case OutputTag::LEMMAS: return os << "lemmas";
    case OutputTag::TRUSTED_PROOF_STEPS: return os << "trusted-proof-steps";
    default: Unreachable();
  }
  return os;
}
OutputTag stringToOutputTag(const std::string& optarg)
{
  if (optarg == "none") return OutputTag::NONE;
  else if (optarg == "inst") return OutputTag::INST;
  else if (optarg == "sygus") return OutputTag::SYGUS;
  else if (optarg == "sygus-grammar") return OutputTag::SYGUS_GRAMMAR;
  else if (optarg == "sygus-sol-gterm") return OutputTag::SYGUS_SOL_GTERM;
  else if (optarg == "trigger") return OutputTag::TRIGGER;
  else if (optarg == "raw-benchmark") return OutputTag::RAW_BENCHMARK;
  else if (optarg == "learned-lits") return OutputTag::LEARNED_LITS;
  else if (optarg == "subs") return OutputTag::SUBS;
  else if (optarg == "post-asserts") return OutputTag::POST_ASSERTS;
  else if (optarg == "pre-asserts") return OutputTag::PRE_ASSERTS;
  else if (optarg == "deep-restart") return OutputTag::DEEP_RESTART;
  else if (optarg == "incomplete") return OutputTag::INCOMPLETE;
  else if (optarg == "lemmas") return OutputTag::LEMMAS;
  else if (optarg == "trusted-proof-steps") return OutputTag::TRUSTED_PROOF_STEPS;
  else if (optarg == "help")
  {
    std::cerr << R"FOOBAR(
  Output tags.
Available tags for --output are:
+ inst
  print instantiations during solving
+ sygus
  print enumerated terms and candidates generated by the sygus solver
+ sygus-grammar
  print grammars automatically generated by the sygus solver
+ sygus-sol-gterm
  print annotations for terms in sygus solutions that indicate the grammar used
  to generate them
+ trigger
  print selected triggers for quantified formulas
+ raw-benchmark
  print the benchmark back on the output verbatim as it is processed
+ learned-lits
  print input literals that hold globally
+ subs
  print top-level substitutions learned during preprocessing
+ post-asserts
  print a benchmark corresponding to the assertions of the input problem after
  preprocessing
+ pre-asserts
  print a benchmark corresponding to the assertions of the input problem before
  preprocessing
+ deep-restart
  print when cvc5 performs a deep restart along with the literals it has learned
+ incomplete
  print reason why cvc5 answers unknown for any given check-sat query
+ lemmas
  print lemmas as they are added to the SAT solver
+ trusted-proof-steps
  print formulas corresponding to trusted proof steps in final proofs
)FOOBAR";
    std::exit(1);
  }
  throw OptionException(std::string("unknown option for --output: `") +
                        optarg + "'.  Try --output=help.");
}
// clang-format on

}  // namespace cvc5::internal::options
