/******************************************************************************
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2010-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * This header file automatically generated by:
 *
 *     ../../../src/theory/mktheorytraits /home/aaa/fp-solver/cvc5/src/theory/theory_traits_template.h /home/aaa/fp-solver/cvc5/src/theory/builtin/kinds /home/aaa/fp-solver/cvc5/src/theory/booleans/kinds /home/aaa/fp-solver/cvc5/src/theory/uf/kinds /home/aaa/fp-solver/cvc5/src/theory/arith/kinds /home/aaa/fp-solver/cvc5/src/theory/bv/kinds /home/aaa/fp-solver/cvc5/src/theory/ff/kinds /home/aaa/fp-solver/cvc5/src/theory/fp/kinds /home/aaa/fp-solver/cvc5/src/theory/arrays/kinds /home/aaa/fp-solver/cvc5/src/theory/datatypes/kinds /home/aaa/fp-solver/cvc5/src/theory/sep/kinds /home/aaa/fp-solver/cvc5/src/theory/sets/kinds /home/aaa/fp-solver/cvc5/src/theory/bags/kinds /home/aaa/fp-solver/cvc5/src/theory/strings/kinds /home/aaa/fp-solver/cvc5/src/theory/quantifiers/kinds
 *
 * for the cvc5 project.
 */

/******************************************************************************
 * Top contributors (to current version):
 *   Aina Niemetz, Dejan Jovanovic, Morgan Deters
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * A template for the theory_traits.h header, defining various
 * (static) aspects of theories
 *
 * This file is a template for the theory_traits.h header, defining
 * various (static) aspects of theories, combined with the theory
 * kinds files to produce the final header.
 */

#include "cvc5_private.h"

#pragma once

#include "options/theory_options.h"
#include "theory/theory.h"

// clang-format off
#include "theory/builtin/theory_builtin.h"
#include "theory/builtin/theory_builtin_rewriter.h"
#include "theory/booleans/theory_bool.h"
#include "theory/booleans/theory_bool_rewriter.h"
#include "theory/uf/theory_uf.h"
#include "theory/uf/theory_uf_rewriter.h"
#include "theory/arith/theory_arith.h"
#include "theory/arith/arith_rewriter.h"
#include "theory/bv/theory_bv.h"
#include "theory/bv/theory_bv_rewriter.h"
#include "theory/ff/theory_ff.h"
#include "theory/ff/theory_ff_rewriter.h"
#include "theory/fp/theory_fp.h"
#include "theory/fp/theory_fp_rewriter.h"
#include "theory/arrays/theory_arrays.h"
#include "theory/arrays/theory_arrays_rewriter.h"
#include "theory/datatypes/theory_datatypes.h"
#include "theory/datatypes/datatypes_rewriter.h"
#include "theory/sep/theory_sep.h"
#include "theory/sep/theory_sep_rewriter.h"
#include "theory/sets/theory_sets.h"
#include "theory/sets/theory_sets_rewriter.h"
#include "theory/bags/theory_bags.h"
#include "theory/bags/bags_rewriter.h"
#include "theory/strings/theory_strings.h"
#include "theory/strings/sequences_rewriter.h"
#include "theory/quantifiers/theory_quantifiers.h"
#include "theory/quantifiers/quantifiers_rewriter.h"

// clang-format on

namespace cvc5::internal {
namespace theory {

template <TheoryId theoryId>
struct TheoryTraits;

// clang-format off

template<>
struct TheoryTraits<THEORY_BUILTIN> {
    // typedef ::cvc5::internal::theory::builtin::TheoryBuiltin theory_class;
    typedef ::cvc5::internal::theory::builtin::TheoryBuiltinRewriter rewriter_class;

    static const bool isStableInfinite = true;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = false;

    static const bool hasCheck = false;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = false;
};/* struct TheoryTraits<THEORY_BUILTIN> */

template<>
struct TheoryTraits<THEORY_BOOL> {
    // typedef ::cvc5::internal::theory::booleans::TheoryBool theory_class;
    typedef ::cvc5::internal::theory::booleans::TheoryBoolRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = true;
    static const bool isPolite = false;
    static const bool isParametric = false;

    static const bool hasCheck = false;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = false;
};/* struct TheoryTraits<THEORY_BOOL> */

template<>
struct TheoryTraits<THEORY_UF> {
    // typedef ::cvc5::internal::theory::uf::TheoryUF theory_class;
    typedef ::cvc5::internal::theory::uf::TheoryUfRewriter rewriter_class;

    static const bool isStableInfinite = true;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = true;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_UF> */

template<>
struct TheoryTraits<THEORY_ARITH> {
    // typedef ::cvc5::internal::theory::arith::TheoryArith theory_class;
    typedef ::cvc5::internal::theory::arith::ArithRewriter rewriter_class;

    static const bool isStableInfinite = true;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = false;

    static const bool hasCheck = true;
    static const bool hasPropagate = true;
    static const bool hasPpStaticLearn = true;
    static const bool hasNotifyRestart = true;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_ARITH> */

template<>
struct TheoryTraits<THEORY_BV> {
    // typedef ::cvc5::internal::theory::bv::TheoryBV theory_class;
    typedef ::cvc5::internal::theory::bv::TheoryBVRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = true;
    static const bool isPolite = false;
    static const bool isParametric = false;

    static const bool hasCheck = true;
    static const bool hasPropagate = true;
    static const bool hasPpStaticLearn = true;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_BV> */

template<>
struct TheoryTraits<THEORY_FF> {
    // typedef ::cvc5::internal::theory::ff::TheoryFiniteFields theory_class;
    typedef ::cvc5::internal::theory::ff::TheoryFiniteFieldsRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = false;
};/* struct TheoryTraits<THEORY_FF> */

template<>
struct TheoryTraits<THEORY_FP> {
    // typedef ::cvc5::internal::theory::fp::TheoryFp theory_class;
    typedef ::cvc5::internal::theory::fp::TheoryFpRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = false;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = false;
};/* struct TheoryTraits<THEORY_FP> */

template<>
struct TheoryTraits<THEORY_ARRAYS> {
    // typedef ::cvc5::internal::theory::arrays::TheoryArrays theory_class;
    typedef ::cvc5::internal::theory::arrays::TheoryArraysRewriter rewriter_class;

    static const bool isStableInfinite = true;
    static const bool isFinite = false;
    static const bool isPolite = true;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_ARRAYS> */

template<>
struct TheoryTraits<THEORY_DATATYPES> {
    // typedef ::cvc5::internal::theory::datatypes::TheoryDatatypes theory_class;
    typedef ::cvc5::internal::theory::datatypes::DatatypesRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = false;
};/* struct TheoryTraits<THEORY_DATATYPES> */

template<>
struct TheoryTraits<THEORY_SEP> {
    // typedef ::cvc5::internal::theory::sep::TheorySep theory_class;
    typedef ::cvc5::internal::theory::sep::TheorySepRewriter rewriter_class;

    static const bool isStableInfinite = true;
    static const bool isFinite = false;
    static const bool isPolite = true;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_SEP> */

template<>
struct TheoryTraits<THEORY_SETS> {
    // typedef ::cvc5::internal::theory::sets::TheorySets theory_class;
    typedef ::cvc5::internal::theory::sets::TheorySetsRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_SETS> */

template<>
struct TheoryTraits<THEORY_BAGS> {
    // typedef ::cvc5::internal::theory::bags::TheoryBags theory_class;
    typedef ::cvc5::internal::theory::bags::BagsRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_BAGS> */

template<>
struct TheoryTraits<THEORY_STRINGS> {
    // typedef ::cvc5::internal::theory::strings::TheoryStrings theory_class;
    typedef ::cvc5::internal::theory::strings::SequencesRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = true;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_STRINGS> */

template<>
struct TheoryTraits<THEORY_QUANTIFIERS> {
    // typedef ::cvc5::internal::theory::quantifiers::TheoryQuantifiers theory_class;
    typedef ::cvc5::internal::theory::quantifiers::QuantifiersRewriter rewriter_class;

    static const bool isStableInfinite = false;
    static const bool isFinite = false;
    static const bool isPolite = false;
    static const bool isParametric = false;

    static const bool hasCheck = true;
    static const bool hasPropagate = false;
    static const bool hasPpStaticLearn = false;
    static const bool hasNotifyRestart = false;
    static const bool hasPresolve = true;
};/* struct TheoryTraits<THEORY_QUANTIFIERS> */

// clang-format on

struct TheoryConstructor
{
  static void addTheory(TheoryEngine* engine, TheoryId id)
  {
    switch (id)
    {
      // clang-format off

    case THEORY_BUILTIN:

      engine->addTheory< ::cvc5::internal::theory::builtin::TheoryBuiltin >(THEORY_BUILTIN);
      return;

    case THEORY_BOOL:

      engine->addTheory< ::cvc5::internal::theory::booleans::TheoryBool >(THEORY_BOOL);
      return;

    case THEORY_UF:

      engine->addTheory< ::cvc5::internal::theory::uf::TheoryUF >(THEORY_UF);
      return;

    case THEORY_ARITH:

      engine->addTheory< ::cvc5::internal::theory::arith::TheoryArith >(THEORY_ARITH);
      return;

    case THEORY_BV:

      engine->addTheory< ::cvc5::internal::theory::bv::TheoryBV >(THEORY_BV);
      return;

    case THEORY_FF:

      engine->addTheory< ::cvc5::internal::theory::ff::TheoryFiniteFields >(THEORY_FF);
      return;

    case THEORY_FP:

      engine->addTheory< ::cvc5::internal::theory::fp::TheoryFp >(THEORY_FP);
      return;

    case THEORY_ARRAYS:

      engine->addTheory< ::cvc5::internal::theory::arrays::TheoryArrays >(THEORY_ARRAYS);
      return;

    case THEORY_DATATYPES:

      engine->addTheory< ::cvc5::internal::theory::datatypes::TheoryDatatypes >(THEORY_DATATYPES);
      return;

    case THEORY_SEP:

      engine->addTheory< ::cvc5::internal::theory::sep::TheorySep >(THEORY_SEP);
      return;

    case THEORY_SETS:

      engine->addTheory< ::cvc5::internal::theory::sets::TheorySets >(THEORY_SETS);
      return;

    case THEORY_BAGS:

      engine->addTheory< ::cvc5::internal::theory::bags::TheoryBags >(THEORY_BAGS);
      return;

    case THEORY_STRINGS:

      engine->addTheory< ::cvc5::internal::theory::strings::TheoryStrings >(THEORY_STRINGS);
      return;

    case THEORY_QUANTIFIERS:

      engine->addTheory< ::cvc5::internal::theory::quantifiers::TheoryQuantifiers >(THEORY_QUANTIFIERS);
      return;

        // clang-format on

      default: Unhandled() << id;
    }
  }
}; /* struct cvc5::internal::theory::TheoryConstructor */

}  // namespace theory
}  // namespace cvc5::internal
