/******************************************************************************
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2010-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * This header file automatically generated by:
 *
 *     ../../../src/theory/mktheorytraits /home/aaa/fp-solver/cvc5/src/theory/type_enumerator_template.cpp /home/aaa/fp-solver/cvc5/src/theory/builtin/kinds /home/aaa/fp-solver/cvc5/src/theory/booleans/kinds /home/aaa/fp-solver/cvc5/src/theory/uf/kinds /home/aaa/fp-solver/cvc5/src/theory/arith/kinds /home/aaa/fp-solver/cvc5/src/theory/bv/kinds /home/aaa/fp-solver/cvc5/src/theory/ff/kinds /home/aaa/fp-solver/cvc5/src/theory/fp/kinds /home/aaa/fp-solver/cvc5/src/theory/arrays/kinds /home/aaa/fp-solver/cvc5/src/theory/datatypes/kinds /home/aaa/fp-solver/cvc5/src/theory/sep/kinds /home/aaa/fp-solver/cvc5/src/theory/sets/kinds /home/aaa/fp-solver/cvc5/src/theory/bags/kinds /home/aaa/fp-solver/cvc5/src/theory/strings/kinds /home/aaa/fp-solver/cvc5/src/theory/quantifiers/kinds
 *
 * for the cvc5 project.
 */

/******************************************************************************
 * Top contributors (to current version):
 *   Morgan Deters, Aina Niemetz, Mathias Preiner
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * Enumerators for types.
 */

#include <sstream>

#include "base/check.h"
#include "expr/kind.h"
#include "theory/type_enumerator.h"

// clang-format off

#include "theory/builtin/type_enumerator.h"
#include "theory/builtin/type_enumerator.h"
#include "theory/booleans/type_enumerator.h"
#include "theory/uf/type_enumerator.h"
#include "theory/arith/type_enumerator.h"
#include "theory/arith/type_enumerator.h"
#include "theory/bv/type_enumerator.h"
#include "theory/ff/type_enumerator.h"
#include "theory/fp/type_enumerator.h"
#include "theory/fp/type_enumerator.h"
#include "theory/arrays/type_enumerator.h"
#include "theory/datatypes/type_enumerator.h"
#include "theory/datatypes/type_enumerator.h"
#include "expr/dtype.h"
#include "theory/sets/theory_sets_type_enumerator.h"
#include "theory/bags/theory_bags_type_enumerator.h"
#include "theory/strings/type_enumerator.h"
#include "theory/strings/regexp_enumerator.h"
#include "theory/strings/type_enumerator.h"
// clang-format on

using namespace std;

namespace cvc5::internal {
namespace theory {

TypeEnumeratorInterface* TypeEnumerator::mkTypeEnumerator(
    TypeNode type, TypeEnumeratorProperties* tep)
{
  switch (type.getKind())
  {
    case kind::TYPE_CONSTANT:
      switch (type.getConst<TypeConstant>())
      {
        // clang-format off
        
    case BOOLEAN_TYPE:
      return new ::cvc5::internal::theory::booleans::BooleanEnumerator(type, tep);

    case REAL_TYPE:
      return new ::cvc5::internal::theory::arith::RationalEnumerator(type, tep);

    case INTEGER_TYPE:
      return new ::cvc5::internal::theory::arith::IntegerEnumerator(type, tep);

    case ROUNDINGMODE_TYPE:
      return new ::cvc5::internal::theory::fp::RoundingModeEnumerator(type, tep);

    case STRING_TYPE:
      return new ::cvc5::internal::theory::strings::StringEnumerator(type, tep);

    case REGEXP_TYPE:
      return new ::cvc5::internal::theory::strings::RegExpEnumerator(type, tep);

          // clang-format on
        default: Unhandled() << "No type enumerator for type `" << type << "'";
      }
      Unreachable();
      // clang-format off
      
  case kind::SORT_TYPE:
    return new ::cvc5::internal::theory::builtin::UninterpretedSortEnumerator(type, tep);

  case kind::INSTANTIATED_SORT_TYPE:
    return new ::cvc5::internal::theory::builtin::UninterpretedSortEnumerator(type, tep);

  case kind::FUNCTION_TYPE:
    return new ::cvc5::internal::theory::uf::FunctionEnumerator(type, tep);

  case kind::BITVECTOR_TYPE:
    return new ::cvc5::internal::theory::bv::BitVectorEnumerator(type, tep);

  case kind::FINITE_FIELD_TYPE:
    return new ::cvc5::internal::theory::ff::FiniteFieldEnumerator(type, tep);

  case kind::FLOATINGPOINT_TYPE:
    return new ::cvc5::internal::theory::fp::FloatingPointEnumerator(type, tep);

  case kind::ARRAY_TYPE:
    return new ::cvc5::internal::theory::arrays::ArrayEnumerator(type, tep);

  case kind::DATATYPE_TYPE:
    return new ::cvc5::internal::theory::datatypes::DatatypesEnumerator(type, tep);

  case kind::PARAMETRIC_DATATYPE:
    return new ::cvc5::internal::theory::datatypes::DatatypesEnumerator(type, tep);

  case kind::TUPLE_TYPE:
    return new ::cvc5::internal::theory::datatypes::DatatypesEnumerator(type, tep);

  case kind::SET_TYPE:
    return new ::cvc5::internal::theory::sets::SetEnumerator(type, tep);

  case kind::BAG_TYPE:
    return new ::cvc5::internal::theory::bags::BagEnumerator(type, tep);

  case kind::SEQUENCE_TYPE:
    return new ::cvc5::internal::theory::strings::SequenceEnumerator(type, tep);

      // clang-format on
    default: Unhandled() << "No type enumerator for type `" << type << "'";
  }
  Unreachable();
}

}  // namespace theory
}  // namespace cvc5::internal
