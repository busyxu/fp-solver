/******************************************************************************
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2010-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * This header file automatically generated by:
 *
 *     ../../../src/theory/mkrewriter /home/aaa/fp-solver/cvc5/src/theory/rewriter_tables_template.h /home/aaa/fp-solver/cvc5/src/theory/builtin/kinds /home/aaa/fp-solver/cvc5/src/theory/booleans/kinds /home/aaa/fp-solver/cvc5/src/theory/uf/kinds /home/aaa/fp-solver/cvc5/src/theory/arith/kinds /home/aaa/fp-solver/cvc5/src/theory/bv/kinds /home/aaa/fp-solver/cvc5/src/theory/ff/kinds /home/aaa/fp-solver/cvc5/src/theory/fp/kinds /home/aaa/fp-solver/cvc5/src/theory/arrays/kinds /home/aaa/fp-solver/cvc5/src/theory/datatypes/kinds /home/aaa/fp-solver/cvc5/src/theory/sep/kinds /home/aaa/fp-solver/cvc5/src/theory/sets/kinds /home/aaa/fp-solver/cvc5/src/theory/bags/kinds /home/aaa/fp-solver/cvc5/src/theory/strings/kinds /home/aaa/fp-solver/cvc5/src/theory/quantifiers/kinds
 *
 * for the cvc5 project.
 */

/******************************************************************************
 * Top contributors (to current version):
 *   Aina Niemetz, Dejan Jovanovic, Tim King
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2022 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * Rewriter tables for various theories.
 *
 * This file contains template code for the rewriter tables that are generated
 * from the Theory kinds files.
 */

#include "cvc5_private.h"

#pragma once

#include "expr/attribute.h"
#include "expr/attribute_unique_id.h"
#include "theory/rewriter.h"
#include "theory/rewriter_attributes.h"

// clang-format off
#include "theory/builtin/theory_builtin_rewriter.h"
#include "theory/booleans/theory_bool_rewriter.h"
#include "theory/uf/theory_uf_rewriter.h"
#include "theory/arith/arith_rewriter.h"
#include "theory/bv/theory_bv_rewriter.h"
#include "theory/ff/theory_ff_rewriter.h"
#include "theory/fp/theory_fp_rewriter.h"
#include "theory/arrays/theory_arrays_rewriter.h"
#include "theory/datatypes/datatypes_rewriter.h"
#include "theory/sep/theory_sep_rewriter.h"
#include "theory/sets/theory_sets_rewriter.h"
#include "theory/bags/bags_rewriter.h"
#include "theory/strings/sequences_rewriter.h"
#include "theory/quantifiers/quantifiers_rewriter.h"

// clang-format on

namespace cvc5::internal {
namespace theory {

Node Rewriter::getPreRewriteCache(theory::TheoryId theoryId, TNode node)
{
  switch (theoryId)
  {
    // clang-format off
    case THEORY_BUILTIN: return RewriteAttibute<THEORY_BUILTIN>::getPreRewriteCache(node);
    case THEORY_BOOL: return RewriteAttibute<THEORY_BOOL>::getPreRewriteCache(node);
    case THEORY_UF: return RewriteAttibute<THEORY_UF>::getPreRewriteCache(node);
    case THEORY_ARITH: return RewriteAttibute<THEORY_ARITH>::getPreRewriteCache(node);
    case THEORY_BV: return RewriteAttibute<THEORY_BV>::getPreRewriteCache(node);
    case THEORY_FF: return RewriteAttibute<THEORY_FF>::getPreRewriteCache(node);
    case THEORY_FP: return RewriteAttibute<THEORY_FP>::getPreRewriteCache(node);
    case THEORY_ARRAYS: return RewriteAttibute<THEORY_ARRAYS>::getPreRewriteCache(node);
    case THEORY_DATATYPES: return RewriteAttibute<THEORY_DATATYPES>::getPreRewriteCache(node);
    case THEORY_SEP: return RewriteAttibute<THEORY_SEP>::getPreRewriteCache(node);
    case THEORY_SETS: return RewriteAttibute<THEORY_SETS>::getPreRewriteCache(node);
    case THEORY_BAGS: return RewriteAttibute<THEORY_BAGS>::getPreRewriteCache(node);
    case THEORY_STRINGS: return RewriteAttibute<THEORY_STRINGS>::getPreRewriteCache(node);
    case THEORY_QUANTIFIERS: return RewriteAttibute<THEORY_QUANTIFIERS>::getPreRewriteCache(node);

      // clang-format on
    default: Unreachable();
  }
}

Node Rewriter::getPostRewriteCache(theory::TheoryId theoryId, TNode node)
{
  switch (theoryId)
  {
    // clang-format off
    case THEORY_BUILTIN: return RewriteAttibute<THEORY_BUILTIN>::getPostRewriteCache(node);
    case THEORY_BOOL: return RewriteAttibute<THEORY_BOOL>::getPostRewriteCache(node);
    case THEORY_UF: return RewriteAttibute<THEORY_UF>::getPostRewriteCache(node);
    case THEORY_ARITH: return RewriteAttibute<THEORY_ARITH>::getPostRewriteCache(node);
    case THEORY_BV: return RewriteAttibute<THEORY_BV>::getPostRewriteCache(node);
    case THEORY_FF: return RewriteAttibute<THEORY_FF>::getPostRewriteCache(node);
    case THEORY_FP: return RewriteAttibute<THEORY_FP>::getPostRewriteCache(node);
    case THEORY_ARRAYS: return RewriteAttibute<THEORY_ARRAYS>::getPostRewriteCache(node);
    case THEORY_DATATYPES: return RewriteAttibute<THEORY_DATATYPES>::getPostRewriteCache(node);
    case THEORY_SEP: return RewriteAttibute<THEORY_SEP>::getPostRewriteCache(node);
    case THEORY_SETS: return RewriteAttibute<THEORY_SETS>::getPostRewriteCache(node);
    case THEORY_BAGS: return RewriteAttibute<THEORY_BAGS>::getPostRewriteCache(node);
    case THEORY_STRINGS: return RewriteAttibute<THEORY_STRINGS>::getPostRewriteCache(node);
    case THEORY_QUANTIFIERS: return RewriteAttibute<THEORY_QUANTIFIERS>::getPostRewriteCache(node);

      // clang-format on
    default: Unreachable();
  }
}

void Rewriter::setPreRewriteCache(theory::TheoryId theoryId,
                                  TNode node,
                                  TNode cache)
{
  switch (theoryId)
  {
    // clang-format off
    case THEORY_BUILTIN: return RewriteAttibute<THEORY_BUILTIN>::setPreRewriteCache(node, cache);
    case THEORY_BOOL: return RewriteAttibute<THEORY_BOOL>::setPreRewriteCache(node, cache);
    case THEORY_UF: return RewriteAttibute<THEORY_UF>::setPreRewriteCache(node, cache);
    case THEORY_ARITH: return RewriteAttibute<THEORY_ARITH>::setPreRewriteCache(node, cache);
    case THEORY_BV: return RewriteAttibute<THEORY_BV>::setPreRewriteCache(node, cache);
    case THEORY_FF: return RewriteAttibute<THEORY_FF>::setPreRewriteCache(node, cache);
    case THEORY_FP: return RewriteAttibute<THEORY_FP>::setPreRewriteCache(node, cache);
    case THEORY_ARRAYS: return RewriteAttibute<THEORY_ARRAYS>::setPreRewriteCache(node, cache);
    case THEORY_DATATYPES: return RewriteAttibute<THEORY_DATATYPES>::setPreRewriteCache(node, cache);
    case THEORY_SEP: return RewriteAttibute<THEORY_SEP>::setPreRewriteCache(node, cache);
    case THEORY_SETS: return RewriteAttibute<THEORY_SETS>::setPreRewriteCache(node, cache);
    case THEORY_BAGS: return RewriteAttibute<THEORY_BAGS>::setPreRewriteCache(node, cache);
    case THEORY_STRINGS: return RewriteAttibute<THEORY_STRINGS>::setPreRewriteCache(node, cache);
    case THEORY_QUANTIFIERS: return RewriteAttibute<THEORY_QUANTIFIERS>::setPreRewriteCache(node, cache);

      // clang-format on
    default: Unreachable();
  }
}

void Rewriter::setPostRewriteCache(theory::TheoryId theoryId,
                                   TNode node,
                                   TNode cache)
{
  switch (theoryId)
  {
    // clang-format off
    case THEORY_BUILTIN: return RewriteAttibute<THEORY_BUILTIN>::setPostRewriteCache(node, cache);
    case THEORY_BOOL: return RewriteAttibute<THEORY_BOOL>::setPostRewriteCache(node, cache);
    case THEORY_UF: return RewriteAttibute<THEORY_UF>::setPostRewriteCache(node, cache);
    case THEORY_ARITH: return RewriteAttibute<THEORY_ARITH>::setPostRewriteCache(node, cache);
    case THEORY_BV: return RewriteAttibute<THEORY_BV>::setPostRewriteCache(node, cache);
    case THEORY_FF: return RewriteAttibute<THEORY_FF>::setPostRewriteCache(node, cache);
    case THEORY_FP: return RewriteAttibute<THEORY_FP>::setPostRewriteCache(node, cache);
    case THEORY_ARRAYS: return RewriteAttibute<THEORY_ARRAYS>::setPostRewriteCache(node, cache);
    case THEORY_DATATYPES: return RewriteAttibute<THEORY_DATATYPES>::setPostRewriteCache(node, cache);
    case THEORY_SEP: return RewriteAttibute<THEORY_SEP>::setPostRewriteCache(node, cache);
    case THEORY_SETS: return RewriteAttibute<THEORY_SETS>::setPostRewriteCache(node, cache);
    case THEORY_BAGS: return RewriteAttibute<THEORY_BAGS>::setPostRewriteCache(node, cache);
    case THEORY_STRINGS: return RewriteAttibute<THEORY_STRINGS>::setPostRewriteCache(node, cache);
    case THEORY_QUANTIFIERS: return RewriteAttibute<THEORY_QUANTIFIERS>::setPostRewriteCache(node, cache);

      // clang-format on
    default: Unreachable();
  }
}

Rewriter::Rewriter() : d_resourceManager(nullptr), d_tpg(nullptr) {}

}  // namespace theory
}  // namespace cvc5::internal
