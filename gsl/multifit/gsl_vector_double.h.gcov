        -:    0:Source:../gsl/gsl_vector_double.h
        -:    0:Graph:multirobust.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/* vector/gsl_vector_double.h
        -:    2: * 
        -:    3: * Copyright (C) 1996, 1997, 1998, 1999, 2000, 2007 Gerard Jungman, Brian Gough
        -:    4: * 
        -:    5: * This program is free software; you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation; either version 3 of the License, or (at
        -:    8: * your option) any later version.
        -:    9: * 
        -:   10: * This program is distributed in the hope that it will be useful, but
        -:   11: * WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   13: * General Public License for more details.
        -:   14: * 
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program; if not, write to the Free Software
        -:   17: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
        -:   18: */
        -:   19:
        -:   20:#ifndef __GSL_VECTOR_DOUBLE_H__
        -:   21:#define __GSL_VECTOR_DOUBLE_H__
        -:   22:
        -:   23:#include <stdlib.h>
        -:   24:#include <gsl/gsl_types.h>
        -:   25:#include <gsl/gsl_errno.h>
        -:   26:#include <gsl/gsl_inline.h>
        -:   27:#include <gsl/gsl_check_range.h>
        -:   28:#include <gsl/gsl_block_double.h>
        -:   29:
        -:   30:#undef __BEGIN_DECLS
        -:   31:#undef __END_DECLS
        -:   32:#ifdef __cplusplus
        -:   33:# define __BEGIN_DECLS extern "C" {
        -:   34:# define __END_DECLS }
        -:   35:#else
        -:   36:# define __BEGIN_DECLS /* empty */
        -:   37:# define __END_DECLS /* empty */
        -:   38:#endif
        -:   39:
        -:   40:__BEGIN_DECLS
        -:   41:
        -:   42:typedef struct 
        -:   43:{
        -:   44:  size_t size;
        -:   45:  size_t stride;
        -:   46:  double *data;
        -:   47:  gsl_block *block;
        -:   48:  int owner;
        -:   49:} 
        -:   50:gsl_vector;
        -:   51:
        -:   52:typedef struct
        -:   53:{
        -:   54:  gsl_vector vector;
        -:   55:} _gsl_vector_view;
        -:   56:
        -:   57:typedef _gsl_vector_view gsl_vector_view;
        -:   58:
        -:   59:typedef struct
        -:   60:{
        -:   61:  gsl_vector vector;
        -:   62:} _gsl_vector_const_view;
        -:   63:
        -:   64:typedef const _gsl_vector_const_view gsl_vector_const_view;
        -:   65:
        -:   66:
        -:   67:/* Allocation */
        -:   68:
        -:   69:gsl_vector *gsl_vector_alloc (const size_t n);
        -:   70:gsl_vector *gsl_vector_calloc (const size_t n);
        -:   71:
        -:   72:gsl_vector *gsl_vector_alloc_from_block (gsl_block * b,
        -:   73:                                                     const size_t offset, 
        -:   74:                                                     const size_t n, 
        -:   75:                                                     const size_t stride);
        -:   76:
        -:   77:gsl_vector *gsl_vector_alloc_from_vector (gsl_vector * v,
        -:   78:                                                      const size_t offset, 
        -:   79:                                                      const size_t n, 
        -:   80:                                                      const size_t stride);
        -:   81:
        -:   82:void gsl_vector_free (gsl_vector * v);
        -:   83:
        -:   84:/* Views */
        -:   85:
        -:   86:_gsl_vector_view 
        -:   87:gsl_vector_view_array (double *v, size_t n);
        -:   88:
        -:   89:_gsl_vector_view 
        -:   90:gsl_vector_view_array_with_stride (double *base,
        -:   91:                                         size_t stride,
        -:   92:                                         size_t n);
        -:   93:
        -:   94:_gsl_vector_const_view 
        -:   95:gsl_vector_const_view_array (const double *v, size_t n);
        -:   96:
        -:   97:_gsl_vector_const_view 
        -:   98:gsl_vector_const_view_array_with_stride (const double *base,
        -:   99:                                               size_t stride,
        -:  100:                                               size_t n);
        -:  101:
        -:  102:_gsl_vector_view 
        -:  103:gsl_vector_subvector (gsl_vector *v, 
        -:  104:                            size_t i, 
        -:  105:                            size_t n);
        -:  106:
        -:  107:_gsl_vector_view 
        -:  108:gsl_vector_subvector_with_stride (gsl_vector *v, 
        -:  109:                                        size_t i,
        -:  110:                                        size_t stride,
        -:  111:                                        size_t n);
        -:  112:
        -:  113:_gsl_vector_const_view 
        -:  114:gsl_vector_const_subvector (const gsl_vector *v, 
        -:  115:                                  size_t i, 
        -:  116:                                  size_t n);
        -:  117:
        -:  118:_gsl_vector_const_view 
        -:  119:gsl_vector_const_subvector_with_stride (const gsl_vector *v, 
        -:  120:                                              size_t i, 
        -:  121:                                              size_t stride,
        -:  122:                                              size_t n);
        -:  123:
        -:  124:/* Operations */
        -:  125:
        -:  126:void gsl_vector_set_zero (gsl_vector * v);
        -:  127:void gsl_vector_set_all (gsl_vector * v, double x);
        -:  128:int gsl_vector_set_basis (gsl_vector * v, size_t i);
        -:  129:
        -:  130:int gsl_vector_fread (FILE * stream, gsl_vector * v);
        -:  131:int gsl_vector_fwrite (FILE * stream, const gsl_vector * v);
        -:  132:int gsl_vector_fscanf (FILE * stream, gsl_vector * v);
        -:  133:int gsl_vector_fprintf (FILE * stream, const gsl_vector * v,
        -:  134:                              const char *format);
        -:  135:
        -:  136:int gsl_vector_memcpy (gsl_vector * dest, const gsl_vector * src);
        -:  137:
        -:  138:int gsl_vector_reverse (gsl_vector * v);
        -:  139:
        -:  140:int gsl_vector_swap (gsl_vector * v, gsl_vector * w);
        -:  141:int gsl_vector_swap_elements (gsl_vector * v, const size_t i, const size_t j);
        -:  142:
        -:  143:double gsl_vector_max (const gsl_vector * v);
        -:  144:double gsl_vector_min (const gsl_vector * v);
        -:  145:void gsl_vector_minmax (const gsl_vector * v, double * min_out, double * max_out);
        -:  146:
        -:  147:size_t gsl_vector_max_index (const gsl_vector * v);
        -:  148:size_t gsl_vector_min_index (const gsl_vector * v);
        -:  149:void gsl_vector_minmax_index (const gsl_vector * v, size_t * imin, size_t * imax);
        -:  150:
        -:  151:int gsl_vector_add (gsl_vector * a, const gsl_vector * b);
        -:  152:int gsl_vector_sub (gsl_vector * a, const gsl_vector * b);
        -:  153:int gsl_vector_mul (gsl_vector * a, const gsl_vector * b);
        -:  154:int gsl_vector_div (gsl_vector * a, const gsl_vector * b);
        -:  155:int gsl_vector_scale (gsl_vector * a, const double x);
        -:  156:int gsl_vector_add_constant (gsl_vector * a, const double x);
        -:  157:int gsl_vector_axpby (const double alpha, const gsl_vector * x, const double beta, gsl_vector * y);
        -:  158:double gsl_vector_sum (const gsl_vector * a);
        -:  159:
        -:  160:int gsl_vector_equal (const gsl_vector * u, 
        -:  161:                            const gsl_vector * v);
        -:  162:
        -:  163:int gsl_vector_isnull (const gsl_vector * v);
        -:  164:int gsl_vector_ispos (const gsl_vector * v);
        -:  165:int gsl_vector_isneg (const gsl_vector * v);
        -:  166:int gsl_vector_isnonneg (const gsl_vector * v);
        -:  167:
        -:  168:INLINE_DECL double gsl_vector_get (const gsl_vector * v, const size_t i);
        -:  169:INLINE_DECL void gsl_vector_set (gsl_vector * v, const size_t i, double x);
        -:  170:INLINE_DECL double * gsl_vector_ptr (gsl_vector * v, const size_t i);
        -:  171:INLINE_DECL const double * gsl_vector_const_ptr (const gsl_vector * v, const size_t i);
        -:  172:
        -:  173:#ifdef HAVE_INLINE
        -:  174:
        -:  175:INLINE_FUN
        -:  176:double
        -:  177:gsl_vector_get (const gsl_vector * v, const size_t i)
        -:  178:{
        -:  179:#if GSL_RANGE_CHECK
        -:  180:  if (GSL_RANGE_COND(i >= v->size))
        -:  181:    {
        -:  182:      GSL_ERROR_VAL ("index out of range", GSL_EINVAL, 0);
        -:  183:    }
        -:  184:#endif
    #####:  185:  return v->data[i * v->stride];
        -:  186:}
        -:  187:
        -:  188:INLINE_FUN
        -:  189:void
        -:  190:gsl_vector_set (gsl_vector * v, const size_t i, double x)
        -:  191:{
        -:  192:#if GSL_RANGE_CHECK
        -:  193:  if (GSL_RANGE_COND(i >= v->size))
        -:  194:    {
        -:  195:      GSL_ERROR_VOID ("index out of range", GSL_EINVAL);
        -:  196:    }
        -:  197:#endif
    #####:  198:  v->data[i * v->stride] = x;
    #####:  199:}
        -:  200:
        -:  201:INLINE_FUN
        -:  202:double *
        -:  203:gsl_vector_ptr (gsl_vector * v, const size_t i)
        -:  204:{
        -:  205:#if GSL_RANGE_CHECK
        -:  206:  if (GSL_RANGE_COND(i >= v->size))
        -:  207:    {
        -:  208:      GSL_ERROR_NULL ("index out of range", GSL_EINVAL);
        -:  209:    }
        -:  210:#endif
    #####:  211:  return (double *) (v->data + i * v->stride);
        -:  212:}
        -:  213:
        -:  214:INLINE_FUN
        -:  215:const double *
        -:  216:gsl_vector_const_ptr (const gsl_vector * v, const size_t i)
        -:  217:{
        -:  218:#if GSL_RANGE_CHECK
        -:  219:  if (GSL_RANGE_COND(i >= v->size))
        -:  220:    {
        -:  221:      GSL_ERROR_NULL ("index out of range", GSL_EINVAL);
        -:  222:    }
        -:  223:#endif
        -:  224:  return (const double *) (v->data + i * v->stride);
        -:  225:}
        -:  226:#endif /* HAVE_INLINE */
        -:  227:
        -:  228:__END_DECLS
        -:  229:
        -:  230:#endif /* __GSL_VECTOR_DOUBLE_H__ */
        -:  231:
        -:  232:
