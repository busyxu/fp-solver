KLEE: KLEE: WATCHDOG: watching 124875

KLEE: ERROR: Loading file gsl_heapsort_gsl.bc failed: No such file or directory
KLEE: KLEE: WATCHDOG: watching 124950

KLEE: output directory is "/home/aaa/bench_main/bench_sorting/sorting/gsl_heapsort_output"
KLEE: Using Z3 solver backend
KLEE: Replacing function "__isnanf" with "klee_internal_isnanf"
KLEE: Replacing function "__isnan" with "klee_internal_isnan"
KLEE: Replacing function "__isnanl" with "klee_internal_isnanl"
KLEE: Replacing function "__isinff" with "klee_internal_isinff"
KLEE: Replacing function "__isinf" with "klee_internal_isinf"
KLEE: Replacing function "__isinfl" with "klee_internal_isinfl"
KLEE: Replacing function "__fpclassifyf" with "klee_internal_fpclassifyf"
KLEE: Replacing function "__fpclassify" with "klee_internal_fpclassify"
KLEE: Replacing function "__finitef" with "klee_internal_finitef"
KLEE: Replacing function "__finite" with "klee_internal_finite"
KLEE: Replacing function "sqrt" with "klee_internal_sqrt"
KLEE: Replacing function "fabs" with "klee_internal_fabs"
KLEE: WARNING ONCE: function "gsl_ieee_set_mode" has inline asm
+++++++++++++++ state first:   %retval = alloca i32, align 4
cons size:0
KLEE: ERROR: (location information missing) Wrong size given to klee_make_symbolic
KLEE: NOTE: now ignoring this error at this location
+++++++++++++++ state end

KLEE: done: total instructions = 613
KLEE: done: completed paths = 0
KLEE: done: partially completed paths = 1
KLEE: done: generated tests = 1
KLEE: KLEE: WATCHDOG: watching 125082

KLEE: output directory is "/home/aaa/bench_main/bench_sorting/sorting/gsl_heapsort_output"
KLEE: Using Z3 solver backend
KLEE: Replacing function "__isnanf" with "klee_internal_isnanf"
KLEE: Replacing function "__isnan" with "klee_internal_isnan"
KLEE: Replacing function "__isnanl" with "klee_internal_isnanl"
KLEE: Replacing function "__isinff" with "klee_internal_isinff"
KLEE: Replacing function "__isinf" with "klee_internal_isinf"
KLEE: Replacing function "__isinfl" with "klee_internal_isinfl"
KLEE: Replacing function "__fpclassifyf" with "klee_internal_fpclassifyf"
KLEE: Replacing function "__fpclassify" with "klee_internal_fpclassify"
KLEE: Replacing function "__finitef" with "klee_internal_finitef"
KLEE: Replacing function "__finite" with "klee_internal_finite"
KLEE: Replacing function "sqrt" with "klee_internal_sqrt"
KLEE: Replacing function "fabs" with "klee_internal_fabs"
KLEE: WARNING ONCE: function "gsl_ieee_set_mode" has inline asm
+++++++++++++++ state first:   %retval = alloca i32, align 4
cons size:0
KLEE: ERROR: (location information missing) Wrong size given to klee_make_symbolic
KLEE: NOTE: now ignoring this error at this location
+++++++++++++++ state end

KLEE: done: total instructions = 613
KLEE: done: completed paths = 0
KLEE: done: partially completed paths = 1
KLEE: done: generated tests = 1
KLEE: KLEE: WATCHDOG: watching 126318

KLEE: output directory is "/home/aaa/bench_main/bench_sorting/sorting/gsl_heapsort_output"
KLEE: Using Z3 solver backend
KLEE: Replacing function "__isnanf" with "klee_internal_isnanf"
KLEE: Replacing function "__isnan" with "klee_internal_isnan"
KLEE: Replacing function "__isnanl" with "klee_internal_isnanl"
KLEE: Replacing function "__isinff" with "klee_internal_isinff"
KLEE: Replacing function "__isinf" with "klee_internal_isinf"
KLEE: Replacing function "__isinfl" with "klee_internal_isinfl"
KLEE: Replacing function "__fpclassifyf" with "klee_internal_fpclassifyf"
KLEE: Replacing function "__fpclassify" with "klee_internal_fpclassify"
KLEE: Replacing function "__finitef" with "klee_internal_finitef"
KLEE: Replacing function "__finite" with "klee_internal_finite"
KLEE: Replacing function "sqrt" with "klee_internal_sqrt"
KLEE: Replacing function "fabs" with "klee_internal_fabs"
KLEE: WARNING ONCE: function "gsl_ieee_set_mode" has inline asm
+++++++++++++++ state first:   %retval = alloca i32, align 4
cons size:0
+++++++++++++++ state end

KLEE: done: total instructions = 2020
KLEE: done: completed paths = 1
KLEE: done: partially completed paths = 0
KLEE: done: generated tests = 1
KLEE: KLEE: WATCHDOG: watching 127722

KLEE: output directory is "/home/aaa/bench_main/bench_sorting/sorting/gsl_heapsort_output"
KLEE: Using Z3 solver backend
KLEE: Replacing function "__isnanf" with "klee_internal_isnanf"
KLEE: Replacing function "__isnan" with "klee_internal_isnan"
KLEE: Replacing function "__isnanl" with "klee_internal_isnanl"
KLEE: Replacing function "__isinff" with "klee_internal_isinff"
KLEE: Replacing function "__isinf" with "klee_internal_isinf"
KLEE: Replacing function "__isinfl" with "klee_internal_isinfl"
KLEE: Replacing function "__fpclassifyf" with "klee_internal_fpclassifyf"
KLEE: Replacing function "__fpclassify" with "klee_internal_fpclassify"
KLEE: Replacing function "__finitef" with "klee_internal_finitef"
KLEE: Replacing function "__finite" with "klee_internal_finite"
KLEE: Replacing function "sqrt" with "klee_internal_sqrt"
KLEE: Replacing function "fabs" with "klee_internal_fabs"
KLEE: WARNING ONCE: function "gsl_ieee_set_mode" has inline asm
+++++++++++++++ state first:   %retval = alloca i32, align 4
cons size:0
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:1
===========call gosat solver===========
by yx ========>:
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ogt double %1, %3
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  %7 = fadd double %6, 1.000000e+00
  br label %8

; <label>:8:                                      ; preds = %5, %EntryBlock
  %9 = phi double [ %7, %5 ], [ 0.000000e+00, %EntryBlock ]
  ret double %9
}
solution : a4  type: double  val : -7.417369e+307
solution : a5  type: double  val : -7.751522e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[0,0,0,0,0,0,0,0,]
a3
[0,0,0,0,0,0,0,0,]
a4
[97,52,0,17,215,85,0,0,]
a5
[97,53,0,17,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:2
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = fadd double %8, %14
  ret double %15
}
solution : a4  type: double  val : -3.713873e+307
solution : a5  type: double  val : 7.372736e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[0,0,0,0,0,0,0,0,]
a3
[0,0,0,0,0,0,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate SUCCESS !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:3
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ogt double %15, %1
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  %19 = fadd double %18, 1.000000e+00
  br label %20

; <label>:20:                                     ; preds = %17, %12
  %21 = phi double [ %19, %17 ], [ 0.000000e+00, %12 ]
  %22 = fadd double %8, %13
  %23 = fadd double %22, %21
  ret double %23
}
solution : a2  type: double  val : -6.518961e+307
solution : a4  type: double  val : -8.988466e+307
solution : a5  type: double  val : -8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,17,215,85,0,0,]
a3
[0,0,0,0,0,0,0,0,]
a4
[97,52,0,17,215,85,0,0,]
a5
[97,53,0,17,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:4
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp olt double %15, %1
  br i1 %21, label %25, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  %24 = fadd double %23, 1.000000e+00
  br label %25

; <label>:25:                                     ; preds = %22, %19
  %26 = phi double [ %24, %22 ], [ 0.000000e+00, %19 ]
  %27 = fadd double %8, %13
  %28 = fadd double %27, %20
  %29 = fadd double %28, %26
  ret double %29
}
solution : a2  type: double  val : -8.427510e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[0,0,0,0,0,0,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:5
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ogt double %15, %27
  br i1 %28, label %32, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  %31 = fadd double %30, 1.000000e+00
  br label %32

; <label>:32:                                     ; preds = %29, %24
  %33 = phi double [ %31, %29 ], [ 0.000000e+00, %24 ]
  %34 = fadd double %8, %13
  %35 = fadd double %34, %20
  %36 = fadd double %35, %25
  %37 = fadd double %36, %33
  ret double %37
}
solution : a2  type: double  val : 8.988466e+307
solution : a3  type: double  val : 1.846291e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:6
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp olt double %15, %27
  br i1 %33, label %37, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  %36 = fadd double %35, 1.000000e+00
  br label %37

; <label>:37:                                     ; preds = %34, %31
  %38 = phi double [ %36, %34 ], [ 0.000000e+00, %31 ]
  %39 = fadd double %8, %13
  %40 = fadd double %39, %20
  %41 = fadd double %40, %25
  %42 = fadd double %41, %32
  %43 = fadd double %42, %38
  ret double %43
}
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : 1.405496e+306
solution : a4  type: double  val : -8.988466e+307
solution : a5  type: double  val : -8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:7
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ogt double %39, %15
  br i1 %40, label %44, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  %43 = fadd double %42, 1.000000e+00
  br label %44

; <label>:44:                                     ; preds = %41, %36
  %45 = phi double [ %43, %41 ], [ 0.000000e+00, %36 ]
  %46 = fadd double %8, %13
  %47 = fadd double %46, %20
  %48 = fadd double %47, %25
  %49 = fadd double %48, %32
  %50 = fadd double %49, %37
  %51 = fadd double %50, %45
  ret double %51
}
solution : a1  type: double  val : 8.988466e+307
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : -8.988466e+307
solution : a4  type: double  val : -8.988466e+307
solution : a5  type: double  val : -8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:8
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp olt double %39, %15
  br i1 %45, label %49, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  %48 = fadd double %47, 1.000000e+00
  br label %49

; <label>:49:                                     ; preds = %46, %43
  %50 = phi double [ %48, %46 ], [ 0.000000e+00, %43 ]
  %51 = fadd double %8, %13
  %52 = fadd double %51, %20
  %53 = fadd double %52, %25
  %54 = fadd double %53, %32
  %55 = fadd double %54, %37
  %56 = fadd double %55, %44
  %57 = fadd double %56, %50
  ret double %57
}
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : 8.988466e+307
solution : a3  type: double  val : 8.988466e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:9
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ogt double %51, %39
  br i1 %52, label %56, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  %55 = fadd double %54, 1.000000e+00
  br label %56

; <label>:56:                                     ; preds = %53, %48
  %57 = phi double [ %55, %53 ], [ 0.000000e+00, %48 ]
  %58 = fadd double %8, %13
  %59 = fadd double %58, %20
  %60 = fadd double %59, %25
  %61 = fadd double %60, %32
  %62 = fadd double %61, %37
  %63 = fadd double %62, %44
  %64 = fadd double %63, %49
  %65 = fadd double %64, %57
  ret double %65
}
solution : a0  type: double  val : 5.367846e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : -8.988466e+307
solution : a4  type: double  val : -8.988466e+307
solution : a5  type: double  val : -8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:10
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp olt double %51, %39
  br i1 %57, label %61, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  %60 = fadd double %59, 1.000000e+00
  br label %61

; <label>:61:                                     ; preds = %58, %55
  %62 = phi double [ %60, %58 ], [ 0.000000e+00, %55 ]
  %63 = fadd double %8, %13
  %64 = fadd double %63, %20
  %65 = fadd double %64, %25
  %66 = fadd double %65, %32
  %67 = fadd double %66, %37
  %68 = fadd double %67, %44
  %69 = fadd double %68, %49
  %70 = fadd double %69, %56
  %71 = fadd double %70, %62
  ret double %71
}
solution : a0  type: double  val : -8.988466e+307
solution : a1  type: double  val : 8.988466e+307
solution : a2  type: double  val : 8.988466e+307
solution : a3  type: double  val : 8.988466e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:11
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOGt N0:(ReadLSB w64 0 a0)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ogt double %51, %51
  br i1 %62, label %66, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  %65 = fadd double %64, 1.000000e+00
  br label %66

; <label>:66:                                     ; preds = %63, %60
  %67 = phi double [ %65, %63 ], [ 0.000000e+00, %60 ]
  %68 = fadd double %8, %13
  %69 = fadd double %68, %20
  %70 = fadd double %69, %25
  %71 = fadd double %70, %32
  %72 = fadd double %71, %37
  %73 = fadd double %72, %44
  %74 = fadd double %73, %49
  %75 = fadd double %74, %56
  %76 = fadd double %75, %61
  %77 = fadd double %76, %67
  ret double %77
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:12
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(FOLt N0:(ReadLSB w64 0 a0)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp olt double %51, %51
  br i1 %67, label %71, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  %70 = fadd double %69, 1.000000e+00
  br label %71

; <label>:71:                                     ; preds = %68, %65
  %72 = phi double [ %70, %68 ], [ 0.000000e+00, %65 ]
  %73 = fadd double %8, %13
  %74 = fadd double %73, %20
  %75 = fadd double %74, %25
  %76 = fadd double %75, %32
  %77 = fadd double %76, %37
  %78 = fadd double %77, %44
  %79 = fadd double %78, %49
  %80 = fadd double %79, %56
  %81 = fadd double %80, %61
  %82 = fadd double %81, %66
  %83 = fadd double %82, %72
  ret double %83
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:13
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ogt double %3, %39
  br i1 %72, label %76, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  %75 = fadd double %74, 1.000000e+00
  br label %76

; <label>:76:                                     ; preds = %73, %70
  %77 = phi double [ %75, %73 ], [ 0.000000e+00, %70 ]
  %78 = fadd double %8, %13
  %79 = fadd double %78, %20
  %80 = fadd double %79, %25
  %81 = fadd double %80, %32
  %82 = fadd double %81, %37
  %83 = fadd double %82, %44
  %84 = fadd double %83, %49
  %85 = fadd double %84, %56
  %86 = fadd double %85, %61
  %87 = fadd double %86, %66
  %88 = fadd double %87, %71
  %89 = fadd double %88, %77
  ret double %89
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:14
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp olt double %3, %39
  br i1 %77, label %81, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  %80 = fadd double %79, 1.000000e+00
  br label %81

; <label>:81:                                     ; preds = %78, %75
  %82 = phi double [ %80, %78 ], [ 0.000000e+00, %75 ]
  %83 = fadd double %8, %13
  %84 = fadd double %83, %20
  %85 = fadd double %84, %25
  %86 = fadd double %85, %32
  %87 = fadd double %86, %37
  %88 = fadd double %87, %44
  %89 = fadd double %88, %49
  %90 = fadd double %89, %56
  %91 = fadd double %90, %61
  %92 = fadd double %91, %66
  %93 = fadd double %92, %71
  %94 = fadd double %93, %76
  %95 = fadd double %94, %82
  ret double %95
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:15
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(FOGt N0:(ReadLSB w64 0 a5)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ogt double %3, %3
  br i1 %82, label %86, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  %85 = fadd double %84, 1.000000e+00
  br label %86

; <label>:86:                                     ; preds = %83, %80
  %87 = phi double [ %85, %83 ], [ 0.000000e+00, %80 ]
  %88 = fadd double %8, %13
  %89 = fadd double %88, %20
  %90 = fadd double %89, %25
  %91 = fadd double %90, %32
  %92 = fadd double %91, %37
  %93 = fadd double %92, %44
  %94 = fadd double %93, %49
  %95 = fadd double %94, %56
  %96 = fadd double %95, %61
  %97 = fadd double %96, %66
  %98 = fadd double %97, %71
  %99 = fadd double %98, %76
  %100 = fadd double %99, %81
  %101 = fadd double %100, %87
  ret double %101
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:16
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(FOLt N0:(ReadLSB w64 0 a5)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp olt double %3, %3
  br i1 %87, label %91, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  %90 = fadd double %89, 1.000000e+00
  br label %91

; <label>:91:                                     ; preds = %88, %85
  %92 = phi double [ %90, %88 ], [ 0.000000e+00, %85 ]
  %93 = fadd double %8, %13
  %94 = fadd double %93, %20
  %95 = fadd double %94, %25
  %96 = fadd double %95, %32
  %97 = fadd double %96, %37
  %98 = fadd double %97, %44
  %99 = fadd double %98, %49
  %100 = fadd double %99, %56
  %101 = fadd double %100, %61
  %102 = fadd double %101, %66
  %103 = fadd double %102, %71
  %104 = fadd double %103, %76
  %105 = fadd double %104, %81
  %106 = fadd double %105, %86
  %107 = fadd double %106, %92
  ret double %107
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:17
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ogt double %1, %39
  br i1 %92, label %96, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  %95 = fadd double %94, 1.000000e+00
  br label %96

; <label>:96:                                     ; preds = %93, %90
  %97 = phi double [ %95, %93 ], [ 0.000000e+00, %90 ]
  %98 = fadd double %8, %13
  %99 = fadd double %98, %20
  %100 = fadd double %99, %25
  %101 = fadd double %100, %32
  %102 = fadd double %101, %37
  %103 = fadd double %102, %44
  %104 = fadd double %103, %49
  %105 = fadd double %104, %56
  %106 = fadd double %105, %61
  %107 = fadd double %106, %66
  %108 = fadd double %107, %71
  %109 = fadd double %108, %76
  %110 = fadd double %109, %81
  %111 = fadd double %110, %86
  %112 = fadd double %111, %91
  %113 = fadd double %112, %97
  ret double %113
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:18
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp olt double %1, %39
  br i1 %97, label %101, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  %100 = fadd double %99, 1.000000e+00
  br label %101

; <label>:101:                                    ; preds = %98, %95
  %102 = phi double [ %100, %98 ], [ 0.000000e+00, %95 ]
  %103 = fadd double %8, %13
  %104 = fadd double %103, %20
  %105 = fadd double %104, %25
  %106 = fadd double %105, %32
  %107 = fadd double %106, %37
  %108 = fadd double %107, %44
  %109 = fadd double %108, %49
  %110 = fadd double %109, %56
  %111 = fadd double %110, %61
  %112 = fadd double %111, %66
  %113 = fadd double %112, %71
  %114 = fadd double %113, %76
  %115 = fadd double %114, %81
  %116 = fadd double %115, %86
  %117 = fadd double %116, %91
  %118 = fadd double %117, %96
  %119 = fadd double %118, %102
  ret double %119
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:19
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(FOGt N0:(ReadLSB w64 0 a4)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ogt double %1, %1
  br i1 %102, label %106, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  %105 = fadd double %104, 1.000000e+00
  br label %106

; <label>:106:                                    ; preds = %103, %100
  %107 = phi double [ %105, %103 ], [ 0.000000e+00, %100 ]
  %108 = fadd double %8, %13
  %109 = fadd double %108, %20
  %110 = fadd double %109, %25
  %111 = fadd double %110, %32
  %112 = fadd double %111, %37
  %113 = fadd double %112, %44
  %114 = fadd double %113, %49
  %115 = fadd double %114, %56
  %116 = fadd double %115, %61
  %117 = fadd double %116, %66
  %118 = fadd double %117, %71
  %119 = fadd double %118, %76
  %120 = fadd double %119, %81
  %121 = fadd double %120, %86
  %122 = fadd double %121, %91
  %123 = fadd double %122, %96
  %124 = fadd double %123, %101
  %125 = fadd double %124, %107
  ret double %125
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:20
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(FOLt N0:(ReadLSB w64 0 a4)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp olt double %1, %1
  br i1 %107, label %111, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  %110 = fadd double %109, 1.000000e+00
  br label %111

; <label>:111:                                    ; preds = %108, %105
  %112 = phi double [ %110, %108 ], [ 0.000000e+00, %105 ]
  %113 = fadd double %8, %13
  %114 = fadd double %113, %20
  %115 = fadd double %114, %25
  %116 = fadd double %115, %32
  %117 = fadd double %116, %37
  %118 = fadd double %117, %44
  %119 = fadd double %118, %49
  %120 = fadd double %119, %56
  %121 = fadd double %120, %61
  %122 = fadd double %121, %66
  %123 = fadd double %122, %71
  %124 = fadd double %123, %76
  %125 = fadd double %124, %81
  %126 = fadd double %125, %86
  %127 = fadd double %126, %91
  %128 = fadd double %127, %96
  %129 = fadd double %128, %101
  %130 = fadd double %129, %106
  %131 = fadd double %130, %112
  ret double %131
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:21
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(FOGt (ReadLSB w64 0 a3)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ogt double %27, %39
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fadd double %8, %13
  %119 = fadd double %118, %20
  %120 = fadd double %119, %25
  %121 = fadd double %120, %32
  %122 = fadd double %121, %37
  %123 = fadd double %122, %44
  %124 = fadd double %123, %49
  %125 = fadd double %124, %56
  %126 = fadd double %125, %61
  %127 = fadd double %126, %66
  %128 = fadd double %127, %71
  %129 = fadd double %128, %76
  %130 = fadd double %129, %81
  %131 = fadd double %130, %86
  %132 = fadd double %131, %91
  %133 = fadd double %132, %96
  %134 = fadd double %133, %101
  %135 = fadd double %134, %106
  %136 = fadd double %135, %111
  %137 = fadd double %136, %117
  ret double %137
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:22
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a3)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp olt double %27, %39
  br i1 %117, label %121, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  %120 = fadd double %119, 1.000000e+00
  br label %121

; <label>:121:                                    ; preds = %118, %115
  %122 = phi double [ %120, %118 ], [ 0.000000e+00, %115 ]
  %123 = fadd double %8, %13
  %124 = fadd double %123, %20
  %125 = fadd double %124, %25
  %126 = fadd double %125, %32
  %127 = fadd double %126, %37
  %128 = fadd double %127, %44
  %129 = fadd double %128, %49
  %130 = fadd double %129, %56
  %131 = fadd double %130, %61
  %132 = fadd double %131, %66
  %133 = fadd double %132, %71
  %134 = fadd double %133, %76
  %135 = fadd double %134, %81
  %136 = fadd double %135, %86
  %137 = fadd double %136, %91
  %138 = fadd double %137, %96
  %139 = fadd double %138, %101
  %140 = fadd double %139, %106
  %141 = fadd double %140, %111
  %142 = fadd double %141, %116
  %143 = fadd double %142, %122
  ret double %143
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:23
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(FOGt N0:(ReadLSB w64 0 a3)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ogt double %27, %27
  br i1 %122, label %126, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  %125 = fadd double %124, 1.000000e+00
  br label %126

; <label>:126:                                    ; preds = %123, %120
  %127 = phi double [ %125, %123 ], [ 0.000000e+00, %120 ]
  %128 = fadd double %8, %13
  %129 = fadd double %128, %20
  %130 = fadd double %129, %25
  %131 = fadd double %130, %32
  %132 = fadd double %131, %37
  %133 = fadd double %132, %44
  %134 = fadd double %133, %49
  %135 = fadd double %134, %56
  %136 = fadd double %135, %61
  %137 = fadd double %136, %66
  %138 = fadd double %137, %71
  %139 = fadd double %138, %76
  %140 = fadd double %139, %81
  %141 = fadd double %140, %86
  %142 = fadd double %141, %91
  %143 = fadd double %142, %96
  %144 = fadd double %143, %101
  %145 = fadd double %144, %106
  %146 = fadd double %145, %111
  %147 = fadd double %146, %116
  %148 = fadd double %147, %121
  %149 = fadd double %148, %127
  ret double %149
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:24
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(FOLt N0:(ReadLSB w64 0 a3)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp olt double %27, %27
  br i1 %127, label %131, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  %130 = fadd double %129, 1.000000e+00
  br label %131

; <label>:131:                                    ; preds = %128, %125
  %132 = phi double [ %130, %128 ], [ 0.000000e+00, %125 ]
  %133 = fadd double %8, %13
  %134 = fadd double %133, %20
  %135 = fadd double %134, %25
  %136 = fadd double %135, %32
  %137 = fadd double %136, %37
  %138 = fadd double %137, %44
  %139 = fadd double %138, %49
  %140 = fadd double %139, %56
  %141 = fadd double %140, %61
  %142 = fadd double %141, %66
  %143 = fadd double %142, %71
  %144 = fadd double %143, %76
  %145 = fadd double %144, %81
  %146 = fadd double %145, %86
  %147 = fadd double %146, %91
  %148 = fadd double %147, %96
  %149 = fadd double %148, %101
  %150 = fadd double %149, %106
  %151 = fadd double %150, %111
  %152 = fadd double %151, %116
  %153 = fadd double %152, %121
  %154 = fadd double %153, %126
  %155 = fadd double %154, %132
  ret double %155
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:25
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp oge double %27, %27
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp ogt double %15, %39
  br i1 %132, label %136, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %15, double %39)
  %135 = fadd double %134, 1.000000e+00
  br label %136

; <label>:136:                                    ; preds = %133, %130
  %137 = phi double [ %135, %133 ], [ 0.000000e+00, %130 ]
  %138 = fadd double %8, %13
  %139 = fadd double %138, %20
  %140 = fadd double %139, %25
  %141 = fadd double %140, %32
  %142 = fadd double %141, %37
  %143 = fadd double %142, %44
  %144 = fadd double %143, %49
  %145 = fadd double %144, %56
  %146 = fadd double %145, %61
  %147 = fadd double %146, %66
  %148 = fadd double %147, %71
  %149 = fadd double %148, %76
  %150 = fadd double %149, %81
  %151 = fadd double %150, %86
  %152 = fadd double %151, %91
  %153 = fadd double %152, %96
  %154 = fadd double %153, %101
  %155 = fadd double %154, %106
  %156 = fadd double %155, %111
  %157 = fadd double %156, %116
  %158 = fadd double %157, %121
  %159 = fadd double %158, %126
  %160 = fadd double %159, %131
  %161 = fadd double %160, %137
  ret double %161
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:26
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp oge double %27, %27
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp ole double %15, %39
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %15, double %39)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp olt double %15, %39
  br i1 %137, label %141, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %15, double %39)
  %140 = fadd double %139, 1.000000e+00
  br label %141

; <label>:141:                                    ; preds = %138, %135
  %142 = phi double [ %140, %138 ], [ 0.000000e+00, %135 ]
  %143 = fadd double %8, %13
  %144 = fadd double %143, %20
  %145 = fadd double %144, %25
  %146 = fadd double %145, %32
  %147 = fadd double %146, %37
  %148 = fadd double %147, %44
  %149 = fadd double %148, %49
  %150 = fadd double %149, %56
  %151 = fadd double %150, %61
  %152 = fadd double %151, %66
  %153 = fadd double %152, %71
  %154 = fadd double %153, %76
  %155 = fadd double %154, %81
  %156 = fadd double %155, %86
  %157 = fadd double %156, %91
  %158 = fadd double %157, %96
  %159 = fadd double %158, %101
  %160 = fadd double %159, %106
  %161 = fadd double %160, %111
  %162 = fadd double %161, %116
  %163 = fadd double %162, %121
  %164 = fadd double %163, %126
  %165 = fadd double %164, %131
  %166 = fadd double %165, %136
  %167 = fadd double %166, %142
  ret double %167
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:27
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(FOGt N0:(ReadLSB w64 0 a2)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp oge double %27, %27
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp ole double %15, %39
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %15, double %39)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp oge double %15, %39
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %15, double %39)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp ogt double %15, %15
  br i1 %142, label %146, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %15, double %15)
  %145 = fadd double %144, 1.000000e+00
  br label %146

; <label>:146:                                    ; preds = %143, %140
  %147 = phi double [ %145, %143 ], [ 0.000000e+00, %140 ]
  %148 = fadd double %8, %13
  %149 = fadd double %148, %20
  %150 = fadd double %149, %25
  %151 = fadd double %150, %32
  %152 = fadd double %151, %37
  %153 = fadd double %152, %44
  %154 = fadd double %153, %49
  %155 = fadd double %154, %56
  %156 = fadd double %155, %61
  %157 = fadd double %156, %66
  %158 = fadd double %157, %71
  %159 = fadd double %158, %76
  %160 = fadd double %159, %81
  %161 = fadd double %160, %86
  %162 = fadd double %161, %91
  %163 = fadd double %162, %96
  %164 = fadd double %163, %101
  %165 = fadd double %164, %106
  %166 = fadd double %165, %111
  %167 = fadd double %166, %116
  %168 = fadd double %167, %121
  %169 = fadd double %168, %126
  %170 = fadd double %169, %131
  %171 = fadd double %170, %136
  %172 = fadd double %171, %141
  %173 = fadd double %172, %147
  ret double %173
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:28
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a2)
           N0))
(FOLt N0:(ReadLSB w64 0 a2)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp oge double %27, %27
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp ole double %15, %39
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %15, double %39)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp oge double %15, %39
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %15, double %39)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp ole double %15, %15
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %15, double %15)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp olt double %15, %15
  br i1 %147, label %151, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %15, double %15)
  %150 = fadd double %149, 1.000000e+00
  br label %151

; <label>:151:                                    ; preds = %148, %145
  %152 = phi double [ %150, %148 ], [ 0.000000e+00, %145 ]
  %153 = fadd double %8, %13
  %154 = fadd double %153, %20
  %155 = fadd double %154, %25
  %156 = fadd double %155, %32
  %157 = fadd double %156, %37
  %158 = fadd double %157, %44
  %159 = fadd double %158, %49
  %160 = fadd double %159, %56
  %161 = fadd double %160, %61
  %162 = fadd double %161, %66
  %163 = fadd double %162, %71
  %164 = fadd double %163, %76
  %165 = fadd double %164, %81
  %166 = fadd double %165, %86
  %167 = fadd double %166, %91
  %168 = fadd double %167, %96
  %169 = fadd double %168, %101
  %170 = fadd double %169, %106
  %171 = fadd double %170, %111
  %172 = fadd double %171, %116
  %173 = fadd double %172, %121
  %174 = fadd double %173, %126
  %175 = fadd double %174, %131
  %176 = fadd double %175, %136
  %177 = fadd double %176, %141
  %178 = fadd double %177, %146
  %179 = fadd double %178, %152
  ret double %179
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:29
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a2)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a2)
           N0))
(FOGt N0:(ReadLSB w64 0 a1)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp oge double %27, %27
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp ole double %15, %39
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %15, double %39)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp oge double %15, %39
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %15, double %39)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp ole double %15, %15
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %15, double %15)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp oge double %15, %15
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %15, double %15)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp ogt double %39, %39
  br i1 %152, label %156, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %39, double %39)
  %155 = fadd double %154, 1.000000e+00
  br label %156

; <label>:156:                                    ; preds = %153, %150
  %157 = phi double [ %155, %153 ], [ 0.000000e+00, %150 ]
  %158 = fadd double %8, %13
  %159 = fadd double %158, %20
  %160 = fadd double %159, %25
  %161 = fadd double %160, %32
  %162 = fadd double %161, %37
  %163 = fadd double %162, %44
  %164 = fadd double %163, %49
  %165 = fadd double %164, %56
  %166 = fadd double %165, %61
  %167 = fadd double %166, %66
  %168 = fadd double %167, %71
  %169 = fadd double %168, %76
  %170 = fadd double %169, %81
  %171 = fadd double %170, %86
  %172 = fadd double %171, %91
  %173 = fadd double %172, %96
  %174 = fadd double %173, %101
  %175 = fadd double %174, %106
  %176 = fadd double %175, %111
  %177 = fadd double %176, %116
  %178 = fadd double %177, %121
  %179 = fadd double %178, %126
  %180 = fadd double %179, %131
  %181 = fadd double %180, %136
  %182 = fadd double %181, %141
  %183 = fadd double %182, %146
  %184 = fadd double %183, %151
  %185 = fadd double %184, %157
  ret double %185
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:30
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a5)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a4)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a2)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a2)
           N0))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(FOLt N0:(ReadLSB w64 0 a1)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp oge double %1, %3
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = phi double [ %11, %10 ], [ 0.000000e+00, %7 ]
  %14 = getelementptr inbounds double, double* %x, i64 2
  %15 = load double, double* %14, align 8, !tbaa !0
  %16 = fcmp ole double %15, %1
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %12
  %18 = call double @fp64_dis(double %15, double %1)
  br label %19

; <label>:19:                                     ; preds = %17, %12
  %20 = phi double [ %18, %17 ], [ 0.000000e+00, %12 ]
  %21 = fcmp oge double %15, %1
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  %23 = call double @fp64_dis(double %15, double %1)
  br label %24

; <label>:24:                                     ; preds = %22, %19
  %25 = phi double [ %23, %22 ], [ 0.000000e+00, %19 ]
  %26 = getelementptr inbounds double, double* %x, i64 3
  %27 = load double, double* %26, align 8, !tbaa !0
  %28 = fcmp ole double %15, %27
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = call double @fp64_dis(double %15, double %27)
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi double [ %30, %29 ], [ 0.000000e+00, %24 ]
  %33 = fcmp oge double %15, %27
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %31
  %35 = call double @fp64_dis(double %15, double %27)
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi double [ %35, %34 ], [ 0.000000e+00, %31 ]
  %38 = getelementptr inbounds double, double* %x, i64 4
  %39 = load double, double* %38, align 8, !tbaa !0
  %40 = fcmp ole double %39, %15
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %36
  %42 = call double @fp64_dis(double %39, double %15)
  br label %43

; <label>:43:                                     ; preds = %41, %36
  %44 = phi double [ %42, %41 ], [ 0.000000e+00, %36 ]
  %45 = fcmp oge double %39, %15
  br i1 %45, label %48, label %46

; <label>:46:                                     ; preds = %43
  %47 = call double @fp64_dis(double %39, double %15)
  br label %48

; <label>:48:                                     ; preds = %46, %43
  %49 = phi double [ %47, %46 ], [ 0.000000e+00, %43 ]
  %50 = getelementptr inbounds double, double* %x, i64 5
  %51 = load double, double* %50, align 8, !tbaa !0
  %52 = fcmp ole double %51, %39
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %48
  %54 = call double @fp64_dis(double %51, double %39)
  br label %55

; <label>:55:                                     ; preds = %53, %48
  %56 = phi double [ %54, %53 ], [ 0.000000e+00, %48 ]
  %57 = fcmp oge double %51, %39
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %55
  %59 = call double @fp64_dis(double %51, double %39)
  br label %60

; <label>:60:                                     ; preds = %58, %55
  %61 = phi double [ %59, %58 ], [ 0.000000e+00, %55 ]
  %62 = fcmp ole double %51, %51
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %60
  %64 = call double @fp64_dis(double %51, double %51)
  br label %65

; <label>:65:                                     ; preds = %63, %60
  %66 = phi double [ %64, %63 ], [ 0.000000e+00, %60 ]
  %67 = fcmp oge double %51, %51
  br i1 %67, label %70, label %68

; <label>:68:                                     ; preds = %65
  %69 = call double @fp64_dis(double %51, double %51)
  br label %70

; <label>:70:                                     ; preds = %68, %65
  %71 = phi double [ %69, %68 ], [ 0.000000e+00, %65 ]
  %72 = fcmp ole double %3, %39
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %70
  %74 = call double @fp64_dis(double %3, double %39)
  br label %75

; <label>:75:                                     ; preds = %73, %70
  %76 = phi double [ %74, %73 ], [ 0.000000e+00, %70 ]
  %77 = fcmp oge double %3, %39
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %75
  %79 = call double @fp64_dis(double %3, double %39)
  br label %80

; <label>:80:                                     ; preds = %78, %75
  %81 = phi double [ %79, %78 ], [ 0.000000e+00, %75 ]
  %82 = fcmp ole double %3, %3
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  %84 = call double @fp64_dis(double %3, double %3)
  br label %85

; <label>:85:                                     ; preds = %83, %80
  %86 = phi double [ %84, %83 ], [ 0.000000e+00, %80 ]
  %87 = fcmp oge double %3, %3
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %85
  %89 = call double @fp64_dis(double %3, double %3)
  br label %90

; <label>:90:                                     ; preds = %88, %85
  %91 = phi double [ %89, %88 ], [ 0.000000e+00, %85 ]
  %92 = fcmp ole double %1, %39
  br i1 %92, label %95, label %93

; <label>:93:                                     ; preds = %90
  %94 = call double @fp64_dis(double %1, double %39)
  br label %95

; <label>:95:                                     ; preds = %93, %90
  %96 = phi double [ %94, %93 ], [ 0.000000e+00, %90 ]
  %97 = fcmp oge double %1, %39
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %95
  %99 = call double @fp64_dis(double %1, double %39)
  br label %100

; <label>:100:                                    ; preds = %98, %95
  %101 = phi double [ %99, %98 ], [ 0.000000e+00, %95 ]
  %102 = fcmp ole double %1, %1
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %100
  %104 = call double @fp64_dis(double %1, double %1)
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = phi double [ %104, %103 ], [ 0.000000e+00, %100 ]
  %107 = fcmp oge double %1, %1
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %1, double %1)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp ole double %27, %39
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %27, double %39)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fcmp oge double %27, %39
  br i1 %117, label %120, label %118

; <label>:118:                                    ; preds = %115
  %119 = call double @fp64_dis(double %27, double %39)
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = phi double [ %119, %118 ], [ 0.000000e+00, %115 ]
  %122 = fcmp ole double %27, %27
  br i1 %122, label %125, label %123

; <label>:123:                                    ; preds = %120
  %124 = call double @fp64_dis(double %27, double %27)
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = phi double [ %124, %123 ], [ 0.000000e+00, %120 ]
  %127 = fcmp oge double %27, %27
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %27, double %27)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp ole double %15, %39
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %15, double %39)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp oge double %15, %39
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %15, double %39)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp ole double %15, %15
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %15, double %15)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp oge double %15, %15
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %15, double %15)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp ole double %39, %39
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %39, double %39)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp olt double %39, %39
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %39, double %39)
  %160 = fadd double %159, 1.000000e+00
  br label %161

; <label>:161:                                    ; preds = %158, %155
  %162 = phi double [ %160, %158 ], [ 0.000000e+00, %155 ]
  %163 = fadd double %8, %13
  %164 = fadd double %163, %20
  %165 = fadd double %164, %25
  %166 = fadd double %165, %32
  %167 = fadd double %166, %37
  %168 = fadd double %167, %44
  %169 = fadd double %168, %49
  %170 = fadd double %169, %56
  %171 = fadd double %170, %61
  %172 = fadd double %171, %66
  %173 = fadd double %172, %71
  %174 = fadd double %173, %76
  %175 = fadd double %174, %81
  %176 = fadd double %175, %86
  %177 = fadd double %176, %91
  %178 = fadd double %177, %96
  %179 = fadd double %178, %101
  %180 = fadd double %179, %106
  %181 = fadd double %180, %111
  %182 = fadd double %181, %116
  %183 = fadd double %182, %121
  %184 = fadd double %183, %126
  %185 = fadd double %184, %131
  %186 = fadd double %185, %136
  %187 = fadd double %186, %141
  %188 = fadd double %187, %146
  %189 = fadd double %188, %151
  %190 = fadd double %189, %156
  %191 = fadd double %190, %162
  ret double %191
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:3
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ogt double %16, %3
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  %20 = fadd double %19, 1.000000e+00
  br label %21

; <label>:21:                                     ; preds = %18, %13
  %22 = phi double [ %20, %18 ], [ 0.000000e+00, %13 ]
  %23 = fadd double %8, %14
  %24 = fadd double %23, %22
  ret double %24
}
solution : a2  type: double  val : 6.352745e+307
solution : a4  type: double  val : -7.096721e+307
solution : a5  type: double  val : -5.129771e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[0,0,0,0,0,0,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:4
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp oge double %16, %3
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  br label %25

; <label>:25:                                     ; preds = %23, %20
  %26 = phi double [ %24, %23 ], [ 0.000000e+00, %20 ]
  %27 = fadd double %8, %14
  %28 = fadd double %27, %21
  %29 = fadd double %28, %26
  ret double %29
}
solution : a2  type: double  val : 8.988466e+307
solution : a4  type: double  val : 2.728482e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[0,0,0,0,0,0,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   %4 = load double*, double** %a.addr, align 8
cons size:5
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a5)
           (ReadLSB w64 0 a3)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ole double %3, %29
  br i1 %30, label %33, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  br label %33

; <label>:33:                                     ; preds = %31, %26
  %34 = phi double [ %32, %31 ], [ 0.000000e+00, %26 ]
  %35 = fadd double %8, %14
  %36 = fadd double %35, %21
  %37 = fadd double %36, %27
  %38 = fadd double %37, %34
  ret double %38
}
solution : a2  type: double  val : -2.383040e+307
solution : a3  type: double  val : 4.656395e+307
solution : a4  type: double  val : -7.370135e+307
solution : a5  type: double  val : 2.747864e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[0,0,0,0,0,0,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:6
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ogt double %37, %3
  br i1 %38, label %42, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  %41 = fadd double %40, 1.000000e+00
  br label %42

; <label>:42:                                     ; preds = %39, %34
  %43 = phi double [ %41, %39 ], [ 0.000000e+00, %34 ]
  %44 = fadd double %8, %14
  %45 = fadd double %44, %21
  %46 = fadd double %45, %27
  %47 = fadd double %46, %35
  %48 = fadd double %47, %43
  ret double %48
}
solution : a1  type: double  val : 5.342692e+307
solution : a2  type: double  val : -2.914174e+307
solution : a3  type: double  val : -8.863137e+307
solution : a4  type: double  val : -2.117657e+307
solution : a5  type: double  val : -1.735322e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:7
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp oge double %37, %3
  br i1 %43, label %46, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  br label %46

; <label>:46:                                     ; preds = %44, %41
  %47 = phi double [ %45, %44 ], [ 0.000000e+00, %41 ]
  %48 = fadd double %8, %14
  %49 = fadd double %48, %21
  %50 = fadd double %49, %27
  %51 = fadd double %50, %35
  %52 = fadd double %51, %42
  %53 = fadd double %52, %47
  ret double %53
}
solution : a1  type: double  val : 8.988466e+307
solution : a2  type: double  val : 8.147350e+307
solution : a3  type: double  val : 5.533239e+307
solution : a4  type: double  val : 7.724623e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   %4 = load double*, double** %a.addr, align 8
cons size:8
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a2)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ole double %1, %16
  br i1 %49, label %52, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  br label %52

; <label>:52:                                     ; preds = %50, %47
  %53 = phi double [ %51, %50 ], [ 0.000000e+00, %47 ]
  %54 = fadd double %8, %14
  %55 = fadd double %54, %21
  %56 = fadd double %55, %27
  %57 = fadd double %56, %35
  %58 = fadd double %57, %42
  %59 = fadd double %58, %48
  %60 = fadd double %59, %53
  ret double %60
}
solution : a1  type: double  val : -4.444178e+307
solution : a2  type: double  val : 1.010241e+307
solution : a3  type: double  val : 3.644831e+307
solution : a4  type: double  val : 6.498174e+306
solution : a5  type: double  val : 3.818011e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:9
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ogt double %37, %1
  br i1 %55, label %59, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  %58 = fadd double %57, 1.000000e+00
  br label %59

; <label>:59:                                     ; preds = %56, %53
  %60 = phi double [ %58, %56 ], [ 0.000000e+00, %53 ]
  %61 = fadd double %8, %14
  %62 = fadd double %61, %21
  %63 = fadd double %62, %27
  %64 = fadd double %63, %35
  %65 = fadd double %64, %42
  %66 = fadd double %65, %48
  %67 = fadd double %66, %54
  %68 = fadd double %67, %60
  ret double %68
}
solution : a1  type: double  val : -2.127023e+307
solution : a2  type: double  val : -8.186451e+307
solution : a3  type: double  val : -1.288884e+307
solution : a4  type: double  val : -5.338989e+307
solution : a5  type: double  val : 8.143382e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[0,0,0,0,0,0,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:10
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp oge double %37, %1
  br i1 %60, label %63, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  br label %63

; <label>:63:                                     ; preds = %61, %58
  %64 = phi double [ %62, %61 ], [ 0.000000e+00, %58 ]
  %65 = fadd double %8, %14
  %66 = fadd double %65, %21
  %67 = fadd double %66, %27
  %68 = fadd double %67, %35
  %69 = fadd double %68, %42
  %70 = fadd double %69, %48
  %71 = fadd double %70, %54
  %72 = fadd double %71, %59
  %73 = fadd double %72, %64
  ret double %73
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:11
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ogt double %67, %3
  br i1 %68, label %72, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  %71 = fadd double %70, 1.000000e+00
  br label %72

; <label>:72:                                     ; preds = %69, %64
  %73 = phi double [ %71, %69 ], [ 0.000000e+00, %64 ]
  %74 = fadd double %8, %14
  %75 = fadd double %74, %21
  %76 = fadd double %75, %27
  %77 = fadd double %76, %35
  %78 = fadd double %77, %42
  %79 = fadd double %78, %48
  %80 = fadd double %79, %54
  %81 = fadd double %80, %59
  %82 = fadd double %81, %65
  %83 = fadd double %82, %73
  ret double %83
}
solution : a0  type: double  val : 2.069248e+307
solution : a1  type: double  val : -8.432509e+307
solution : a2  type: double  val : -1.472315e+307
solution : a3  type: double  val : -8.652740e+307
solution : a4  type: double  val : -7.230307e+306
solution : a5  type: double  val : 1.504842e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:12
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp oge double %67, %3
  br i1 %73, label %76, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  br label %76

; <label>:76:                                     ; preds = %74, %71
  %77 = phi double [ %75, %74 ], [ 0.000000e+00, %71 ]
  %78 = fadd double %8, %14
  %79 = fadd double %78, %21
  %80 = fadd double %79, %27
  %81 = fadd double %80, %35
  %82 = fadd double %81, %42
  %83 = fadd double %82, %48
  %84 = fadd double %83, %54
  %85 = fadd double %84, %59
  %86 = fadd double %85, %65
  %87 = fadd double %86, %72
  %88 = fadd double %87, %77
  ret double %88
}
solution : a0  type: double  val : 8.988466e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : -8.988466e+307
solution : a4  type: double  val : 5.034900e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:13
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %67, %3
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %67, double %3)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fadd double %8, %14
  %86 = fadd double %85, %21
  %87 = fadd double %86, %27
  %88 = fadd double %87, %35
  %89 = fadd double %88, %42
  %90 = fadd double %89, %48
  %91 = fadd double %90, %54
  %92 = fadd double %91, %59
  %93 = fadd double %92, %65
  %94 = fadd double %93, %72
  %95 = fadd double %94, %78
  %96 = fadd double %95, %84
  ret double %96
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:14
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp oge double %67, %3
  br i1 %79, label %82, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %67, double %3)
  br label %82

; <label>:82:                                     ; preds = %80, %77
  %83 = phi double [ %81, %80 ], [ 0.000000e+00, %77 ]
  %84 = fadd double %8, %14
  %85 = fadd double %84, %21
  %86 = fadd double %85, %27
  %87 = fadd double %86, %35
  %88 = fadd double %87, %42
  %89 = fadd double %88, %48
  %90 = fadd double %89, %54
  %91 = fadd double %90, %59
  %92 = fadd double %91, %65
  %93 = fadd double %92, %72
  %94 = fadd double %93, %78
  %95 = fadd double %94, %72
  %96 = fadd double %95, %83
  ret double %96
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   %4 = load double*, double** %a.addr, align 8
cons size:15
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a3)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ole double %1, %29
  br i1 %79, label %82, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  br label %82

; <label>:82:                                     ; preds = %80, %77
  %83 = phi double [ %81, %80 ], [ 0.000000e+00, %77 ]
  %84 = fadd double %8, %14
  %85 = fadd double %84, %21
  %86 = fadd double %85, %27
  %87 = fadd double %86, %35
  %88 = fadd double %87, %42
  %89 = fadd double %88, %48
  %90 = fadd double %89, %54
  %91 = fadd double %90, %59
  %92 = fadd double %91, %65
  %93 = fadd double %92, %72
  %94 = fadd double %93, %78
  %95 = fadd double %94, %72
  %96 = fadd double %95, %78
  %97 = fadd double %96, %83
  ret double %97
}
solution : a0  type: double  val : -6.039357e+307
solution : a1  type: double  val : 3.061032e+307
solution : a2  type: double  val : -3.590733e+307
solution : a3  type: double  val : 5.977688e+307
solution : a4  type: double  val : 4.741839e+307
solution : a5  type: double  val : 8.981981e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,16,215,85,0,0,]
a2
[97,50,0,16,215,85,0,0,]
a3
[97,51,0,16,215,85,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[97,48,0,16,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:16
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ogt double %67, %1
  br i1 %85, label %89, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  %88 = fadd double %87, 1.000000e+00
  br label %89

; <label>:89:                                     ; preds = %86, %83
  %90 = phi double [ %88, %86 ], [ 0.000000e+00, %83 ]
  %91 = fadd double %8, %14
  %92 = fadd double %91, %21
  %93 = fadd double %92, %27
  %94 = fadd double %93, %35
  %95 = fadd double %94, %42
  %96 = fadd double %95, %48
  %97 = fadd double %96, %54
  %98 = fadd double %97, %59
  %99 = fadd double %98, %65
  %100 = fadd double %99, %72
  %101 = fadd double %100, %78
  %102 = fadd double %101, %72
  %103 = fadd double %102, %78
  %104 = fadd double %103, %84
  %105 = fadd double %104, %90
  ret double %105
}
solution : a0  type: double  val : 2.242578e+307
solution : a1  type: double  val : -5.697959e+307
solution : a2  type: double  val : -2.972534e+307
solution : a3  type: double  val : -3.870041e+307
solution : a4  type: double  val : 1.408982e+306
solution : a5  type: double  val : 3.758804e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:17
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp oge double %67, %1
  br i1 %90, label %93, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  br label %93

; <label>:93:                                     ; preds = %91, %88
  %94 = phi double [ %92, %91 ], [ 0.000000e+00, %88 ]
  %95 = fadd double %8, %14
  %96 = fadd double %95, %21
  %97 = fadd double %96, %27
  %98 = fadd double %97, %35
  %99 = fadd double %98, %42
  %100 = fadd double %99, %48
  %101 = fadd double %100, %54
  %102 = fadd double %101, %59
  %103 = fadd double %102, %65
  %104 = fadd double %103, %72
  %105 = fadd double %104, %78
  %106 = fadd double %105, %72
  %107 = fadd double %106, %78
  %108 = fadd double %107, %84
  %109 = fadd double %108, %89
  %110 = fadd double %109, %94
  ret double %110
}
solution : a0  type: double  val : 2.798744e+307
solution : a1  type: double  val : 4.185081e+305
solution : a2  type: double  val : 2.310954e+307
solution : a3  type: double  val : -8.988466e+307
solution : a4  type: double  val : 2.798744e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:18
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ogt double %37, %16
  br i1 %96, label %100, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  %99 = fadd double %98, 1.000000e+00
  br label %100

; <label>:100:                                    ; preds = %97, %94
  %101 = phi double [ %99, %97 ], [ 0.000000e+00, %94 ]
  %102 = fadd double %8, %14
  %103 = fadd double %102, %21
  %104 = fadd double %103, %27
  %105 = fadd double %104, %35
  %106 = fadd double %105, %42
  %107 = fadd double %106, %48
  %108 = fadd double %107, %54
  %109 = fadd double %108, %59
  %110 = fadd double %109, %65
  %111 = fadd double %110, %72
  %112 = fadd double %111, %78
  %113 = fadd double %112, %72
  %114 = fadd double %113, %78
  %115 = fadd double %114, %84
  %116 = fadd double %115, %89
  %117 = fadd double %116, %95
  %118 = fadd double %117, %101
  ret double %118
}
solution : a0  type: double  val : 9.162894e+306
solution : a1  type: double  val : -2.099465e+306
solution : a2  type: double  val : -4.891165e+307
solution : a3  type: double  val : 5.718177e+306
solution : a4  type: double  val : 5.080815e+307
solution : a5  type: double  val : 7.534546e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:19
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fadd double %8, %14
  %108 = fadd double %107, %21
  %109 = fadd double %108, %27
  %110 = fadd double %109, %35
  %111 = fadd double %110, %42
  %112 = fadd double %111, %48
  %113 = fadd double %112, %54
  %114 = fadd double %113, %59
  %115 = fadd double %114, %65
  %116 = fadd double %115, %72
  %117 = fadd double %116, %78
  %118 = fadd double %117, %72
  %119 = fadd double %118, %78
  %120 = fadd double %119, %84
  %121 = fadd double %120, %89
  %122 = fadd double %121, %95
  %123 = fadd double %122, %100
  %124 = fadd double %123, %106
  ret double %124
}
solution : a0  type: double  val : -5.989475e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -4.169881e+307
solution : a3  type: double  val : 2.429434e+307
solution : a4  type: double  val : 3.985108e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate SUCCESS !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:20
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ogt double %67, %37
  br i1 %106, label %110, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  %109 = fadd double %108, 1.000000e+00
  br label %110

; <label>:110:                                    ; preds = %107, %104
  %111 = phi double [ %109, %107 ], [ 0.000000e+00, %104 ]
  %112 = fadd double %8, %14
  %113 = fadd double %112, %21
  %114 = fadd double %113, %27
  %115 = fadd double %114, %35
  %116 = fadd double %115, %42
  %117 = fadd double %116, %48
  %118 = fadd double %117, %54
  %119 = fadd double %118, %59
  %120 = fadd double %119, %65
  %121 = fadd double %120, %72
  %122 = fadd double %121, %78
  %123 = fadd double %122, %72
  %124 = fadd double %123, %78
  %125 = fadd double %124, %84
  %126 = fadd double %125, %89
  %127 = fadd double %126, %95
  %128 = fadd double %127, %100
  %129 = fadd double %128, %105
  %130 = fadd double %129, %111
  ret double %130
}
solution : a0  type: double  val : -6.223327e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : -8.988466e+307
solution : a4  type: double  val : 6.323495e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,16,215,85,0,0,]
a2
[97,50,0,16,215,85,0,0,]
a3
[97,51,0,16,215,85,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[97,48,0,16,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:21
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp olt double %67, %37
  br i1 %111, label %115, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  %114 = fadd double %113, 1.000000e+00
  br label %115

; <label>:115:                                    ; preds = %112, %109
  %116 = phi double [ %114, %112 ], [ 0.000000e+00, %109 ]
  %117 = fadd double %8, %14
  %118 = fadd double %117, %21
  %119 = fadd double %118, %27
  %120 = fadd double %119, %35
  %121 = fadd double %120, %42
  %122 = fadd double %121, %48
  %123 = fadd double %122, %54
  %124 = fadd double %123, %59
  %125 = fadd double %124, %65
  %126 = fadd double %125, %72
  %127 = fadd double %126, %78
  %128 = fadd double %127, %72
  %129 = fadd double %128, %78
  %130 = fadd double %129, %84
  %131 = fadd double %130, %89
  %132 = fadd double %131, %95
  %133 = fadd double %132, %100
  %134 = fadd double %133, %105
  %135 = fadd double %134, %110
  %136 = fadd double %135, %116
  ret double %136
}
solution : a0  type: double  val : -8.988466e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : 5.518487e+307
solution : a4  type: double  val : 7.079724e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,16,215,85,0,0,]
a2
[97,50,0,16,215,85,0,0,]
a3
[97,51,0,16,215,85,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[97,48,0,16,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:22
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ogt double %16, %1
  br i1 %116, label %120, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  %119 = fadd double %118, 1.000000e+00
  br label %120

; <label>:120:                                    ; preds = %117, %114
  %121 = phi double [ %119, %117 ], [ 0.000000e+00, %114 ]
  %122 = fadd double %8, %14
  %123 = fadd double %122, %21
  %124 = fadd double %123, %27
  %125 = fadd double %124, %35
  %126 = fadd double %125, %42
  %127 = fadd double %126, %48
  %128 = fadd double %127, %54
  %129 = fadd double %128, %59
  %130 = fadd double %129, %65
  %131 = fadd double %130, %72
  %132 = fadd double %131, %78
  %133 = fadd double %132, %72
  %134 = fadd double %133, %78
  %135 = fadd double %134, %84
  %136 = fadd double %135, %89
  %137 = fadd double %136, %95
  %138 = fadd double %137, %100
  %139 = fadd double %138, %105
  %140 = fadd double %139, %110
  %141 = fadd double %140, %115
  %142 = fadd double %141, %121
  ret double %142
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:23
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp oge double %16, %1
  br i1 %121, label %124, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  br label %124

; <label>:124:                                    ; preds = %122, %119
  %125 = phi double [ %123, %122 ], [ 0.000000e+00, %119 ]
  %126 = fadd double %8, %14
  %127 = fadd double %126, %21
  %128 = fadd double %127, %27
  %129 = fadd double %128, %35
  %130 = fadd double %129, %42
  %131 = fadd double %130, %48
  %132 = fadd double %131, %54
  %133 = fadd double %132, %59
  %134 = fadd double %133, %65
  %135 = fadd double %134, %72
  %136 = fadd double %135, %78
  %137 = fadd double %136, %72
  %138 = fadd double %137, %78
  %139 = fadd double %138, %84
  %140 = fadd double %139, %89
  %141 = fadd double %140, %95
  %142 = fadd double %141, %100
  %143 = fadd double %142, %105
  %144 = fadd double %143, %110
  %145 = fadd double %144, %115
  %146 = fadd double %145, %120
  %147 = fadd double %146, %125
  ret double %147
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:24
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ogt double %16, %1
  br i1 %127, label %131, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %16, double %1)
  %130 = fadd double %129, 1.000000e+00
  br label %131

; <label>:131:                                    ; preds = %128, %125
  %132 = phi double [ %130, %128 ], [ 0.000000e+00, %125 ]
  %133 = fadd double %8, %14
  %134 = fadd double %133, %21
  %135 = fadd double %134, %27
  %136 = fadd double %135, %35
  %137 = fadd double %136, %42
  %138 = fadd double %137, %48
  %139 = fadd double %138, %54
  %140 = fadd double %139, %59
  %141 = fadd double %140, %65
  %142 = fadd double %141, %72
  %143 = fadd double %142, %78
  %144 = fadd double %143, %72
  %145 = fadd double %144, %78
  %146 = fadd double %145, %84
  %147 = fadd double %146, %89
  %148 = fadd double %147, %95
  %149 = fadd double %148, %100
  %150 = fadd double %149, %105
  %151 = fadd double %150, %110
  %152 = fadd double %151, %115
  %153 = fadd double %152, %120
  %154 = fadd double %153, %126
  %155 = fadd double %154, %132
  ret double %155
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:25
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp oge double %16, %1
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %16, double %1)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fadd double %8, %14
  %133 = fadd double %132, %21
  %134 = fadd double %133, %27
  %135 = fadd double %134, %35
  %136 = fadd double %135, %42
  %137 = fadd double %136, %48
  %138 = fadd double %137, %54
  %139 = fadd double %138, %59
  %140 = fadd double %139, %65
  %141 = fadd double %140, %72
  %142 = fadd double %141, %78
  %143 = fadd double %142, %72
  %144 = fadd double %143, %78
  %145 = fadd double %144, %84
  %146 = fadd double %145, %89
  %147 = fadd double %146, %95
  %148 = fadd double %147, %100
  %149 = fadd double %148, %105
  %150 = fadd double %149, %110
  %151 = fadd double %150, %115
  %152 = fadd double %151, %120
  %153 = fadd double %152, %126
  %154 = fadd double %153, %120
  %155 = fadd double %154, %131
  ret double %155
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:26
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ogt double %67, %29
  br i1 %127, label %131, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  %130 = fadd double %129, 1.000000e+00
  br label %131

; <label>:131:                                    ; preds = %128, %125
  %132 = phi double [ %130, %128 ], [ 0.000000e+00, %125 ]
  %133 = fadd double %8, %14
  %134 = fadd double %133, %21
  %135 = fadd double %134, %27
  %136 = fadd double %135, %35
  %137 = fadd double %136, %42
  %138 = fadd double %137, %48
  %139 = fadd double %138, %54
  %140 = fadd double %139, %59
  %141 = fadd double %140, %65
  %142 = fadd double %141, %72
  %143 = fadd double %142, %78
  %144 = fadd double %143, %72
  %145 = fadd double %144, %78
  %146 = fadd double %145, %84
  %147 = fadd double %146, %89
  %148 = fadd double %147, %95
  %149 = fadd double %148, %100
  %150 = fadd double %149, %105
  %151 = fadd double %150, %110
  %152 = fadd double %151, %115
  %153 = fadd double %152, %120
  %154 = fadd double %153, %126
  %155 = fadd double %154, %120
  %156 = fadd double %155, %126
  %157 = fadd double %156, %132
  ret double %157
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:27
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp olt double %67, %29
  br i1 %132, label %136, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  %135 = fadd double %134, 1.000000e+00
  br label %136

; <label>:136:                                    ; preds = %133, %130
  %137 = phi double [ %135, %133 ], [ 0.000000e+00, %130 ]
  %138 = fadd double %8, %14
  %139 = fadd double %138, %21
  %140 = fadd double %139, %27
  %141 = fadd double %140, %35
  %142 = fadd double %141, %42
  %143 = fadd double %142, %48
  %144 = fadd double %143, %54
  %145 = fadd double %144, %59
  %146 = fadd double %145, %65
  %147 = fadd double %146, %72
  %148 = fadd double %147, %78
  %149 = fadd double %148, %72
  %150 = fadd double %149, %78
  %151 = fadd double %150, %84
  %152 = fadd double %151, %89
  %153 = fadd double %152, %95
  %154 = fadd double %153, %100
  %155 = fadd double %154, %105
  %156 = fadd double %155, %110
  %157 = fadd double %156, %115
  %158 = fadd double %157, %120
  %159 = fadd double %158, %126
  %160 = fadd double %159, %120
  %161 = fadd double %160, %126
  %162 = fadd double %161, %131
  %163 = fadd double %162, %137
  ret double %163
}
solution : a0  type: double  val : -8.988466e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -8.988466e+307
solution : a3  type: double  val : -1.839252e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,16,215,85,0,0,]
a2
[97,50,0,16,215,85,0,0,]
a3
[97,51,0,16,215,85,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[97,48,0,16,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:28
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ogt double %16, %67
  br i1 %137, label %141, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  %140 = fadd double %139, 1.000000e+00
  br label %141

; <label>:141:                                    ; preds = %138, %135
  %142 = phi double [ %140, %138 ], [ 0.000000e+00, %135 ]
  %143 = fadd double %8, %14
  %144 = fadd double %143, %21
  %145 = fadd double %144, %27
  %146 = fadd double %145, %35
  %147 = fadd double %146, %42
  %148 = fadd double %147, %48
  %149 = fadd double %148, %54
  %150 = fadd double %149, %59
  %151 = fadd double %150, %65
  %152 = fadd double %151, %72
  %153 = fadd double %152, %78
  %154 = fadd double %153, %72
  %155 = fadd double %154, %78
  %156 = fadd double %155, %84
  %157 = fadd double %156, %89
  %158 = fadd double %157, %95
  %159 = fadd double %158, %100
  %160 = fadd double %159, %105
  %161 = fadd double %160, %110
  %162 = fadd double %161, %115
  %163 = fadd double %162, %120
  %164 = fadd double %163, %126
  %165 = fadd double %164, %120
  %166 = fadd double %165, %126
  %167 = fadd double %166, %131
  %168 = fadd double %167, %136
  %169 = fadd double %168, %142
  ret double %169
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:29
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp olt double %16, %67
  br i1 %142, label %146, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  %145 = fadd double %144, 1.000000e+00
  br label %146

; <label>:146:                                    ; preds = %143, %140
  %147 = phi double [ %145, %143 ], [ 0.000000e+00, %140 ]
  %148 = fadd double %8, %14
  %149 = fadd double %148, %21
  %150 = fadd double %149, %27
  %151 = fadd double %150, %35
  %152 = fadd double %151, %42
  %153 = fadd double %152, %48
  %154 = fadd double %153, %54
  %155 = fadd double %154, %59
  %156 = fadd double %155, %65
  %157 = fadd double %156, %72
  %158 = fadd double %157, %78
  %159 = fadd double %158, %72
  %160 = fadd double %159, %78
  %161 = fadd double %160, %84
  %162 = fadd double %161, %89
  %163 = fadd double %162, %95
  %164 = fadd double %163, %100
  %165 = fadd double %164, %105
  %166 = fadd double %165, %110
  %167 = fadd double %166, %115
  %168 = fadd double %167, %120
  %169 = fadd double %168, %126
  %170 = fadd double %169, %120
  %171 = fadd double %170, %126
  %172 = fadd double %171, %131
  %173 = fadd double %172, %136
  %174 = fadd double %173, %141
  %175 = fadd double %174, %147
  ret double %175
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:30
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ogt double %37, %16
  br i1 %147, label %151, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %16)
  %150 = fadd double %149, 1.000000e+00
  br label %151

; <label>:151:                                    ; preds = %148, %145
  %152 = phi double [ %150, %148 ], [ 0.000000e+00, %145 ]
  %153 = fadd double %8, %14
  %154 = fadd double %153, %21
  %155 = fadd double %154, %27
  %156 = fadd double %155, %35
  %157 = fadd double %156, %42
  %158 = fadd double %157, %48
  %159 = fadd double %158, %54
  %160 = fadd double %159, %59
  %161 = fadd double %160, %65
  %162 = fadd double %161, %72
  %163 = fadd double %162, %78
  %164 = fadd double %163, %72
  %165 = fadd double %164, %78
  %166 = fadd double %165, %84
  %167 = fadd double %166, %89
  %168 = fadd double %167, %95
  %169 = fadd double %168, %100
  %170 = fadd double %169, %105
  %171 = fadd double %170, %110
  %172 = fadd double %171, %115
  %173 = fadd double %172, %120
  %174 = fadd double %173, %126
  %175 = fadd double %174, %120
  %176 = fadd double %175, %126
  %177 = fadd double %176, %131
  %178 = fadd double %177, %136
  %179 = fadd double %178, %141
  %180 = fadd double %179, %146
  %181 = fadd double %180, %152
  ret double %181
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:31
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp olt double %37, %16
  br i1 %147, label %151, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %16)
  %150 = fadd double %149, 1.000000e+00
  br label %151

; <label>:151:                                    ; preds = %148, %145
  %152 = phi double [ %150, %148 ], [ 0.000000e+00, %145 ]
  %153 = fadd double %8, %14
  %154 = fadd double %153, %21
  %155 = fadd double %154, %27
  %156 = fadd double %155, %35
  %157 = fadd double %156, %42
  %158 = fadd double %157, %48
  %159 = fadd double %158, %54
  %160 = fadd double %159, %59
  %161 = fadd double %160, %65
  %162 = fadd double %161, %72
  %163 = fadd double %162, %78
  %164 = fadd double %163, %72
  %165 = fadd double %164, %78
  %166 = fadd double %165, %84
  %167 = fadd double %166, %89
  %168 = fadd double %167, %95
  %169 = fadd double %168, %100
  %170 = fadd double %169, %105
  %171 = fadd double %170, %110
  %172 = fadd double %171, %115
  %173 = fadd double %172, %120
  %174 = fadd double %173, %126
  %175 = fadd double %174, %120
  %176 = fadd double %175, %126
  %177 = fadd double %176, %131
  %178 = fadd double %177, %136
  %179 = fadd double %178, %141
  %180 = fadd double %179, %146
  %181 = fadd double %180, %100
  %182 = fadd double %181, %152
  ret double %182
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:32
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOGt N0:(ReadLSB w64 0 a1)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ogt double %37, %37
  br i1 %147, label %151, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  %150 = fadd double %149, 1.000000e+00
  br label %151

; <label>:151:                                    ; preds = %148, %145
  %152 = phi double [ %150, %148 ], [ 0.000000e+00, %145 ]
  %153 = fadd double %8, %14
  %154 = fadd double %153, %21
  %155 = fadd double %154, %27
  %156 = fadd double %155, %35
  %157 = fadd double %156, %42
  %158 = fadd double %157, %48
  %159 = fadd double %158, %54
  %160 = fadd double %159, %59
  %161 = fadd double %160, %65
  %162 = fadd double %161, %72
  %163 = fadd double %162, %78
  %164 = fadd double %163, %72
  %165 = fadd double %164, %78
  %166 = fadd double %165, %84
  %167 = fadd double %166, %89
  %168 = fadd double %167, %95
  %169 = fadd double %168, %100
  %170 = fadd double %169, %105
  %171 = fadd double %170, %110
  %172 = fadd double %171, %115
  %173 = fadd double %172, %120
  %174 = fadd double %173, %126
  %175 = fadd double %174, %120
  %176 = fadd double %175, %126
  %177 = fadd double %176, %131
  %178 = fadd double %177, %136
  %179 = fadd double %178, %141
  %180 = fadd double %179, %146
  %181 = fadd double %180, %100
  %182 = fadd double %181, %105
  %183 = fadd double %182, %152
  ret double %183
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:33
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(FOLt N0:(ReadLSB w64 0 a1)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp olt double %37, %37
  br i1 %152, label %156, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  %155 = fadd double %154, 1.000000e+00
  br label %156

; <label>:156:                                    ; preds = %153, %150
  %157 = phi double [ %155, %153 ], [ 0.000000e+00, %150 ]
  %158 = fadd double %8, %14
  %159 = fadd double %158, %21
  %160 = fadd double %159, %27
  %161 = fadd double %160, %35
  %162 = fadd double %161, %42
  %163 = fadd double %162, %48
  %164 = fadd double %163, %54
  %165 = fadd double %164, %59
  %166 = fadd double %165, %65
  %167 = fadd double %166, %72
  %168 = fadd double %167, %78
  %169 = fadd double %168, %72
  %170 = fadd double %169, %78
  %171 = fadd double %170, %84
  %172 = fadd double %171, %89
  %173 = fadd double %172, %95
  %174 = fadd double %173, %100
  %175 = fadd double %174, %105
  %176 = fadd double %175, %110
  %177 = fadd double %176, %115
  %178 = fadd double %177, %120
  %179 = fadd double %178, %126
  %180 = fadd double %179, %120
  %181 = fadd double %180, %126
  %182 = fadd double %181, %131
  %183 = fadd double %182, %136
  %184 = fadd double %183, %141
  %185 = fadd double %184, %146
  %186 = fadd double %185, %100
  %187 = fadd double %186, %105
  %188 = fadd double %187, %151
  %189 = fadd double %188, %157
  ret double %189
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:34
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(FOGt (ReadLSB w64 0 a3)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ogt double %29, %16
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  %160 = fadd double %159, 1.000000e+00
  br label %161

; <label>:161:                                    ; preds = %158, %155
  %162 = phi double [ %160, %158 ], [ 0.000000e+00, %155 ]
  %163 = fadd double %8, %14
  %164 = fadd double %163, %21
  %165 = fadd double %164, %27
  %166 = fadd double %165, %35
  %167 = fadd double %166, %42
  %168 = fadd double %167, %48
  %169 = fadd double %168, %54
  %170 = fadd double %169, %59
  %171 = fadd double %170, %65
  %172 = fadd double %171, %72
  %173 = fadd double %172, %78
  %174 = fadd double %173, %72
  %175 = fadd double %174, %78
  %176 = fadd double %175, %84
  %177 = fadd double %176, %89
  %178 = fadd double %177, %95
  %179 = fadd double %178, %100
  %180 = fadd double %179, %105
  %181 = fadd double %180, %110
  %182 = fadd double %181, %115
  %183 = fadd double %182, %120
  %184 = fadd double %183, %126
  %185 = fadd double %184, %120
  %186 = fadd double %185, %126
  %187 = fadd double %186, %131
  %188 = fadd double %187, %136
  %189 = fadd double %188, %141
  %190 = fadd double %189, %146
  %191 = fadd double %190, %100
  %192 = fadd double %191, %105
  %193 = fadd double %192, %151
  %194 = fadd double %193, %156
  %195 = fadd double %194, %162
  ret double %195
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:35
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a3)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %29, %16
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fadd double %8, %14
  %169 = fadd double %168, %21
  %170 = fadd double %169, %27
  %171 = fadd double %170, %35
  %172 = fadd double %171, %42
  %173 = fadd double %172, %48
  %174 = fadd double %173, %54
  %175 = fadd double %174, %59
  %176 = fadd double %175, %65
  %177 = fadd double %176, %72
  %178 = fadd double %177, %78
  %179 = fadd double %178, %72
  %180 = fadd double %179, %78
  %181 = fadd double %180, %84
  %182 = fadd double %181, %89
  %183 = fadd double %182, %95
  %184 = fadd double %183, %100
  %185 = fadd double %184, %105
  %186 = fadd double %185, %110
  %187 = fadd double %186, %115
  %188 = fadd double %187, %120
  %189 = fadd double %188, %126
  %190 = fadd double %189, %120
  %191 = fadd double %190, %126
  %192 = fadd double %191, %131
  %193 = fadd double %192, %136
  %194 = fadd double %193, %141
  %195 = fadd double %194, %146
  %196 = fadd double %195, %100
  %197 = fadd double %196, %105
  %198 = fadd double %197, %151
  %199 = fadd double %198, %156
  %200 = fadd double %199, %161
  %201 = fadd double %200, %167
  ret double %201
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:36
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(FOGt N0:(ReadLSB w64 0 a3)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ogt double %29, %29
  br i1 %167, label %171, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  %170 = fadd double %169, 1.000000e+00
  br label %171

; <label>:171:                                    ; preds = %168, %165
  %172 = phi double [ %170, %168 ], [ 0.000000e+00, %165 ]
  %173 = fadd double %8, %14
  %174 = fadd double %173, %21
  %175 = fadd double %174, %27
  %176 = fadd double %175, %35
  %177 = fadd double %176, %42
  %178 = fadd double %177, %48
  %179 = fadd double %178, %54
  %180 = fadd double %179, %59
  %181 = fadd double %180, %65
  %182 = fadd double %181, %72
  %183 = fadd double %182, %78
  %184 = fadd double %183, %72
  %185 = fadd double %184, %78
  %186 = fadd double %185, %84
  %187 = fadd double %186, %89
  %188 = fadd double %187, %95
  %189 = fadd double %188, %100
  %190 = fadd double %189, %105
  %191 = fadd double %190, %110
  %192 = fadd double %191, %115
  %193 = fadd double %192, %120
  %194 = fadd double %193, %126
  %195 = fadd double %194, %120
  %196 = fadd double %195, %126
  %197 = fadd double %196, %131
  %198 = fadd double %197, %136
  %199 = fadd double %198, %141
  %200 = fadd double %199, %146
  %201 = fadd double %200, %100
  %202 = fadd double %201, %105
  %203 = fadd double %202, %151
  %204 = fadd double %203, %156
  %205 = fadd double %204, %161
  %206 = fadd double %205, %166
  %207 = fadd double %206, %172
  ret double %207
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:37
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(FOLt N0:(ReadLSB w64 0 a3)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp olt double %29, %29
  br i1 %172, label %176, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  %175 = fadd double %174, 1.000000e+00
  br label %176

; <label>:176:                                    ; preds = %173, %170
  %177 = phi double [ %175, %173 ], [ 0.000000e+00, %170 ]
  %178 = fadd double %8, %14
  %179 = fadd double %178, %21
  %180 = fadd double %179, %27
  %181 = fadd double %180, %35
  %182 = fadd double %181, %42
  %183 = fadd double %182, %48
  %184 = fadd double %183, %54
  %185 = fadd double %184, %59
  %186 = fadd double %185, %65
  %187 = fadd double %186, %72
  %188 = fadd double %187, %78
  %189 = fadd double %188, %72
  %190 = fadd double %189, %78
  %191 = fadd double %190, %84
  %192 = fadd double %191, %89
  %193 = fadd double %192, %95
  %194 = fadd double %193, %100
  %195 = fadd double %194, %105
  %196 = fadd double %195, %110
  %197 = fadd double %196, %115
  %198 = fadd double %197, %120
  %199 = fadd double %198, %126
  %200 = fadd double %199, %120
  %201 = fadd double %200, %126
  %202 = fadd double %201, %131
  %203 = fadd double %202, %136
  %204 = fadd double %203, %141
  %205 = fadd double %204, %146
  %206 = fadd double %205, %100
  %207 = fadd double %206, %105
  %208 = fadd double %207, %151
  %209 = fadd double %208, %156
  %210 = fadd double %209, %161
  %211 = fadd double %210, %166
  %212 = fadd double %211, %171
  %213 = fadd double %212, %177
  ret double %213
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:38
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp oge double %29, %29
  br i1 %172, label %175, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = phi double [ %174, %173 ], [ 0.000000e+00, %170 ]
  %177 = fcmp ogt double %67, %16
  br i1 %177, label %181, label %178

; <label>:178:                                    ; preds = %175
  %179 = call double @fp64_dis(double %67, double %16)
  %180 = fadd double %179, 1.000000e+00
  br label %181

; <label>:181:                                    ; preds = %178, %175
  %182 = phi double [ %180, %178 ], [ 0.000000e+00, %175 ]
  %183 = fadd double %8, %14
  %184 = fadd double %183, %21
  %185 = fadd double %184, %27
  %186 = fadd double %185, %35
  %187 = fadd double %186, %42
  %188 = fadd double %187, %48
  %189 = fadd double %188, %54
  %190 = fadd double %189, %59
  %191 = fadd double %190, %65
  %192 = fadd double %191, %72
  %193 = fadd double %192, %78
  %194 = fadd double %193, %72
  %195 = fadd double %194, %78
  %196 = fadd double %195, %84
  %197 = fadd double %196, %89
  %198 = fadd double %197, %95
  %199 = fadd double %198, %100
  %200 = fadd double %199, %105
  %201 = fadd double %200, %110
  %202 = fadd double %201, %115
  %203 = fadd double %202, %120
  %204 = fadd double %203, %126
  %205 = fadd double %204, %120
  %206 = fadd double %205, %126
  %207 = fadd double %206, %131
  %208 = fadd double %207, %136
  %209 = fadd double %208, %141
  %210 = fadd double %209, %146
  %211 = fadd double %210, %100
  %212 = fadd double %211, %105
  %213 = fadd double %212, %151
  %214 = fadd double %213, %156
  %215 = fadd double %214, %161
  %216 = fadd double %215, %166
  %217 = fadd double %216, %171
  %218 = fadd double %217, %176
  %219 = fadd double %218, %182
  ret double %219
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:39
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp oge double %29, %29
  br i1 %172, label %175, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = phi double [ %174, %173 ], [ 0.000000e+00, %170 ]
  %177 = fcmp ole double %67, %16
  br i1 %177, label %180, label %178

; <label>:178:                                    ; preds = %175
  %179 = call double @fp64_dis(double %67, double %16)
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = phi double [ %179, %178 ], [ 0.000000e+00, %175 ]
  %182 = fcmp olt double %67, %16
  br i1 %182, label %186, label %183

; <label>:183:                                    ; preds = %180
  %184 = call double @fp64_dis(double %67, double %16)
  %185 = fadd double %184, 1.000000e+00
  br label %186

; <label>:186:                                    ; preds = %183, %180
  %187 = phi double [ %185, %183 ], [ 0.000000e+00, %180 ]
  %188 = fadd double %8, %14
  %189 = fadd double %188, %21
  %190 = fadd double %189, %27
  %191 = fadd double %190, %35
  %192 = fadd double %191, %42
  %193 = fadd double %192, %48
  %194 = fadd double %193, %54
  %195 = fadd double %194, %59
  %196 = fadd double %195, %65
  %197 = fadd double %196, %72
  %198 = fadd double %197, %78
  %199 = fadd double %198, %72
  %200 = fadd double %199, %78
  %201 = fadd double %200, %84
  %202 = fadd double %201, %89
  %203 = fadd double %202, %95
  %204 = fadd double %203, %100
  %205 = fadd double %204, %105
  %206 = fadd double %205, %110
  %207 = fadd double %206, %115
  %208 = fadd double %207, %120
  %209 = fadd double %208, %126
  %210 = fadd double %209, %120
  %211 = fadd double %210, %126
  %212 = fadd double %211, %131
  %213 = fadd double %212, %136
  %214 = fadd double %213, %141
  %215 = fadd double %214, %146
  %216 = fadd double %215, %100
  %217 = fadd double %216, %105
  %218 = fadd double %217, %151
  %219 = fadd double %218, %156
  %220 = fadd double %219, %161
  %221 = fadd double %220, %166
  %222 = fadd double %221, %171
  %223 = fadd double %222, %176
  %224 = fadd double %223, %181
  %225 = fadd double %224, %187
  ret double %225
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:40
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOGt N0:(ReadLSB w64 0 a0)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp oge double %29, %29
  br i1 %172, label %175, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = phi double [ %174, %173 ], [ 0.000000e+00, %170 ]
  %177 = fcmp ole double %67, %16
  br i1 %177, label %180, label %178

; <label>:178:                                    ; preds = %175
  %179 = call double @fp64_dis(double %67, double %16)
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = phi double [ %179, %178 ], [ 0.000000e+00, %175 ]
  %182 = fcmp oge double %67, %16
  br i1 %182, label %185, label %183

; <label>:183:                                    ; preds = %180
  %184 = call double @fp64_dis(double %67, double %16)
  br label %185

; <label>:185:                                    ; preds = %183, %180
  %186 = phi double [ %184, %183 ], [ 0.000000e+00, %180 ]
  %187 = fcmp ogt double %67, %67
  br i1 %187, label %191, label %188

; <label>:188:                                    ; preds = %185
  %189 = call double @fp64_dis(double %67, double %67)
  %190 = fadd double %189, 1.000000e+00
  br label %191

; <label>:191:                                    ; preds = %188, %185
  %192 = phi double [ %190, %188 ], [ 0.000000e+00, %185 ]
  %193 = fadd double %8, %14
  %194 = fadd double %193, %21
  %195 = fadd double %194, %27
  %196 = fadd double %195, %35
  %197 = fadd double %196, %42
  %198 = fadd double %197, %48
  %199 = fadd double %198, %54
  %200 = fadd double %199, %59
  %201 = fadd double %200, %65
  %202 = fadd double %201, %72
  %203 = fadd double %202, %78
  %204 = fadd double %203, %72
  %205 = fadd double %204, %78
  %206 = fadd double %205, %84
  %207 = fadd double %206, %89
  %208 = fadd double %207, %95
  %209 = fadd double %208, %100
  %210 = fadd double %209, %105
  %211 = fadd double %210, %110
  %212 = fadd double %211, %115
  %213 = fadd double %212, %120
  %214 = fadd double %213, %126
  %215 = fadd double %214, %120
  %216 = fadd double %215, %126
  %217 = fadd double %216, %131
  %218 = fadd double %217, %136
  %219 = fadd double %218, %141
  %220 = fadd double %219, %146
  %221 = fadd double %220, %100
  %222 = fadd double %221, %105
  %223 = fadd double %222, %151
  %224 = fadd double %223, %156
  %225 = fadd double %224, %161
  %226 = fadd double %225, %166
  %227 = fadd double %226, %171
  %228 = fadd double %227, %176
  %229 = fadd double %228, %181
  %230 = fadd double %229, %186
  %231 = fadd double %230, %192
  ret double %231
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:41
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(FOLt N0:(ReadLSB w64 0 a0)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp oge double %29, %29
  br i1 %172, label %175, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = phi double [ %174, %173 ], [ 0.000000e+00, %170 ]
  %177 = fcmp ole double %67, %16
  br i1 %177, label %180, label %178

; <label>:178:                                    ; preds = %175
  %179 = call double @fp64_dis(double %67, double %16)
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = phi double [ %179, %178 ], [ 0.000000e+00, %175 ]
  %182 = fcmp oge double %67, %16
  br i1 %182, label %185, label %183

; <label>:183:                                    ; preds = %180
  %184 = call double @fp64_dis(double %67, double %16)
  br label %185

; <label>:185:                                    ; preds = %183, %180
  %186 = phi double [ %184, %183 ], [ 0.000000e+00, %180 ]
  %187 = fcmp ole double %67, %67
  br i1 %187, label %190, label %188

; <label>:188:                                    ; preds = %185
  %189 = call double @fp64_dis(double %67, double %67)
  br label %190

; <label>:190:                                    ; preds = %188, %185
  %191 = phi double [ %189, %188 ], [ 0.000000e+00, %185 ]
  %192 = fcmp olt double %67, %67
  br i1 %192, label %196, label %193

; <label>:193:                                    ; preds = %190
  %194 = call double @fp64_dis(double %67, double %67)
  %195 = fadd double %194, 1.000000e+00
  br label %196

; <label>:196:                                    ; preds = %193, %190
  %197 = phi double [ %195, %193 ], [ 0.000000e+00, %190 ]
  %198 = fadd double %8, %14
  %199 = fadd double %198, %21
  %200 = fadd double %199, %27
  %201 = fadd double %200, %35
  %202 = fadd double %201, %42
  %203 = fadd double %202, %48
  %204 = fadd double %203, %54
  %205 = fadd double %204, %59
  %206 = fadd double %205, %65
  %207 = fadd double %206, %72
  %208 = fadd double %207, %78
  %209 = fadd double %208, %72
  %210 = fadd double %209, %78
  %211 = fadd double %210, %84
  %212 = fadd double %211, %89
  %213 = fadd double %212, %95
  %214 = fadd double %213, %100
  %215 = fadd double %214, %105
  %216 = fadd double %215, %110
  %217 = fadd double %216, %115
  %218 = fadd double %217, %120
  %219 = fadd double %218, %126
  %220 = fadd double %219, %120
  %221 = fadd double %220, %126
  %222 = fadd double %221, %131
  %223 = fadd double %222, %136
  %224 = fadd double %223, %141
  %225 = fadd double %224, %146
  %226 = fadd double %225, %100
  %227 = fadd double %226, %105
  %228 = fadd double %227, %151
  %229 = fadd double %228, %156
  %230 = fadd double %229, %161
  %231 = fadd double %230, %166
  %232 = fadd double %231, %171
  %233 = fadd double %232, %176
  %234 = fadd double %233, %181
  %235 = fadd double %234, %186
  %236 = fadd double %235, %191
  %237 = fadd double %236, %197
  ret double %237
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:42
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(FOGt N0:(ReadLSB w64 0 a2)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp oge double %29, %29
  br i1 %172, label %175, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = phi double [ %174, %173 ], [ 0.000000e+00, %170 ]
  %177 = fcmp ole double %67, %16
  br i1 %177, label %180, label %178

; <label>:178:                                    ; preds = %175
  %179 = call double @fp64_dis(double %67, double %16)
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = phi double [ %179, %178 ], [ 0.000000e+00, %175 ]
  %182 = fcmp oge double %67, %16
  br i1 %182, label %185, label %183

; <label>:183:                                    ; preds = %180
  %184 = call double @fp64_dis(double %67, double %16)
  br label %185

; <label>:185:                                    ; preds = %183, %180
  %186 = phi double [ %184, %183 ], [ 0.000000e+00, %180 ]
  %187 = fcmp ole double %67, %67
  br i1 %187, label %190, label %188

; <label>:188:                                    ; preds = %185
  %189 = call double @fp64_dis(double %67, double %67)
  br label %190

; <label>:190:                                    ; preds = %188, %185
  %191 = phi double [ %189, %188 ], [ 0.000000e+00, %185 ]
  %192 = fcmp oge double %67, %67
  br i1 %192, label %195, label %193

; <label>:193:                                    ; preds = %190
  %194 = call double @fp64_dis(double %67, double %67)
  br label %195

; <label>:195:                                    ; preds = %193, %190
  %196 = phi double [ %194, %193 ], [ 0.000000e+00, %190 ]
  %197 = fcmp ogt double %16, %16
  br i1 %197, label %201, label %198

; <label>:198:                                    ; preds = %195
  %199 = call double @fp64_dis(double %16, double %16)
  %200 = fadd double %199, 1.000000e+00
  br label %201

; <label>:201:                                    ; preds = %198, %195
  %202 = phi double [ %200, %198 ], [ 0.000000e+00, %195 ]
  %203 = fadd double %8, %14
  %204 = fadd double %203, %21
  %205 = fadd double %204, %27
  %206 = fadd double %205, %35
  %207 = fadd double %206, %42
  %208 = fadd double %207, %48
  %209 = fadd double %208, %54
  %210 = fadd double %209, %59
  %211 = fadd double %210, %65
  %212 = fadd double %211, %72
  %213 = fadd double %212, %78
  %214 = fadd double %213, %72
  %215 = fadd double %214, %78
  %216 = fadd double %215, %84
  %217 = fadd double %216, %89
  %218 = fadd double %217, %95
  %219 = fadd double %218, %100
  %220 = fadd double %219, %105
  %221 = fadd double %220, %110
  %222 = fadd double %221, %115
  %223 = fadd double %222, %120
  %224 = fadd double %223, %126
  %225 = fadd double %224, %120
  %226 = fadd double %225, %126
  %227 = fadd double %226, %131
  %228 = fadd double %227, %136
  %229 = fadd double %228, %141
  %230 = fadd double %229, %146
  %231 = fadd double %230, %100
  %232 = fadd double %231, %105
  %233 = fadd double %232, %151
  %234 = fadd double %233, %156
  %235 = fadd double %234, %161
  %236 = fadd double %235, %166
  %237 = fadd double %236, %171
  %238 = fadd double %237, %176
  %239 = fadd double %238, %181
  %240 = fadd double %239, %186
  %241 = fadd double %240, %191
  %242 = fadd double %241, %196
  %243 = fadd double %242, %202
  ret double %243
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:43
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a1)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a3)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a3)
           N0))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOLt N0:(ReadLSB w64 0 a0)
           N0))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a2)
           N0))
(FOLt N0:(ReadLSB w64 0 a2)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp oge double %37, %16
  br i1 %101, label %104, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  br label %104

; <label>:104:                                    ; preds = %102, %99
  %105 = phi double [ %103, %102 ], [ 0.000000e+00, %99 ]
  %106 = fcmp ole double %67, %37
  br i1 %106, label %109, label %107

; <label>:107:                                    ; preds = %104
  %108 = call double @fp64_dis(double %67, double %37)
  br label %109

; <label>:109:                                    ; preds = %107, %104
  %110 = phi double [ %108, %107 ], [ 0.000000e+00, %104 ]
  %111 = fcmp oge double %67, %37
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %109
  %113 = call double @fp64_dis(double %67, double %37)
  br label %114

; <label>:114:                                    ; preds = %112, %109
  %115 = phi double [ %113, %112 ], [ 0.000000e+00, %109 ]
  %116 = fcmp ole double %16, %1
  br i1 %116, label %119, label %117

; <label>:117:                                    ; preds = %114
  %118 = call double @fp64_dis(double %16, double %1)
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = phi double [ %118, %117 ], [ 0.000000e+00, %114 ]
  %121 = fcmp olt double %16, %1
  br i1 %121, label %125, label %122

; <label>:122:                                    ; preds = %119
  %123 = call double @fp64_dis(double %16, double %1)
  %124 = fadd double %123, 1.000000e+00
  br label %125

; <label>:125:                                    ; preds = %122, %119
  %126 = phi double [ %124, %122 ], [ 0.000000e+00, %119 ]
  %127 = fcmp ole double %67, %29
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  %129 = call double @fp64_dis(double %67, double %29)
  br label %130

; <label>:130:                                    ; preds = %128, %125
  %131 = phi double [ %129, %128 ], [ 0.000000e+00, %125 ]
  %132 = fcmp oge double %67, %29
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call double @fp64_dis(double %67, double %29)
  br label %135

; <label>:135:                                    ; preds = %133, %130
  %136 = phi double [ %134, %133 ], [ 0.000000e+00, %130 ]
  %137 = fcmp ole double %16, %67
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %135
  %139 = call double @fp64_dis(double %16, double %67)
  br label %140

; <label>:140:                                    ; preds = %138, %135
  %141 = phi double [ %139, %138 ], [ 0.000000e+00, %135 ]
  %142 = fcmp oge double %16, %67
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %140
  %144 = call double @fp64_dis(double %16, double %67)
  br label %145

; <label>:145:                                    ; preds = %143, %140
  %146 = phi double [ %144, %143 ], [ 0.000000e+00, %140 ]
  %147 = fcmp ole double %37, %37
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %145
  %149 = call double @fp64_dis(double %37, double %37)
  br label %150

; <label>:150:                                    ; preds = %148, %145
  %151 = phi double [ %149, %148 ], [ 0.000000e+00, %145 ]
  %152 = fcmp oge double %37, %37
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %150
  %154 = call double @fp64_dis(double %37, double %37)
  br label %155

; <label>:155:                                    ; preds = %153, %150
  %156 = phi double [ %154, %153 ], [ 0.000000e+00, %150 ]
  %157 = fcmp ole double %29, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %29, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %29, %16
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %29, double %16)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fcmp ole double %29, %29
  br i1 %167, label %170, label %168

; <label>:168:                                    ; preds = %165
  %169 = call double @fp64_dis(double %29, double %29)
  br label %170

; <label>:170:                                    ; preds = %168, %165
  %171 = phi double [ %169, %168 ], [ 0.000000e+00, %165 ]
  %172 = fcmp oge double %29, %29
  br i1 %172, label %175, label %173

; <label>:173:                                    ; preds = %170
  %174 = call double @fp64_dis(double %29, double %29)
  br label %175

; <label>:175:                                    ; preds = %173, %170
  %176 = phi double [ %174, %173 ], [ 0.000000e+00, %170 ]
  %177 = fcmp ole double %67, %16
  br i1 %177, label %180, label %178

; <label>:178:                                    ; preds = %175
  %179 = call double @fp64_dis(double %67, double %16)
  br label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = phi double [ %179, %178 ], [ 0.000000e+00, %175 ]
  %182 = fcmp oge double %67, %16
  br i1 %182, label %185, label %183

; <label>:183:                                    ; preds = %180
  %184 = call double @fp64_dis(double %67, double %16)
  br label %185

; <label>:185:                                    ; preds = %183, %180
  %186 = phi double [ %184, %183 ], [ 0.000000e+00, %180 ]
  %187 = fcmp ole double %67, %67
  br i1 %187, label %190, label %188

; <label>:188:                                    ; preds = %185
  %189 = call double @fp64_dis(double %67, double %67)
  br label %190

; <label>:190:                                    ; preds = %188, %185
  %191 = phi double [ %189, %188 ], [ 0.000000e+00, %185 ]
  %192 = fcmp oge double %67, %67
  br i1 %192, label %195, label %193

; <label>:193:                                    ; preds = %190
  %194 = call double @fp64_dis(double %67, double %67)
  br label %195

; <label>:195:                                    ; preds = %193, %190
  %196 = phi double [ %194, %193 ], [ 0.000000e+00, %190 ]
  %197 = fcmp ole double %16, %16
  br i1 %197, label %200, label %198

; <label>:198:                                    ; preds = %195
  %199 = call double @fp64_dis(double %16, double %16)
  br label %200

; <label>:200:                                    ; preds = %198, %195
  %201 = phi double [ %199, %198 ], [ 0.000000e+00, %195 ]
  %202 = fcmp olt double %16, %16
  br i1 %202, label %206, label %203

; <label>:203:                                    ; preds = %200
  %204 = call double @fp64_dis(double %16, double %16)
  %205 = fadd double %204, 1.000000e+00
  br label %206

; <label>:206:                                    ; preds = %203, %200
  %207 = phi double [ %205, %203 ], [ 0.000000e+00, %200 ]
  %208 = fadd double %8, %14
  %209 = fadd double %208, %21
  %210 = fadd double %209, %27
  %211 = fadd double %210, %35
  %212 = fadd double %211, %42
  %213 = fadd double %212, %48
  %214 = fadd double %213, %54
  %215 = fadd double %214, %59
  %216 = fadd double %215, %65
  %217 = fadd double %216, %72
  %218 = fadd double %217, %78
  %219 = fadd double %218, %72
  %220 = fadd double %219, %78
  %221 = fadd double %220, %84
  %222 = fadd double %221, %89
  %223 = fadd double %222, %95
  %224 = fadd double %223, %100
  %225 = fadd double %224, %105
  %226 = fadd double %225, %110
  %227 = fadd double %226, %115
  %228 = fadd double %227, %120
  %229 = fadd double %228, %126
  %230 = fadd double %229, %120
  %231 = fadd double %230, %126
  %232 = fadd double %231, %131
  %233 = fadd double %232, %136
  %234 = fadd double %233, %141
  %235 = fadd double %234, %146
  %236 = fadd double %235, %100
  %237 = fadd double %236, %105
  %238 = fadd double %237, %151
  %239 = fadd double %238, %156
  %240 = fadd double %239, %161
  %241 = fadd double %240, %166
  %242 = fadd double %241, %171
  %243 = fadd double %242, %176
  %244 = fadd double %243, %181
  %245 = fadd double %244, %186
  %246 = fadd double %245, %191
  %247 = fadd double %246, %196
  %248 = fadd double %247, %201
  %249 = fadd double %248, %207
  ret double %249
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:20
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ogt double %67, %16
  br i1 %107, label %111, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  %110 = fadd double %109, 1.000000e+00
  br label %111

; <label>:111:                                    ; preds = %108, %105
  %112 = phi double [ %110, %108 ], [ 0.000000e+00, %105 ]
  %113 = fadd double %8, %14
  %114 = fadd double %113, %21
  %115 = fadd double %114, %27
  %116 = fadd double %115, %35
  %117 = fadd double %116, %42
  %118 = fadd double %117, %48
  %119 = fadd double %118, %54
  %120 = fadd double %119, %59
  %121 = fadd double %120, %65
  %122 = fadd double %121, %72
  %123 = fadd double %122, %78
  %124 = fadd double %123, %72
  %125 = fadd double %124, %78
  %126 = fadd double %125, %84
  %127 = fadd double %126, %89
  %128 = fadd double %127, %95
  %129 = fadd double %128, %100
  %130 = fadd double %129, %106
  %131 = fadd double %130, %112
  ret double %131
}
solution : a0  type: double  val : 8.019734e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : 7.419021e+307
solution : a3  type: double  val : 1.870224e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,16,215,85,0,0,]
a2
[97,50,0,16,215,85,0,0,]
a3
[97,51,0,16,215,85,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[97,48,0,16,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:21
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp oge double %67, %16
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  br label %115

; <label>:115:                                    ; preds = %113, %110
  %116 = phi double [ %114, %113 ], [ 0.000000e+00, %110 ]
  %117 = fadd double %8, %14
  %118 = fadd double %117, %21
  %119 = fadd double %118, %27
  %120 = fadd double %119, %35
  %121 = fadd double %120, %42
  %122 = fadd double %121, %48
  %123 = fadd double %122, %54
  %124 = fadd double %123, %59
  %125 = fadd double %124, %65
  %126 = fadd double %125, %72
  %127 = fadd double %126, %78
  %128 = fadd double %127, %72
  %129 = fadd double %128, %78
  %130 = fadd double %129, %84
  %131 = fadd double %130, %89
  %132 = fadd double %131, %95
  %133 = fadd double %132, %100
  %134 = fadd double %133, %106
  %135 = fadd double %134, %111
  %136 = fadd double %135, %116
  ret double %136
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:22
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ogt double %67, %1
  br i1 %118, label %122, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %67, double %1)
  %121 = fadd double %120, 1.000000e+00
  br label %122

; <label>:122:                                    ; preds = %119, %116
  %123 = phi double [ %121, %119 ], [ 0.000000e+00, %116 ]
  %124 = fadd double %8, %14
  %125 = fadd double %124, %21
  %126 = fadd double %125, %27
  %127 = fadd double %126, %35
  %128 = fadd double %127, %42
  %129 = fadd double %128, %48
  %130 = fadd double %129, %54
  %131 = fadd double %130, %59
  %132 = fadd double %131, %65
  %133 = fadd double %132, %72
  %134 = fadd double %133, %78
  %135 = fadd double %134, %72
  %136 = fadd double %135, %78
  %137 = fadd double %136, %84
  %138 = fadd double %137, %89
  %139 = fadd double %138, %95
  %140 = fadd double %139, %100
  %141 = fadd double %140, %106
  %142 = fadd double %141, %111
  %143 = fadd double %142, %117
  %144 = fadd double %143, %123
  ret double %144
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:23
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp oge double %67, %1
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %67, double %1)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fadd double %8, %14
  %124 = fadd double %123, %21
  %125 = fadd double %124, %27
  %126 = fadd double %125, %35
  %127 = fadd double %126, %42
  %128 = fadd double %127, %48
  %129 = fadd double %128, %54
  %130 = fadd double %129, %59
  %131 = fadd double %130, %65
  %132 = fadd double %131, %72
  %133 = fadd double %132, %78
  %134 = fadd double %133, %72
  %135 = fadd double %134, %78
  %136 = fadd double %135, %84
  %137 = fadd double %136, %89
  %138 = fadd double %137, %95
  %139 = fadd double %138, %100
  %140 = fadd double %139, %106
  %141 = fadd double %140, %111
  %142 = fadd double %141, %117
  %143 = fadd double %142, %89
  %144 = fadd double %143, %122
  ret double %144
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:24
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ogt double %67, %1
  br i1 %118, label %122, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %67, double %1)
  %121 = fadd double %120, 1.000000e+00
  br label %122

; <label>:122:                                    ; preds = %119, %116
  %123 = phi double [ %121, %119 ], [ 0.000000e+00, %116 ]
  %124 = fadd double %8, %14
  %125 = fadd double %124, %21
  %126 = fadd double %125, %27
  %127 = fadd double %126, %35
  %128 = fadd double %127, %42
  %129 = fadd double %128, %48
  %130 = fadd double %129, %54
  %131 = fadd double %130, %59
  %132 = fadd double %131, %65
  %133 = fadd double %132, %72
  %134 = fadd double %133, %78
  %135 = fadd double %134, %72
  %136 = fadd double %135, %78
  %137 = fadd double %136, %84
  %138 = fadd double %137, %89
  %139 = fadd double %138, %95
  %140 = fadd double %139, %100
  %141 = fadd double %140, %106
  %142 = fadd double %141, %111
  %143 = fadd double %142, %117
  %144 = fadd double %143, %89
  %145 = fadd double %144, %95
  %146 = fadd double %145, %123
  ret double %146
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:25
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp oge double %67, %1
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %67, double %1)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fadd double %8, %14
  %124 = fadd double %123, %21
  %125 = fadd double %124, %27
  %126 = fadd double %125, %35
  %127 = fadd double %126, %42
  %128 = fadd double %127, %48
  %129 = fadd double %128, %54
  %130 = fadd double %129, %59
  %131 = fadd double %130, %65
  %132 = fadd double %131, %72
  %133 = fadd double %132, %78
  %134 = fadd double %133, %72
  %135 = fadd double %134, %78
  %136 = fadd double %135, %84
  %137 = fadd double %136, %89
  %138 = fadd double %137, %95
  %139 = fadd double %138, %100
  %140 = fadd double %139, %106
  %141 = fadd double %140, %111
  %142 = fadd double %141, %117
  %143 = fadd double %142, %89
  %144 = fadd double %143, %95
  %145 = fadd double %144, %89
  %146 = fadd double %145, %122
  ret double %146
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:26
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ogt double %16, %29
  br i1 %118, label %122, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  %121 = fadd double %120, 1.000000e+00
  br label %122

; <label>:122:                                    ; preds = %119, %116
  %123 = phi double [ %121, %119 ], [ 0.000000e+00, %116 ]
  %124 = fadd double %8, %14
  %125 = fadd double %124, %21
  %126 = fadd double %125, %27
  %127 = fadd double %126, %35
  %128 = fadd double %127, %42
  %129 = fadd double %128, %48
  %130 = fadd double %129, %54
  %131 = fadd double %130, %59
  %132 = fadd double %131, %65
  %133 = fadd double %132, %72
  %134 = fadd double %133, %78
  %135 = fadd double %134, %72
  %136 = fadd double %135, %78
  %137 = fadd double %136, %84
  %138 = fadd double %137, %89
  %139 = fadd double %138, %95
  %140 = fadd double %139, %100
  %141 = fadd double %140, %106
  %142 = fadd double %141, %111
  %143 = fadd double %142, %117
  %144 = fadd double %143, %89
  %145 = fadd double %144, %95
  %146 = fadd double %145, %89
  %147 = fadd double %146, %95
  %148 = fadd double %147, %123
  ret double %148
}
solution : a0  type: double  val : -8.988466e+307
solution : a1  type: double  val : -6.895195e+307
solution : a2  type: double  val : -3.890808e+307
solution : a3  type: double  val : -8.988466e+307
solution : a4  type: double  val : 8.988466e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,16,215,85,0,0,]
a2
[97,50,0,16,215,85,0,0,]
a3
[97,51,0,16,215,85,0,0,]
a4
[97,52,0,16,215,85,0,0,]
a5
[97,53,0,16,215,85,0,0,]
a0
[97,48,0,16,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:27
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp oge double %16, %29
  br i1 %123, label %126, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  br label %126

; <label>:126:                                    ; preds = %124, %121
  %127 = phi double [ %125, %124 ], [ 0.000000e+00, %121 ]
  %128 = fadd double %8, %14
  %129 = fadd double %128, %21
  %130 = fadd double %129, %27
  %131 = fadd double %130, %35
  %132 = fadd double %131, %42
  %133 = fadd double %132, %48
  %134 = fadd double %133, %54
  %135 = fadd double %134, %59
  %136 = fadd double %135, %65
  %137 = fadd double %136, %72
  %138 = fadd double %137, %78
  %139 = fadd double %138, %72
  %140 = fadd double %139, %78
  %141 = fadd double %140, %84
  %142 = fadd double %141, %89
  %143 = fadd double %142, %95
  %144 = fadd double %143, %100
  %145 = fadd double %144, %106
  %146 = fadd double %145, %111
  %147 = fadd double %146, %117
  %148 = fadd double %147, %89
  %149 = fadd double %148, %95
  %150 = fadd double %149, %89
  %151 = fadd double %150, %95
  %152 = fadd double %151, %122
  %153 = fadd double %152, %127
  ret double %153
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:28
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ogt double %67, %29
  br i1 %129, label %133, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  %132 = fadd double %131, 1.000000e+00
  br label %133

; <label>:133:                                    ; preds = %130, %127
  %134 = phi double [ %132, %130 ], [ 0.000000e+00, %127 ]
  %135 = fadd double %8, %14
  %136 = fadd double %135, %21
  %137 = fadd double %136, %27
  %138 = fadd double %137, %35
  %139 = fadd double %138, %42
  %140 = fadd double %139, %48
  %141 = fadd double %140, %54
  %142 = fadd double %141, %59
  %143 = fadd double %142, %65
  %144 = fadd double %143, %72
  %145 = fadd double %144, %78
  %146 = fadd double %145, %72
  %147 = fadd double %146, %78
  %148 = fadd double %147, %84
  %149 = fadd double %148, %89
  %150 = fadd double %149, %95
  %151 = fadd double %150, %100
  %152 = fadd double %151, %106
  %153 = fadd double %152, %111
  %154 = fadd double %153, %117
  %155 = fadd double %154, %89
  %156 = fadd double %155, %95
  %157 = fadd double %156, %89
  %158 = fadd double %157, %95
  %159 = fadd double %158, %122
  %160 = fadd double %159, %128
  %161 = fadd double %160, %134
  ret double %161
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:29
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp oge double %67, %29
  br i1 %134, label %137, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  br label %137

; <label>:137:                                    ; preds = %135, %132
  %138 = phi double [ %136, %135 ], [ 0.000000e+00, %132 ]
  %139 = fadd double %8, %14
  %140 = fadd double %139, %21
  %141 = fadd double %140, %27
  %142 = fadd double %141, %35
  %143 = fadd double %142, %42
  %144 = fadd double %143, %48
  %145 = fadd double %144, %54
  %146 = fadd double %145, %59
  %147 = fadd double %146, %65
  %148 = fadd double %147, %72
  %149 = fadd double %148, %78
  %150 = fadd double %149, %72
  %151 = fadd double %150, %78
  %152 = fadd double %151, %84
  %153 = fadd double %152, %89
  %154 = fadd double %153, %95
  %155 = fadd double %154, %100
  %156 = fadd double %155, %106
  %157 = fadd double %156, %111
  %158 = fadd double %157, %117
  %159 = fadd double %158, %89
  %160 = fadd double %159, %95
  %161 = fadd double %160, %89
  %162 = fadd double %161, %95
  %163 = fadd double %162, %122
  %164 = fadd double %163, %128
  %165 = fadd double %164, %133
  %166 = fadd double %165, %138
  ret double %166
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:30
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ogt double %37, %29
  br i1 %140, label %144, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  %143 = fadd double %142, 1.000000e+00
  br label %144

; <label>:144:                                    ; preds = %141, %138
  %145 = phi double [ %143, %141 ], [ 0.000000e+00, %138 ]
  %146 = fadd double %8, %14
  %147 = fadd double %146, %21
  %148 = fadd double %147, %27
  %149 = fadd double %148, %35
  %150 = fadd double %149, %42
  %151 = fadd double %150, %48
  %152 = fadd double %151, %54
  %153 = fadd double %152, %59
  %154 = fadd double %153, %65
  %155 = fadd double %154, %72
  %156 = fadd double %155, %78
  %157 = fadd double %156, %72
  %158 = fadd double %157, %78
  %159 = fadd double %158, %84
  %160 = fadd double %159, %89
  %161 = fadd double %160, %95
  %162 = fadd double %161, %100
  %163 = fadd double %162, %106
  %164 = fadd double %163, %111
  %165 = fadd double %164, %117
  %166 = fadd double %165, %89
  %167 = fadd double %166, %95
  %168 = fadd double %167, %89
  %169 = fadd double %168, %95
  %170 = fadd double %169, %122
  %171 = fadd double %170, %128
  %172 = fadd double %171, %133
  %173 = fadd double %172, %139
  %174 = fadd double %173, %145
  ret double %174
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:31
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp oge double %37, %29
  br i1 %145, label %148, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  br label %148

; <label>:148:                                    ; preds = %146, %143
  %149 = phi double [ %147, %146 ], [ 0.000000e+00, %143 ]
  %150 = fadd double %8, %14
  %151 = fadd double %150, %21
  %152 = fadd double %151, %27
  %153 = fadd double %152, %35
  %154 = fadd double %153, %42
  %155 = fadd double %154, %48
  %156 = fadd double %155, %54
  %157 = fadd double %156, %59
  %158 = fadd double %157, %65
  %159 = fadd double %158, %72
  %160 = fadd double %159, %78
  %161 = fadd double %160, %72
  %162 = fadd double %161, %78
  %163 = fadd double %162, %84
  %164 = fadd double %163, %89
  %165 = fadd double %164, %95
  %166 = fadd double %165, %100
  %167 = fadd double %166, %106
  %168 = fadd double %167, %111
  %169 = fadd double %168, %117
  %170 = fadd double %169, %89
  %171 = fadd double %170, %95
  %172 = fadd double %171, %89
  %173 = fadd double %172, %95
  %174 = fadd double %173, %122
  %175 = fadd double %174, %128
  %176 = fadd double %175, %133
  %177 = fadd double %176, %139
  %178 = fadd double %177, %144
  %179 = fadd double %178, %149
  ret double %179
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:32
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %37, %29
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %37, double %29)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fadd double %8, %14
  %158 = fadd double %157, %21
  %159 = fadd double %158, %27
  %160 = fadd double %159, %35
  %161 = fadd double %160, %42
  %162 = fadd double %161, %48
  %163 = fadd double %162, %54
  %164 = fadd double %163, %59
  %165 = fadd double %164, %65
  %166 = fadd double %165, %72
  %167 = fadd double %166, %78
  %168 = fadd double %167, %72
  %169 = fadd double %168, %78
  %170 = fadd double %169, %84
  %171 = fadd double %170, %89
  %172 = fadd double %171, %95
  %173 = fadd double %172, %100
  %174 = fadd double %173, %106
  %175 = fadd double %174, %111
  %176 = fadd double %175, %117
  %177 = fadd double %176, %89
  %178 = fadd double %177, %95
  %179 = fadd double %178, %89
  %180 = fadd double %179, %95
  %181 = fadd double %180, %122
  %182 = fadd double %181, %128
  %183 = fadd double %182, %133
  %184 = fadd double %183, %139
  %185 = fadd double %184, %144
  %186 = fadd double %185, %150
  %187 = fadd double %186, %156
  ret double %187
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:33
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp oge double %37, %29
  br i1 %151, label %154, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %37, double %29)
  br label %154

; <label>:154:                                    ; preds = %152, %149
  %155 = phi double [ %153, %152 ], [ 0.000000e+00, %149 ]
  %156 = fadd double %8, %14
  %157 = fadd double %156, %21
  %158 = fadd double %157, %27
  %159 = fadd double %158, %35
  %160 = fadd double %159, %42
  %161 = fadd double %160, %48
  %162 = fadd double %161, %54
  %163 = fadd double %162, %59
  %164 = fadd double %163, %65
  %165 = fadd double %164, %72
  %166 = fadd double %165, %78
  %167 = fadd double %166, %72
  %168 = fadd double %167, %78
  %169 = fadd double %168, %84
  %170 = fadd double %169, %89
  %171 = fadd double %170, %95
  %172 = fadd double %171, %100
  %173 = fadd double %172, %106
  %174 = fadd double %173, %111
  %175 = fadd double %174, %117
  %176 = fadd double %175, %89
  %177 = fadd double %176, %95
  %178 = fadd double %177, %89
  %179 = fadd double %178, %95
  %180 = fadd double %179, %122
  %181 = fadd double %180, %128
  %182 = fadd double %181, %133
  %183 = fadd double %182, %139
  %184 = fadd double %183, %144
  %185 = fadd double %184, %150
  %186 = fadd double %185, %144
  %187 = fadd double %186, %155
  ret double %187
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   %4 = load double*, double** %a.addr, align 8
cons size:34
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a0)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ole double %16, %67
  br i1 %151, label %154, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  br label %154

; <label>:154:                                    ; preds = %152, %149
  %155 = phi double [ %153, %152 ], [ 0.000000e+00, %149 ]
  %156 = fadd double %8, %14
  %157 = fadd double %156, %21
  %158 = fadd double %157, %27
  %159 = fadd double %158, %35
  %160 = fadd double %159, %42
  %161 = fadd double %160, %48
  %162 = fadd double %161, %54
  %163 = fadd double %162, %59
  %164 = fadd double %163, %65
  %165 = fadd double %164, %72
  %166 = fadd double %165, %78
  %167 = fadd double %166, %72
  %168 = fadd double %167, %78
  %169 = fadd double %168, %84
  %170 = fadd double %169, %89
  %171 = fadd double %170, %95
  %172 = fadd double %171, %100
  %173 = fadd double %172, %106
  %174 = fadd double %173, %111
  %175 = fadd double %174, %117
  %176 = fadd double %175, %89
  %177 = fadd double %176, %95
  %178 = fadd double %177, %89
  %179 = fadd double %178, %95
  %180 = fadd double %179, %122
  %181 = fadd double %180, %128
  %182 = fadd double %181, %133
  %183 = fadd double %182, %139
  %184 = fadd double %183, %144
  %185 = fadd double %184, %150
  %186 = fadd double %185, %144
  %187 = fadd double %186, %150
  %188 = fadd double %187, %155
  ret double %188
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:35
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(FOGt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ogt double %37, %16
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %37, double %16)
  %160 = fadd double %159, 1.000000e+00
  br label %161

; <label>:161:                                    ; preds = %158, %155
  %162 = phi double [ %160, %158 ], [ 0.000000e+00, %155 ]
  %163 = fadd double %8, %14
  %164 = fadd double %163, %21
  %165 = fadd double %164, %27
  %166 = fadd double %165, %35
  %167 = fadd double %166, %42
  %168 = fadd double %167, %48
  %169 = fadd double %168, %54
  %170 = fadd double %169, %59
  %171 = fadd double %170, %65
  %172 = fadd double %171, %72
  %173 = fadd double %172, %78
  %174 = fadd double %173, %72
  %175 = fadd double %174, %78
  %176 = fadd double %175, %84
  %177 = fadd double %176, %89
  %178 = fadd double %177, %95
  %179 = fadd double %178, %100
  %180 = fadd double %179, %106
  %181 = fadd double %180, %111
  %182 = fadd double %181, %117
  %183 = fadd double %182, %89
  %184 = fadd double %183, %95
  %185 = fadd double %184, %89
  %186 = fadd double %185, %95
  %187 = fadd double %186, %122
  %188 = fadd double %187, %128
  %189 = fadd double %188, %133
  %190 = fadd double %189, %139
  %191 = fadd double %190, %144
  %192 = fadd double %191, %150
  %193 = fadd double %192, %144
  %194 = fadd double %193, %150
  %195 = fadd double %194, %156
  %196 = fadd double %195, %162
  ret double %196
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:36
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp oge double %37, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %37, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fadd double %8, %14
  %163 = fadd double %162, %21
  %164 = fadd double %163, %27
  %165 = fadd double %164, %35
  %166 = fadd double %165, %42
  %167 = fadd double %166, %48
  %168 = fadd double %167, %54
  %169 = fadd double %168, %59
  %170 = fadd double %169, %65
  %171 = fadd double %170, %72
  %172 = fadd double %171, %78
  %173 = fadd double %172, %72
  %174 = fadd double %173, %78
  %175 = fadd double %174, %84
  %176 = fadd double %175, %89
  %177 = fadd double %176, %95
  %178 = fadd double %177, %100
  %179 = fadd double %178, %106
  %180 = fadd double %179, %111
  %181 = fadd double %180, %117
  %182 = fadd double %181, %89
  %183 = fadd double %182, %95
  %184 = fadd double %183, %89
  %185 = fadd double %184, %95
  %186 = fadd double %185, %122
  %187 = fadd double %186, %128
  %188 = fadd double %187, %133
  %189 = fadd double %188, %139
  %190 = fadd double %189, %144
  %191 = fadd double %190, %150
  %192 = fadd double %191, %144
  %193 = fadd double %192, %150
  %194 = fadd double %193, %156
  %195 = fadd double %194, %100
  %196 = fadd double %195, %161
  ret double %196
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:37
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ogt double %67, %16
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %16)
  %160 = fadd double %159, 1.000000e+00
  br label %161

; <label>:161:                                    ; preds = %158, %155
  %162 = phi double [ %160, %158 ], [ 0.000000e+00, %155 ]
  %163 = fadd double %8, %14
  %164 = fadd double %163, %21
  %165 = fadd double %164, %27
  %166 = fadd double %165, %35
  %167 = fadd double %166, %42
  %168 = fadd double %167, %48
  %169 = fadd double %168, %54
  %170 = fadd double %169, %59
  %171 = fadd double %170, %65
  %172 = fadd double %171, %72
  %173 = fadd double %172, %78
  %174 = fadd double %173, %72
  %175 = fadd double %174, %78
  %176 = fadd double %175, %84
  %177 = fadd double %176, %89
  %178 = fadd double %177, %95
  %179 = fadd double %178, %100
  %180 = fadd double %179, %106
  %181 = fadd double %180, %111
  %182 = fadd double %181, %117
  %183 = fadd double %182, %89
  %184 = fadd double %183, %95
  %185 = fadd double %184, %89
  %186 = fadd double %185, %95
  %187 = fadd double %186, %122
  %188 = fadd double %187, %128
  %189 = fadd double %188, %133
  %190 = fadd double %189, %139
  %191 = fadd double %190, %144
  %192 = fadd double %191, %150
  %193 = fadd double %192, %144
  %194 = fadd double %193, %150
  %195 = fadd double %194, %156
  %196 = fadd double %195, %100
  %197 = fadd double %196, %106
  %198 = fadd double %197, %162
  ret double %198
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:38
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp oge double %67, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fadd double %8, %14
  %163 = fadd double %162, %21
  %164 = fadd double %163, %27
  %165 = fadd double %164, %35
  %166 = fadd double %165, %42
  %167 = fadd double %166, %48
  %168 = fadd double %167, %54
  %169 = fadd double %168, %59
  %170 = fadd double %169, %65
  %171 = fadd double %170, %72
  %172 = fadd double %171, %78
  %173 = fadd double %172, %72
  %174 = fadd double %173, %78
  %175 = fadd double %174, %84
  %176 = fadd double %175, %89
  %177 = fadd double %176, %95
  %178 = fadd double %177, %100
  %179 = fadd double %178, %106
  %180 = fadd double %179, %111
  %181 = fadd double %180, %117
  %182 = fadd double %181, %89
  %183 = fadd double %182, %95
  %184 = fadd double %183, %89
  %185 = fadd double %184, %95
  %186 = fadd double %185, %122
  %187 = fadd double %186, %128
  %188 = fadd double %187, %133
  %189 = fadd double %188, %139
  %190 = fadd double %189, %144
  %191 = fadd double %190, %150
  %192 = fadd double %191, %144
  %193 = fadd double %192, %150
  %194 = fadd double %193, %156
  %195 = fadd double %194, %100
  %196 = fadd double %195, %106
  %197 = fadd double %196, %111
  %198 = fadd double %197, %161
  ret double %198
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:39
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ogt double %67, %16
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %16)
  %160 = fadd double %159, 1.000000e+00
  br label %161

; <label>:161:                                    ; preds = %158, %155
  %162 = phi double [ %160, %158 ], [ 0.000000e+00, %155 ]
  %163 = fadd double %8, %14
  %164 = fadd double %163, %21
  %165 = fadd double %164, %27
  %166 = fadd double %165, %35
  %167 = fadd double %166, %42
  %168 = fadd double %167, %48
  %169 = fadd double %168, %54
  %170 = fadd double %169, %59
  %171 = fadd double %170, %65
  %172 = fadd double %171, %72
  %173 = fadd double %172, %78
  %174 = fadd double %173, %72
  %175 = fadd double %174, %78
  %176 = fadd double %175, %84
  %177 = fadd double %176, %89
  %178 = fadd double %177, %95
  %179 = fadd double %178, %100
  %180 = fadd double %179, %106
  %181 = fadd double %180, %111
  %182 = fadd double %181, %117
  %183 = fadd double %182, %89
  %184 = fadd double %183, %95
  %185 = fadd double %184, %89
  %186 = fadd double %185, %95
  %187 = fadd double %186, %122
  %188 = fadd double %187, %128
  %189 = fadd double %188, %133
  %190 = fadd double %189, %139
  %191 = fadd double %190, %144
  %192 = fadd double %191, %150
  %193 = fadd double %192, %144
  %194 = fadd double %193, %150
  %195 = fadd double %194, %156
  %196 = fadd double %195, %100
  %197 = fadd double %196, %106
  %198 = fadd double %197, %111
  %199 = fadd double %198, %117
  %200 = fadd double %199, %162
  ret double %200
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:40
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp oge double %67, %16
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %16)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fadd double %8, %14
  %163 = fadd double %162, %21
  %164 = fadd double %163, %27
  %165 = fadd double %164, %35
  %166 = fadd double %165, %42
  %167 = fadd double %166, %48
  %168 = fadd double %167, %54
  %169 = fadd double %168, %59
  %170 = fadd double %169, %65
  %171 = fadd double %170, %72
  %172 = fadd double %171, %78
  %173 = fadd double %172, %72
  %174 = fadd double %173, %78
  %175 = fadd double %174, %84
  %176 = fadd double %175, %89
  %177 = fadd double %176, %95
  %178 = fadd double %177, %100
  %179 = fadd double %178, %106
  %180 = fadd double %179, %111
  %181 = fadd double %180, %117
  %182 = fadd double %181, %89
  %183 = fadd double %182, %95
  %184 = fadd double %183, %89
  %185 = fadd double %184, %95
  %186 = fadd double %185, %122
  %187 = fadd double %186, %128
  %188 = fadd double %187, %133
  %189 = fadd double %188, %139
  %190 = fadd double %189, %144
  %191 = fadd double %190, %150
  %192 = fadd double %191, %144
  %193 = fadd double %192, %150
  %194 = fadd double %193, %156
  %195 = fadd double %194, %100
  %196 = fadd double %195, %106
  %197 = fadd double %196, %111
  %198 = fadd double %197, %117
  %199 = fadd double %198, %111
  %200 = fadd double %199, %161
  ret double %200
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:41
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ogt double %67, %37
  br i1 %157, label %161, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  %160 = fadd double %159, 1.000000e+00
  br label %161

; <label>:161:                                    ; preds = %158, %155
  %162 = phi double [ %160, %158 ], [ 0.000000e+00, %155 ]
  %163 = fadd double %8, %14
  %164 = fadd double %163, %21
  %165 = fadd double %164, %27
  %166 = fadd double %165, %35
  %167 = fadd double %166, %42
  %168 = fadd double %167, %48
  %169 = fadd double %168, %54
  %170 = fadd double %169, %59
  %171 = fadd double %170, %65
  %172 = fadd double %171, %72
  %173 = fadd double %172, %78
  %174 = fadd double %173, %72
  %175 = fadd double %174, %78
  %176 = fadd double %175, %84
  %177 = fadd double %176, %89
  %178 = fadd double %177, %95
  %179 = fadd double %178, %100
  %180 = fadd double %179, %106
  %181 = fadd double %180, %111
  %182 = fadd double %181, %117
  %183 = fadd double %182, %89
  %184 = fadd double %183, %95
  %185 = fadd double %184, %89
  %186 = fadd double %185, %95
  %187 = fadd double %186, %122
  %188 = fadd double %187, %128
  %189 = fadd double %188, %133
  %190 = fadd double %189, %139
  %191 = fadd double %190, %144
  %192 = fadd double %191, %150
  %193 = fadd double %192, %144
  %194 = fadd double %193, %150
  %195 = fadd double %194, %156
  %196 = fadd double %195, %100
  %197 = fadd double %196, %106
  %198 = fadd double %197, %111
  %199 = fadd double %198, %117
  %200 = fadd double %199, %111
  %201 = fadd double %200, %117
  %202 = fadd double %201, %162
  ret double %202
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:42
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp oge double %67, %37
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = phi double [ %164, %163 ], [ 0.000000e+00, %160 ]
  %167 = fadd double %8, %14
  %168 = fadd double %167, %21
  %169 = fadd double %168, %27
  %170 = fadd double %169, %35
  %171 = fadd double %170, %42
  %172 = fadd double %171, %48
  %173 = fadd double %172, %54
  %174 = fadd double %173, %59
  %175 = fadd double %174, %65
  %176 = fadd double %175, %72
  %177 = fadd double %176, %78
  %178 = fadd double %177, %72
  %179 = fadd double %178, %78
  %180 = fadd double %179, %84
  %181 = fadd double %180, %89
  %182 = fadd double %181, %95
  %183 = fadd double %182, %100
  %184 = fadd double %183, %106
  %185 = fadd double %184, %111
  %186 = fadd double %185, %117
  %187 = fadd double %186, %89
  %188 = fadd double %187, %95
  %189 = fadd double %188, %89
  %190 = fadd double %189, %95
  %191 = fadd double %190, %122
  %192 = fadd double %191, %128
  %193 = fadd double %192, %133
  %194 = fadd double %193, %139
  %195 = fadd double %194, %144
  %196 = fadd double %195, %150
  %197 = fadd double %196, %144
  %198 = fadd double %197, %150
  %199 = fadd double %198, %156
  %200 = fadd double %199, %100
  %201 = fadd double %200, %106
  %202 = fadd double %201, %111
  %203 = fadd double %202, %117
  %204 = fadd double %203, %111
  %205 = fadd double %204, %117
  %206 = fadd double %205, %161
  %207 = fadd double %206, %166
  ret double %207
}
solution : a0  type: double  val : -8.988466e+307
solution : a1  type: double  val : -8.988466e+307
solution : a2  type: double  val : -7.097717e+307
solution : a3  type: double  val : 5.328622e+307
solution : a4  type: double  val : 8.443382e+307
solution : a5  type: double  val : 8.988466e+307
=================GOSAT: GOSAT Result: SAT=================
a1
[97,49,0,15,215,85,0,0,]
a2
[97,50,0,15,215,85,0,0,]
a3
[97,51,0,15,215,85,0,0,]
a4
[97,52,0,15,215,85,0,0,]
a5
[97,53,0,15,215,85,0,0,]
a0
[97,48,0,15,215,85,0,0,]
KLEE: WARNING: GOSAT: evaluate FAILED(checkAssignmentValid failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:43
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %67, %37
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fcmp ogt double %67, %37
  br i1 %168, label %172, label %169

; <label>:169:                                    ; preds = %166
  %170 = call double @fp64_dis(double %67, double %37)
  %171 = fadd double %170, 1.000000e+00
  br label %172

; <label>:172:                                    ; preds = %169, %166
  %173 = phi double [ %171, %169 ], [ 0.000000e+00, %166 ]
  %174 = fadd double %8, %14
  %175 = fadd double %174, %21
  %176 = fadd double %175, %27
  %177 = fadd double %176, %35
  %178 = fadd double %177, %42
  %179 = fadd double %178, %48
  %180 = fadd double %179, %54
  %181 = fadd double %180, %59
  %182 = fadd double %181, %65
  %183 = fadd double %182, %72
  %184 = fadd double %183, %78
  %185 = fadd double %184, %72
  %186 = fadd double %185, %78
  %187 = fadd double %186, %84
  %188 = fadd double %187, %89
  %189 = fadd double %188, %95
  %190 = fadd double %189, %100
  %191 = fadd double %190, %106
  %192 = fadd double %191, %111
  %193 = fadd double %192, %117
  %194 = fadd double %193, %89
  %195 = fadd double %194, %95
  %196 = fadd double %195, %89
  %197 = fadd double %196, %95
  %198 = fadd double %197, %122
  %199 = fadd double %198, %128
  %200 = fadd double %199, %133
  %201 = fadd double %200, %139
  %202 = fadd double %201, %144
  %203 = fadd double %202, %150
  %204 = fadd double %203, %144
  %205 = fadd double %204, %150
  %206 = fadd double %205, %156
  %207 = fadd double %206, %100
  %208 = fadd double %207, %106
  %209 = fadd double %208, %111
  %210 = fadd double %209, %117
  %211 = fadd double %210, %111
  %212 = fadd double %211, %117
  %213 = fadd double %212, %161
  %214 = fadd double %213, %167
  %215 = fadd double %214, %173
  ret double %215
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:44
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %67, %37
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fcmp oge double %67, %37
  br i1 %168, label %171, label %169

; <label>:169:                                    ; preds = %166
  %170 = call double @fp64_dis(double %67, double %37)
  br label %171

; <label>:171:                                    ; preds = %169, %166
  %172 = phi double [ %170, %169 ], [ 0.000000e+00, %166 ]
  %173 = fadd double %8, %14
  %174 = fadd double %173, %21
  %175 = fadd double %174, %27
  %176 = fadd double %175, %35
  %177 = fadd double %176, %42
  %178 = fadd double %177, %48
  %179 = fadd double %178, %54
  %180 = fadd double %179, %59
  %181 = fadd double %180, %65
  %182 = fadd double %181, %72
  %183 = fadd double %182, %78
  %184 = fadd double %183, %72
  %185 = fadd double %184, %78
  %186 = fadd double %185, %84
  %187 = fadd double %186, %89
  %188 = fadd double %187, %95
  %189 = fadd double %188, %100
  %190 = fadd double %189, %106
  %191 = fadd double %190, %111
  %192 = fadd double %191, %117
  %193 = fadd double %192, %89
  %194 = fadd double %193, %95
  %195 = fadd double %194, %89
  %196 = fadd double %195, %95
  %197 = fadd double %196, %122
  %198 = fadd double %197, %128
  %199 = fadd double %198, %133
  %200 = fadd double %199, %139
  %201 = fadd double %200, %144
  %202 = fadd double %201, %150
  %203 = fadd double %202, %144
  %204 = fadd double %203, %150
  %205 = fadd double %204, %156
  %206 = fadd double %205, %100
  %207 = fadd double %206, %106
  %208 = fadd double %207, %111
  %209 = fadd double %208, %117
  %210 = fadd double %209, %111
  %211 = fadd double %210, %117
  %212 = fadd double %211, %161
  %213 = fadd double %212, %167
  %214 = fadd double %213, %161
  %215 = fadd double %214, %172
  ret double %215
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:45
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(FOGt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %67, %37
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fcmp ogt double %67, %37
  br i1 %168, label %172, label %169

; <label>:169:                                    ; preds = %166
  %170 = call double @fp64_dis(double %67, double %37)
  %171 = fadd double %170, 1.000000e+00
  br label %172

; <label>:172:                                    ; preds = %169, %166
  %173 = phi double [ %171, %169 ], [ 0.000000e+00, %166 ]
  %174 = fadd double %8, %14
  %175 = fadd double %174, %21
  %176 = fadd double %175, %27
  %177 = fadd double %176, %35
  %178 = fadd double %177, %42
  %179 = fadd double %178, %48
  %180 = fadd double %179, %54
  %181 = fadd double %180, %59
  %182 = fadd double %181, %65
  %183 = fadd double %182, %72
  %184 = fadd double %183, %78
  %185 = fadd double %184, %72
  %186 = fadd double %185, %78
  %187 = fadd double %186, %84
  %188 = fadd double %187, %89
  %189 = fadd double %188, %95
  %190 = fadd double %189, %100
  %191 = fadd double %190, %106
  %192 = fadd double %191, %111
  %193 = fadd double %192, %117
  %194 = fadd double %193, %89
  %195 = fadd double %194, %95
  %196 = fadd double %195, %89
  %197 = fadd double %196, %95
  %198 = fadd double %197, %122
  %199 = fadd double %198, %128
  %200 = fadd double %199, %133
  %201 = fadd double %200, %139
  %202 = fadd double %201, %144
  %203 = fadd double %202, %150
  %204 = fadd double %203, %144
  %205 = fadd double %204, %150
  %206 = fadd double %205, %156
  %207 = fadd double %206, %100
  %208 = fadd double %207, %106
  %209 = fadd double %208, %111
  %210 = fadd double %209, %117
  %211 = fadd double %210, %111
  %212 = fadd double %211, %117
  %213 = fadd double %212, %161
  %214 = fadd double %213, %167
  %215 = fadd double %214, %161
  %216 = fadd double %215, %167
  %217 = fadd double %216, %173
  ret double %217
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 0, i32* %retval, align 4
cons size:46
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(Eq false
     (FOLt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %67, %37
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fcmp oge double %67, %37
  br i1 %168, label %171, label %169

; <label>:169:                                    ; preds = %166
  %170 = call double @fp64_dis(double %67, double %37)
  br label %171

; <label>:171:                                    ; preds = %169, %166
  %172 = phi double [ %170, %169 ], [ 0.000000e+00, %166 ]
  %173 = fadd double %8, %14
  %174 = fadd double %173, %21
  %175 = fadd double %174, %27
  %176 = fadd double %175, %35
  %177 = fadd double %176, %42
  %178 = fadd double %177, %48
  %179 = fadd double %178, %54
  %180 = fadd double %179, %59
  %181 = fadd double %180, %65
  %182 = fadd double %181, %72
  %183 = fadd double %182, %78
  %184 = fadd double %183, %72
  %185 = fadd double %184, %78
  %186 = fadd double %185, %84
  %187 = fadd double %186, %89
  %188 = fadd double %187, %95
  %189 = fadd double %188, %100
  %190 = fadd double %189, %106
  %191 = fadd double %190, %111
  %192 = fadd double %191, %117
  %193 = fadd double %192, %89
  %194 = fadd double %193, %95
  %195 = fadd double %194, %89
  %196 = fadd double %195, %95
  %197 = fadd double %196, %122
  %198 = fadd double %197, %128
  %199 = fadd double %198, %133
  %200 = fadd double %199, %139
  %201 = fadd double %200, %144
  %202 = fadd double %201, %150
  %203 = fadd double %202, %144
  %204 = fadd double %203, %150
  %205 = fadd double %204, %156
  %206 = fadd double %205, %100
  %207 = fadd double %206, %106
  %208 = fadd double %207, %111
  %209 = fadd double %208, %117
  %210 = fadd double %209, %111
  %211 = fadd double %210, %117
  %212 = fadd double %211, %161
  %213 = fadd double %212, %167
  %214 = fadd double %213, %161
  %215 = fadd double %214, %167
  %216 = fadd double %215, %161
  %217 = fadd double %216, %172
  ret double %217
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 1, i32* %retval, align 4
cons size:47
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(FOGt N0:(ReadLSB w64 0 a0)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %67, %37
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fcmp ogt double %67, %67
  br i1 %168, label %172, label %169

; <label>:169:                                    ; preds = %166
  %170 = call double @fp64_dis(double %67, double %67)
  %171 = fadd double %170, 1.000000e+00
  br label %172

; <label>:172:                                    ; preds = %169, %166
  %173 = phi double [ %171, %169 ], [ 0.000000e+00, %166 ]
  %174 = fadd double %8, %14
  %175 = fadd double %174, %21
  %176 = fadd double %175, %27
  %177 = fadd double %176, %35
  %178 = fadd double %177, %42
  %179 = fadd double %178, %48
  %180 = fadd double %179, %54
  %181 = fadd double %180, %59
  %182 = fadd double %181, %65
  %183 = fadd double %182, %72
  %184 = fadd double %183, %78
  %185 = fadd double %184, %72
  %186 = fadd double %185, %78
  %187 = fadd double %186, %84
  %188 = fadd double %187, %89
  %189 = fadd double %188, %95
  %190 = fadd double %189, %100
  %191 = fadd double %190, %106
  %192 = fadd double %191, %111
  %193 = fadd double %192, %117
  %194 = fadd double %193, %89
  %195 = fadd double %194, %95
  %196 = fadd double %195, %89
  %197 = fadd double %196, %95
  %198 = fadd double %197, %122
  %199 = fadd double %198, %128
  %200 = fadd double %199, %133
  %201 = fadd double %200, %139
  %202 = fadd double %201, %144
  %203 = fadd double %202, %150
  %204 = fadd double %203, %144
  %205 = fadd double %204, %150
  %206 = fadd double %205, %156
  %207 = fadd double %206, %100
  %208 = fadd double %207, %106
  %209 = fadd double %208, %111
  %210 = fadd double %209, %117
  %211 = fadd double %210, %111
  %212 = fadd double %211, %117
  %213 = fadd double %212, %161
  %214 = fadd double %213, %167
  %215 = fadd double %214, %161
  %216 = fadd double %215, %167
  %217 = fadd double %216, %161
  %218 = fadd double %217, %167
  %219 = fadd double %218, %173
  ret double %219
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end
+++++++++++++++ state first:   store i32 -1, i32* %retval, align 4
cons size:48
===========call gosat solver===========
by yx ========>:
(Eq false
     (FOGt (ReadLSB w64 0 a4)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a5)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a5)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a5))
(FOGt (ReadLSB w64 0 a4)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a4)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a4))
(Eq false
     (FOGt (ReadLSB w64 0 a2)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a3)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a3))
(FOGt (ReadLSB w64 0 a2)
       (ReadLSB w64 0 a0))
(Eq false
     (FOGt (ReadLSB w64 0 a1)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a1)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a2)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a2))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt (ReadLSB w64 0 a0)
           (ReadLSB w64 0 a1)))
(FOLt (ReadLSB w64 0 a0)
       (ReadLSB w64 0 a1))
(Eq false
     (FOGt N0:(ReadLSB w64 0 a0)
           N0))
(FOLt N0:(ReadLSB w64 0 a0)
       N0)
===========
======>func:

define double @gofunc(i32 %n, double* nocapture readonly %x, double* nocapture readnone %grad, i8* nocapture readnone %data) {
EntryBlock:
  %0 = getelementptr inbounds double, double* %x, i64 0
  %1 = load double, double* %0, align 8, !tbaa !0
  %2 = getelementptr inbounds double, double* %x, i64 1
  %3 = load double, double* %2, align 8, !tbaa !0
  %4 = fcmp ole double %1, %3
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %EntryBlock
  %6 = call double @fp64_dis(double %1, double %3)
  br label %7

; <label>:7:                                      ; preds = %5, %EntryBlock
  %8 = phi double [ %6, %5 ], [ 0.000000e+00, %EntryBlock ]
  %9 = fcmp olt double %1, %3
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %7
  %11 = call double @fp64_dis(double %1, double %3)
  %12 = fadd double %11, 1.000000e+00
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = phi double [ %12, %10 ], [ 0.000000e+00, %7 ]
  %15 = getelementptr inbounds double, double* %x, i64 2
  %16 = load double, double* %15, align 8, !tbaa !0
  %17 = fcmp ole double %16, %3
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %13
  %19 = call double @fp64_dis(double %16, double %3)
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi double [ %19, %18 ], [ 0.000000e+00, %13 ]
  %22 = fcmp olt double %16, %3
  br i1 %22, label %26, label %23

; <label>:23:                                     ; preds = %20
  %24 = call double @fp64_dis(double %16, double %3)
  %25 = fadd double %24, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %23, %20
  %27 = phi double [ %25, %23 ], [ 0.000000e+00, %20 ]
  %28 = getelementptr inbounds double, double* %x, i64 3
  %29 = load double, double* %28, align 8, !tbaa !0
  %30 = fcmp ogt double %3, %29
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call double @fp64_dis(double %3, double %29)
  %33 = fadd double %32, 1.000000e+00
  br label %34

; <label>:34:                                     ; preds = %31, %26
  %35 = phi double [ %33, %31 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds double, double* %x, i64 4
  %37 = load double, double* %36, align 8, !tbaa !0
  %38 = fcmp ole double %37, %3
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %34
  %40 = call double @fp64_dis(double %37, double %3)
  br label %41

; <label>:41:                                     ; preds = %39, %34
  %42 = phi double [ %40, %39 ], [ 0.000000e+00, %34 ]
  %43 = fcmp olt double %37, %3
  br i1 %43, label %47, label %44

; <label>:44:                                     ; preds = %41
  %45 = call double @fp64_dis(double %37, double %3)
  %46 = fadd double %45, 1.000000e+00
  br label %47

; <label>:47:                                     ; preds = %44, %41
  %48 = phi double [ %46, %44 ], [ 0.000000e+00, %41 ]
  %49 = fcmp ogt double %1, %16
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %47
  %51 = call double @fp64_dis(double %1, double %16)
  %52 = fadd double %51, 1.000000e+00
  br label %53

; <label>:53:                                     ; preds = %50, %47
  %54 = phi double [ %52, %50 ], [ 0.000000e+00, %47 ]
  %55 = fcmp ole double %37, %1
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %53
  %57 = call double @fp64_dis(double %37, double %1)
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = phi double [ %57, %56 ], [ 0.000000e+00, %53 ]
  %60 = fcmp olt double %37, %1
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %58
  %62 = call double @fp64_dis(double %37, double %1)
  %63 = fadd double %62, 1.000000e+00
  br label %64

; <label>:64:                                     ; preds = %61, %58
  %65 = phi double [ %63, %61 ], [ 0.000000e+00, %58 ]
  %66 = getelementptr inbounds double, double* %x, i64 5
  %67 = load double, double* %66, align 8, !tbaa !0
  %68 = fcmp ole double %67, %3
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = call double @fp64_dis(double %67, double %3)
  br label %71

; <label>:71:                                     ; preds = %69, %64
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %64 ]
  %73 = fcmp olt double %67, %3
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %71
  %75 = call double @fp64_dis(double %67, double %3)
  %76 = fadd double %75, 1.000000e+00
  br label %77

; <label>:77:                                     ; preds = %74, %71
  %78 = phi double [ %76, %74 ], [ 0.000000e+00, %71 ]
  %79 = fcmp ogt double %1, %29
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %77
  %81 = call double @fp64_dis(double %1, double %29)
  %82 = fadd double %81, 1.000000e+00
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ]
  %85 = fcmp ole double %67, %1
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call double @fp64_dis(double %67, double %1)
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %89 = phi double [ %87, %86 ], [ 0.000000e+00, %83 ]
  %90 = fcmp olt double %67, %1
  br i1 %90, label %94, label %91

; <label>:91:                                     ; preds = %88
  %92 = call double @fp64_dis(double %67, double %1)
  %93 = fadd double %92, 1.000000e+00
  br label %94

; <label>:94:                                     ; preds = %91, %88
  %95 = phi double [ %93, %91 ], [ 0.000000e+00, %88 ]
  %96 = fcmp ole double %37, %16
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %94
  %98 = call double @fp64_dis(double %37, double %16)
  br label %99

; <label>:99:                                     ; preds = %97, %94
  %100 = phi double [ %98, %97 ], [ 0.000000e+00, %94 ]
  %101 = fcmp olt double %37, %16
  br i1 %101, label %105, label %102

; <label>:102:                                    ; preds = %99
  %103 = call double @fp64_dis(double %37, double %16)
  %104 = fadd double %103, 1.000000e+00
  br label %105

; <label>:105:                                    ; preds = %102, %99
  %106 = phi double [ %104, %102 ], [ 0.000000e+00, %99 ]
  %107 = fcmp ole double %67, %16
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %105
  %109 = call double @fp64_dis(double %67, double %16)
  br label %110

; <label>:110:                                    ; preds = %108, %105
  %111 = phi double [ %109, %108 ], [ 0.000000e+00, %105 ]
  %112 = fcmp olt double %67, %16
  br i1 %112, label %116, label %113

; <label>:113:                                    ; preds = %110
  %114 = call double @fp64_dis(double %67, double %16)
  %115 = fadd double %114, 1.000000e+00
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = phi double [ %115, %113 ], [ 0.000000e+00, %110 ]
  %118 = fcmp ole double %16, %29
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %116
  %120 = call double @fp64_dis(double %16, double %29)
  br label %121

; <label>:121:                                    ; preds = %119, %116
  %122 = phi double [ %120, %119 ], [ 0.000000e+00, %116 ]
  %123 = fcmp olt double %16, %29
  br i1 %123, label %127, label %124

; <label>:124:                                    ; preds = %121
  %125 = call double @fp64_dis(double %16, double %29)
  %126 = fadd double %125, 1.000000e+00
  br label %127

; <label>:127:                                    ; preds = %124, %121
  %128 = phi double [ %126, %124 ], [ 0.000000e+00, %121 ]
  %129 = fcmp ole double %67, %29
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %127
  %131 = call double @fp64_dis(double %67, double %29)
  br label %132

; <label>:132:                                    ; preds = %130, %127
  %133 = phi double [ %131, %130 ], [ 0.000000e+00, %127 ]
  %134 = fcmp olt double %67, %29
  br i1 %134, label %138, label %135

; <label>:135:                                    ; preds = %132
  %136 = call double @fp64_dis(double %67, double %29)
  %137 = fadd double %136, 1.000000e+00
  br label %138

; <label>:138:                                    ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = fcmp ole double %37, %29
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %138
  %142 = call double @fp64_dis(double %37, double %29)
  br label %143

; <label>:143:                                    ; preds = %141, %138
  %144 = phi double [ %142, %141 ], [ 0.000000e+00, %138 ]
  %145 = fcmp olt double %37, %29
  br i1 %145, label %149, label %146

; <label>:146:                                    ; preds = %143
  %147 = call double @fp64_dis(double %37, double %29)
  %148 = fadd double %147, 1.000000e+00
  br label %149

; <label>:149:                                    ; preds = %146, %143
  %150 = phi double [ %148, %146 ], [ 0.000000e+00, %143 ]
  %151 = fcmp ogt double %16, %67
  br i1 %151, label %155, label %152

; <label>:152:                                    ; preds = %149
  %153 = call double @fp64_dis(double %16, double %67)
  %154 = fadd double %153, 1.000000e+00
  br label %155

; <label>:155:                                    ; preds = %152, %149
  %156 = phi double [ %154, %152 ], [ 0.000000e+00, %149 ]
  %157 = fcmp ole double %67, %37
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %155
  %159 = call double @fp64_dis(double %67, double %37)
  br label %160

; <label>:160:                                    ; preds = %158, %155
  %161 = phi double [ %159, %158 ], [ 0.000000e+00, %155 ]
  %162 = fcmp olt double %67, %37
  br i1 %162, label %166, label %163

; <label>:163:                                    ; preds = %160
  %164 = call double @fp64_dis(double %67, double %37)
  %165 = fadd double %164, 1.000000e+00
  br label %166

; <label>:166:                                    ; preds = %163, %160
  %167 = phi double [ %165, %163 ], [ 0.000000e+00, %160 ]
  %168 = fcmp ole double %67, %67
  br i1 %168, label %171, label %169

; <label>:169:                                    ; preds = %166
  %170 = call double @fp64_dis(double %67, double %67)
  br label %171

; <label>:171:                                    ; preds = %169, %166
  %172 = phi double [ %170, %169 ], [ 0.000000e+00, %166 ]
  %173 = fcmp olt double %67, %67
  br i1 %173, label %177, label %174

; <label>:174:                                    ; preds = %171
  %175 = call double @fp64_dis(double %67, double %67)
  %176 = fadd double %175, 1.000000e+00
  br label %177

; <label>:177:                                    ; preds = %174, %171
  %178 = phi double [ %176, %174 ], [ 0.000000e+00, %171 ]
  %179 = fadd double %8, %14
  %180 = fadd double %179, %21
  %181 = fadd double %180, %27
  %182 = fadd double %181, %35
  %183 = fadd double %182, %42
  %184 = fadd double %183, %48
  %185 = fadd double %184, %54
  %186 = fadd double %185, %59
  %187 = fadd double %186, %65
  %188 = fadd double %187, %72
  %189 = fadd double %188, %78
  %190 = fadd double %189, %72
  %191 = fadd double %190, %78
  %192 = fadd double %191, %84
  %193 = fadd double %192, %89
  %194 = fadd double %193, %95
  %195 = fadd double %194, %100
  %196 = fadd double %195, %106
  %197 = fadd double %196, %111
  %198 = fadd double %197, %117
  %199 = fadd double %198, %89
  %200 = fadd double %199, %95
  %201 = fadd double %200, %89
  %202 = fadd double %201, %95
  %203 = fadd double %202, %122
  %204 = fadd double %203, %128
  %205 = fadd double %204, %133
  %206 = fadd double %205, %139
  %207 = fadd double %206, %144
  %208 = fadd double %207, %150
  %209 = fadd double %208, %144
  %210 = fadd double %209, %150
  %211 = fadd double %210, %156
  %212 = fadd double %211, %100
  %213 = fadd double %212, %106
  %214 = fadd double %213, %111
  %215 = fadd double %214, %117
  %216 = fadd double %215, %111
  %217 = fadd double %216, %117
  %218 = fadd double %217, %161
  %219 = fadd double %218, %167
  %220 = fadd double %219, %161
  %221 = fadd double %220, %167
  %222 = fadd double %221, %161
  %223 = fadd double %222, %167
  %224 = fadd double %223, %172
  %225 = fadd double %224, %178
  ret double %225
}
KLEE: WARNING: GOSAT: evaluate FAILED(gosat solve failed) ! Remove this state !
KLEE: WARNING: GOSAT: UNKNOW ! Remove this state !
+++++++++++++++ state end

KLEE: done: total instructions = 9162
KLEE: done: completed paths = 3
KLEE: done: partially completed paths = 0
KLEE: done: generated tests = 2
